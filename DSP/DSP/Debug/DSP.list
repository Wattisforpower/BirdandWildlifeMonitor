
DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009458  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009650  08009650  00019650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096b8  080096b8  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  080096b8  080096b8  000196b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096c0  080096c0  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096c0  080096c0  000196c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096c4  080096c4  000196c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  080096c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d44  2000015c  08009824  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ea0  08009824  00021ea0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001852e  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c0a  00000000  00000000  000386fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  0003c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e78  00000000  00000000  0003d610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002adbd  00000000  00000000  0003e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e3e  00000000  00000000  00069245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9302  00000000  00000000  00083083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005114  00000000  00000000  0017c388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0018149c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000015c 	.word	0x2000015c
 8000214:	00000000 	.word	0x00000000
 8000218:	08009638 	.word	0x08009638

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000160 	.word	0x20000160
 8000234:	08009638 	.word	0x08009638

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 fd2d 	bl	8000f96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f826 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f984 	bl	800084c <MX_GPIO_Init>
  MX_DMA_Init();
 8000544:	f000 f964 	bl	8000810 <MX_DMA_Init>
  MX_SPI3_Init();
 8000548:	f000 f8ba 	bl	80006c0 <MX_SPI3_Init>
  MX_SPI4_Init();
 800054c:	f000 f8f2 	bl	8000734 <MX_SPI4_Init>
  MX_USB_DEVICE_Init();
 8000550:	f008 f9b6 	bl	80088c0 <MX_USB_DEVICE_Init>
  MX_I2S2_Init();
 8000554:	f000 f88a 	bl	800066c <MX_I2S2_Init>
  MX_USART3_UART_Init();
 8000558:	f000 f92a 	bl	80007b0 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_GPIO_WritePin(GPIOB,LD3_Pin,0);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <main+0x54>)
 8000564:	f001 fb40 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056c:	f000 fd70 	bl	8001050 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,LD3_Pin,1);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <main+0x54>)
 8000578:	f001 fb36 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000580:	f000 fd66 	bl	8001050 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,LD3_Pin,0);
 8000584:	e7ea      	b.n	800055c <main+0x28>
 8000586:	bf00      	nop
 8000588:	40020400 	.word	0x40020400

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2234      	movs	r2, #52	; 0x34
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f008 ffbc 	bl	8009518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b0:	f002 ff1e 	bl	80033f0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <SystemClock_Config+0xd8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a2a      	ldr	r2, [pc, #168]	; (8000664 <SystemClock_Config+0xd8>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <SystemClock_Config+0xd8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	4b26      	ldr	r3, [pc, #152]	; (8000668 <SystemClock_Config+0xdc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a25      	ldr	r2, [pc, #148]	; (8000668 <SystemClock_Config+0xdc>)
 80005d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <SystemClock_Config+0xdc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005fc:	23d8      	movs	r3, #216	; 0xd8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000604:	2309      	movs	r3, #9
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4618      	mov	r0, r3
 8000612:	f002 ff4d 	bl	80034b0 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800061c:	f000 fa2e 	bl	8000a7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000620:	f002 fef6 	bl	8003410 <HAL_PWREx_EnableOverDrive>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800062a:	f000 fa27 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000644:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	2107      	movs	r1, #7
 800064c:	4618      	mov	r0, r3
 800064e:	f003 f9dd 	bl	8003a0c <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000658:	f000 fa10 	bl	8000a7c <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3750      	adds	r7, #80	; 0x50
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_I2S2_Init+0x4c>)
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_I2S2_Init+0x50>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_I2S2_Init+0x4c>)
 8000678:	f44f 7240 	mov.w	r2, #768	; 0x300
 800067c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_I2S2_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_I2S2_Init+0x4c>)
 8000686:	2203      	movs	r2, #3
 8000688:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_I2S2_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_I2S2_Init+0x4c>)
 8000692:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000696:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_I2S2_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_I2S2_Init+0x4c>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_I2S2_Init+0x4c>)
 80006a6:	f001 fab9 	bl	8001c1c <HAL_I2S_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2S2_Init+0x48>
  {
    Error_Handler();
 80006b0:	f000 f9e4 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000178 	.word	0x20000178
 80006bc:	40003800 	.word	0x40003800

080006c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_SPI3_Init+0x6c>)
 80006c6:	4a1a      	ldr	r2, [pc, #104]	; (8000730 <MX_SPI3_Init+0x70>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_SPI3_Init+0x6c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_SPI3_Init+0x6c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_SPI3_Init+0x6c>)
 80006d8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_SPI3_Init+0x6c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_SPI3_Init+0x6c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_SPI3_Init+0x6c>)
 80006ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f0:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_SPI3_Init+0x6c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_SPI3_Init+0x6c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_SPI3_Init+0x6c>)
 8000700:	2200      	movs	r2, #0
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_SPI3_Init+0x6c>)
 8000706:	2207      	movs	r2, #7
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_SPI3_Init+0x6c>)
 800070c:	2200      	movs	r2, #0
 800070e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_SPI3_Init+0x6c>)
 8000712:	2200      	movs	r2, #0
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_SPI3_Init+0x6c>)
 8000718:	f003 ffc6 	bl	80046a8 <HAL_SPI_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8000722:	f000 f9ab 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000218 	.word	0x20000218
 8000730:	40003c00 	.word	0x40003c00

08000734 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_SPI4_Init+0x74>)
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <MX_SPI4_Init+0x78>)
 800073c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_SPI4_Init+0x74>)
 8000740:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000744:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_SPI4_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI4_Init+0x74>)
 800074e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000752:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI4_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_SPI4_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI4_Init+0x74>)
 8000762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000766:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI4_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI4_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI4_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_SPI4_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI4_Init+0x74>)
 8000782:	2207      	movs	r2, #7
 8000784:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_SPI4_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI4_Init+0x74>)
 800078e:	2208      	movs	r2, #8
 8000790:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_SPI4_Init+0x74>)
 8000794:	f003 ff88 	bl	80046a8 <HAL_SPI_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800079e:	f000 f96d 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000027c 	.word	0x2000027c
 80007ac:	40013400 	.word	0x40013400

080007b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USART3_UART_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_USART3_UART_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_USART3_UART_Init+0x58>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART3_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USART3_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART3_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART3_UART_Init+0x58>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART3_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART3_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART3_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART3_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART3_UART_Init+0x58>)
 80007f4:	f004 f803 	bl	80047fe <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f93d 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200002e0 	.word	0x200002e0
 800080c:	40004800 	.word	0x40004800

08000810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_DMA_Init+0x38>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <MX_DMA_Init+0x38>)
 800081c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_DMA_Init+0x38>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	200c      	movs	r0, #12
 8000834:	f000 fd0b 	bl	800124e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f000 fd24 	bl	8001286 <HAL_NVIC_EnableIRQ>

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000862:	4b81      	ldr	r3, [pc, #516]	; (8000a68 <MX_GPIO_Init+0x21c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a80      	ldr	r2, [pc, #512]	; (8000a68 <MX_GPIO_Init+0x21c>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b7e      	ldr	r3, [pc, #504]	; (8000a68 <MX_GPIO_Init+0x21c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b7b      	ldr	r3, [pc, #492]	; (8000a68 <MX_GPIO_Init+0x21c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a7a      	ldr	r2, [pc, #488]	; (8000a68 <MX_GPIO_Init+0x21c>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b78      	ldr	r3, [pc, #480]	; (8000a68 <MX_GPIO_Init+0x21c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	4b75      	ldr	r3, [pc, #468]	; (8000a68 <MX_GPIO_Init+0x21c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a74      	ldr	r2, [pc, #464]	; (8000a68 <MX_GPIO_Init+0x21c>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b72      	ldr	r3, [pc, #456]	; (8000a68 <MX_GPIO_Init+0x21c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b6f      	ldr	r3, [pc, #444]	; (8000a68 <MX_GPIO_Init+0x21c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a6e      	ldr	r2, [pc, #440]	; (8000a68 <MX_GPIO_Init+0x21c>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b6c      	ldr	r3, [pc, #432]	; (8000a68 <MX_GPIO_Init+0x21c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b69      	ldr	r3, [pc, #420]	; (8000a68 <MX_GPIO_Init+0x21c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a68      	ldr	r2, [pc, #416]	; (8000a68 <MX_GPIO_Init+0x21c>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b66      	ldr	r3, [pc, #408]	; (8000a68 <MX_GPIO_Init+0x21c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	4b63      	ldr	r3, [pc, #396]	; (8000a68 <MX_GPIO_Init+0x21c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a62      	ldr	r2, [pc, #392]	; (8000a68 <MX_GPIO_Init+0x21c>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b60      	ldr	r3, [pc, #384]	; (8000a68 <MX_GPIO_Init+0x21c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f2:	4b5d      	ldr	r3, [pc, #372]	; (8000a68 <MX_GPIO_Init+0x21c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a5c      	ldr	r2, [pc, #368]	; (8000a68 <MX_GPIO_Init+0x21c>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b5a      	ldr	r3, [pc, #360]	; (8000a68 <MX_GPIO_Init+0x21c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_1_Pin|LED_STATUS_3_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2184      	movs	r1, #132	; 0x84
 800090e:	4857      	ldr	r0, [pc, #348]	; (8000a6c <MX_GPIO_Init+0x220>)
 8000910:	f001 f96a 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_2_GPIO_Port, LED_STATUS_2_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2110      	movs	r1, #16
 8000918:	4855      	ldr	r0, [pc, #340]	; (8000a70 <MX_GPIO_Init+0x224>)
 800091a:	f001 f965 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f244 0181 	movw	r1, #16513	; 0x4081
 8000924:	4853      	ldr	r0, [pc, #332]	; (8000a74 <MX_GPIO_Init+0x228>)
 8000926:	f001 f95f 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2140      	movs	r1, #64	; 0x40
 800092e:	4852      	ldr	r0, [pc, #328]	; (8000a78 <MX_GPIO_Init+0x22c>)
 8000930:	f001 f95a 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4849      	ldr	r0, [pc, #292]	; (8000a70 <MX_GPIO_Init+0x224>)
 800094c:	f000 ffa0 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin;
 8000950:	2322      	movs	r3, #34	; 0x22
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000960:	230b      	movs	r3, #11
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4841      	ldr	r0, [pc, #260]	; (8000a70 <MX_GPIO_Init+0x224>)
 800096c:	f000 ff90 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_REF_CLK_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin;
 8000970:	2302      	movs	r3, #2
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000980:	230b      	movs	r3, #11
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_REF_CLK_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4838      	ldr	r0, [pc, #224]	; (8000a6c <MX_GPIO_Init+0x220>)
 800098c:	f000 ff80 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATUS_1_Pin LED_STATUS_3_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_1_Pin|LED_STATUS_3_Pin;
 8000990:	2384      	movs	r3, #132	; 0x84
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4831      	ldr	r0, [pc, #196]	; (8000a6c <MX_GPIO_Init+0x220>)
 80009a8:	f000 ff72 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUS_2_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_2_Pin;
 80009ac:	2310      	movs	r3, #16
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_STATUS_2_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	482b      	ldr	r0, [pc, #172]	; (8000a70 <MX_GPIO_Init+0x224>)
 80009c4:	f000 ff64 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009c8:	f244 0381 	movw	r3, #16513	; 0x4081
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4824      	ldr	r0, [pc, #144]	; (8000a74 <MX_GPIO_Init+0x228>)
 80009e2:	f000 ff55 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f8:	230b      	movs	r3, #11
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	481c      	ldr	r0, [pc, #112]	; (8000a74 <MX_GPIO_Init+0x228>)
 8000a04:	f000 ff44 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a08:	2340      	movs	r3, #64	; 0x40
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4816      	ldr	r0, [pc, #88]	; (8000a78 <MX_GPIO_Init+0x22c>)
 8000a20:	f000 ff36 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4810      	ldr	r0, [pc, #64]	; (8000a78 <MX_GPIO_Init+0x22c>)
 8000a38:	f000 ff2a 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a3c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4e:	230b      	movs	r3, #11
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4807      	ldr	r0, [pc, #28]	; (8000a78 <MX_GPIO_Init+0x22c>)
 8000a5a:	f000 ff19 	bl	8001890 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5e:	bf00      	nop
 8000a60:	3730      	adds	r7, #48	; 0x30
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020800 	.word	0x40020800
 8000a74:	40020400 	.word	0x40020400
 8000a78:	40021800 	.word	0x40021800

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_MspInit+0x44>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <HAL_MspInit+0x44>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_MspInit+0x44>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x44>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x44>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x44>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b0ae      	sub	sp, #184	; 0xb8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2290      	movs	r2, #144	; 0x90
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f008 fd11 	bl	8009518 <memset>
  if(hi2s->Instance==SPI2)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a4f      	ldr	r2, [pc, #316]	; (8000c38 <HAL_I2S_MspInit+0x168>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	f040 8097 	bne.w	8000c30 <HAL_I2S_MspInit+0x160>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 197;
 8000b02:	23c5      	movs	r3, #197	; 0xc5
 8000b04:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000b16:	2300      	movs	r3, #0
 8000b18:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f003 f99a 	bl	8003e58 <HAL_RCCEx_PeriphCLKConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_I2S_MspInit+0x5e>
    {
      Error_Handler();
 8000b2a:	f7ff ffa7 	bl	8000a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b2e:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <HAL_I2S_MspInit+0x16c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a42      	ldr	r2, [pc, #264]	; (8000c3c <HAL_I2S_MspInit+0x16c>)
 8000b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b40      	ldr	r3, [pc, #256]	; (8000c3c <HAL_I2S_MspInit+0x16c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	4b3d      	ldr	r3, [pc, #244]	; (8000c3c <HAL_I2S_MspInit+0x16c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a3c      	ldr	r2, [pc, #240]	; (8000c3c <HAL_I2S_MspInit+0x16c>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <HAL_I2S_MspInit+0x16c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <HAL_I2S_MspInit+0x16c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a36      	ldr	r2, [pc, #216]	; (8000c3c <HAL_I2S_MspInit+0x16c>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <HAL_I2S_MspInit+0x16c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b76:	2308      	movs	r3, #8
 8000b78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b8e:	2305      	movs	r3, #5
 8000b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4829      	ldr	r0, [pc, #164]	; (8000c40 <HAL_I2S_MspInit+0x170>)
 8000b9c:	f000 fe78 	bl	8001890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000ba0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481f      	ldr	r0, [pc, #124]	; (8000c44 <HAL_I2S_MspInit+0x174>)
 8000bc8:	f000 fe62 	bl	8001890 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <HAL_I2S_MspInit+0x178>)
 8000bce:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <HAL_I2S_MspInit+0x17c>)
 8000bd0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <HAL_I2S_MspInit+0x178>)
 8000bd4:	f04f 5290 	mov.w	r2, #301989888	; 0x12000000
 8000bd8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <HAL_I2S_MspInit+0x178>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_I2S_MspInit+0x178>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_I2S_MspInit+0x178>)
 8000be8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bec:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_I2S_MspInit+0x178>)
 8000bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bf4:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_I2S_MspInit+0x178>)
 8000bf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bfc:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_I2S_MspInit+0x178>)
 8000c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c04:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <HAL_I2S_MspInit+0x178>)
 8000c08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c0c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_I2S_MspInit+0x178>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <HAL_I2S_MspInit+0x178>)
 8000c16:	f000 fb51 	bl	80012bc <HAL_DMA_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_I2S_MspInit+0x154>
    {
      Error_Handler();
 8000c20:	f7ff ff2c 	bl	8000a7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_I2S_MspInit+0x178>)
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_I2S_MspInit+0x178>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	37b8      	adds	r7, #184	; 0xb8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40003800 	.word	0x40003800
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020400 	.word	0x40020400
 8000c48:	200001b8 	.word	0x200001b8
 8000c4c:	40026028 	.word	0x40026028

08000c50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	; 0x30
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a3c      	ldr	r2, [pc, #240]	; (8000d60 <HAL_SPI_MspInit+0x110>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d145      	bne.n	8000cfe <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c72:	4b3c      	ldr	r3, [pc, #240]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a3b      	ldr	r2, [pc, #236]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b39      	ldr	r3, [pc, #228]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a35      	ldr	r2, [pc, #212]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a2f      	ldr	r2, [pc, #188]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4824      	ldr	r0, [pc, #144]	; (8000d68 <HAL_SPI_MspInit+0x118>)
 8000cd6:	f000 fddb 	bl	8001890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cec:	2306      	movs	r3, #6
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481d      	ldr	r0, [pc, #116]	; (8000d6c <HAL_SPI_MspInit+0x11c>)
 8000cf8:	f000 fdca 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000cfc:	e02c      	b.n	8000d58 <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI4)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a1b      	ldr	r2, [pc, #108]	; (8000d70 <HAL_SPI_MspInit+0x120>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d127      	bne.n	8000d58 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0c:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000d0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d12:	6453      	str	r3, [r2, #68]	; 0x44
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_SPI_MspInit+0x114>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000d38:	2364      	movs	r3, #100	; 0x64
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000d48:	2305      	movs	r3, #5
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	4808      	ldr	r0, [pc, #32]	; (8000d74 <HAL_SPI_MspInit+0x124>)
 8000d54:	f000 fd9c 	bl	8001890 <HAL_GPIO_Init>
}
 8000d58:	bf00      	nop
 8000d5a:	3730      	adds	r7, #48	; 0x30
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40003c00 	.word	0x40003c00
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	40013400 	.word	0x40013400
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0ae      	sub	sp, #184	; 0xb8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2290      	movs	r2, #144	; 0x90
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f008 fbbd 	bl	8009518 <memset>
  if(huart->Instance==USART3)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a22      	ldr	r2, [pc, #136]	; (8000e2c <HAL_UART_MspInit+0xb4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d13c      	bne.n	8000e22 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 f84e 	bl	8003e58 <HAL_RCCEx_PeriphCLKConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dc2:	f7ff fe5b 	bl	8000a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_UART_MspInit+0xb8>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <HAL_UART_MspInit+0xb8>)
 8000dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_UART_MspInit+0xb8>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_UART_MspInit+0xb8>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a13      	ldr	r2, [pc, #76]	; (8000e30 <HAL_UART_MspInit+0xb8>)
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_UART_MspInit+0xb8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0308 	and.w	r3, r3, #8
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000df6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e10:	2307      	movs	r3, #7
 8000e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <HAL_UART_MspInit+0xbc>)
 8000e1e:	f000 fd37 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	37b8      	adds	r7, #184	; 0xb8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40004800 	.word	0x40004800
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020c00 	.word	0x40020c00

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e3c:	e7fe      	b.n	8000e3c <NMI_Handler+0x4>

08000e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e84:	f000 f8c4 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <DMA1_Stream1_IRQHandler+0x10>)
 8000e92:	f000 fac1 	bl	8001418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200001b8 	.word	0x200001b8

08000ea0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <OTG_FS_IRQHandler+0x10>)
 8000ea6:	f001 f931 	bl	800210c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20001850 	.word	0x20001850

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f008 fb30 	bl	8009548 <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20080000 	.word	0x20080000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	20000368 	.word	0x20000368
 8000f1c:	20001ea0 	.word	0x20001ea0

08000f20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f4a:	490e      	ldr	r1, [pc, #56]	; (8000f84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f60:	4c0b      	ldr	r4, [pc, #44]	; (8000f90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f6e:	f7ff ffd7 	bl	8000f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f008 faef 	bl	8009554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f76:	f7ff fadd 	bl	8000534 <main>
  bx  lr    
 8000f7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f7c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000f88:	080096c8 	.word	0x080096c8
  ldr r2, =_sbss
 8000f8c:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000f90:	20001ea0 	.word	0x20001ea0

08000f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC_IRQHandler>

08000f96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	f000 f94c 	bl	8001238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 f805 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa6:	f7ff fd6f 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_InitTick+0x54>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_InitTick+0x58>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f967 	bl	80012a2 <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00e      	b.n	8000ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d80a      	bhi.n	8000ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f000 f92f 	bl	800124e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff0:	4a06      	ldr	r2, [pc, #24]	; (800100c <HAL_InitTick+0x5c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000000 	.word	0x20000000
 8001008:	20000008 	.word	0x20000008
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x20>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x24>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_IncTick+0x24>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008
 8001034:	2000036c 	.word	0x2000036c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	2000036c 	.word	0x2000036c

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d005      	beq.n	8001076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_Delay+0x44>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001076:	bf00      	nop
 8001078:	f7ff ffde 	bl	8001038 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8f7      	bhi.n	8001078 <HAL_Delay+0x28>
  {
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000008 	.word	0x20000008

08001098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <__NVIC_SetPriorityGrouping+0x40>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b4:	4013      	ands	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x40>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00
 80010dc:	05fa0000 	.word	0x05fa0000

080010e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <__NVIC_GetPriorityGrouping+0x18>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	f003 0307 	and.w	r3, r3, #7
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	2b00      	cmp	r3, #0
 800110c:	db0b      	blt.n	8001126 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	f003 021f 	and.w	r2, r3, #31
 8001114:	4907      	ldr	r1, [pc, #28]	; (8001134 <__NVIC_EnableIRQ+0x38>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	2001      	movs	r0, #1
 800111e:	fa00 f202 	lsl.w	r2, r0, r2
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e100 	.word	0xe000e100

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	490c      	ldr	r1, [pc, #48]	; (8001184 <__NVIC_SetPriority+0x4c>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4908      	ldr	r1, [pc, #32]	; (8001188 <__NVIC_SetPriority+0x50>)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	3b04      	subs	r3, #4
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43d9      	mvns	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	4313      	orrs	r3, r2
         );
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001204:	d301      	bcc.n	800120a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001206:	2301      	movs	r3, #1
 8001208:	e00f      	b.n	800122a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <SysTick_Config+0x40>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001212:	210f      	movs	r1, #15
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f7ff ff8e 	bl	8001138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <SysTick_Config+0x40>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <SysTick_Config+0x40>)
 8001224:	2207      	movs	r2, #7
 8001226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	e000e010 	.word	0xe000e010

08001238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff29 	bl	8001098 <__NVIC_SetPriorityGrouping>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001260:	f7ff ff3e 	bl	80010e0 <__NVIC_GetPriorityGrouping>
 8001264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	6978      	ldr	r0, [r7, #20]
 800126c:	f7ff ff8e 	bl	800118c <NVIC_EncodePriority>
 8001270:	4602      	mov	r2, r0
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff5d 	bl	8001138 <__NVIC_SetPriority>
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff31 	bl	80010fc <__NVIC_EnableIRQ>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffa2 	bl	80011f4 <SysTick_Config>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff feb6 	bl	8001038 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e099      	b.n	800140c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2202      	movs	r2, #2
 80012dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0201 	bic.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f8:	e00f      	b.n	800131a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012fa:	f7ff fe9d 	bl	8001038 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b05      	cmp	r3, #5
 8001306:	d908      	bls.n	800131a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2220      	movs	r2, #32
 800130c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2203      	movs	r2, #3
 8001312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e078      	b.n	800140c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1e8      	bne.n	80012fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	4b38      	ldr	r3, [pc, #224]	; (8001414 <HAL_DMA_Init+0x158>)
 8001334:	4013      	ands	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001346:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001352:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800135e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	4313      	orrs	r3, r2
 800136a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	2b04      	cmp	r3, #4
 8001372:	d107      	bne.n	8001384 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	4313      	orrs	r3, r2
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4313      	orrs	r3, r2
 8001382:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f023 0307 	bic.w	r3, r3, #7
 800139a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d117      	bne.n	80013de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00e      	beq.n	80013de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f9e9 	bl	8001798 <DMA_CheckFifoParam>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d008      	beq.n	80013de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2240      	movs	r2, #64	; 0x40
 80013d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013da:	2301      	movs	r3, #1
 80013dc:	e016      	b.n	800140c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f9a0 	bl	800172c <DMA_CalcBaseAndBitshift>
 80013ec:	4603      	mov	r3, r0
 80013ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f4:	223f      	movs	r2, #63	; 0x3f
 80013f6:	409a      	lsls	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	e010803f 	.word	0xe010803f

08001418 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001424:	4b8e      	ldr	r3, [pc, #568]	; (8001660 <HAL_DMA_IRQHandler+0x248>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a8e      	ldr	r2, [pc, #568]	; (8001664 <HAL_DMA_IRQHandler+0x24c>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	0a9b      	lsrs	r3, r3, #10
 8001430:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001442:	2208      	movs	r2, #8
 8001444:	409a      	lsls	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4013      	ands	r3, r2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d01a      	beq.n	8001484 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0204 	bic.w	r2, r2, #4
 800146a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001470:	2208      	movs	r2, #8
 8001472:	409a      	lsls	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147c:	f043 0201 	orr.w	r2, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	2201      	movs	r2, #1
 800148a:	409a      	lsls	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4013      	ands	r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d012      	beq.n	80014ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a6:	2201      	movs	r2, #1
 80014a8:	409a      	lsls	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b2:	f043 0202 	orr.w	r2, r3, #2
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014be:	2204      	movs	r2, #4
 80014c0:	409a      	lsls	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d012      	beq.n	80014f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00b      	beq.n	80014f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014dc:	2204      	movs	r2, #4
 80014de:	409a      	lsls	r2, r3
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e8:	f043 0204 	orr.w	r2, r3, #4
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f4:	2210      	movs	r2, #16
 80014f6:	409a      	lsls	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d043      	beq.n	8001588 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b00      	cmp	r3, #0
 800150c:	d03c      	beq.n	8001588 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001512:	2210      	movs	r2, #16
 8001514:	409a      	lsls	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d018      	beq.n	800155a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d108      	bne.n	8001548 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	2b00      	cmp	r3, #0
 800153c:	d024      	beq.n	8001588 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	4798      	blx	r3
 8001546:	e01f      	b.n	8001588 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154c:	2b00      	cmp	r3, #0
 800154e:	d01b      	beq.n	8001588 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	4798      	blx	r3
 8001558:	e016      	b.n	8001588 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d107      	bne.n	8001578 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0208 	bic.w	r2, r2, #8
 8001576:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158c:	2220      	movs	r2, #32
 800158e:	409a      	lsls	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 808f 	beq.w	80016b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 8087 	beq.w	80016b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ae:	2220      	movs	r2, #32
 80015b0:	409a      	lsls	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b05      	cmp	r3, #5
 80015c0:	d136      	bne.n	8001630 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0216 	bic.w	r2, r2, #22
 80015d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <HAL_DMA_IRQHandler+0x1da>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0208 	bic.w	r2, r2, #8
 8001600:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001606:	223f      	movs	r2, #63	; 0x3f
 8001608:	409a      	lsls	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001622:	2b00      	cmp	r3, #0
 8001624:	d07e      	beq.n	8001724 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
        }
        return;
 800162e:	e079      	b.n	8001724 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d01d      	beq.n	800167a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10d      	bne.n	8001668 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001650:	2b00      	cmp	r3, #0
 8001652:	d031      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
 800165c:	e02c      	b.n	80016b8 <HAL_DMA_IRQHandler+0x2a0>
 800165e:	bf00      	nop
 8001660:	20000000 	.word	0x20000000
 8001664:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166c:	2b00      	cmp	r3, #0
 800166e:	d023      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	4798      	blx	r3
 8001678:	e01e      	b.n	80016b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10f      	bne.n	80016a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0210 	bic.w	r2, r2, #16
 8001696:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d032      	beq.n	8001726 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d022      	beq.n	8001712 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2205      	movs	r2, #5
 80016d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	3301      	adds	r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d307      	bcc.n	8001700 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f2      	bne.n	80016e4 <HAL_DMA_IRQHandler+0x2cc>
 80016fe:	e000      	b.n	8001702 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001700:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
 8001722:	e000      	b.n	8001726 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001724:	bf00      	nop
    }
  }
}
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	3b10      	subs	r3, #16
 800173c:	4a13      	ldr	r2, [pc, #76]	; (800178c <DMA_CalcBaseAndBitshift+0x60>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <DMA_CalcBaseAndBitshift+0x64>)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d908      	bls.n	800176c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <DMA_CalcBaseAndBitshift+0x68>)
 8001762:	4013      	ands	r3, r2
 8001764:	1d1a      	adds	r2, r3, #4
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	659a      	str	r2, [r3, #88]	; 0x58
 800176a:	e006      	b.n	800177a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <DMA_CalcBaseAndBitshift+0x68>)
 8001774:	4013      	ands	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	aaaaaaab 	.word	0xaaaaaaab
 8001790:	080096b0 	.word	0x080096b0
 8001794:	fffffc00 	.word	0xfffffc00

08001798 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d11f      	bne.n	80017f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d856      	bhi.n	8001866 <DMA_CheckFifoParam+0xce>
 80017b8:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <DMA_CheckFifoParam+0x28>)
 80017ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017be:	bf00      	nop
 80017c0:	080017d1 	.word	0x080017d1
 80017c4:	080017e3 	.word	0x080017e3
 80017c8:	080017d1 	.word	0x080017d1
 80017cc:	08001867 	.word	0x08001867
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d046      	beq.n	800186a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017e0:	e043      	b.n	800186a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017ea:	d140      	bne.n	800186e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017f0:	e03d      	b.n	800186e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017fa:	d121      	bne.n	8001840 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d837      	bhi.n	8001872 <DMA_CheckFifoParam+0xda>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <DMA_CheckFifoParam+0x70>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001819 	.word	0x08001819
 800180c:	0800181f 	.word	0x0800181f
 8001810:	08001819 	.word	0x08001819
 8001814:	08001831 	.word	0x08001831
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
      break;
 800181c:	e030      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d025      	beq.n	8001876 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800182e:	e022      	b.n	8001876 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001838:	d11f      	bne.n	800187a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800183e:	e01c      	b.n	800187a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d903      	bls.n	800184e <DMA_CheckFifoParam+0xb6>
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d003      	beq.n	8001854 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800184c:	e018      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
      break;
 8001852:	e015      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00e      	beq.n	800187e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
      break;
 8001864:	e00b      	b.n	800187e <DMA_CheckFifoParam+0xe6>
      break;
 8001866:	bf00      	nop
 8001868:	e00a      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      break;
 800186a:	bf00      	nop
 800186c:	e008      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      break;
 800186e:	bf00      	nop
 8001870:	e006      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      break;
 8001872:	bf00      	nop
 8001874:	e004      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      break;
 8001876:	bf00      	nop
 8001878:	e002      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      break;   
 800187a:	bf00      	nop
 800187c:	e000      	b.n	8001880 <DMA_CheckFifoParam+0xe8>
      break;
 800187e:	bf00      	nop
    }
  } 
  
  return status; 
 8001880:	7bfb      	ldrb	r3, [r7, #15]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e175      	b.n	8001b9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 8164 	bne.w	8001b96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d005      	beq.n	80018e6 <HAL_GPIO_Init+0x56>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d130      	bne.n	8001948 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 0201 	and.w	r2, r3, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b03      	cmp	r3, #3
 8001952:	d017      	beq.n	8001984 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d123      	bne.n	80019d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80be 	beq.w	8001b96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	4b66      	ldr	r3, [pc, #408]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a65      	ldr	r2, [pc, #404]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a32:	4a61      	ldr	r2, [pc, #388]	; (8001bb8 <HAL_GPIO_Init+0x328>)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a58      	ldr	r2, [pc, #352]	; (8001bbc <HAL_GPIO_Init+0x32c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d037      	beq.n	8001ace <HAL_GPIO_Init+0x23e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a57      	ldr	r2, [pc, #348]	; (8001bc0 <HAL_GPIO_Init+0x330>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d031      	beq.n	8001aca <HAL_GPIO_Init+0x23a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a56      	ldr	r2, [pc, #344]	; (8001bc4 <HAL_GPIO_Init+0x334>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d02b      	beq.n	8001ac6 <HAL_GPIO_Init+0x236>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a55      	ldr	r2, [pc, #340]	; (8001bc8 <HAL_GPIO_Init+0x338>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d025      	beq.n	8001ac2 <HAL_GPIO_Init+0x232>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a54      	ldr	r2, [pc, #336]	; (8001bcc <HAL_GPIO_Init+0x33c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d01f      	beq.n	8001abe <HAL_GPIO_Init+0x22e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a53      	ldr	r2, [pc, #332]	; (8001bd0 <HAL_GPIO_Init+0x340>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d019      	beq.n	8001aba <HAL_GPIO_Init+0x22a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a52      	ldr	r2, [pc, #328]	; (8001bd4 <HAL_GPIO_Init+0x344>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_GPIO_Init+0x226>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a51      	ldr	r2, [pc, #324]	; (8001bd8 <HAL_GPIO_Init+0x348>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d00d      	beq.n	8001ab2 <HAL_GPIO_Init+0x222>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a50      	ldr	r2, [pc, #320]	; (8001bdc <HAL_GPIO_Init+0x34c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d007      	beq.n	8001aae <HAL_GPIO_Init+0x21e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4f      	ldr	r2, [pc, #316]	; (8001be0 <HAL_GPIO_Init+0x350>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d101      	bne.n	8001aaa <HAL_GPIO_Init+0x21a>
 8001aa6:	2309      	movs	r3, #9
 8001aa8:	e012      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001aaa:	230a      	movs	r3, #10
 8001aac:	e010      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001aae:	2308      	movs	r3, #8
 8001ab0:	e00e      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	e00c      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ab6:	2306      	movs	r3, #6
 8001ab8:	e00a      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001aba:	2305      	movs	r3, #5
 8001abc:	e008      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001abe:	2304      	movs	r3, #4
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e004      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e002      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_GPIO_Init+0x240>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	f002 0203 	and.w	r2, r2, #3
 8001ad6:	0092      	lsls	r2, r2, #2
 8001ad8:	4093      	lsls	r3, r2
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ae0:	4935      	ldr	r1, [pc, #212]	; (8001bb8 <HAL_GPIO_Init+0x328>)
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aee:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <HAL_GPIO_Init+0x354>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b12:	4a34      	ldr	r2, [pc, #208]	; (8001be4 <HAL_GPIO_Init+0x354>)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b18:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <HAL_GPIO_Init+0x354>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b3c:	4a29      	ldr	r2, [pc, #164]	; (8001be4 <HAL_GPIO_Init+0x354>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b42:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <HAL_GPIO_Init+0x354>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b66:	4a1f      	ldr	r2, [pc, #124]	; (8001be4 <HAL_GPIO_Init+0x354>)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_GPIO_Init+0x354>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b90:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <HAL_GPIO_Init+0x354>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	2b0f      	cmp	r3, #15
 8001ba0:	f67f ae86 	bls.w	80018b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40013800 	.word	0x40013800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40020400 	.word	0x40020400
 8001bc4:	40020800 	.word	0x40020800
 8001bc8:	40020c00 	.word	0x40020c00
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40021400 	.word	0x40021400
 8001bd4:	40021800 	.word	0x40021800
 8001bd8:	40021c00 	.word	0x40021c00
 8001bdc:	40022000 	.word	0x40022000
 8001be0:	40022400 	.word	0x40022400
 8001be4:	40013c00 	.word	0x40013c00

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c04:	e003      	b.n	8001c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	041a      	lsls	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	619a      	str	r2, [r3, #24]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0d2      	b.n	8001dd4 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7fe ff44 	bl	8000ad0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	69d9      	ldr	r1, [r3, #28]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4b60      	ldr	r3, [pc, #384]	; (8001ddc <HAL_I2S_Init+0x1c0>)
 8001c5c:	400b      	ands	r3, r1
 8001c5e:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2202      	movs	r2, #2
 8001c66:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d067      	beq.n	8001d40 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001c78:	2310      	movs	r3, #16
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e001      	b.n	8001c82 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b20      	cmp	r3, #32
 8001c88:	d802      	bhi.n	8001c90 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d102      	bne.n	8001c9e <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8001c98:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <HAL_I2S_Init+0x1c4>)
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	e003      	b.n	8001ca6 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f8a2 	bl	8001de8 <I2S_GetClockFreq>
 8001ca4:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cae:	d125      	bne.n	8001cfc <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d010      	beq.n	8001cda <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	461a      	mov	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	3305      	adds	r3, #5
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	e01f      	b.n	8001d1a <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	461a      	mov	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	3305      	adds	r3, #5
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	e00e      	b.n	8001d1a <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	3305      	adds	r3, #5
 8001d18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4a31      	ldr	r2, [pc, #196]	; (8001de4 <HAL_I2S_Init+0x1c8>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	08db      	lsrs	r3, r3, #3
 8001d24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	085b      	lsrs	r3, r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	e003      	b.n	8001d48 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001d40:	2302      	movs	r3, #2
 8001d42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d902      	bls.n	8001d54 <HAL_I2S_Init+0x138>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	2bff      	cmp	r3, #255	; 0xff
 8001d52:	d907      	bls.n	8001d64 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	f043 0210 	orr.w	r2, r3, #16
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e037      	b.n	8001dd4 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	ea42 0103 	orr.w	r1, r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <HAL_I2S_Init+0x1c0>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6851      	ldr	r1, [r2, #4]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6892      	ldr	r2, [r2, #8]
 8001d8a:	4311      	orrs	r1, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	68d2      	ldr	r2, [r2, #12]
 8001d90:	4311      	orrs	r1, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6992      	ldr	r2, [r2, #24]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001da2:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b30      	cmp	r3, #48	; 0x30
 8001daa:	d003      	beq.n	8001db4 <HAL_I2S_Init+0x198>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2bb0      	cmp	r3, #176	; 0xb0
 8001db2:	d107      	bne.n	8001dc4 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001dc2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	fffff040 	.word	0xfffff040
 8001de0:	00bb8000 	.word	0x00bb8000
 8001de4:	cccccccd 	.word	0xcccccccd

08001de8 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d02d      	beq.n	8001e54 <I2S_GetClockFreq+0x6c>
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d12e      	bne.n	8001e5a <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <I2S_GetClockFreq+0x88>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d108      	bne.n	8001e1a <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <I2S_GetClockFreq+0x88>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e10:	4a18      	ldr	r2, [pc, #96]	; (8001e74 <I2S_GetClockFreq+0x8c>)
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e007      	b.n	8001e2a <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <I2S_GetClockFreq+0x88>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <I2S_GetClockFreq+0x90>)
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <I2S_GetClockFreq+0x88>)
 8001e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e30:	0f1b      	lsrs	r3, r3, #28
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <I2S_GetClockFreq+0x88>)
 8001e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e3e:	099b      	lsrs	r3, r3, #6
 8001e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	fb03 f202 	mul.w	r2, r3, r2
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e50:	613b      	str	r3, [r7, #16]

      break;
 8001e52:	e005      	b.n	8001e60 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <I2S_GetClockFreq+0x94>)
 8001e56:	613b      	str	r3, [r7, #16]
      break;
 8001e58:	e002      	b.n	8001e60 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
      break;
 8001e5e:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8001e60:	693b      	ldr	r3, [r7, #16]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	007a1200 	.word	0x007a1200
 8001e7c:	00bb8000 	.word	0x00bb8000

08001e80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e82:	b08f      	sub	sp, #60	; 0x3c
 8001e84:	af0a      	add	r7, sp, #40	; 0x28
 8001e86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e116      	b.n	80020c0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d106      	bne.n	8001eb2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f006 fef9 	bl	8008ca4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fa08 	bl	80052e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	687e      	ldr	r6, [r7, #4]
 8001ede:	466d      	mov	r5, sp
 8001ee0:	f106 0410 	add.w	r4, r6, #16
 8001ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ef0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ef4:	1d33      	adds	r3, r6, #4
 8001ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef8:	6838      	ldr	r0, [r7, #0]
 8001efa:	f003 f8e9 	bl	80050d0 <USB_CoreInit>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0d7      	b.n	80020c0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 f9f6 	bl	8005308 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e04a      	b.n	8001fb8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	333d      	adds	r3, #61	; 0x3d
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	333c      	adds	r3, #60	; 0x3c
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	b298      	uxth	r0, r3
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3344      	adds	r3, #68	; 0x44
 8001f5e:	4602      	mov	r2, r0
 8001f60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	3340      	adds	r3, #64	; 0x40
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	3348      	adds	r3, #72	; 0x48
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	334c      	adds	r3, #76	; 0x4c
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	3354      	adds	r3, #84	; 0x54
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d3af      	bcc.n	8001f22 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
 8001fc6:	e044      	b.n	8002052 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	3301      	adds	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d3b5      	bcc.n	8001fc8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	687e      	ldr	r6, [r7, #4]
 8002064:	466d      	mov	r5, sp
 8002066:	f106 0410 	add.w	r4, r6, #16
 800206a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002072:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002076:	e885 0003 	stmia.w	r5, {r0, r1}
 800207a:	1d33      	adds	r3, r6, #4
 800207c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800207e:	6838      	ldr	r0, [r7, #0]
 8002080:	f003 f98e 	bl	80053a0 <USB_DevInit>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2202      	movs	r2, #2
 800208e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e014      	b.n	80020c0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d102      	bne.n	80020b4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f001 f97a 	bl	80033a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 fadc 	bl	8006676 <USB_DevDisconnect>

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_PCD_Start+0x16>
 80020da:	2302      	movs	r3, #2
 80020dc:	e012      	b.n	8002104 <HAL_PCD_Start+0x3c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 f8ea 	bl	80052c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f004 fa9d 	bl	8006634 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b08d      	sub	sp, #52	; 0x34
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f004 fb5b 	bl	80067de <USB_GetMode>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 84b7 	bne.w	8002a9e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f004 fabf 	bl	80066b8 <USB_ReadInterrupts>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 84ad 	beq.w	8002a9c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f004 faac 	bl	80066b8 <USB_ReadInterrupts>
 8002160:	4603      	mov	r3, r0
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b02      	cmp	r3, #2
 8002168:	d107      	bne.n	800217a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f002 0202 	and.w	r2, r2, #2
 8002178:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f004 fa9a 	bl	80066b8 <USB_ReadInterrupts>
 8002184:	4603      	mov	r3, r0
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b10      	cmp	r3, #16
 800218c:	d161      	bne.n	8002252 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699a      	ldr	r2, [r3, #24]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0210 	bic.w	r2, r2, #16
 800219c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	f003 020f 	and.w	r2, r3, #15
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	3304      	adds	r3, #4
 80021bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	0c5b      	lsrs	r3, r3, #17
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d124      	bne.n	8002214 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d035      	beq.n	8002242 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	6a38      	ldr	r0, [r7, #32]
 80021ea:	f004 f8d1 	bl	8006390 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021fa:	441a      	add	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	6a1a      	ldr	r2, [r3, #32]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800220c:	441a      	add	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	621a      	str	r2, [r3, #32]
 8002212:	e016      	b.n	8002242 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	0c5b      	lsrs	r3, r3, #17
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	2b06      	cmp	r3, #6
 800221e:	d110      	bne.n	8002242 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002226:	2208      	movs	r2, #8
 8002228:	4619      	mov	r1, r3
 800222a:	6a38      	ldr	r0, [r7, #32]
 800222c:	f004 f8b0 	bl	8006390 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	6a1a      	ldr	r2, [r3, #32]
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800223c:	441a      	add	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0210 	orr.w	r2, r2, #16
 8002250:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f004 fa2e 	bl	80066b8 <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002262:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002266:	f040 80a7 	bne.w	80023b8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f004 fa33 	bl	80066de <USB_ReadDevAllOutEpInterrupt>
 8002278:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800227a:	e099      	b.n	80023b0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 808e 	beq.w	80023a4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f004 fa57 	bl	8006746 <USB_ReadDevOutEPInterrupt>
 8002298:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00c      	beq.n	80022be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b0:	461a      	mov	r2, r3
 80022b2:	2301      	movs	r3, #1
 80022b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 feef 	bl	800309c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00c      	beq.n	80022e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d4:	461a      	mov	r2, r3
 80022d6:	2308      	movs	r3, #8
 80022d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 ffc5 	bl	800326c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f8:	461a      	mov	r2, r3
 80022fa:	2310      	movs	r3, #16
 80022fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d030      	beq.n	800236a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002310:	2b80      	cmp	r3, #128	; 0x80
 8002312:	d109      	bne.n	8002328 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002326:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	3304      	adds	r3, #4
 800233c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	78db      	ldrb	r3, [r3, #3]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d108      	bne.n	8002358 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2200      	movs	r2, #0
 800234a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	b2db      	uxtb	r3, r3
 8002350:	4619      	mov	r1, r3
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f006 fdda 	bl	8008f0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	4413      	add	r3, r2
 8002360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002364:	461a      	mov	r2, r3
 8002366:	2302      	movs	r3, #2
 8002368:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	4413      	add	r3, r2
 800237c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002380:	461a      	mov	r2, r3
 8002382:	2320      	movs	r3, #32
 8002384:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d009      	beq.n	80023a4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239c:	461a      	mov	r2, r3
 800239e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	3301      	adds	r3, #1
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ac:	085b      	lsrs	r3, r3, #1
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f47f af62 	bne.w	800227c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 f97b 	bl	80066b8 <USB_ReadInterrupts>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023cc:	f040 80db 	bne.w	8002586 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 f99c 	bl	8006712 <USB_ReadDevAllInEpInterrupt>
 80023da:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023e0:	e0cd      	b.n	800257e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80c2 	beq.w	8002572 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f004 f9c2 	bl	8006782 <USB_ReadDevInEPInterrupt>
 80023fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d057      	beq.n	80024ba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	2201      	movs	r2, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800241e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43db      	mvns	r3, r3
 8002424:	69f9      	ldr	r1, [r7, #28]
 8002426:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800242a:	4013      	ands	r3, r2
 800242c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	4413      	add	r3, r2
 8002436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800243a:	461a      	mov	r2, r3
 800243c:	2301      	movs	r3, #1
 800243e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d132      	bne.n	80024ae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	334c      	adds	r3, #76	; 0x4c
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4403      	add	r3, r0
 8002468:	3348      	adds	r3, #72	; 0x48
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4419      	add	r1, r3
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4403      	add	r3, r0
 800247c:	334c      	adds	r3, #76	; 0x4c
 800247e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	2b00      	cmp	r3, #0
 8002484:	d113      	bne.n	80024ae <HAL_PCD_IRQHandler+0x3a2>
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	3354      	adds	r3, #84	; 0x54
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d108      	bne.n	80024ae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024a6:	461a      	mov	r2, r3
 80024a8:	2101      	movs	r1, #1
 80024aa:	f004 f9cb 	bl	8006844 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	4619      	mov	r1, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f006 fca4 	bl	8008e02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d0:	461a      	mov	r2, r3
 80024d2:	2308      	movs	r3, #8
 80024d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ec:	461a      	mov	r2, r3
 80024ee:	2310      	movs	r3, #16
 80024f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	4413      	add	r3, r2
 8002504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002508:	461a      	mov	r2, r3
 800250a:	2340      	movs	r3, #64	; 0x40
 800250c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d023      	beq.n	8002560 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800251a:	6a38      	ldr	r0, [r7, #32]
 800251c:	f003 f89e 	bl	800565c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	3338      	adds	r3, #56	; 0x38
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	3304      	adds	r3, #4
 8002532:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	78db      	ldrb	r3, [r3, #3]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d108      	bne.n	800254e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2200      	movs	r2, #0
 8002540:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	b2db      	uxtb	r3, r3
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f006 fcf1 	bl	8008f30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	4413      	add	r3, r2
 8002556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800255a:	461a      	mov	r2, r3
 800255c:	2302      	movs	r3, #2
 800255e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800256a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fd08 	bl	8002f82 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	3301      	adds	r3, #1
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257a:	085b      	lsrs	r3, r3, #1
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	f47f af2e 	bne.w	80023e2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f004 f894 	bl	80066b8 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800259a:	d122      	bne.n	80025e2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d108      	bne.n	80025cc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025c2:	2100      	movs	r1, #0
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f006 fe6b 	bl	80092a0 <HAL_PCDEx_LPM_Callback>
 80025ca:	e002      	b.n	80025d2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f006 fc8f 	bl	8008ef0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f004 f866 	bl	80066b8 <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025f6:	d112      	bne.n	800261e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b01      	cmp	r3, #1
 8002606:	d102      	bne.n	800260e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f006 fc4b 	bl	8008ea4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800261c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f004 f848 	bl	80066b8 <USB_ReadInterrupts>
 8002628:	4603      	mov	r3, r0
 800262a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800262e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002632:	d121      	bne.n	8002678 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002642:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800264a:	2b00      	cmp	r3, #0
 800264c:	d111      	bne.n	8002672 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	f003 020f 	and.w	r2, r3, #15
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002668:	2101      	movs	r1, #1
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f006 fe18 	bl	80092a0 <HAL_PCDEx_LPM_Callback>
 8002670:	e002      	b.n	8002678 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f006 fc16 	bl	8008ea4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f004 f81b 	bl	80066b8 <USB_ReadInterrupts>
 8002682:	4603      	mov	r3, r0
 8002684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268c:	f040 80b7 	bne.w	80027fe <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2110      	movs	r1, #16
 80026aa:	4618      	mov	r0, r3
 80026ac:	f002 ffd6 	bl	800565c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b4:	e046      	b.n	8002744 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026c2:	461a      	mov	r2, r3
 80026c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026da:	0151      	lsls	r1, r2, #5
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	440a      	add	r2, r1
 80026e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f6:	461a      	mov	r2, r3
 80026f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	4413      	add	r3, r2
 8002706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270e:	0151      	lsls	r1, r2, #5
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	440a      	add	r2, r1
 8002714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002718:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800271c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	4413      	add	r3, r2
 8002726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800272e:	0151      	lsls	r1, r2, #5
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	440a      	add	r2, r1
 8002734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002738:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800273c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	3301      	adds	r3, #1
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800274a:	429a      	cmp	r2, r3
 800274c:	d3b3      	bcc.n	80026b6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800275c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002760:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	2b00      	cmp	r3, #0
 8002768:	d016      	beq.n	8002798 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800277a:	f043 030b 	orr.w	r3, r3, #11
 800277e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002790:	f043 030b 	orr.w	r3, r3, #11
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	e015      	b.n	80027c4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279e:	695a      	ldr	r2, [r3, #20]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a6:	4619      	mov	r1, r3
 80027a8:	f242 032b 	movw	r3, #8235	; 0x202b
 80027ac:	4313      	orrs	r3, r2
 80027ae:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027be:	f043 030b 	orr.w	r3, r3, #11
 80027c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027e8:	461a      	mov	r2, r3
 80027ea:	f004 f82b 	bl	8006844 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f003 ff58 	bl	80066b8 <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800280e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002812:	d124      	bne.n	800285e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f003 ffef 	bl	80067fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f002 ff97 	bl	8005756 <USB_GetDevSpeed>
 8002828:	4603      	mov	r3, r0
 800282a:	461a      	mov	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681c      	ldr	r4, [r3, #0]
 8002834:	f001 fadc 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8002838:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	4620      	mov	r0, r4
 8002844:	f002 fc9c 	bl	8005180 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f006 fb02 	bl	8008e52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800285c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f003 ff28 	bl	80066b8 <USB_ReadInterrupts>
 8002868:	4603      	mov	r3, r0
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b08      	cmp	r3, #8
 8002870:	d10a      	bne.n	8002888 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f006 fadf 	bl	8008e36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f002 0208 	and.w	r2, r2, #8
 8002886:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f003 ff13 	bl	80066b8 <USB_ReadInterrupts>
 8002892:	4603      	mov	r3, r0
 8002894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002898:	2b80      	cmp	r3, #128	; 0x80
 800289a:	d122      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028a8:	2301      	movs	r3, #1
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
 80028ac:	e014      	b.n	80028d8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d105      	bne.n	80028d2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	4619      	mov	r1, r3
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fb27 	bl	8002f20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	3301      	adds	r3, #1
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028de:	429a      	cmp	r2, r3
 80028e0:	d3e5      	bcc.n	80028ae <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f003 fee6 	bl	80066b8 <USB_ReadInterrupts>
 80028ec:	4603      	mov	r3, r0
 80028ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f6:	d13b      	bne.n	8002970 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f8:	2301      	movs	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
 80028fc:	e02b      	b.n	8002956 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	4413      	add	r3, r2
 8002906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3340      	adds	r3, #64	; 0x40
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d115      	bne.n	8002950 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002924:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002926:	2b00      	cmp	r3, #0
 8002928:	da12      	bge.n	8002950 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	333f      	adds	r3, #63	; 0x3f
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002946:	b2db      	uxtb	r3, r3
 8002948:	4619      	mov	r1, r3
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fae8 	bl	8002f20 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	3301      	adds	r3, #1
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295c:	429a      	cmp	r2, r3
 800295e:	d3ce      	bcc.n	80028fe <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800296e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f003 fe9f 	bl	80066b8 <USB_ReadInterrupts>
 800297a:	4603      	mov	r3, r0
 800297c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002984:	d155      	bne.n	8002a32 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002986:	2301      	movs	r3, #1
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
 800298a:	e045      	b.n	8002a18 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	4413      	add	r3, r2
 8002994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d12e      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	da2b      	bge.n	8002a12 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80029c6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d121      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a0e:	6053      	str	r3, [r2, #4]
            break;
 8002a10:	e007      	b.n	8002a22 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	3301      	adds	r3, #1
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d3b4      	bcc.n	800298c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 fe3e 	bl	80066b8 <USB_ReadInterrupts>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a46:	d10a      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f006 fa83 	bl	8008f54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 fe28 	bl	80066b8 <USB_ReadInterrupts>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d115      	bne.n	8002a9e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f006 fa73 	bl	8008f70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e000      	b.n	8002a9e <HAL_PCD_IRQHandler+0x992>
      return;
 8002a9c:	bf00      	nop
    }
  }
}
 8002a9e:	3734      	adds	r7, #52	; 0x34
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd90      	pop	{r4, r7, pc}

08002aa4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_PCD_SetAddress+0x1a>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e013      	b.n	8002ae6 <HAL_PCD_SetAddress+0x42>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 fd86 	bl	80065e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	4608      	mov	r0, r1
 8002af8:	4611      	mov	r1, r2
 8002afa:	461a      	mov	r2, r3
 8002afc:	4603      	mov	r3, r0
 8002afe:	70fb      	strb	r3, [r7, #3]
 8002b00:	460b      	mov	r3, r1
 8002b02:	803b      	strh	r3, [r7, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	da0f      	bge.n	8002b34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	f003 020f 	and.w	r2, r3, #15
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	3338      	adds	r3, #56	; 0x38
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	3304      	adds	r3, #4
 8002b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	705a      	strb	r2, [r3, #1]
 8002b32:	e00f      	b.n	8002b54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	f003 020f 	and.w	r2, r3, #15
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b60:	883a      	ldrh	r2, [r7, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	78ba      	ldrb	r2, [r7, #2]
 8002b6a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	785b      	ldrb	r3, [r3, #1]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b7e:	78bb      	ldrb	r3, [r7, #2]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d102      	bne.n	8002b8a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_PCD_EP_Open+0xaa>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e00e      	b.n	8002bb6 <HAL_PCD_EP_Open+0xc8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68f9      	ldr	r1, [r7, #12]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f002 fdfa 	bl	80057a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002bb4:	7afb      	ldrb	r3, [r7, #11]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	da0f      	bge.n	8002bf2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	f003 020f 	and.w	r2, r3, #15
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	3338      	adds	r3, #56	; 0x38
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	3304      	adds	r3, #4
 8002be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	705a      	strb	r2, [r3, #1]
 8002bf0:	e00f      	b.n	8002c12 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	f003 020f 	and.w	r2, r3, #15
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	3304      	adds	r3, #4
 8002c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_PCD_EP_Close+0x6e>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e00e      	b.n	8002c4a <HAL_PCD_EP_Close+0x8c>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68f9      	ldr	r1, [r7, #12]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f002 fe38 	bl	80058b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c62:	7afb      	ldrb	r3, [r7, #11]
 8002c64:	f003 020f 	and.w	r2, r3, #15
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	3304      	adds	r3, #4
 8002c7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2200      	movs	r2, #0
 8002c92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c94:	7afb      	ldrb	r3, [r7, #11]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d102      	bne.n	8002cae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cae:	7afb      	ldrb	r3, [r7, #11]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	6979      	ldr	r1, [r7, #20]
 8002cc6:	f003 f91f 	bl	8005f08 <USB_EP0StartXfer>
 8002cca:	e008      	b.n	8002cde <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6979      	ldr	r1, [r7, #20]
 8002cda:	f002 fec5 	bl	8005a68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	460b      	mov	r3, r1
 8002d26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	7afb      	ldrb	r3, [r7, #11]
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	3338      	adds	r3, #56	; 0x38
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2201      	movs	r2, #1
 8002d56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d58:	7afb      	ldrb	r3, [r7, #11]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d72:	7afb      	ldrb	r3, [r7, #11]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	6979      	ldr	r1, [r7, #20]
 8002d8a:	f003 f8bd 	bl	8005f08 <USB_EP0StartXfer>
 8002d8e:	e008      	b.n	8002da2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6979      	ldr	r1, [r7, #20]
 8002d9e:	f002 fe63 	bl	8005a68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 020f 	and.w	r2, r3, #15
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d901      	bls.n	8002dca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e050      	b.n	8002e6c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da0f      	bge.n	8002df2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	3338      	adds	r3, #56	; 0x38
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	3304      	adds	r3, #4
 8002de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	705a      	strb	r2, [r3, #1]
 8002df0:	e00d      	b.n	8002e0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	3304      	adds	r3, #4
 8002e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_PCD_EP_SetStall+0x82>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e01e      	b.n	8002e6c <HAL_PCD_EP_SetStall+0xc0>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68f9      	ldr	r1, [r7, #12]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 faff 	bl	8006440 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10a      	bne.n	8002e62 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	b2d9      	uxtb	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f003 fcf1 	bl	8006844 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 020f 	and.w	r2, r3, #15
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d901      	bls.n	8002e92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e042      	b.n	8002f18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	da0f      	bge.n	8002eba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	f003 020f 	and.w	r2, r3, #15
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	3338      	adds	r3, #56	; 0x38
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	705a      	strb	r2, [r3, #1]
 8002eb8:	e00f      	b.n	8002eda <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	f003 020f 	and.w	r2, r3, #15
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_PCD_EP_ClrStall+0x86>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e00e      	b.n	8002f18 <HAL_PCD_EP_ClrStall+0xa4>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68f9      	ldr	r1, [r7, #12]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f003 fb07 	bl	800651c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	da0c      	bge.n	8002f4e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 020f 	and.w	r2, r3, #15
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	3338      	adds	r3, #56	; 0x38
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	4413      	add	r3, r2
 8002f48:	3304      	adds	r3, #4
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e00c      	b.n	8002f68 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	f003 020f 	and.w	r2, r3, #15
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	4413      	add	r3, r2
 8002f64:	3304      	adds	r3, #4
 8002f66:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68f9      	ldr	r1, [r7, #12]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 f926 	bl	80061c0 <USB_EPStopXfer>
 8002f74:	4603      	mov	r3, r0
 8002f76:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f78:	7afb      	ldrb	r3, [r7, #11]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b08a      	sub	sp, #40	; 0x28
 8002f86:	af02      	add	r7, sp, #8
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	3338      	adds	r3, #56	; 0x38
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1a      	ldr	r2, [r3, #32]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d901      	bls.n	8002fba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e06c      	b.n	8003094 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d902      	bls.n	8002fd6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3303      	adds	r3, #3
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fde:	e02b      	b.n	8003038 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	699a      	ldr	r2, [r3, #24]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d902      	bls.n	8002ffc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	3303      	adds	r3, #3
 8003000:	089b      	lsrs	r3, r3, #2
 8003002:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6919      	ldr	r1, [r3, #16]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	b2da      	uxtb	r2, r3
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003014:	b2db      	uxtb	r3, r3
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	4603      	mov	r3, r0
 800301a:	6978      	ldr	r0, [r7, #20]
 800301c:	f003 f97a 	bl	8006314 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	441a      	add	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a1a      	ldr	r2, [r3, #32]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	441a      	add	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	429a      	cmp	r2, r3
 800304c:	d809      	bhi.n	8003062 <PCD_WriteEmptyTxFifo+0xe0>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a1a      	ldr	r2, [r3, #32]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003056:	429a      	cmp	r2, r3
 8003058:	d203      	bcs.n	8003062 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1be      	bne.n	8002fe0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	429a      	cmp	r2, r3
 800306c:	d811      	bhi.n	8003092 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	2201      	movs	r2, #1
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	43db      	mvns	r3, r3
 8003088:	6939      	ldr	r1, [r7, #16]
 800308a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800308e:	4013      	ands	r3, r2
 8003090:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3720      	adds	r7, #32
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	333c      	adds	r3, #60	; 0x3c
 80030b4:	3304      	adds	r3, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d17b      	bne.n	80031ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d015      	beq.n	8003108 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	4a61      	ldr	r2, [pc, #388]	; (8003264 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	f240 80b9 	bls.w	8003258 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80b3 	beq.w	8003258 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fe:	461a      	mov	r2, r3
 8003100:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003104:	6093      	str	r3, [r2, #8]
 8003106:	e0a7      	b.n	8003258 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311e:	461a      	mov	r2, r3
 8003120:	2320      	movs	r3, #32
 8003122:	6093      	str	r3, [r2, #8]
 8003124:	e098      	b.n	8003258 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800312c:	2b00      	cmp	r3, #0
 800312e:	f040 8093 	bne.w	8003258 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	4a4b      	ldr	r2, [pc, #300]	; (8003264 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d90f      	bls.n	800315a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	4413      	add	r3, r2
 800314c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003150:	461a      	mov	r2, r3
 8003152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003156:	6093      	str	r3, [r2, #8]
 8003158:	e07e      	b.n	8003258 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	3304      	adds	r3, #4
 800316e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	0159      	lsls	r1, r3, #5
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	440b      	add	r3, r1
 800317c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003186:	1ad2      	subs	r2, r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d114      	bne.n	80031bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031a4:	461a      	mov	r2, r3
 80031a6:	2101      	movs	r1, #1
 80031a8:	f003 fb4c 	bl	8006844 <USB_EP0_OutStart>
 80031ac:	e006      	b.n	80031bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	441a      	add	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	4619      	mov	r1, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f005 fe02 	bl	8008dcc <HAL_PCD_DataOutStageCallback>
 80031c8:	e046      	b.n	8003258 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	4a26      	ldr	r2, [pc, #152]	; (8003268 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d124      	bne.n	800321c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e8:	461a      	mov	r2, r3
 80031ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ee:	6093      	str	r3, [r2, #8]
 80031f0:	e032      	b.n	8003258 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003208:	461a      	mov	r2, r3
 800320a:	2320      	movs	r3, #32
 800320c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f005 fdd9 	bl	8008dcc <HAL_PCD_DataOutStageCallback>
 800321a:	e01d      	b.n	8003258 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d114      	bne.n	800324c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d108      	bne.n	800324c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003244:	461a      	mov	r2, r3
 8003246:	2100      	movs	r1, #0
 8003248:	f003 fafc 	bl	8006844 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	4619      	mov	r1, r3
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f005 fdba 	bl	8008dcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3720      	adds	r7, #32
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	4f54300a 	.word	0x4f54300a
 8003268:	4f54310a 	.word	0x4f54310a

0800326c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	333c      	adds	r3, #60	; 0x3c
 8003284:	3304      	adds	r3, #4
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d90e      	bls.n	80032c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d009      	beq.n	80032c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b8:	461a      	mov	r2, r3
 80032ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f005 fd71 	bl	8008da8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d90c      	bls.n	80032e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d108      	bne.n	80032e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032e0:	461a      	mov	r2, r3
 80032e2:	2101      	movs	r1, #1
 80032e4:	f003 faae 	bl	8006844 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	4f54300a 	.word	0x4f54300a

080032f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	70fb      	strb	r3, [r7, #3]
 8003304:	4613      	mov	r3, r2
 8003306:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d107      	bne.n	8003326 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003316:	883b      	ldrh	r3, [r7, #0]
 8003318:	0419      	lsls	r1, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	430a      	orrs	r2, r1
 8003322:	629a      	str	r2, [r3, #40]	; 0x28
 8003324:	e028      	b.n	8003378 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	4413      	add	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003334:	2300      	movs	r3, #0
 8003336:	73fb      	strb	r3, [r7, #15]
 8003338:	e00d      	b.n	8003356 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	3340      	adds	r3, #64	; 0x40
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	0c1b      	lsrs	r3, r3, #16
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	4413      	add	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	3301      	adds	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	3b01      	subs	r3, #1
 800335c:	429a      	cmp	r2, r3
 800335e:	d3ec      	bcc.n	800333a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003360:	883b      	ldrh	r3, [r7, #0]
 8003362:	0418      	lsls	r0, r3, #16
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6819      	ldr	r1, [r3, #0]
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	3b01      	subs	r3, #1
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	4302      	orrs	r2, r0
 8003370:	3340      	adds	r3, #64	; 0x40
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	887a      	ldrh	r2, [r7, #2]
 8003398:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_PCDEx_ActivateLPM+0x44>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	10000003 	.word	0x10000003

080033f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a04      	ldr	r2, [pc, #16]	; (800340c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fe:	6013      	str	r3, [r2, #0]
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40007000 	.word	0x40007000

08003410 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800341a:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003424:	6413      	str	r3, [r2, #64]	; 0x40
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003432:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1d      	ldr	r2, [pc, #116]	; (80034ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800343e:	f7fd fdfb 	bl	8001038 <HAL_GetTick>
 8003442:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003444:	e009      	b.n	800345a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003446:	f7fd fdf7 	bl	8001038 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003454:	d901      	bls.n	800345a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e022      	b.n	80034a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800345a:	4b14      	ldr	r3, [pc, #80]	; (80034ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003466:	d1ee      	bne.n	8003446 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003468:	4b10      	ldr	r3, [pc, #64]	; (80034ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0f      	ldr	r2, [pc, #60]	; (80034ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800346e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003472:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003474:	f7fd fde0 	bl	8001038 <HAL_GetTick>
 8003478:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800347a:	e009      	b.n	8003490 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800348a:	d901      	bls.n	8003490 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e007      	b.n	80034a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800349c:	d1ee      	bne.n	800347c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40007000 	.word	0x40007000

080034b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034b8:	2300      	movs	r3, #0
 80034ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e29b      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8087 	beq.w	80035e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d4:	4b96      	ldr	r3, [pc, #600]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d00c      	beq.n	80034fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e0:	4b93      	ldr	r3, [pc, #588]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d112      	bne.n	8003512 <HAL_RCC_OscConfig+0x62>
 80034ec:	4b90      	ldr	r3, [pc, #576]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f8:	d10b      	bne.n	8003512 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fa:	4b8d      	ldr	r3, [pc, #564]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d06c      	beq.n	80035e0 <HAL_RCC_OscConfig+0x130>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d168      	bne.n	80035e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e275      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351a:	d106      	bne.n	800352a <HAL_RCC_OscConfig+0x7a>
 800351c:	4b84      	ldr	r3, [pc, #528]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a83      	ldr	r2, [pc, #524]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	e02e      	b.n	8003588 <HAL_RCC_OscConfig+0xd8>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0x9c>
 8003532:	4b7f      	ldr	r3, [pc, #508]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7e      	ldr	r2, [pc, #504]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b7c      	ldr	r3, [pc, #496]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a7b      	ldr	r2, [pc, #492]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e01d      	b.n	8003588 <HAL_RCC_OscConfig+0xd8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0xc0>
 8003556:	4b76      	ldr	r3, [pc, #472]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a75      	ldr	r2, [pc, #468]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 800355c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b73      	ldr	r3, [pc, #460]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a72      	ldr	r2, [pc, #456]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e00b      	b.n	8003588 <HAL_RCC_OscConfig+0xd8>
 8003570:	4b6f      	ldr	r3, [pc, #444]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a6e      	ldr	r2, [pc, #440]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b6c      	ldr	r3, [pc, #432]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6b      	ldr	r2, [pc, #428]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fd fd52 	bl	8001038 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003598:	f7fd fd4e 	bl	8001038 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e229      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b61      	ldr	r3, [pc, #388]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0xe8>
 80035b6:	e014      	b.n	80035e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fd fd3e 	bl	8001038 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c0:	f7fd fd3a 	bl	8001038 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e215      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	4b57      	ldr	r3, [pc, #348]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x110>
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d069      	beq.n	80036c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ee:	4b50      	ldr	r3, [pc, #320]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fa:	4b4d      	ldr	r3, [pc, #308]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b08      	cmp	r3, #8
 8003604:	d11c      	bne.n	8003640 <HAL_RCC_OscConfig+0x190>
 8003606:	4b4a      	ldr	r3, [pc, #296]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d116      	bne.n	8003640 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003612:	4b47      	ldr	r3, [pc, #284]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_RCC_OscConfig+0x17a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e1e9      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	4b41      	ldr	r3, [pc, #260]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	493d      	ldr	r1, [pc, #244]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363e:	e040      	b.n	80036c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d023      	beq.n	8003690 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003648:	4b39      	ldr	r3, [pc, #228]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a38      	ldr	r2, [pc, #224]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fd fcf0 	bl	8001038 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365c:	f7fd fcec 	bl	8001038 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e1c7      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	4b30      	ldr	r3, [pc, #192]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367a:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4929      	ldr	r1, [pc, #164]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]
 800368e:	e018      	b.n	80036c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a26      	ldr	r2, [pc, #152]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fd fccc 	bl	8001038 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a4:	f7fd fcc8 	bl	8001038 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e1a3      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d038      	beq.n	8003740 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d019      	beq.n	800370a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d6:	4b16      	ldr	r3, [pc, #88]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 80036d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036da:	4a15      	ldr	r2, [pc, #84]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fd fca9 	bl	8001038 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ea:	f7fd fca5 	bl	8001038 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e180      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 80036fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x23a>
 8003708:	e01a      	b.n	8003740 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 800370c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370e:	4a08      	ldr	r2, [pc, #32]	; (8003730 <HAL_RCC_OscConfig+0x280>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003716:	f7fd fc8f 	bl	8001038 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371e:	f7fd fc8b 	bl	8001038 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d903      	bls.n	8003734 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e166      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
 8003730:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003734:	4b92      	ldr	r3, [pc, #584]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 8003736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ee      	bne.n	800371e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 80a4 	beq.w	8003896 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374e:	4b8c      	ldr	r3, [pc, #560]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10d      	bne.n	8003776 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	4b89      	ldr	r3, [pc, #548]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	4a88      	ldr	r2, [pc, #544]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 8003760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003764:	6413      	str	r3, [r2, #64]	; 0x40
 8003766:	4b86      	ldr	r3, [pc, #536]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003772:	2301      	movs	r3, #1
 8003774:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003776:	4b83      	ldr	r3, [pc, #524]	; (8003984 <HAL_RCC_OscConfig+0x4d4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d118      	bne.n	80037b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003782:	4b80      	ldr	r3, [pc, #512]	; (8003984 <HAL_RCC_OscConfig+0x4d4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a7f      	ldr	r2, [pc, #508]	; (8003984 <HAL_RCC_OscConfig+0x4d4>)
 8003788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378e:	f7fd fc53 	bl	8001038 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003796:	f7fd fc4f 	bl	8001038 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b64      	cmp	r3, #100	; 0x64
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e12a      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a8:	4b76      	ldr	r3, [pc, #472]	; (8003984 <HAL_RCC_OscConfig+0x4d4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d106      	bne.n	80037ca <HAL_RCC_OscConfig+0x31a>
 80037bc:	4b70      	ldr	r3, [pc, #448]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	4a6f      	ldr	r2, [pc, #444]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70
 80037c8:	e02d      	b.n	8003826 <HAL_RCC_OscConfig+0x376>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10c      	bne.n	80037ec <HAL_RCC_OscConfig+0x33c>
 80037d2:	4b6b      	ldr	r3, [pc, #428]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	4a6a      	ldr	r2, [pc, #424]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	6713      	str	r3, [r2, #112]	; 0x70
 80037de:	4b68      	ldr	r3, [pc, #416]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	4a67      	ldr	r2, [pc, #412]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 80037e4:	f023 0304 	bic.w	r3, r3, #4
 80037e8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ea:	e01c      	b.n	8003826 <HAL_RCC_OscConfig+0x376>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b05      	cmp	r3, #5
 80037f2:	d10c      	bne.n	800380e <HAL_RCC_OscConfig+0x35e>
 80037f4:	4b62      	ldr	r3, [pc, #392]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a61      	ldr	r2, [pc, #388]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 80037fa:	f043 0304 	orr.w	r3, r3, #4
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003800:	4b5f      	ldr	r3, [pc, #380]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a5e      	ldr	r2, [pc, #376]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	e00b      	b.n	8003826 <HAL_RCC_OscConfig+0x376>
 800380e:	4b5c      	ldr	r3, [pc, #368]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a5b      	ldr	r2, [pc, #364]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
 800381a:	4b59      	ldr	r3, [pc, #356]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a58      	ldr	r2, [pc, #352]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 8003820:	f023 0304 	bic.w	r3, r3, #4
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d015      	beq.n	800385a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382e:	f7fd fc03 	bl	8001038 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003834:	e00a      	b.n	800384c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7fd fbff 	bl	8001038 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f241 3288 	movw	r2, #5000	; 0x1388
 8003844:	4293      	cmp	r3, r2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0d8      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384c:	4b4c      	ldr	r3, [pc, #304]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ee      	beq.n	8003836 <HAL_RCC_OscConfig+0x386>
 8003858:	e014      	b.n	8003884 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385a:	f7fd fbed 	bl	8001038 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fd fbe9 	bl	8001038 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0c2      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003878:	4b41      	ldr	r3, [pc, #260]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ee      	bne.n	8003862 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d105      	bne.n	8003896 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388a:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	4a3c      	ldr	r2, [pc, #240]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 8003890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003894:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80ae 	beq.w	80039fc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038a0:	4b37      	ldr	r3, [pc, #220]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d06d      	beq.n	8003988 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d14b      	bne.n	800394c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b4:	4b32      	ldr	r3, [pc, #200]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a31      	ldr	r2, [pc, #196]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 80038ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fd fbba 	bl	8001038 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c8:	f7fd fbb6 	bl	8001038 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e091      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	4b29      	ldr	r3, [pc, #164]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	019b      	lsls	r3, r3, #6
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	085b      	lsrs	r3, r3, #1
 80038fe:	3b01      	subs	r3, #1
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	061b      	lsls	r3, r3, #24
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	071b      	lsls	r3, r3, #28
 8003912:	491b      	ldr	r1, [pc, #108]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a18      	ldr	r2, [pc, #96]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 800391e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fd fb88 	bl	8001038 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fd fb84 	bl	8001038 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e05f      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x47c>
 800394a:	e057      	b.n	80039fc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 8003952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fd fb6e 	bl	8001038 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7fd fb6a 	bl	8001038 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e045      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	4b03      	ldr	r3, [pc, #12]	; (8003980 <HAL_RCC_OscConfig+0x4d0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x4b0>
 800397e:	e03d      	b.n	80039fc <HAL_RCC_OscConfig+0x54c>
 8003980:	40023800 	.word	0x40023800
 8003984:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003988:	4b1f      	ldr	r3, [pc, #124]	; (8003a08 <HAL_RCC_OscConfig+0x558>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d030      	beq.n	80039f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d129      	bne.n	80039f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d122      	bne.n	80039f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039b8:	4013      	ands	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d119      	bne.n	80039f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	3b01      	subs	r3, #1
 80039d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d10f      	bne.n	80039f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800

08003a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0d0      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a24:	4b6a      	ldr	r3, [pc, #424]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d910      	bls.n	8003a54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b67      	ldr	r3, [pc, #412]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 020f 	bic.w	r2, r3, #15
 8003a3a:	4965      	ldr	r1, [pc, #404]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	4b63      	ldr	r3, [pc, #396]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0b8      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d020      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a6c:	4b59      	ldr	r3, [pc, #356]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	4a58      	ldr	r2, [pc, #352]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a84:	4b53      	ldr	r3, [pc, #332]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4a52      	ldr	r2, [pc, #328]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a90:	4b50      	ldr	r3, [pc, #320]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	494d      	ldr	r1, [pc, #308]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d040      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d107      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	4b47      	ldr	r3, [pc, #284]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d115      	bne.n	8003aee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e07f      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ace:	4b41      	ldr	r3, [pc, #260]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e073      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ade:	4b3d      	ldr	r3, [pc, #244]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e06b      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aee:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f023 0203 	bic.w	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4936      	ldr	r1, [pc, #216]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fd fa9a 	bl	8001038 <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b08:	f7fd fa96 	bl	8001038 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e053      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1e:	4b2d      	ldr	r3, [pc, #180]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 020c 	and.w	r2, r3, #12
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d1eb      	bne.n	8003b08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b30:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d210      	bcs.n	8003b60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 020f 	bic.w	r2, r3, #15
 8003b46:	4922      	ldr	r1, [pc, #136]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e032      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b6c:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4916      	ldr	r1, [pc, #88]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b8a:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	490e      	ldr	r1, [pc, #56]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b9e:	f000 f821 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	091b      	lsrs	r3, r3, #4
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	490a      	ldr	r1, [pc, #40]	; (8003bd8 <HAL_RCC_ClockConfig+0x1cc>)
 8003bb0:	5ccb      	ldrb	r3, [r1, r3]
 8003bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb6:	4a09      	ldr	r2, [pc, #36]	; (8003bdc <HAL_RCC_ClockConfig+0x1d0>)
 8003bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <HAL_RCC_ClockConfig+0x1d4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fd f9f6 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40023c00 	.word	0x40023c00
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	08009698 	.word	0x08009698
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	20000004 	.word	0x20000004

08003be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be8:	b094      	sub	sp, #80	; 0x50
 8003bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	647b      	str	r3, [r7, #68]	; 0x44
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bfc:	4b79      	ldr	r3, [pc, #484]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d00d      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x40>
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	f200 80e1 	bhi.w	8003dd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x34>
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d003      	beq.n	8003c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c16:	e0db      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c18:	4b73      	ldr	r3, [pc, #460]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c1c:	e0db      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c1e:	4b73      	ldr	r3, [pc, #460]	; (8003dec <HAL_RCC_GetSysClockFreq+0x208>)
 8003c20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c22:	e0d8      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c24:	4b6f      	ldr	r3, [pc, #444]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c2c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c2e:	4b6d      	ldr	r3, [pc, #436]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d063      	beq.n	8003d02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3a:	4b6a      	ldr	r3, [pc, #424]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	099b      	lsrs	r3, r3, #6
 8003c40:	2200      	movs	r2, #0
 8003c42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c4e:	2300      	movs	r3, #0
 8003c50:	637b      	str	r3, [r7, #52]	; 0x34
 8003c52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c56:	4622      	mov	r2, r4
 8003c58:	462b      	mov	r3, r5
 8003c5a:	f04f 0000 	mov.w	r0, #0
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	0159      	lsls	r1, r3, #5
 8003c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c68:	0150      	lsls	r0, r2, #5
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4621      	mov	r1, r4
 8003c70:	1a51      	subs	r1, r2, r1
 8003c72:	6139      	str	r1, [r7, #16]
 8003c74:	4629      	mov	r1, r5
 8003c76:	eb63 0301 	sbc.w	r3, r3, r1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c88:	4659      	mov	r1, fp
 8003c8a:	018b      	lsls	r3, r1, #6
 8003c8c:	4651      	mov	r1, sl
 8003c8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c92:	4651      	mov	r1, sl
 8003c94:	018a      	lsls	r2, r1, #6
 8003c96:	4651      	mov	r1, sl
 8003c98:	ebb2 0801 	subs.w	r8, r2, r1
 8003c9c:	4659      	mov	r1, fp
 8003c9e:	eb63 0901 	sbc.w	r9, r3, r1
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cb6:	4690      	mov	r8, r2
 8003cb8:	4699      	mov	r9, r3
 8003cba:	4623      	mov	r3, r4
 8003cbc:	eb18 0303 	adds.w	r3, r8, r3
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	462b      	mov	r3, r5
 8003cc4:	eb49 0303 	adc.w	r3, r9, r3
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	024b      	lsls	r3, r1, #9
 8003cda:	4621      	mov	r1, r4
 8003cdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	024a      	lsls	r2, r1, #9
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cea:	2200      	movs	r2, #0
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cf4:	f7fc faa0 	bl	8000238 <__aeabi_uldivmod>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d00:	e058      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d02:	4b38      	ldr	r3, [pc, #224]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	099b      	lsrs	r3, r3, #6
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d12:	623b      	str	r3, [r7, #32]
 8003d14:	2300      	movs	r3, #0
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
 8003d18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d1c:	4642      	mov	r2, r8
 8003d1e:	464b      	mov	r3, r9
 8003d20:	f04f 0000 	mov.w	r0, #0
 8003d24:	f04f 0100 	mov.w	r1, #0
 8003d28:	0159      	lsls	r1, r3, #5
 8003d2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d2e:	0150      	lsls	r0, r2, #5
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4641      	mov	r1, r8
 8003d36:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d54:	ebb2 040a 	subs.w	r4, r2, sl
 8003d58:	eb63 050b 	sbc.w	r5, r3, fp
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	00eb      	lsls	r3, r5, #3
 8003d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d6a:	00e2      	lsls	r2, r4, #3
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	461d      	mov	r5, r3
 8003d70:	4643      	mov	r3, r8
 8003d72:	18e3      	adds	r3, r4, r3
 8003d74:	603b      	str	r3, [r7, #0]
 8003d76:	464b      	mov	r3, r9
 8003d78:	eb45 0303 	adc.w	r3, r5, r3
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	028b      	lsls	r3, r1, #10
 8003d8e:	4621      	mov	r1, r4
 8003d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d94:	4621      	mov	r1, r4
 8003d96:	028a      	lsls	r2, r1, #10
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9e:	2200      	movs	r2, #0
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	61fa      	str	r2, [r7, #28]
 8003da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da8:	f7fc fa46 	bl	8000238 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4613      	mov	r3, r2
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003dc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dce:	e002      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3750      	adds	r7, #80	; 0x50
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800
 8003de8:	00f42400 	.word	0x00f42400
 8003dec:	007a1200 	.word	0x007a1200

08003df0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df4:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000000 	.word	0x20000000

08003e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e0c:	f7ff fff0 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	0a9b      	lsrs	r3, r3, #10
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	4903      	ldr	r1, [pc, #12]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e1e:	5ccb      	ldrb	r3, [r1, r3]
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	080096a8 	.word	0x080096a8

08003e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e34:	f7ff ffdc 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	0b5b      	lsrs	r3, r3, #13
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4903      	ldr	r1, [pc, #12]	; (8003e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	080096a8 	.word	0x080096a8

08003e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d012      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e80:	4b69      	ldr	r3, [pc, #420]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a68      	ldr	r2, [pc, #416]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e8a:	6093      	str	r3, [r2, #8]
 8003e8c:	4b66      	ldr	r3, [pc, #408]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	4964      	ldr	r1, [pc, #400]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d017      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eb2:	4b5d      	ldr	r3, [pc, #372]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	4959      	ldr	r1, [pc, #356]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d017      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003eee:	4b4e      	ldr	r3, [pc, #312]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	494a      	ldr	r1, [pc, #296]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 808b 	beq.w	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f3c:	4b3a      	ldr	r3, [pc, #232]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	4a39      	ldr	r2, [pc, #228]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f46:	6413      	str	r3, [r2, #64]	; 0x40
 8003f48:	4b37      	ldr	r3, [pc, #220]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f54:	4b35      	ldr	r3, [pc, #212]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a34      	ldr	r2, [pc, #208]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f60:	f7fd f86a 	bl	8001038 <HAL_GetTick>
 8003f64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f68:	f7fd f866 	bl	8001038 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	; 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e38f      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f7a:	4b2c      	ldr	r3, [pc, #176]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f86:	4b28      	ldr	r3, [pc, #160]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d035      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d02e      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fa4:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fae:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	4a1d      	ldr	r2, [pc, #116]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fba:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	4a1a      	ldr	r2, [pc, #104]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fc6:	4a18      	ldr	r2, [pc, #96]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fcc:	4b16      	ldr	r3, [pc, #88]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d114      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fd f82e 	bl	8001038 <HAL_GetTick>
 8003fdc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fde:	e00a      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe0:	f7fd f82a 	bl	8001038 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e351      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0ee      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800400e:	d111      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800401c:	4b04      	ldr	r3, [pc, #16]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800401e:	400b      	ands	r3, r1
 8004020:	4901      	ldr	r1, [pc, #4]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
 8004026:	e00b      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004028:	40023800 	.word	0x40023800
 800402c:	40007000 	.word	0x40007000
 8004030:	0ffffcff 	.word	0x0ffffcff
 8004034:	4bac      	ldr	r3, [pc, #688]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4aab      	ldr	r2, [pc, #684]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800403e:	6093      	str	r3, [r2, #8]
 8004040:	4ba9      	ldr	r3, [pc, #676]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004042:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404c:	49a6      	ldr	r1, [pc, #664]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404e:	4313      	orrs	r3, r2
 8004050:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b00      	cmp	r3, #0
 800405c:	d010      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800405e:	4ba2      	ldr	r3, [pc, #648]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004064:	4aa0      	ldr	r2, [pc, #640]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800406e:	4b9e      	ldr	r3, [pc, #632]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004070:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	499b      	ldr	r1, [pc, #620]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800408c:	4b96      	ldr	r3, [pc, #600]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409a:	4993      	ldr	r1, [pc, #588]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040ae:	4b8e      	ldr	r3, [pc, #568]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040bc:	498a      	ldr	r1, [pc, #552]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040d0:	4b85      	ldr	r3, [pc, #532]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040de:	4982      	ldr	r1, [pc, #520]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040f2:	4b7d      	ldr	r3, [pc, #500]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4979      	ldr	r1, [pc, #484]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004114:	4b74      	ldr	r3, [pc, #464]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f023 0203 	bic.w	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	4971      	ldr	r1, [pc, #452]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004136:	4b6c      	ldr	r3, [pc, #432]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	f023 020c 	bic.w	r2, r3, #12
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004144:	4968      	ldr	r1, [pc, #416]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004158:	4b63      	ldr	r3, [pc, #396]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	4960      	ldr	r1, [pc, #384]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800417a:	4b5b      	ldr	r3, [pc, #364]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004180:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004188:	4957      	ldr	r1, [pc, #348]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800419c:	4b52      	ldr	r3, [pc, #328]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	494f      	ldr	r1, [pc, #316]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80041be:	4b4a      	ldr	r3, [pc, #296]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	4946      	ldr	r1, [pc, #280]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80041e0:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ee:	493e      	ldr	r1, [pc, #248]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004202:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004208:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004210:	4935      	ldr	r1, [pc, #212]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004224:	4b30      	ldr	r3, [pc, #192]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004232:	492d      	ldr	r1, [pc, #180]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d011      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004246:	4b28      	ldr	r3, [pc, #160]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004254:	4924      	ldr	r1, [pc, #144]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004264:	d101      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004266:	2301      	movs	r3, #1
 8004268:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004276:	2301      	movs	r3, #1
 8004278:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004286:	4b18      	ldr	r3, [pc, #96]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004294:	4914      	ldr	r1, [pc, #80]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00b      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b8:	490b      	ldr	r1, [pc, #44]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00f      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042dc:	4902      	ldr	r1, [pc, #8]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042e4:	e002      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x494>
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00b      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042f8:	4b8a      	ldr	r3, [pc, #552]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	4986      	ldr	r1, [pc, #536]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00b      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800431c:	4b81      	ldr	r3, [pc, #516]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800431e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004322:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800432c:	497d      	ldr	r1, [pc, #500]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d006      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80d6 	beq.w	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004348:	4b76      	ldr	r3, [pc, #472]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a75      	ldr	r2, [pc, #468]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004354:	f7fc fe70 	bl	8001038 <HAL_GetTick>
 8004358:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800435c:	f7fc fe6c 	bl	8001038 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	; 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e195      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800436e:	4b6d      	ldr	r3, [pc, #436]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d021      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438a:	2b00      	cmp	r3, #0
 800438c:	d11d      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800438e:	4b65      	ldr	r3, [pc, #404]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004394:	0c1b      	lsrs	r3, r3, #16
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800439c:	4b61      	ldr	r3, [pc, #388]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a2:	0e1b      	lsrs	r3, r3, #24
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	019a      	lsls	r2, r3, #6
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	041b      	lsls	r3, r3, #16
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	061b      	lsls	r3, r3, #24
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	071b      	lsls	r3, r3, #28
 80043c2:	4958      	ldr	r1, [pc, #352]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02e      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043f4:	d129      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043f6:	4b4b      	ldr	r3, [pc, #300]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004404:	4b47      	ldr	r3, [pc, #284]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440a:	0f1b      	lsrs	r3, r3, #28
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	019a      	lsls	r2, r3, #6
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	041b      	lsls	r3, r3, #16
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	061b      	lsls	r3, r3, #24
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	071b      	lsls	r3, r3, #28
 800442a:	493e      	ldr	r1, [pc, #248]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004432:	4b3c      	ldr	r3, [pc, #240]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004438:	f023 021f 	bic.w	r2, r3, #31
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	3b01      	subs	r3, #1
 8004442:	4938      	ldr	r1, [pc, #224]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d01d      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004456:	4b33      	ldr	r3, [pc, #204]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800445c:	0e1b      	lsrs	r3, r3, #24
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004464:	4b2f      	ldr	r3, [pc, #188]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446a:	0f1b      	lsrs	r3, r3, #28
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	019a      	lsls	r2, r3, #6
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	431a      	orrs	r2, r3
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	061b      	lsls	r3, r3, #24
 8004484:	431a      	orrs	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	071b      	lsls	r3, r3, #28
 800448a:	4926      	ldr	r1, [pc, #152]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d011      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	019a      	lsls	r2, r3, #6
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	071b      	lsls	r3, r3, #28
 80044ba:	491a      	ldr	r1, [pc, #104]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044c2:	4b18      	ldr	r3, [pc, #96]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a17      	ldr	r2, [pc, #92]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ce:	f7fc fdb3 	bl	8001038 <HAL_GetTick>
 80044d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044d4:	e008      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044d6:	f7fc fdaf 	bl	8001038 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b64      	cmp	r3, #100	; 0x64
 80044e2:	d901      	bls.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e0d8      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044e8:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	f040 80ce 	bne.w	8004698 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80044fc:	4b09      	ldr	r3, [pc, #36]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a08      	ldr	r2, [pc, #32]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004508:	f7fc fd96 	bl	8001038 <HAL_GetTick>
 800450c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800450e:	e00b      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004510:	f7fc fd92 	bl	8001038 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b64      	cmp	r3, #100	; 0x64
 800451c:	d904      	bls.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e0bb      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004528:	4b5e      	ldr	r3, [pc, #376]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004534:	d0ec      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004552:	2b00      	cmp	r3, #0
 8004554:	d02e      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d12a      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800455e:	4b51      	ldr	r3, [pc, #324]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800456c:	4b4d      	ldr	r3, [pc, #308]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	0f1b      	lsrs	r3, r3, #28
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	019a      	lsls	r2, r3, #6
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	041b      	lsls	r3, r3, #16
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	061b      	lsls	r3, r3, #24
 800458c:	431a      	orrs	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	071b      	lsls	r3, r3, #28
 8004592:	4944      	ldr	r1, [pc, #272]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800459a:	4b42      	ldr	r3, [pc, #264]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	3b01      	subs	r3, #1
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	493d      	ldr	r1, [pc, #244]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d022      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c8:	d11d      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045ca:	4b36      	ldr	r3, [pc, #216]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d0:	0e1b      	lsrs	r3, r3, #24
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045d8:	4b32      	ldr	r3, [pc, #200]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	0f1b      	lsrs	r3, r3, #28
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	019a      	lsls	r2, r3, #6
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	041b      	lsls	r3, r3, #16
 80045f2:	431a      	orrs	r2, r3
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	061b      	lsls	r3, r3, #24
 80045f8:	431a      	orrs	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	071b      	lsls	r3, r3, #28
 80045fe:	4929      	ldr	r1, [pc, #164]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d028      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004612:	4b24      	ldr	r3, [pc, #144]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004618:	0e1b      	lsrs	r3, r3, #24
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004620:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	f003 0303 	and.w	r3, r3, #3
 800462c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	019a      	lsls	r2, r3, #6
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	041b      	lsls	r3, r3, #16
 8004638:	431a      	orrs	r2, r3
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	061b      	lsls	r3, r3, #24
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	071b      	lsls	r3, r3, #28
 8004646:	4917      	ldr	r1, [pc, #92]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800464e:	4b15      	ldr	r3, [pc, #84]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004654:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	4911      	ldr	r1, [pc, #68]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004664:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a0e      	ldr	r2, [pc, #56]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800466a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004670:	f7fc fce2 	bl	8001038 <HAL_GetTick>
 8004674:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004676:	e008      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004678:	f7fc fcde 	bl	8001038 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b64      	cmp	r3, #100	; 0x64
 8004684:	d901      	bls.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e007      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004696:	d1ef      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40023800 	.word	0x40023800

080046a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e09d      	b.n	80047f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d108      	bne.n	80046d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ca:	d009      	beq.n	80046e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	61da      	str	r2, [r3, #28]
 80046d2:	e005      	b.n	80046e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fc faa8 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004716:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004720:	d902      	bls.n	8004728 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	e002      	b.n	800472e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800472c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004736:	d007      	beq.n	8004748 <HAL_SPI_Init+0xa0>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004740:	d002      	beq.n	8004748 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	ea42 0103 	orr.w	r1, r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	0c1b      	lsrs	r3, r3, #16
 80047a4:	f003 0204 	and.w	r2, r3, #4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047c4:	ea42 0103 	orr.w	r1, r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e040      	b.n	8004892 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7fc faa9 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2224      	movs	r2, #36	; 0x24
 800482a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f82d 	bl	800489c <UART_SetConfig>
 8004842:	4603      	mov	r3, r0
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e022      	b.n	8004892 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fa85 	bl	8004d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004868:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004878:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0201 	orr.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fb0c 	bl	8004ea8 <UART_CheckIdleState>
 8004890:	4603      	mov	r3, r0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4ba6      	ldr	r3, [pc, #664]	; (8004b60 <UART_SetConfig+0x2c4>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	6979      	ldr	r1, [r7, #20]
 80048d0:	430b      	orrs	r3, r1
 80048d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	430a      	orrs	r2, r1
 800490c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a94      	ldr	r2, [pc, #592]	; (8004b64 <UART_SetConfig+0x2c8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d120      	bne.n	800495a <UART_SetConfig+0xbe>
 8004918:	4b93      	ldr	r3, [pc, #588]	; (8004b68 <UART_SetConfig+0x2cc>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b03      	cmp	r3, #3
 8004924:	d816      	bhi.n	8004954 <UART_SetConfig+0xb8>
 8004926:	a201      	add	r2, pc, #4	; (adr r2, 800492c <UART_SetConfig+0x90>)
 8004928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492c:	0800493d 	.word	0x0800493d
 8004930:	08004949 	.word	0x08004949
 8004934:	08004943 	.word	0x08004943
 8004938:	0800494f 	.word	0x0800494f
 800493c:	2301      	movs	r3, #1
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e150      	b.n	8004be4 <UART_SetConfig+0x348>
 8004942:	2302      	movs	r3, #2
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e14d      	b.n	8004be4 <UART_SetConfig+0x348>
 8004948:	2304      	movs	r3, #4
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e14a      	b.n	8004be4 <UART_SetConfig+0x348>
 800494e:	2308      	movs	r3, #8
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e147      	b.n	8004be4 <UART_SetConfig+0x348>
 8004954:	2310      	movs	r3, #16
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e144      	b.n	8004be4 <UART_SetConfig+0x348>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a83      	ldr	r2, [pc, #524]	; (8004b6c <UART_SetConfig+0x2d0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d132      	bne.n	80049ca <UART_SetConfig+0x12e>
 8004964:	4b80      	ldr	r3, [pc, #512]	; (8004b68 <UART_SetConfig+0x2cc>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	2b0c      	cmp	r3, #12
 8004970:	d828      	bhi.n	80049c4 <UART_SetConfig+0x128>
 8004972:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <UART_SetConfig+0xdc>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	080049ad 	.word	0x080049ad
 800497c:	080049c5 	.word	0x080049c5
 8004980:	080049c5 	.word	0x080049c5
 8004984:	080049c5 	.word	0x080049c5
 8004988:	080049b9 	.word	0x080049b9
 800498c:	080049c5 	.word	0x080049c5
 8004990:	080049c5 	.word	0x080049c5
 8004994:	080049c5 	.word	0x080049c5
 8004998:	080049b3 	.word	0x080049b3
 800499c:	080049c5 	.word	0x080049c5
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049c5 	.word	0x080049c5
 80049a8:	080049bf 	.word	0x080049bf
 80049ac:	2300      	movs	r3, #0
 80049ae:	77fb      	strb	r3, [r7, #31]
 80049b0:	e118      	b.n	8004be4 <UART_SetConfig+0x348>
 80049b2:	2302      	movs	r3, #2
 80049b4:	77fb      	strb	r3, [r7, #31]
 80049b6:	e115      	b.n	8004be4 <UART_SetConfig+0x348>
 80049b8:	2304      	movs	r3, #4
 80049ba:	77fb      	strb	r3, [r7, #31]
 80049bc:	e112      	b.n	8004be4 <UART_SetConfig+0x348>
 80049be:	2308      	movs	r3, #8
 80049c0:	77fb      	strb	r3, [r7, #31]
 80049c2:	e10f      	b.n	8004be4 <UART_SetConfig+0x348>
 80049c4:	2310      	movs	r3, #16
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e10c      	b.n	8004be4 <UART_SetConfig+0x348>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a68      	ldr	r2, [pc, #416]	; (8004b70 <UART_SetConfig+0x2d4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d120      	bne.n	8004a16 <UART_SetConfig+0x17a>
 80049d4:	4b64      	ldr	r3, [pc, #400]	; (8004b68 <UART_SetConfig+0x2cc>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049de:	2b30      	cmp	r3, #48	; 0x30
 80049e0:	d013      	beq.n	8004a0a <UART_SetConfig+0x16e>
 80049e2:	2b30      	cmp	r3, #48	; 0x30
 80049e4:	d814      	bhi.n	8004a10 <UART_SetConfig+0x174>
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d009      	beq.n	80049fe <UART_SetConfig+0x162>
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d810      	bhi.n	8004a10 <UART_SetConfig+0x174>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <UART_SetConfig+0x15c>
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d006      	beq.n	8004a04 <UART_SetConfig+0x168>
 80049f6:	e00b      	b.n	8004a10 <UART_SetConfig+0x174>
 80049f8:	2300      	movs	r3, #0
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e0f2      	b.n	8004be4 <UART_SetConfig+0x348>
 80049fe:	2302      	movs	r3, #2
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e0ef      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a04:	2304      	movs	r3, #4
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e0ec      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a0a:	2308      	movs	r3, #8
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e0e9      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a10:	2310      	movs	r3, #16
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e0e6      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a56      	ldr	r2, [pc, #344]	; (8004b74 <UART_SetConfig+0x2d8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d120      	bne.n	8004a62 <UART_SetConfig+0x1c6>
 8004a20:	4b51      	ldr	r3, [pc, #324]	; (8004b68 <UART_SetConfig+0x2cc>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a2a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a2c:	d013      	beq.n	8004a56 <UART_SetConfig+0x1ba>
 8004a2e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a30:	d814      	bhi.n	8004a5c <UART_SetConfig+0x1c0>
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d009      	beq.n	8004a4a <UART_SetConfig+0x1ae>
 8004a36:	2b80      	cmp	r3, #128	; 0x80
 8004a38:	d810      	bhi.n	8004a5c <UART_SetConfig+0x1c0>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <UART_SetConfig+0x1a8>
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d006      	beq.n	8004a50 <UART_SetConfig+0x1b4>
 8004a42:	e00b      	b.n	8004a5c <UART_SetConfig+0x1c0>
 8004a44:	2300      	movs	r3, #0
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e0cc      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	77fb      	strb	r3, [r7, #31]
 8004a4e:	e0c9      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a50:	2304      	movs	r3, #4
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e0c6      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a56:	2308      	movs	r3, #8
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e0c3      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	e0c0      	b.n	8004be4 <UART_SetConfig+0x348>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a44      	ldr	r2, [pc, #272]	; (8004b78 <UART_SetConfig+0x2dc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d125      	bne.n	8004ab8 <UART_SetConfig+0x21c>
 8004a6c:	4b3e      	ldr	r3, [pc, #248]	; (8004b68 <UART_SetConfig+0x2cc>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a7a:	d017      	beq.n	8004aac <UART_SetConfig+0x210>
 8004a7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a80:	d817      	bhi.n	8004ab2 <UART_SetConfig+0x216>
 8004a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a86:	d00b      	beq.n	8004aa0 <UART_SetConfig+0x204>
 8004a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8c:	d811      	bhi.n	8004ab2 <UART_SetConfig+0x216>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <UART_SetConfig+0x1fe>
 8004a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a96:	d006      	beq.n	8004aa6 <UART_SetConfig+0x20a>
 8004a98:	e00b      	b.n	8004ab2 <UART_SetConfig+0x216>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	77fb      	strb	r3, [r7, #31]
 8004a9e:	e0a1      	b.n	8004be4 <UART_SetConfig+0x348>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e09e      	b.n	8004be4 <UART_SetConfig+0x348>
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e09b      	b.n	8004be4 <UART_SetConfig+0x348>
 8004aac:	2308      	movs	r3, #8
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e098      	b.n	8004be4 <UART_SetConfig+0x348>
 8004ab2:	2310      	movs	r3, #16
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e095      	b.n	8004be4 <UART_SetConfig+0x348>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a2f      	ldr	r2, [pc, #188]	; (8004b7c <UART_SetConfig+0x2e0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d125      	bne.n	8004b0e <UART_SetConfig+0x272>
 8004ac2:	4b29      	ldr	r3, [pc, #164]	; (8004b68 <UART_SetConfig+0x2cc>)
 8004ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004acc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ad0:	d017      	beq.n	8004b02 <UART_SetConfig+0x266>
 8004ad2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ad6:	d817      	bhi.n	8004b08 <UART_SetConfig+0x26c>
 8004ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004adc:	d00b      	beq.n	8004af6 <UART_SetConfig+0x25a>
 8004ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae2:	d811      	bhi.n	8004b08 <UART_SetConfig+0x26c>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <UART_SetConfig+0x254>
 8004ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aec:	d006      	beq.n	8004afc <UART_SetConfig+0x260>
 8004aee:	e00b      	b.n	8004b08 <UART_SetConfig+0x26c>
 8004af0:	2301      	movs	r3, #1
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e076      	b.n	8004be4 <UART_SetConfig+0x348>
 8004af6:	2302      	movs	r3, #2
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e073      	b.n	8004be4 <UART_SetConfig+0x348>
 8004afc:	2304      	movs	r3, #4
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e070      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b02:	2308      	movs	r3, #8
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e06d      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b08:	2310      	movs	r3, #16
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e06a      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1b      	ldr	r2, [pc, #108]	; (8004b80 <UART_SetConfig+0x2e4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d138      	bne.n	8004b8a <UART_SetConfig+0x2ee>
 8004b18:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <UART_SetConfig+0x2cc>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b26:	d017      	beq.n	8004b58 <UART_SetConfig+0x2bc>
 8004b28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b2c:	d82a      	bhi.n	8004b84 <UART_SetConfig+0x2e8>
 8004b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b32:	d00b      	beq.n	8004b4c <UART_SetConfig+0x2b0>
 8004b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b38:	d824      	bhi.n	8004b84 <UART_SetConfig+0x2e8>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <UART_SetConfig+0x2aa>
 8004b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b42:	d006      	beq.n	8004b52 <UART_SetConfig+0x2b6>
 8004b44:	e01e      	b.n	8004b84 <UART_SetConfig+0x2e8>
 8004b46:	2300      	movs	r3, #0
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e04b      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e048      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b52:	2304      	movs	r3, #4
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e045      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b58:	2308      	movs	r3, #8
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e042      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b5e:	bf00      	nop
 8004b60:	efff69f3 	.word	0xefff69f3
 8004b64:	40011000 	.word	0x40011000
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	40004400 	.word	0x40004400
 8004b70:	40004800 	.word	0x40004800
 8004b74:	40004c00 	.word	0x40004c00
 8004b78:	40005000 	.word	0x40005000
 8004b7c:	40011400 	.word	0x40011400
 8004b80:	40007800 	.word	0x40007800
 8004b84:	2310      	movs	r3, #16
 8004b86:	77fb      	strb	r3, [r7, #31]
 8004b88:	e02c      	b.n	8004be4 <UART_SetConfig+0x348>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a72      	ldr	r2, [pc, #456]	; (8004d58 <UART_SetConfig+0x4bc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d125      	bne.n	8004be0 <UART_SetConfig+0x344>
 8004b94:	4b71      	ldr	r3, [pc, #452]	; (8004d5c <UART_SetConfig+0x4c0>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ba2:	d017      	beq.n	8004bd4 <UART_SetConfig+0x338>
 8004ba4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ba8:	d817      	bhi.n	8004bda <UART_SetConfig+0x33e>
 8004baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bae:	d00b      	beq.n	8004bc8 <UART_SetConfig+0x32c>
 8004bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb4:	d811      	bhi.n	8004bda <UART_SetConfig+0x33e>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <UART_SetConfig+0x326>
 8004bba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bbe:	d006      	beq.n	8004bce <UART_SetConfig+0x332>
 8004bc0:	e00b      	b.n	8004bda <UART_SetConfig+0x33e>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	77fb      	strb	r3, [r7, #31]
 8004bc6:	e00d      	b.n	8004be4 <UART_SetConfig+0x348>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e00a      	b.n	8004be4 <UART_SetConfig+0x348>
 8004bce:	2304      	movs	r3, #4
 8004bd0:	77fb      	strb	r3, [r7, #31]
 8004bd2:	e007      	b.n	8004be4 <UART_SetConfig+0x348>
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e004      	b.n	8004be4 <UART_SetConfig+0x348>
 8004bda:	2310      	movs	r3, #16
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e001      	b.n	8004be4 <UART_SetConfig+0x348>
 8004be0:	2310      	movs	r3, #16
 8004be2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bec:	d15b      	bne.n	8004ca6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004bee:	7ffb      	ldrb	r3, [r7, #31]
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d828      	bhi.n	8004c46 <UART_SetConfig+0x3aa>
 8004bf4:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <UART_SetConfig+0x360>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c21 	.word	0x08004c21
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c31 	.word	0x08004c31
 8004c08:	08004c47 	.word	0x08004c47
 8004c0c:	08004c37 	.word	0x08004c37
 8004c10:	08004c47 	.word	0x08004c47
 8004c14:	08004c47 	.word	0x08004c47
 8004c18:	08004c47 	.word	0x08004c47
 8004c1c:	08004c3f 	.word	0x08004c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7ff f8f2 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8004c24:	61b8      	str	r0, [r7, #24]
        break;
 8004c26:	e013      	b.n	8004c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c28:	f7ff f902 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	61b8      	str	r0, [r7, #24]
        break;
 8004c2e:	e00f      	b.n	8004c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c30:	4b4b      	ldr	r3, [pc, #300]	; (8004d60 <UART_SetConfig+0x4c4>)
 8004c32:	61bb      	str	r3, [r7, #24]
        break;
 8004c34:	e00c      	b.n	8004c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c36:	f7fe ffd5 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 8004c3a:	61b8      	str	r0, [r7, #24]
        break;
 8004c3c:	e008      	b.n	8004c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c42:	61bb      	str	r3, [r7, #24]
        break;
 8004c44:	e004      	b.n	8004c50 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d074      	beq.n	8004d40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	005a      	lsls	r2, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	441a      	add	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b0f      	cmp	r3, #15
 8004c70:	d916      	bls.n	8004ca0 <UART_SetConfig+0x404>
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c78:	d212      	bcs.n	8004ca0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f023 030f 	bic.w	r3, r3, #15
 8004c82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	89fb      	ldrh	r3, [r7, #14]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	89fa      	ldrh	r2, [r7, #14]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	e04f      	b.n	8004d40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	77bb      	strb	r3, [r7, #30]
 8004ca4:	e04c      	b.n	8004d40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ca6:	7ffb      	ldrb	r3, [r7, #31]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d828      	bhi.n	8004cfe <UART_SetConfig+0x462>
 8004cac:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x418>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004cd9 	.word	0x08004cd9
 8004cb8:	08004ce1 	.word	0x08004ce1
 8004cbc:	08004ce9 	.word	0x08004ce9
 8004cc0:	08004cff 	.word	0x08004cff
 8004cc4:	08004cef 	.word	0x08004cef
 8004cc8:	08004cff 	.word	0x08004cff
 8004ccc:	08004cff 	.word	0x08004cff
 8004cd0:	08004cff 	.word	0x08004cff
 8004cd4:	08004cf7 	.word	0x08004cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd8:	f7ff f896 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8004cdc:	61b8      	str	r0, [r7, #24]
        break;
 8004cde:	e013      	b.n	8004d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce0:	f7ff f8a6 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8004ce4:	61b8      	str	r0, [r7, #24]
        break;
 8004ce6:	e00f      	b.n	8004d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <UART_SetConfig+0x4c4>)
 8004cea:	61bb      	str	r3, [r7, #24]
        break;
 8004cec:	e00c      	b.n	8004d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cee:	f7fe ff79 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 8004cf2:	61b8      	str	r0, [r7, #24]
        break;
 8004cf4:	e008      	b.n	8004d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfa:	61bb      	str	r3, [r7, #24]
        break;
 8004cfc:	e004      	b.n	8004d08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	77bb      	strb	r3, [r7, #30]
        break;
 8004d06:	bf00      	nop
    }

    if (pclk != 0U)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d018      	beq.n	8004d40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	085a      	lsrs	r2, r3, #1
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	441a      	add	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b0f      	cmp	r3, #15
 8004d26:	d909      	bls.n	8004d3c <UART_SetConfig+0x4a0>
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2e:	d205      	bcs.n	8004d3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60da      	str	r2, [r3, #12]
 8004d3a:	e001      	b.n	8004d40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40007c00 	.word	0x40007c00
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	00f42400 	.word	0x00f42400

08004d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01a      	beq.n	8004e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e62:	d10a      	bne.n	8004e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004eb8:	f7fc f8be 	bl	8001038 <HAL_GetTick>
 8004ebc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d10e      	bne.n	8004eea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f831 	bl	8004f42 <UART_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e027      	b.n	8004f3a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d10e      	bne.n	8004f16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f81b 	bl	8004f42 <UART_WaitOnFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e011      	b.n	8004f3a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b09c      	sub	sp, #112	; 0x70
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f52:	e0a7      	b.n	80050a4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5a:	f000 80a3 	beq.w	80050a4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5e:	f7fc f86b 	bl	8001038 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d302      	bcc.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d13f      	bne.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f88:	667b      	str	r3, [r7, #100]	; 0x64
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e6      	bne.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fce:	e841 2300 	strex	r3, r2, [r1]
 8004fd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e5      	bne.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e068      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d050      	beq.n	80050a4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800500c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005010:	d148      	bne.n	80050a4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800501a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005030:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503a:	637b      	str	r3, [r7, #52]	; 0x34
 800503c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e6      	bne.n	800501c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3308      	adds	r3, #8
 8005054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	613b      	str	r3, [r7, #16]
   return(result);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	66bb      	str	r3, [r7, #104]	; 0x68
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800506e:	623a      	str	r2, [r7, #32]
 8005070:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	69f9      	ldr	r1, [r7, #28]
 8005074:	6a3a      	ldr	r2, [r7, #32]
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	61bb      	str	r3, [r7, #24]
   return(result);
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e5      	bne.n	800504e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2220      	movs	r2, #32
 8005086:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e010      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69da      	ldr	r2, [r3, #28]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	429a      	cmp	r2, r3
 80050c0:	f43f af48 	beq.w	8004f54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3770      	adds	r7, #112	; 0x70
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050d0:	b084      	sub	sp, #16
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	f107 001c 	add.w	r0, r7, #28
 80050de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d120      	bne.n	800512a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	4b20      	ldr	r3, [pc, #128]	; (800517c <USB_CoreInit+0xac>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800510c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d105      	bne.n	800511e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f001 fbee 	bl	8006900 <USB_CoreReset>
 8005124:	4603      	mov	r3, r0
 8005126:	73fb      	strb	r3, [r7, #15]
 8005128:	e010      	b.n	800514c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f001 fbe2 	bl	8006900 <USB_CoreReset>
 800513c:	4603      	mov	r3, r0
 800513e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	2b01      	cmp	r3, #1
 8005150:	d10b      	bne.n	800516a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f043 0206 	orr.w	r2, r3, #6
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f043 0220 	orr.w	r2, r3, #32
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800516a:	7bfb      	ldrb	r3, [r7, #15]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005176:	b004      	add	sp, #16
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	ffbdffbf 	.word	0xffbdffbf

08005180 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	4613      	mov	r3, r2
 800518c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d165      	bne.n	8005260 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4a41      	ldr	r2, [pc, #260]	; (800529c <USB_SetTurnaroundTime+0x11c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d906      	bls.n	80051aa <USB_SetTurnaroundTime+0x2a>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4a40      	ldr	r2, [pc, #256]	; (80052a0 <USB_SetTurnaroundTime+0x120>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d202      	bcs.n	80051aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051a4:	230f      	movs	r3, #15
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	e062      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4a3c      	ldr	r2, [pc, #240]	; (80052a0 <USB_SetTurnaroundTime+0x120>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d306      	bcc.n	80051c0 <USB_SetTurnaroundTime+0x40>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4a3b      	ldr	r2, [pc, #236]	; (80052a4 <USB_SetTurnaroundTime+0x124>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d202      	bcs.n	80051c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051ba:	230e      	movs	r3, #14
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	e057      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4a38      	ldr	r2, [pc, #224]	; (80052a4 <USB_SetTurnaroundTime+0x124>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d306      	bcc.n	80051d6 <USB_SetTurnaroundTime+0x56>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4a37      	ldr	r2, [pc, #220]	; (80052a8 <USB_SetTurnaroundTime+0x128>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d202      	bcs.n	80051d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051d0:	230d      	movs	r3, #13
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	e04c      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4a33      	ldr	r2, [pc, #204]	; (80052a8 <USB_SetTurnaroundTime+0x128>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d306      	bcc.n	80051ec <USB_SetTurnaroundTime+0x6c>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4a32      	ldr	r2, [pc, #200]	; (80052ac <USB_SetTurnaroundTime+0x12c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d802      	bhi.n	80051ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051e6:	230c      	movs	r3, #12
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e041      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a2f      	ldr	r2, [pc, #188]	; (80052ac <USB_SetTurnaroundTime+0x12c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d906      	bls.n	8005202 <USB_SetTurnaroundTime+0x82>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4a2e      	ldr	r2, [pc, #184]	; (80052b0 <USB_SetTurnaroundTime+0x130>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d802      	bhi.n	8005202 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051fc:	230b      	movs	r3, #11
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	e036      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4a2a      	ldr	r2, [pc, #168]	; (80052b0 <USB_SetTurnaroundTime+0x130>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d906      	bls.n	8005218 <USB_SetTurnaroundTime+0x98>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4a29      	ldr	r2, [pc, #164]	; (80052b4 <USB_SetTurnaroundTime+0x134>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d802      	bhi.n	8005218 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005212:	230a      	movs	r3, #10
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	e02b      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a26      	ldr	r2, [pc, #152]	; (80052b4 <USB_SetTurnaroundTime+0x134>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d906      	bls.n	800522e <USB_SetTurnaroundTime+0xae>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4a25      	ldr	r2, [pc, #148]	; (80052b8 <USB_SetTurnaroundTime+0x138>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d202      	bcs.n	800522e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005228:	2309      	movs	r3, #9
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e020      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4a21      	ldr	r2, [pc, #132]	; (80052b8 <USB_SetTurnaroundTime+0x138>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d306      	bcc.n	8005244 <USB_SetTurnaroundTime+0xc4>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4a20      	ldr	r2, [pc, #128]	; (80052bc <USB_SetTurnaroundTime+0x13c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d802      	bhi.n	8005244 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800523e:	2308      	movs	r3, #8
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e015      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4a1d      	ldr	r2, [pc, #116]	; (80052bc <USB_SetTurnaroundTime+0x13c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d906      	bls.n	800525a <USB_SetTurnaroundTime+0xda>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4a1c      	ldr	r2, [pc, #112]	; (80052c0 <USB_SetTurnaroundTime+0x140>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d202      	bcs.n	800525a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005254:	2307      	movs	r3, #7
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e00a      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800525a:	2306      	movs	r3, #6
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	e007      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d102      	bne.n	800526c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005266:	2309      	movs	r3, #9
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	e001      	b.n	8005270 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800526c:	2309      	movs	r3, #9
 800526e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	029b      	lsls	r3, r3, #10
 8005284:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005288:	431a      	orrs	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	00d8acbf 	.word	0x00d8acbf
 80052a0:	00e4e1c0 	.word	0x00e4e1c0
 80052a4:	00f42400 	.word	0x00f42400
 80052a8:	01067380 	.word	0x01067380
 80052ac:	011a499f 	.word	0x011a499f
 80052b0:	01312cff 	.word	0x01312cff
 80052b4:	014ca43f 	.word	0x014ca43f
 80052b8:	016e3600 	.word	0x016e3600
 80052bc:	01a6ab1f 	.word	0x01a6ab1f
 80052c0:	01e84800 	.word	0x01e84800

080052c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f043 0201 	orr.w	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f023 0201 	bic.w	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d115      	bne.n	8005356 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005336:	2001      	movs	r0, #1
 8005338:	f7fb fe8a 	bl	8001050 <HAL_Delay>
      ms++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f001 fa4b 	bl	80067de <USB_GetMode>
 8005348:	4603      	mov	r3, r0
 800534a:	2b01      	cmp	r3, #1
 800534c:	d01e      	beq.n	800538c <USB_SetCurrentMode+0x84>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b31      	cmp	r3, #49	; 0x31
 8005352:	d9f0      	bls.n	8005336 <USB_SetCurrentMode+0x2e>
 8005354:	e01a      	b.n	800538c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d115      	bne.n	8005388 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005368:	2001      	movs	r0, #1
 800536a:	f7fb fe71 	bl	8001050 <HAL_Delay>
      ms++;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3301      	adds	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f001 fa32 	bl	80067de <USB_GetMode>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <USB_SetCurrentMode+0x84>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b31      	cmp	r3, #49	; 0x31
 8005384:	d9f0      	bls.n	8005368 <USB_SetCurrentMode+0x60>
 8005386:	e001      	b.n	800538c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e005      	b.n	8005398 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b32      	cmp	r3, #50	; 0x32
 8005390:	d101      	bne.n	8005396 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053a0:	b084      	sub	sp, #16
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b086      	sub	sp, #24
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	e009      	b.n	80053d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	3340      	adds	r3, #64	; 0x40
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	2200      	movs	r2, #0
 80053cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3301      	adds	r3, #1
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b0e      	cmp	r3, #14
 80053d8:	d9f2      	bls.n	80053c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d11c      	bne.n	800541a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ee:	f043 0302 	orr.w	r3, r3, #2
 80053f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	e005      	b.n	8005426 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800542c:	461a      	mov	r2, r3
 800542e:	2300      	movs	r3, #0
 8005430:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	4619      	mov	r1, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005440:	461a      	mov	r2, r3
 8005442:	680b      	ldr	r3, [r1, #0]
 8005444:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	2b01      	cmp	r3, #1
 800544a:	d10c      	bne.n	8005466 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005452:	2100      	movs	r1, #0
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f965 	bl	8005724 <USB_SetDevSpeed>
 800545a:	e008      	b.n	800546e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800545c:	2101      	movs	r1, #1
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f960 	bl	8005724 <USB_SetDevSpeed>
 8005464:	e003      	b.n	800546e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005466:	2103      	movs	r1, #3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f95b 	bl	8005724 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800546e:	2110      	movs	r1, #16
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f8f3 	bl	800565c <USB_FlushTxFifo>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f91f 	bl	80056c4 <USB_FlushRxFifo>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	461a      	mov	r2, r3
 8005498:	2300      	movs	r3, #0
 800549a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a2:	461a      	mov	r2, r3
 80054a4:	2300      	movs	r3, #0
 80054a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ae:	461a      	mov	r2, r3
 80054b0:	2300      	movs	r3, #0
 80054b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054b4:	2300      	movs	r3, #0
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	e043      	b.n	8005542 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054d0:	d118      	bne.n	8005504 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	461a      	mov	r2, r3
 80054e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	e013      	b.n	8005516 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fa:	461a      	mov	r2, r3
 80054fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e008      	b.n	8005516 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	461a      	mov	r2, r3
 8005512:	2300      	movs	r3, #0
 8005514:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005522:	461a      	mov	r2, r3
 8005524:	2300      	movs	r3, #0
 8005526:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	461a      	mov	r2, r3
 8005536:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800553a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	3301      	adds	r3, #1
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	429a      	cmp	r2, r3
 8005548:	d3b7      	bcc.n	80054ba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e043      	b.n	80055d8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005566:	d118      	bne.n	800559a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	461a      	mov	r2, r3
 800557c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e013      	b.n	80055ac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	461a      	mov	r2, r3
 8005592:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	e008      	b.n	80055ac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	461a      	mov	r2, r3
 80055a8:	2300      	movs	r3, #0
 80055aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	461a      	mov	r2, r3
 80055ba:	2300      	movs	r3, #0
 80055bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ca:	461a      	mov	r2, r3
 80055cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	3301      	adds	r3, #1
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d3b7      	bcc.n	8005550 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005600:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	2b00      	cmp	r3, #0
 8005606:	d105      	bne.n	8005614 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f043 0210 	orr.w	r2, r3, #16
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	4b0e      	ldr	r3, [pc, #56]	; (8005654 <USB_DevInit+0x2b4>)
 800561a:	4313      	orrs	r3, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f043 0208 	orr.w	r2, r3, #8
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d105      	bne.n	8005644 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699a      	ldr	r2, [r3, #24]
 800563c:	4b06      	ldr	r3, [pc, #24]	; (8005658 <USB_DevInit+0x2b8>)
 800563e:	4313      	orrs	r3, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005650:	b004      	add	sp, #16
 8005652:	4770      	bx	lr
 8005654:	803c3800 	.word	0x803c3800
 8005658:	40000004 	.word	0x40000004

0800565c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3301      	adds	r3, #1
 800566e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a13      	ldr	r2, [pc, #76]	; (80056c0 <USB_FlushTxFifo+0x64>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d901      	bls.n	800567c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e01b      	b.n	80056b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	daf2      	bge.n	800566a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	019b      	lsls	r3, r3, #6
 800568c:	f043 0220 	orr.w	r2, r3, #32
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3301      	adds	r3, #1
 8005698:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a08      	ldr	r2, [pc, #32]	; (80056c0 <USB_FlushTxFifo+0x64>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d901      	bls.n	80056a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e006      	b.n	80056b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	d0f0      	beq.n	8005694 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	00030d40 	.word	0x00030d40

080056c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3301      	adds	r3, #1
 80056d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4a11      	ldr	r2, [pc, #68]	; (8005720 <USB_FlushRxFifo+0x5c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e018      	b.n	8005714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	daf2      	bge.n	80056d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2210      	movs	r2, #16
 80056f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4a08      	ldr	r2, [pc, #32]	; (8005720 <USB_FlushRxFifo+0x5c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e006      	b.n	8005714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b10      	cmp	r3, #16
 8005710:	d0f0      	beq.n	80056f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	00030d40 	.word	0x00030d40

08005724 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005744:	4313      	orrs	r3, r2
 8005746:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005756:	b480      	push	{r7}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 0306 	and.w	r3, r3, #6
 800576e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005776:	2300      	movs	r3, #0
 8005778:	75fb      	strb	r3, [r7, #23]
 800577a:	e00a      	b.n	8005792 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b02      	cmp	r3, #2
 8005780:	d002      	beq.n	8005788 <USB_GetDevSpeed+0x32>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b06      	cmp	r3, #6
 8005786:	d102      	bne.n	800578e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005788:	2302      	movs	r3, #2
 800578a:	75fb      	strb	r3, [r7, #23]
 800578c:	e001      	b.n	8005792 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800578e:	230f      	movs	r3, #15
 8005790:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005792:	7dfb      	ldrb	r3, [r7, #23]
}
 8005794:	4618      	mov	r0, r3
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	785b      	ldrb	r3, [r3, #1]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d139      	bne.n	8005830 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	2101      	movs	r1, #1
 80057ce:	fa01 f303 	lsl.w	r3, r1, r3
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	68f9      	ldr	r1, [r7, #12]
 80057d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057da:	4313      	orrs	r3, r2
 80057dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d153      	bne.n	800589c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	791b      	ldrb	r3, [r3, #4]
 800580e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005810:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	059b      	lsls	r3, r3, #22
 8005816:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005818:	431a      	orrs	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	0159      	lsls	r1, r3, #5
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	440b      	add	r3, r1
 8005822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005826:	4619      	mov	r1, r3
 8005828:	4b20      	ldr	r3, [pc, #128]	; (80058ac <USB_ActivateEndpoint+0x10c>)
 800582a:	4313      	orrs	r3, r2
 800582c:	600b      	str	r3, [r1, #0]
 800582e:	e035      	b.n	800589c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	2101      	movs	r1, #1
 8005842:	fa01 f303 	lsl.w	r3, r1, r3
 8005846:	041b      	lsls	r3, r3, #16
 8005848:	68f9      	ldr	r1, [r7, #12]
 800584a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800584e:	4313      	orrs	r3, r2
 8005850:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d119      	bne.n	800589c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	791b      	ldrb	r3, [r3, #4]
 8005882:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005884:	430b      	orrs	r3, r1
 8005886:	431a      	orrs	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	0159      	lsls	r1, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	440b      	add	r3, r1
 8005890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005894:	4619      	mov	r1, r3
 8005896:	4b05      	ldr	r3, [pc, #20]	; (80058ac <USB_ActivateEndpoint+0x10c>)
 8005898:	4313      	orrs	r3, r2
 800589a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	10008000 	.word	0x10008000

080058b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d161      	bne.n	8005990 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058e2:	d11f      	bne.n	8005924 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005902:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	0151      	lsls	r1, r2, #5
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	440a      	add	r2, r1
 800591a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005922:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	2101      	movs	r1, #1
 8005936:	fa01 f303 	lsl.w	r3, r1, r3
 800593a:	b29b      	uxth	r3, r3
 800593c:	43db      	mvns	r3, r3
 800593e:	68f9      	ldr	r1, [r7, #12]
 8005940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005944:	4013      	ands	r3, r2
 8005946:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	b29b      	uxth	r3, r3
 8005960:	43db      	mvns	r3, r3
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005968:	4013      	ands	r3, r2
 800596a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	0159      	lsls	r1, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	440b      	add	r3, r1
 8005982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005986:	4619      	mov	r1, r3
 8005988:	4b35      	ldr	r3, [pc, #212]	; (8005a60 <USB_DeactivateEndpoint+0x1b0>)
 800598a:	4013      	ands	r3, r2
 800598c:	600b      	str	r3, [r1, #0]
 800598e:	e060      	b.n	8005a52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059a6:	d11f      	bne.n	80059e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	2101      	movs	r1, #1
 80059fa:	fa01 f303 	lsl.w	r3, r1, r3
 80059fe:	041b      	lsls	r3, r3, #16
 8005a00:	43db      	mvns	r3, r3
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a08:	4013      	ands	r3, r2
 8005a0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a22:	041b      	lsls	r3, r3, #16
 8005a24:	43db      	mvns	r3, r3
 8005a26:	68f9      	ldr	r1, [r7, #12]
 8005a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	0159      	lsls	r1, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	440b      	add	r3, r1
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <USB_DeactivateEndpoint+0x1b4>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	ec337800 	.word	0xec337800
 8005a64:	eff37800 	.word	0xeff37800

08005a68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	f040 8163 	bne.w	8005d50 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d132      	bne.n	8005af8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	0159      	lsls	r1, r3, #5
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	440b      	add	r3, r1
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aac:	4619      	mov	r1, r3
 8005aae:	4ba5      	ldr	r3, [pc, #660]	; (8005d44 <USB_EPStartXfer+0x2dc>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ace:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ad2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	691a      	ldr	r2, [r3, #16]
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	0159      	lsls	r1, r3, #5
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	440b      	add	r3, r1
 8005aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aee:	4619      	mov	r1, r3
 8005af0:	4b95      	ldr	r3, [pc, #596]	; (8005d48 <USB_EPStartXfer+0x2e0>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	610b      	str	r3, [r1, #16]
 8005af6:	e074      	b.n	8005be2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	691a      	ldr	r2, [r3, #16]
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	0159      	lsls	r1, r3, #5
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	440b      	add	r3, r1
 8005b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b12:	4619      	mov	r1, r3
 8005b14:	4b8c      	ldr	r3, [pc, #560]	; (8005d48 <USB_EPStartXfer+0x2e0>)
 8005b16:	4013      	ands	r3, r2
 8005b18:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	0159      	lsls	r1, r3, #5
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	440b      	add	r3, r1
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	4619      	mov	r1, r3
 8005b36:	4b83      	ldr	r3, [pc, #524]	; (8005d44 <USB_EPStartXfer+0x2dc>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	6999      	ldr	r1, [r3, #24]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	440b      	add	r3, r1
 8005b54:	1e59      	subs	r1, r3, #1
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b5e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b60:	4b7a      	ldr	r3, [pc, #488]	; (8005d4c <USB_EPStartXfer+0x2e4>)
 8005b62:	400b      	ands	r3, r1
 8005b64:	69b9      	ldr	r1, [r7, #24]
 8005b66:	0148      	lsls	r0, r1, #5
 8005b68:	69f9      	ldr	r1, [r7, #28]
 8005b6a:	4401      	add	r1, r0
 8005b6c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b70:	4313      	orrs	r3, r2
 8005b72:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	691a      	ldr	r2, [r3, #16]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b8a:	69b9      	ldr	r1, [r7, #24]
 8005b8c:	0148      	lsls	r0, r1, #5
 8005b8e:	69f9      	ldr	r1, [r7, #28]
 8005b90:	4401      	add	r1, r0
 8005b92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b96:	4313      	orrs	r3, r2
 8005b98:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	791b      	ldrb	r3, [r3, #4]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d11f      	bne.n	8005be2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005bc0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005be0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d14b      	bne.n	8005c80 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d009      	beq.n	8005c04 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	791b      	ldrb	r3, [r3, #4]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d128      	bne.n	8005c5e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d110      	bne.n	8005c3e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	e00f      	b.n	8005c5e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e137      	b.n	8005ef0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c9e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	791b      	ldrb	r3, [r3, #4]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d015      	beq.n	8005cd4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 811f 	beq.w	8005ef0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc8:	69f9      	ldr	r1, [r7, #28]
 8005cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	634b      	str	r3, [r1, #52]	; 0x34
 8005cd2:	e10d      	b.n	8005ef0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d110      	bne.n	8005d06 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	e00f      	b.n	8005d26 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	69fa      	ldr	r2, [r7, #28]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d24:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6919      	ldr	r1, [r3, #16]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	781a      	ldrb	r2, [r3, #0]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	b298      	uxth	r0, r3
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	4603      	mov	r3, r0
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 faea 	bl	8006314 <USB_WritePacket>
 8005d40:	e0d6      	b.n	8005ef0 <USB_EPStartXfer+0x488>
 8005d42:	bf00      	nop
 8005d44:	e007ffff 	.word	0xe007ffff
 8005d48:	fff80000 	.word	0xfff80000
 8005d4c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	0159      	lsls	r1, r3, #5
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	440b      	add	r3, r1
 8005d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4b63      	ldr	r3, [pc, #396]	; (8005efc <USB_EPStartXfer+0x494>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	0159      	lsls	r1, r3, #5
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	440b      	add	r3, r1
 8005d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4b5c      	ldr	r3, [pc, #368]	; (8005f00 <USB_EPStartXfer+0x498>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d123      	bne.n	8005de4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005db2:	69b9      	ldr	r1, [r7, #24]
 8005db4:	0148      	lsls	r0, r1, #5
 8005db6:	69f9      	ldr	r1, [r7, #28]
 8005db8:	4401      	add	r1, r0
 8005dba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ddc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005de0:	6113      	str	r3, [r2, #16]
 8005de2:	e037      	b.n	8005e54 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	699a      	ldr	r2, [r3, #24]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	4413      	add	r3, r2
 8005dee:	1e5a      	subs	r2, r3, #1
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	8afa      	ldrh	r2, [r7, #22]
 8005e00:	fb03 f202 	mul.w	r2, r3, r2
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	8afb      	ldrh	r3, [r7, #22]
 8005e18:	04d9      	lsls	r1, r3, #19
 8005e1a:	4b3a      	ldr	r3, [pc, #232]	; (8005f04 <USB_EPStartXfer+0x49c>)
 8005e1c:	400b      	ands	r3, r1
 8005e1e:	69b9      	ldr	r1, [r7, #24]
 8005e20:	0148      	lsls	r0, r1, #5
 8005e22:	69f9      	ldr	r1, [r7, #28]
 8005e24:	4401      	add	r1, r0
 8005e26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e44:	69b9      	ldr	r1, [r7, #24]
 8005e46:	0148      	lsls	r0, r1, #5
 8005e48:	69f9      	ldr	r1, [r7, #28]
 8005e4a:	4401      	add	r1, r0
 8005e4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e50:	4313      	orrs	r3, r2
 8005e52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d10d      	bne.n	8005e76 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	6919      	ldr	r1, [r3, #16]
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e72:	460a      	mov	r2, r1
 8005e74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	791b      	ldrb	r3, [r3, #4]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d128      	bne.n	8005ed0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d110      	bne.n	8005eb0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	e00f      	b.n	8005ed0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	69fa      	ldr	r2, [r7, #28]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ece:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005eee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3720      	adds	r7, #32
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	fff80000 	.word	0xfff80000
 8005f00:	e007ffff 	.word	0xe007ffff
 8005f04:	1ff80000 	.word	0x1ff80000

08005f08 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	4613      	mov	r3, r2
 8005f14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	785b      	ldrb	r3, [r3, #1]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	f040 80ce 	bne.w	80060c6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d132      	bne.n	8005f98 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	0159      	lsls	r1, r3, #5
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	440b      	add	r3, r1
 8005f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4b9a      	ldr	r3, [pc, #616]	; (80061b8 <USB_EP0StartXfer+0x2b0>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f80:	691a      	ldr	r2, [r3, #16]
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	0159      	lsls	r1, r3, #5
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	440b      	add	r3, r1
 8005f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4b8a      	ldr	r3, [pc, #552]	; (80061bc <USB_EP0StartXfer+0x2b4>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	610b      	str	r3, [r1, #16]
 8005f96:	e04e      	b.n	8006036 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa4:	691a      	ldr	r2, [r3, #16]
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	0159      	lsls	r1, r3, #5
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	440b      	add	r3, r1
 8005fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4b81      	ldr	r3, [pc, #516]	; (80061bc <USB_EP0StartXfer+0x2b4>)
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	0159      	lsls	r1, r3, #5
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	440b      	add	r3, r1
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4b78      	ldr	r3, [pc, #480]	; (80061b8 <USB_EP0StartXfer+0x2b0>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	699a      	ldr	r2, [r3, #24]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d903      	bls.n	8005ff0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800600e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006026:	6939      	ldr	r1, [r7, #16]
 8006028:	0148      	lsls	r0, r1, #5
 800602a:	6979      	ldr	r1, [r7, #20]
 800602c:	4401      	add	r1, r0
 800602e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006032:	4313      	orrs	r3, r2
 8006034:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d11e      	bne.n	800607a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d009      	beq.n	8006058 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	461a      	mov	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006072:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	e097      	b.n	80061aa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006094:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006098:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 8083 	beq.w	80061aa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	f003 030f 	and.w	r3, r3, #15
 80060b4:	2101      	movs	r1, #1
 80060b6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ba:	6979      	ldr	r1, [r7, #20]
 80060bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060c0:	4313      	orrs	r3, r2
 80060c2:	634b      	str	r3, [r1, #52]	; 0x34
 80060c4:	e071      	b.n	80061aa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	0159      	lsls	r1, r3, #5
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	440b      	add	r3, r1
 80060dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e0:	4619      	mov	r1, r3
 80060e2:	4b36      	ldr	r3, [pc, #216]	; (80061bc <USB_EP0StartXfer+0x2b4>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f4:	691a      	ldr	r2, [r3, #16]
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	0159      	lsls	r1, r3, #5
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	440b      	add	r3, r1
 80060fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006102:	4619      	mov	r1, r3
 8006104:	4b2c      	ldr	r3, [pc, #176]	; (80061b8 <USB_EP0StartXfer+0x2b0>)
 8006106:	4013      	ands	r3, r2
 8006108:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	440a      	add	r2, r1
 8006138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006140:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614e:	691a      	ldr	r2, [r3, #16]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006158:	6939      	ldr	r1, [r7, #16]
 800615a:	0148      	lsls	r0, r1, #5
 800615c:	6979      	ldr	r1, [r7, #20]
 800615e:	4401      	add	r1, r0
 8006160:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006164:	4313      	orrs	r3, r2
 8006166:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d10d      	bne.n	800618a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	6919      	ldr	r1, [r3, #16]
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006186:	460a      	mov	r2, r1
 8006188:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	e007ffff 	.word	0xe007ffff
 80061bc:	fff80000 	.word	0xfff80000

080061c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d14a      	bne.n	8006274 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f6:	f040 8086 	bne.w	8006306 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	7812      	ldrb	r2, [r2, #0]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	440a      	add	r2, r1
 8006214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006218:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800621c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	7812      	ldrb	r2, [r2, #0]
 8006232:	0151      	lsls	r1, r2, #5
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	440a      	add	r2, r1
 8006238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006240:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3301      	adds	r3, #1
 8006246:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f242 7210 	movw	r2, #10000	; 0x2710
 800624e:	4293      	cmp	r3, r2
 8006250:	d902      	bls.n	8006258 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	75fb      	strb	r3, [r7, #23]
          break;
 8006256:	e056      	b.n	8006306 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800626c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006270:	d0e7      	beq.n	8006242 <USB_EPStopXfer+0x82>
 8006272:	e048      	b.n	8006306 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006288:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800628c:	d13b      	bne.n	8006306 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	7812      	ldrb	r2, [r2, #0]
 80062a2:	0151      	lsls	r1, r2, #5
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	440a      	add	r2, r1
 80062a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	7812      	ldrb	r2, [r2, #0]
 80062c6:	0151      	lsls	r1, r2, #5
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	440a      	add	r2, r1
 80062cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	3301      	adds	r3, #1
 80062da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f242 7210 	movw	r2, #10000	; 0x2710
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d902      	bls.n	80062ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	75fb      	strb	r3, [r7, #23]
          break;
 80062ea:	e00c      	b.n	8006306 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006304:	d0e7      	beq.n	80062d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
}
 8006308:	4618      	mov	r0, r3
 800630a:	371c      	adds	r7, #28
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006314:	b480      	push	{r7}
 8006316:	b089      	sub	sp, #36	; 0x24
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	4611      	mov	r1, r2
 8006320:	461a      	mov	r2, r3
 8006322:	460b      	mov	r3, r1
 8006324:	71fb      	strb	r3, [r7, #7]
 8006326:	4613      	mov	r3, r2
 8006328:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006332:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006336:	2b00      	cmp	r3, #0
 8006338:	d123      	bne.n	8006382 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800633a:	88bb      	ldrh	r3, [r7, #4]
 800633c:	3303      	adds	r3, #3
 800633e:	089b      	lsrs	r3, r3, #2
 8006340:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006342:	2300      	movs	r3, #0
 8006344:	61bb      	str	r3, [r7, #24]
 8006346:	e018      	b.n	800637a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	031a      	lsls	r2, r3, #12
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	4413      	add	r3, r2
 8006350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006354:	461a      	mov	r2, r3
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	3301      	adds	r3, #1
 8006360:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	3301      	adds	r3, #1
 8006366:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	3301      	adds	r3, #1
 800636c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	3301      	adds	r3, #1
 8006372:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	3301      	adds	r3, #1
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	429a      	cmp	r2, r3
 8006380:	d3e2      	bcc.n	8006348 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3724      	adds	r7, #36	; 0x24
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006390:	b480      	push	{r7}
 8006392:	b08b      	sub	sp, #44	; 0x2c
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	4613      	mov	r3, r2
 800639c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063a6:	88fb      	ldrh	r3, [r7, #6]
 80063a8:	089b      	lsrs	r3, r3, #2
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	f003 0303 	and.w	r3, r3, #3
 80063b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063b6:	2300      	movs	r3, #0
 80063b8:	623b      	str	r3, [r7, #32]
 80063ba:	e014      	b.n	80063e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	3301      	adds	r3, #1
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	3301      	adds	r3, #1
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	3301      	adds	r3, #1
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	3301      	adds	r3, #1
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	3301      	adds	r3, #1
 80063e4:	623b      	str	r3, [r7, #32]
 80063e6:	6a3a      	ldr	r2, [r7, #32]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d3e6      	bcc.n	80063bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063ee:	8bfb      	ldrh	r3, [r7, #30]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01e      	beq.n	8006432 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063fe:	461a      	mov	r2, r3
 8006400:	f107 0310 	add.w	r3, r7, #16
 8006404:	6812      	ldr	r2, [r2, #0]
 8006406:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	fa22 f303 	lsr.w	r3, r2, r3
 8006414:	b2da      	uxtb	r2, r3
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	701a      	strb	r2, [r3, #0]
      i++;
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	3301      	adds	r3, #1
 800641e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	3301      	adds	r3, #1
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006426:	8bfb      	ldrh	r3, [r7, #30]
 8006428:	3b01      	subs	r3, #1
 800642a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800642c:	8bfb      	ldrh	r3, [r7, #30]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1ea      	bne.n	8006408 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006434:	4618      	mov	r0, r3
 8006436:	372c      	adds	r7, #44	; 0x2c
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	785b      	ldrb	r3, [r3, #1]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d12c      	bne.n	80064b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	db12      	blt.n	8006494 <USB_EPSetStall+0x54>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00f      	beq.n	8006494 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	440a      	add	r2, r1
 800648a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006492:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	e02b      	b.n	800650e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	db12      	blt.n	80064ee <USB_EPSetStall+0xae>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00f      	beq.n	80064ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	0151      	lsls	r1, r2, #5
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	440a      	add	r2, r1
 8006504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006508:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800650c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d128      	bne.n	800658a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	440a      	add	r2, r1
 800654e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006552:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006556:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	791b      	ldrb	r3, [r3, #4]
 800655c:	2b03      	cmp	r3, #3
 800655e:	d003      	beq.n	8006568 <USB_EPClearStall+0x4c>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	791b      	ldrb	r3, [r3, #4]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d138      	bne.n	80065da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	0151      	lsls	r1, r2, #5
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	440a      	add	r2, r1
 800657e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	e027      	b.n	80065da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	791b      	ldrb	r3, [r3, #4]
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d003      	beq.n	80065ba <USB_EPClearStall+0x9e>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	791b      	ldrb	r3, [r3, #4]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d10f      	bne.n	80065da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	0151      	lsls	r1, r2, #5
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	440a      	add	r2, r1
 80065d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006606:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800660a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800661c:	68f9      	ldr	r1, [r7, #12]
 800661e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006622:	4313      	orrs	r3, r2
 8006624:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800664e:	f023 0303 	bic.w	r3, r3, #3
 8006652:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006662:	f023 0302 	bic.w	r3, r3, #2
 8006666:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006676:	b480      	push	{r7}
 8006678:	b085      	sub	sp, #20
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006690:	f023 0303 	bic.w	r3, r3, #3
 8006694:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066a4:	f043 0302 	orr.w	r3, r3, #2
 80066a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4013      	ands	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066d0:	68fb      	ldr	r3, [r7, #12]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fa:	69db      	ldr	r3, [r3, #28]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	4013      	ands	r3, r2
 8006700:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	0c1b      	lsrs	r3, r3, #16
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006712:	b480      	push	{r7}
 8006714:	b085      	sub	sp, #20
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	4013      	ands	r3, r2
 8006734:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	b29b      	uxth	r3, r3
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006746:	b480      	push	{r7}
 8006748:	b085      	sub	sp, #20
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	460b      	mov	r3, r1
 8006750:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006756:	78fb      	ldrb	r3, [r7, #3]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	4013      	ands	r3, r2
 8006772:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006774:	68bb      	ldr	r3, [r7, #8]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006782:	b480      	push	{r7}
 8006784:	b087      	sub	sp, #28
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	460b      	mov	r3, r1
 800678c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	f003 030f 	and.w	r3, r3, #15
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	fa22 f303 	lsr.w	r3, r2, r3
 80067b2:	01db      	lsls	r3, r3, #7
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4013      	ands	r3, r2
 80067ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067d0:	68bb      	ldr	r3, [r7, #8]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	f003 0301 	and.w	r3, r3, #1
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
	...

080067fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006816:	4619      	mov	r1, r3
 8006818:	4b09      	ldr	r3, [pc, #36]	; (8006840 <USB_ActivateSetup+0x44>)
 800681a:	4013      	ands	r3, r2
 800681c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800682c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006830:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	fffff800 	.word	0xfffff800

08006844 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	460b      	mov	r3, r1
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	333c      	adds	r3, #60	; 0x3c
 800685a:	3304      	adds	r3, #4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	4a26      	ldr	r2, [pc, #152]	; (80068fc <USB_EP0_OutStart+0xb8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d90a      	bls.n	800687e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006878:	d101      	bne.n	800687e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	e037      	b.n	80068ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006884:	461a      	mov	r2, r3
 8006886:	2300      	movs	r3, #0
 8006888:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800689c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ac:	f043 0318 	orr.w	r3, r3, #24
 80068b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80068c6:	7afb      	ldrb	r3, [r7, #11]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d10f      	bne.n	80068ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d2:	461a      	mov	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80068ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	4f54300a 	.word	0x4f54300a

08006900 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a13      	ldr	r2, [pc, #76]	; (8006964 <USB_CoreReset+0x64>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d901      	bls.n	800691e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e01b      	b.n	8006956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	daf2      	bge.n	800690c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f043 0201 	orr.w	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3301      	adds	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4a09      	ldr	r2, [pc, #36]	; (8006964 <USB_CoreReset+0x64>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d901      	bls.n	8006948 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e006      	b.n	8006956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b01      	cmp	r3, #1
 8006952:	d0f0      	beq.n	8006936 <USB_CoreReset+0x36>

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	00030d40 	.word	0x00030d40

08006968 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006974:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006978:	f002 fd12 	bl	80093a0 <malloc>
 800697c:	4603      	mov	r3, r0
 800697e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	32b0      	adds	r2, #176	; 0xb0
 8006990:	2100      	movs	r1, #0
 8006992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006996:	2302      	movs	r3, #2
 8006998:	e0d4      	b.n	8006b44 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800699a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800699e:	2100      	movs	r1, #0
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f002 fdb9 	bl	8009518 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	32b0      	adds	r2, #176	; 0xb0
 80069b0:	68f9      	ldr	r1, [r7, #12]
 80069b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	32b0      	adds	r2, #176	; 0xb0
 80069c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	7c1b      	ldrb	r3, [r3, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d138      	bne.n	8006a44 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069d2:	4b5e      	ldr	r3, [pc, #376]	; (8006b4c <USBD_CDC_Init+0x1e4>)
 80069d4:	7819      	ldrb	r1, [r3, #0]
 80069d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069da:	2202      	movs	r2, #2
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f002 fb3c 	bl	800905a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80069e2:	4b5a      	ldr	r3, [pc, #360]	; (8006b4c <USBD_CDC_Init+0x1e4>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	f003 020f 	and.w	r2, r3, #15
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	440b      	add	r3, r1
 80069f6:	3324      	adds	r3, #36	; 0x24
 80069f8:	2201      	movs	r2, #1
 80069fa:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069fc:	4b54      	ldr	r3, [pc, #336]	; (8006b50 <USBD_CDC_Init+0x1e8>)
 80069fe:	7819      	ldrb	r1, [r3, #0]
 8006a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a04:	2202      	movs	r2, #2
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f002 fb27 	bl	800905a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a0c:	4b50      	ldr	r3, [pc, #320]	; (8006b50 <USBD_CDC_Init+0x1e8>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	f003 020f 	and.w	r2, r3, #15
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	440b      	add	r3, r1
 8006a20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a24:	2201      	movs	r2, #1
 8006a26:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a28:	4b4a      	ldr	r3, [pc, #296]	; (8006b54 <USBD_CDC_Init+0x1ec>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	f003 020f 	and.w	r2, r3, #15
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	3326      	adds	r3, #38	; 0x26
 8006a3e:	2210      	movs	r2, #16
 8006a40:	801a      	strh	r2, [r3, #0]
 8006a42:	e035      	b.n	8006ab0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a44:	4b41      	ldr	r3, [pc, #260]	; (8006b4c <USBD_CDC_Init+0x1e4>)
 8006a46:	7819      	ldrb	r1, [r3, #0]
 8006a48:	2340      	movs	r3, #64	; 0x40
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f002 fb04 	bl	800905a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a52:	4b3e      	ldr	r3, [pc, #248]	; (8006b4c <USBD_CDC_Init+0x1e4>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	f003 020f 	and.w	r2, r3, #15
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	3324      	adds	r3, #36	; 0x24
 8006a68:	2201      	movs	r2, #1
 8006a6a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a6c:	4b38      	ldr	r3, [pc, #224]	; (8006b50 <USBD_CDC_Init+0x1e8>)
 8006a6e:	7819      	ldrb	r1, [r3, #0]
 8006a70:	2340      	movs	r3, #64	; 0x40
 8006a72:	2202      	movs	r2, #2
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f002 faf0 	bl	800905a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a7a:	4b35      	ldr	r3, [pc, #212]	; (8006b50 <USBD_CDC_Init+0x1e8>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	f003 020f 	and.w	r2, r3, #15
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	4613      	mov	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	440b      	add	r3, r1
 8006a8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a92:	2201      	movs	r2, #1
 8006a94:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a96:	4b2f      	ldr	r3, [pc, #188]	; (8006b54 <USBD_CDC_Init+0x1ec>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	f003 020f 	and.w	r2, r3, #15
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	3326      	adds	r3, #38	; 0x26
 8006aac:	2210      	movs	r2, #16
 8006aae:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ab0:	4b28      	ldr	r3, [pc, #160]	; (8006b54 <USBD_CDC_Init+0x1ec>)
 8006ab2:	7819      	ldrb	r1, [r3, #0]
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f002 face 	bl	800905a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006abe:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <USBD_CDC_Init+0x1ec>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	f003 020f 	and.w	r2, r3, #15
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	3324      	adds	r3, #36	; 0x24
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	33b0      	adds	r3, #176	; 0xb0
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e018      	b.n	8006b44 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	7c1b      	ldrb	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	; (8006b50 <USBD_CDC_Init+0x1e8>)
 8006b1c:	7819      	ldrb	r1, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f002 fb85 	bl	8009238 <USBD_LL_PrepareReceive>
 8006b2e:	e008      	b.n	8006b42 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b30:	4b07      	ldr	r3, [pc, #28]	; (8006b50 <USBD_CDC_Init+0x1e8>)
 8006b32:	7819      	ldrb	r1, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b3a:	2340      	movs	r3, #64	; 0x40
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f002 fb7b 	bl	8009238 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	20000093 	.word	0x20000093
 8006b50:	20000094 	.word	0x20000094
 8006b54:	20000095 	.word	0x20000095

08006b58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b64:	4b3a      	ldr	r3, [pc, #232]	; (8006c50 <USBD_CDC_DeInit+0xf8>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f002 fa9b 	bl	80090a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b70:	4b37      	ldr	r3, [pc, #220]	; (8006c50 <USBD_CDC_DeInit+0xf8>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f003 020f 	and.w	r2, r3, #15
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	3324      	adds	r3, #36	; 0x24
 8006b86:	2200      	movs	r2, #0
 8006b88:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b8a:	4b32      	ldr	r3, [pc, #200]	; (8006c54 <USBD_CDC_DeInit+0xfc>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f002 fa88 	bl	80090a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006b96:	4b2f      	ldr	r3, [pc, #188]	; (8006c54 <USBD_CDC_DeInit+0xfc>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	f003 020f 	and.w	r2, r3, #15
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	440b      	add	r3, r1
 8006baa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bae:	2200      	movs	r2, #0
 8006bb0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006bb2:	4b29      	ldr	r3, [pc, #164]	; (8006c58 <USBD_CDC_DeInit+0x100>)
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f002 fa74 	bl	80090a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006bbe:	4b26      	ldr	r3, [pc, #152]	; (8006c58 <USBD_CDC_DeInit+0x100>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	f003 020f 	and.w	r2, r3, #15
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	3324      	adds	r3, #36	; 0x24
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006bd8:	4b1f      	ldr	r3, [pc, #124]	; (8006c58 <USBD_CDC_DeInit+0x100>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	f003 020f 	and.w	r2, r3, #15
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	440b      	add	r3, r1
 8006bec:	3326      	adds	r3, #38	; 0x26
 8006bee:	2200      	movs	r2, #0
 8006bf0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	32b0      	adds	r2, #176	; 0xb0
 8006bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01f      	beq.n	8006c44 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	33b0      	adds	r3, #176	; 0xb0
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	32b0      	adds	r2, #176	; 0xb0
 8006c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f002 fbc2 	bl	80093b0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	32b0      	adds	r2, #176	; 0xb0
 8006c36:	2100      	movs	r1, #0
 8006c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20000093 	.word	0x20000093
 8006c54:	20000094 	.word	0x20000094
 8006c58:	20000095 	.word	0x20000095

08006c5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	32b0      	adds	r2, #176	; 0xb0
 8006c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e0bf      	b.n	8006e0c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d050      	beq.n	8006d3a <USBD_CDC_Setup+0xde>
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	f040 80af 	bne.w	8006dfc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	88db      	ldrh	r3, [r3, #6]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d03a      	beq.n	8006d1c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	b25b      	sxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	da1b      	bge.n	8006ce8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	33b0      	adds	r3, #176	; 0xb0
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006cc6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	88d2      	ldrh	r2, [r2, #6]
 8006ccc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	88db      	ldrh	r3, [r3, #6]
 8006cd2:	2b07      	cmp	r3, #7
 8006cd4:	bf28      	it	cs
 8006cd6:	2307      	movcs	r3, #7
 8006cd8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	89fa      	ldrh	r2, [r7, #14]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 fd6d 	bl	80087c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006ce6:	e090      	b.n	8006e0a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	785a      	ldrb	r2, [r3, #1]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	88db      	ldrh	r3, [r3, #6]
 8006cf6:	2b3f      	cmp	r3, #63	; 0x3f
 8006cf8:	d803      	bhi.n	8006d02 <USBD_CDC_Setup+0xa6>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	88db      	ldrh	r3, [r3, #6]
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	e000      	b.n	8006d04 <USBD_CDC_Setup+0xa8>
 8006d02:	2240      	movs	r2, #64	; 0x40
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006d0a:	6939      	ldr	r1, [r7, #16]
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006d12:	461a      	mov	r2, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 fd7f 	bl	8008818 <USBD_CtlPrepareRx>
      break;
 8006d1a:	e076      	b.n	8006e0a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	33b0      	adds	r3, #176	; 0xb0
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	7850      	ldrb	r0, [r2, #1]
 8006d32:	2200      	movs	r2, #0
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	4798      	blx	r3
      break;
 8006d38:	e067      	b.n	8006e0a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b0b      	cmp	r3, #11
 8006d40:	d851      	bhi.n	8006de6 <USBD_CDC_Setup+0x18a>
 8006d42:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <USBD_CDC_Setup+0xec>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006d79 	.word	0x08006d79
 8006d4c:	08006df5 	.word	0x08006df5
 8006d50:	08006de7 	.word	0x08006de7
 8006d54:	08006de7 	.word	0x08006de7
 8006d58:	08006de7 	.word	0x08006de7
 8006d5c:	08006de7 	.word	0x08006de7
 8006d60:	08006de7 	.word	0x08006de7
 8006d64:	08006de7 	.word	0x08006de7
 8006d68:	08006de7 	.word	0x08006de7
 8006d6c:	08006de7 	.word	0x08006de7
 8006d70:	08006da3 	.word	0x08006da3
 8006d74:	08006dcd 	.word	0x08006dcd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d107      	bne.n	8006d94 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d84:	f107 030a 	add.w	r3, r7, #10
 8006d88:	2202      	movs	r2, #2
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 fd17 	bl	80087c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d92:	e032      	b.n	8006dfa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 fca1 	bl	80086de <USBD_CtlError>
            ret = USBD_FAIL;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	75fb      	strb	r3, [r7, #23]
          break;
 8006da0:	e02b      	b.n	8006dfa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d107      	bne.n	8006dbe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006dae:	f107 030d 	add.w	r3, r7, #13
 8006db2:	2201      	movs	r2, #1
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 fd02 	bl	80087c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dbc:	e01d      	b.n	8006dfa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fc8c 	bl	80086de <USBD_CtlError>
            ret = USBD_FAIL;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006dca:	e016      	b.n	8006dfa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d00f      	beq.n	8006df8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fc7f 	bl	80086de <USBD_CtlError>
            ret = USBD_FAIL;
 8006de0:	2303      	movs	r3, #3
 8006de2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006de4:	e008      	b.n	8006df8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 fc78 	bl	80086de <USBD_CtlError>
          ret = USBD_FAIL;
 8006dee:	2303      	movs	r3, #3
 8006df0:	75fb      	strb	r3, [r7, #23]
          break;
 8006df2:	e002      	b.n	8006dfa <USBD_CDC_Setup+0x19e>
          break;
 8006df4:	bf00      	nop
 8006df6:	e008      	b.n	8006e0a <USBD_CDC_Setup+0x1ae>
          break;
 8006df8:	bf00      	nop
      }
      break;
 8006dfa:	e006      	b.n	8006e0a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 fc6d 	bl	80086de <USBD_CtlError>
      ret = USBD_FAIL;
 8006e04:	2303      	movs	r3, #3
 8006e06:	75fb      	strb	r3, [r7, #23]
      break;
 8006e08:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	32b0      	adds	r2, #176	; 0xb0
 8006e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e065      	b.n	8006f0a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	32b0      	adds	r2, #176	; 0xb0
 8006e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	f003 020f 	and.w	r2, r3, #15
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	3318      	adds	r3, #24
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d02f      	beq.n	8006ec8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	f003 020f 	and.w	r2, r3, #15
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	3318      	adds	r3, #24
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	f003 010f 	and.w	r1, r3, #15
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	460b      	mov	r3, r1
 8006e88:	00db      	lsls	r3, r3, #3
 8006e8a:	440b      	add	r3, r1
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4403      	add	r3, r0
 8006e90:	3348      	adds	r3, #72	; 0x48
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e98:	fb01 f303 	mul.w	r3, r1, r3
 8006e9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d112      	bne.n	8006ec8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006ea2:	78fb      	ldrb	r3, [r7, #3]
 8006ea4:	f003 020f 	and.w	r2, r3, #15
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	440b      	add	r3, r1
 8006eb4:	3318      	adds	r3, #24
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006eba:	78f9      	ldrb	r1, [r7, #3]
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f002 f998 	bl	80091f6 <USBD_LL_Transmit>
 8006ec6:	e01f      	b.n	8006f08 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	33b0      	adds	r3, #176	; 0xb0
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d010      	beq.n	8006f08 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	33b0      	adds	r3, #176	; 0xb0
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f04:	78fa      	ldrb	r2, [r7, #3]
 8006f06:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	32b0      	adds	r2, #176	; 0xb0
 8006f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	32b0      	adds	r2, #176	; 0xb0
 8006f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e01a      	b.n	8006f7a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f44:	78fb      	ldrb	r3, [r7, #3]
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f002 f996 	bl	800927a <USBD_LL_GetRxDataSize>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	33b0      	adds	r3, #176	; 0xb0
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f74:	4611      	mov	r1, r2
 8006f76:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	32b0      	adds	r2, #176	; 0xb0
 8006f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e025      	b.n	8006ff0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	33b0      	adds	r3, #176	; 0xb0
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d01a      	beq.n	8006fee <USBD_CDC_EP0_RxReady+0x6c>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fbe:	2bff      	cmp	r3, #255	; 0xff
 8006fc0:	d015      	beq.n	8006fee <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	33b0      	adds	r3, #176	; 0xb0
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006fda:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fe2:	b292      	uxth	r2, r2
 8006fe4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	22ff      	movs	r2, #255	; 0xff
 8006fea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007000:	2182      	movs	r1, #130	; 0x82
 8007002:	4818      	ldr	r0, [pc, #96]	; (8007064 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007004:	f000 fd09 	bl	8007a1a <USBD_GetEpDesc>
 8007008:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800700a:	2101      	movs	r1, #1
 800700c:	4815      	ldr	r0, [pc, #84]	; (8007064 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800700e:	f000 fd04 	bl	8007a1a <USBD_GetEpDesc>
 8007012:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007014:	2181      	movs	r1, #129	; 0x81
 8007016:	4813      	ldr	r0, [pc, #76]	; (8007064 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007018:	f000 fcff 	bl	8007a1a <USBD_GetEpDesc>
 800701c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	2210      	movs	r2, #16
 8007028:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d006      	beq.n	800703e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	2200      	movs	r2, #0
 8007034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007038:	711a      	strb	r2, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d006      	beq.n	8007052 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800704c:	711a      	strb	r2, [r3, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2243      	movs	r2, #67	; 0x43
 8007056:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007058:	4b02      	ldr	r3, [pc, #8]	; (8007064 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000050 	.word	0x20000050

08007068 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007070:	2182      	movs	r1, #130	; 0x82
 8007072:	4818      	ldr	r0, [pc, #96]	; (80070d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007074:	f000 fcd1 	bl	8007a1a <USBD_GetEpDesc>
 8007078:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800707a:	2101      	movs	r1, #1
 800707c:	4815      	ldr	r0, [pc, #84]	; (80070d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800707e:	f000 fccc 	bl	8007a1a <USBD_GetEpDesc>
 8007082:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007084:	2181      	movs	r1, #129	; 0x81
 8007086:	4813      	ldr	r0, [pc, #76]	; (80070d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007088:	f000 fcc7 	bl	8007a1a <USBD_GetEpDesc>
 800708c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2210      	movs	r2, #16
 8007098:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d006      	beq.n	80070ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	2200      	movs	r2, #0
 80070a4:	711a      	strb	r2, [r3, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f042 0202 	orr.w	r2, r2, #2
 80070ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d006      	beq.n	80070c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	711a      	strb	r2, [r3, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f042 0202 	orr.w	r2, r2, #2
 80070c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2243      	movs	r2, #67	; 0x43
 80070c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070c8:	4b02      	ldr	r3, [pc, #8]	; (80070d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000050 	.word	0x20000050

080070d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070e0:	2182      	movs	r1, #130	; 0x82
 80070e2:	4818      	ldr	r0, [pc, #96]	; (8007144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070e4:	f000 fc99 	bl	8007a1a <USBD_GetEpDesc>
 80070e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070ea:	2101      	movs	r1, #1
 80070ec:	4815      	ldr	r0, [pc, #84]	; (8007144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070ee:	f000 fc94 	bl	8007a1a <USBD_GetEpDesc>
 80070f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070f4:	2181      	movs	r1, #129	; 0x81
 80070f6:	4813      	ldr	r0, [pc, #76]	; (8007144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070f8:	f000 fc8f 	bl	8007a1a <USBD_GetEpDesc>
 80070fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2210      	movs	r2, #16
 8007108:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d006      	beq.n	800711e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2200      	movs	r2, #0
 8007114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007118:	711a      	strb	r2, [r3, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d006      	beq.n	8007132 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800712c:	711a      	strb	r2, [r3, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2243      	movs	r2, #67	; 0x43
 8007136:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007138:	4b02      	ldr	r3, [pc, #8]	; (8007144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800713a:	4618      	mov	r0, r3
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000050 	.word	0x20000050

08007148 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	220a      	movs	r2, #10
 8007154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007156:	4b03      	ldr	r3, [pc, #12]	; (8007164 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	2000000c 	.word	0x2000000c

08007168 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007178:	2303      	movs	r3, #3
 800717a:	e009      	b.n	8007190 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	33b0      	adds	r3, #176	; 0xb0
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	32b0      	adds	r2, #176	; 0xb0
 80071b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071be:	2303      	movs	r3, #3
 80071c0:	e008      	b.n	80071d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	32b0      	adds	r2, #176	; 0xb0
 80071f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007200:	2303      	movs	r3, #3
 8007202:	e004      	b.n	800720e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
	...

0800721c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	32b0      	adds	r2, #176	; 0xb0
 800722e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007232:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	32b0      	adds	r2, #176	; 0xb0
 800723e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007246:	2303      	movs	r3, #3
 8007248:	e018      	b.n	800727c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	7c1b      	ldrb	r3, [r3, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10a      	bne.n	8007268 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007252:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <USBD_CDC_ReceivePacket+0x68>)
 8007254:	7819      	ldrb	r1, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800725c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 ffe9 	bl	8009238 <USBD_LL_PrepareReceive>
 8007266:	e008      	b.n	800727a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007268:	4b06      	ldr	r3, [pc, #24]	; (8007284 <USBD_CDC_ReceivePacket+0x68>)
 800726a:	7819      	ldrb	r1, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007272:	2340      	movs	r3, #64	; 0x40
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 ffdf 	bl	8009238 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20000094 	.word	0x20000094

08007288 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4613      	mov	r3, r2
 8007294:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800729c:	2303      	movs	r3, #3
 800729e:	e01f      	b.n	80072e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	79fa      	ldrb	r2, [r7, #7]
 80072d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f001 fe59 	bl	8008f8c <USBD_LL_Init>
 80072da:	4603      	mov	r3, r0
 80072dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80072de:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e025      	b.n	800734c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	32ae      	adds	r2, #174	; 0xae
 8007312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00f      	beq.n	800733c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	32ae      	adds	r2, #174	; 0xae
 8007326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	f107 020e 	add.w	r2, r7, #14
 8007330:	4610      	mov	r0, r2
 8007332:	4798      	blx	r3
 8007334:	4602      	mov	r2, r0
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 fe61 	bl	8009024 <USBD_LL_Start>
 8007362:	4603      	mov	r3, r0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007374:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007376:	4618      	mov	r0, r3
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007398:	2b00      	cmp	r3, #0
 800739a:	d009      	beq.n	80073b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	78fa      	ldrb	r2, [r7, #3]
 80073a6:	4611      	mov	r1, r2
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	4798      	blx	r3
 80073ac:	4603      	mov	r3, r0
 80073ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	78fa      	ldrb	r2, [r7, #3]
 80073d4:	4611      	mov	r1, r2
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	4798      	blx	r3
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80073e0:	2303      	movs	r3, #3
 80073e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	4618      	mov	r0, r3
 8007402:	f001 f932 	bl	800866a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007414:	461a      	mov	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007422:	f003 031f 	and.w	r3, r3, #31
 8007426:	2b02      	cmp	r3, #2
 8007428:	d01a      	beq.n	8007460 <USBD_LL_SetupStage+0x72>
 800742a:	2b02      	cmp	r3, #2
 800742c:	d822      	bhi.n	8007474 <USBD_LL_SetupStage+0x86>
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <USBD_LL_SetupStage+0x4a>
 8007432:	2b01      	cmp	r3, #1
 8007434:	d00a      	beq.n	800744c <USBD_LL_SetupStage+0x5e>
 8007436:	e01d      	b.n	8007474 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fb5f 	bl	8007b04 <USBD_StdDevReq>
 8007446:	4603      	mov	r3, r0
 8007448:	73fb      	strb	r3, [r7, #15]
      break;
 800744a:	e020      	b.n	800748e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fbc7 	bl	8007be8 <USBD_StdItfReq>
 800745a:	4603      	mov	r3, r0
 800745c:	73fb      	strb	r3, [r7, #15]
      break;
 800745e:	e016      	b.n	800748e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fc29 	bl	8007cc0 <USBD_StdEPReq>
 800746e:	4603      	mov	r3, r0
 8007470:	73fb      	strb	r3, [r7, #15]
      break;
 8007472:	e00c      	b.n	800748e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800747a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800747e:	b2db      	uxtb	r3, r3
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 fe2e 	bl	80090e4 <USBD_LL_StallEP>
 8007488:	4603      	mov	r3, r0
 800748a:	73fb      	strb	r3, [r7, #15]
      break;
 800748c:	bf00      	nop
  }

  return ret;
 800748e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	460b      	mov	r3, r1
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80074aa:	7afb      	ldrb	r3, [r7, #11]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d16e      	bne.n	800758e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80074b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074be:	2b03      	cmp	r3, #3
 80074c0:	f040 8098 	bne.w	80075f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d913      	bls.n	80074f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	1ad2      	subs	r2, r2, r3
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	4293      	cmp	r3, r2
 80074e8:	bf28      	it	cs
 80074ea:	4613      	movcs	r3, r2
 80074ec:	461a      	mov	r2, r3
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f001 f9ae 	bl	8008852 <USBD_CtlContinueRx>
 80074f6:	e07d      	b.n	80075f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074fe:	f003 031f 	and.w	r3, r3, #31
 8007502:	2b02      	cmp	r3, #2
 8007504:	d014      	beq.n	8007530 <USBD_LL_DataOutStage+0x98>
 8007506:	2b02      	cmp	r3, #2
 8007508:	d81d      	bhi.n	8007546 <USBD_LL_DataOutStage+0xae>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <USBD_LL_DataOutStage+0x7c>
 800750e:	2b01      	cmp	r3, #1
 8007510:	d003      	beq.n	800751a <USBD_LL_DataOutStage+0x82>
 8007512:	e018      	b.n	8007546 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	75bb      	strb	r3, [r7, #22]
            break;
 8007518:	e018      	b.n	800754c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007520:	b2db      	uxtb	r3, r3
 8007522:	4619      	mov	r1, r3
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 fa5e 	bl	80079e6 <USBD_CoreFindIF>
 800752a:	4603      	mov	r3, r0
 800752c:	75bb      	strb	r3, [r7, #22]
            break;
 800752e:	e00d      	b.n	800754c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007536:	b2db      	uxtb	r3, r3
 8007538:	4619      	mov	r1, r3
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 fa60 	bl	8007a00 <USBD_CoreFindEP>
 8007540:	4603      	mov	r3, r0
 8007542:	75bb      	strb	r3, [r7, #22]
            break;
 8007544:	e002      	b.n	800754c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	75bb      	strb	r3, [r7, #22]
            break;
 800754a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800754c:	7dbb      	ldrb	r3, [r7, #22]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d119      	bne.n	8007586 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b03      	cmp	r3, #3
 800755c:	d113      	bne.n	8007586 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800755e:	7dba      	ldrb	r2, [r7, #22]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	32ae      	adds	r2, #174	; 0xae
 8007564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00b      	beq.n	8007586 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800756e:	7dba      	ldrb	r2, [r7, #22]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007576:	7dba      	ldrb	r2, [r7, #22]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	32ae      	adds	r2, #174	; 0xae
 800757c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f001 f974 	bl	8008874 <USBD_CtlSendStatus>
 800758c:	e032      	b.n	80075f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800758e:	7afb      	ldrb	r3, [r7, #11]
 8007590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007594:	b2db      	uxtb	r3, r3
 8007596:	4619      	mov	r1, r3
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 fa31 	bl	8007a00 <USBD_CoreFindEP>
 800759e:	4603      	mov	r3, r0
 80075a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075a2:	7dbb      	ldrb	r3, [r7, #22]
 80075a4:	2bff      	cmp	r3, #255	; 0xff
 80075a6:	d025      	beq.n	80075f4 <USBD_LL_DataOutStage+0x15c>
 80075a8:	7dbb      	ldrb	r3, [r7, #22]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d122      	bne.n	80075f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d117      	bne.n	80075ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80075ba:	7dba      	ldrb	r2, [r7, #22]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	32ae      	adds	r2, #174	; 0xae
 80075c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00f      	beq.n	80075ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80075ca:	7dba      	ldrb	r2, [r7, #22]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80075d2:	7dba      	ldrb	r2, [r7, #22]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	32ae      	adds	r2, #174	; 0xae
 80075d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	7afa      	ldrb	r2, [r7, #11]
 80075e0:	4611      	mov	r1, r2
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	4798      	blx	r3
 80075e6:	4603      	mov	r3, r0
 80075e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	e000      	b.n	80075f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b086      	sub	sp, #24
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	460b      	mov	r3, r1
 8007608:	607a      	str	r2, [r7, #4]
 800760a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800760c:	7afb      	ldrb	r3, [r7, #11]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d16f      	bne.n	80076f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3314      	adds	r3, #20
 8007616:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800761e:	2b02      	cmp	r3, #2
 8007620:	d15a      	bne.n	80076d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	429a      	cmp	r2, r3
 800762c:	d914      	bls.n	8007658 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	1ad2      	subs	r2, r2, r3
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	461a      	mov	r2, r3
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f001 f8d6 	bl	80087f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800764a:	2300      	movs	r3, #0
 800764c:	2200      	movs	r2, #0
 800764e:	2100      	movs	r1, #0
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f001 fdf1 	bl	8009238 <USBD_LL_PrepareReceive>
 8007656:	e03f      	b.n	80076d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	429a      	cmp	r2, r3
 8007662:	d11c      	bne.n	800769e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800766c:	429a      	cmp	r2, r3
 800766e:	d316      	bcc.n	800769e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800767a:	429a      	cmp	r2, r3
 800767c:	d20f      	bcs.n	800769e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800767e:	2200      	movs	r2, #0
 8007680:	2100      	movs	r1, #0
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f001 f8b7 	bl	80087f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007690:	2300      	movs	r3, #0
 8007692:	2200      	movs	r2, #0
 8007694:	2100      	movs	r1, #0
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f001 fdce 	bl	8009238 <USBD_LL_PrepareReceive>
 800769c:	e01c      	b.n	80076d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d10f      	bne.n	80076ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d009      	beq.n	80076ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ca:	2180      	movs	r1, #128	; 0x80
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f001 fd09 	bl	80090e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f001 f8e1 	bl	800889a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d03a      	beq.n	8007758 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f7ff fe42 	bl	800736c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80076f0:	e032      	b.n	8007758 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80076f2:	7afb      	ldrb	r3, [r7, #11]
 80076f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	4619      	mov	r1, r3
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f97f 	bl	8007a00 <USBD_CoreFindEP>
 8007702:	4603      	mov	r3, r0
 8007704:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	2bff      	cmp	r3, #255	; 0xff
 800770a:	d025      	beq.n	8007758 <USBD_LL_DataInStage+0x15a>
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d122      	bne.n	8007758 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b03      	cmp	r3, #3
 800771c:	d11c      	bne.n	8007758 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800771e:	7dfa      	ldrb	r2, [r7, #23]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	32ae      	adds	r2, #174	; 0xae
 8007724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d014      	beq.n	8007758 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800772e:	7dfa      	ldrb	r2, [r7, #23]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007736:	7dfa      	ldrb	r2, [r7, #23]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	32ae      	adds	r2, #174	; 0xae
 800773c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	7afa      	ldrb	r2, [r7, #11]
 8007744:	4611      	mov	r1, r2
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	4798      	blx	r3
 800774a:	4603      	mov	r3, r0
 800774c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800774e:	7dbb      	ldrb	r3, [r7, #22]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007754:	7dbb      	ldrb	r3, [r7, #22]
 8007756:	e000      	b.n	800775a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779a:	2b00      	cmp	r3, #0
 800779c:	d014      	beq.n	80077c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00e      	beq.n	80077c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6852      	ldr	r2, [r2, #4]
 80077b6:	b2d2      	uxtb	r2, r2
 80077b8:	4611      	mov	r1, r2
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80077c4:	2303      	movs	r3, #3
 80077c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077c8:	2340      	movs	r3, #64	; 0x40
 80077ca:	2200      	movs	r2, #0
 80077cc:	2100      	movs	r1, #0
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f001 fc43 	bl	800905a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2240      	movs	r2, #64	; 0x40
 80077e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077e4:	2340      	movs	r3, #64	; 0x40
 80077e6:	2200      	movs	r2, #0
 80077e8:	2180      	movs	r1, #128	; 0x80
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 fc35 	bl	800905a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2240      	movs	r2, #64	; 0x40
 80077fa:	621a      	str	r2, [r3, #32]

  return ret;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	460b      	mov	r3, r1
 8007810:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	78fa      	ldrb	r2, [r7, #3]
 8007816:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007834:	b2da      	uxtb	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2204      	movs	r2, #4
 8007840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b04      	cmp	r3, #4
 8007864:	d106      	bne.n	8007874 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800786c:	b2da      	uxtb	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b03      	cmp	r3, #3
 8007894:	d110      	bne.n	80078b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00b      	beq.n	80078b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d005      	beq.n	80078b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b082      	sub	sp, #8
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	460b      	mov	r3, r1
 80078cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	32ae      	adds	r2, #174	; 0xae
 80078d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e01c      	b.n	800791e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d115      	bne.n	800791c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	32ae      	adds	r2, #174	; 0xae
 80078fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00b      	beq.n	800791c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	32ae      	adds	r2, #174	; 0xae
 800790e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	78fa      	ldrb	r2, [r7, #3]
 8007916:	4611      	mov	r1, r2
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	32ae      	adds	r2, #174	; 0xae
 800793c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007944:	2303      	movs	r3, #3
 8007946:	e01c      	b.n	8007982 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b03      	cmp	r3, #3
 8007952:	d115      	bne.n	8007980 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	32ae      	adds	r2, #174	; 0xae
 800795e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	32ae      	adds	r2, #174	; 0xae
 8007972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	78fa      	ldrb	r2, [r7, #3]
 800797a:	4611      	mov	r1, r2
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00e      	beq.n	80079dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6852      	ldr	r2, [r2, #4]
 80079ca:	b2d2      	uxtb	r2, r2
 80079cc:	4611      	mov	r1, r2
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	4798      	blx	r3
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80079d8:	2303      	movs	r3, #3
 80079da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b086      	sub	sp, #24
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	460b      	mov	r3, r1
 8007a24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	885b      	ldrh	r3, [r3, #2]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d920      	bls.n	8007a84 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a4a:	e013      	b.n	8007a74 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a4c:	f107 030a 	add.w	r3, r7, #10
 8007a50:	4619      	mov	r1, r3
 8007a52:	6978      	ldr	r0, [r7, #20]
 8007a54:	f000 f81b 	bl	8007a8e <USBD_GetNextDesc>
 8007a58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2b05      	cmp	r3, #5
 8007a60:	d108      	bne.n	8007a74 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	789b      	ldrb	r3, [r3, #2]
 8007a6a:	78fa      	ldrb	r2, [r7, #3]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d008      	beq.n	8007a82 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	885b      	ldrh	r3, [r3, #2]
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	897b      	ldrh	r3, [r7, #10]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d8e5      	bhi.n	8007a4c <USBD_GetEpDesc+0x32>
 8007a80:	e000      	b.n	8007a84 <USBD_GetEpDesc+0x6a>
          break;
 8007a82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007a84:	693b      	ldr	r3, [r7, #16]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	881a      	ldrh	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	4413      	add	r3, r2
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007aba:	68fb      	ldr	r3, [r7, #12]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	3301      	adds	r3, #1
 8007ade:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ae6:	8a3b      	ldrh	r3, [r7, #16]
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	b21a      	sxth	r2, r3
 8007aec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	b21b      	sxth	r3, r3
 8007af4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007af6:	89fb      	ldrh	r3, [r7, #14]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	371c      	adds	r7, #28
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b1a:	2b40      	cmp	r3, #64	; 0x40
 8007b1c:	d005      	beq.n	8007b2a <USBD_StdDevReq+0x26>
 8007b1e:	2b40      	cmp	r3, #64	; 0x40
 8007b20:	d857      	bhi.n	8007bd2 <USBD_StdDevReq+0xce>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00f      	beq.n	8007b46 <USBD_StdDevReq+0x42>
 8007b26:	2b20      	cmp	r3, #32
 8007b28:	d153      	bne.n	8007bd2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	32ae      	adds	r2, #174	; 0xae
 8007b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	4798      	blx	r3
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]
      break;
 8007b44:	e04a      	b.n	8007bdc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	785b      	ldrb	r3, [r3, #1]
 8007b4a:	2b09      	cmp	r3, #9
 8007b4c:	d83b      	bhi.n	8007bc6 <USBD_StdDevReq+0xc2>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <USBD_StdDevReq+0x50>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007ba9 	.word	0x08007ba9
 8007b58:	08007bbd 	.word	0x08007bbd
 8007b5c:	08007bc7 	.word	0x08007bc7
 8007b60:	08007bb3 	.word	0x08007bb3
 8007b64:	08007bc7 	.word	0x08007bc7
 8007b68:	08007b87 	.word	0x08007b87
 8007b6c:	08007b7d 	.word	0x08007b7d
 8007b70:	08007bc7 	.word	0x08007bc7
 8007b74:	08007b9f 	.word	0x08007b9f
 8007b78:	08007b91 	.word	0x08007b91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fa3c 	bl	8007ffc <USBD_GetDescriptor>
          break;
 8007b84:	e024      	b.n	8007bd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fbcb 	bl	8008324 <USBD_SetAddress>
          break;
 8007b8e:	e01f      	b.n	8007bd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fc0a 	bl	80083ac <USBD_SetConfig>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73fb      	strb	r3, [r7, #15]
          break;
 8007b9c:	e018      	b.n	8007bd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fcad 	bl	8008500 <USBD_GetConfig>
          break;
 8007ba6:	e013      	b.n	8007bd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fcde 	bl	800856c <USBD_GetStatus>
          break;
 8007bb0:	e00e      	b.n	8007bd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fd0d 	bl	80085d4 <USBD_SetFeature>
          break;
 8007bba:	e009      	b.n	8007bd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fd31 	bl	8008626 <USBD_ClrFeature>
          break;
 8007bc4:	e004      	b.n	8007bd0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fd88 	bl	80086de <USBD_CtlError>
          break;
 8007bce:	bf00      	nop
      }
      break;
 8007bd0:	e004      	b.n	8007bdc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fd82 	bl	80086de <USBD_CtlError>
      break;
 8007bda:	bf00      	nop
  }

  return ret;
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop

08007be8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bfe:	2b40      	cmp	r3, #64	; 0x40
 8007c00:	d005      	beq.n	8007c0e <USBD_StdItfReq+0x26>
 8007c02:	2b40      	cmp	r3, #64	; 0x40
 8007c04:	d852      	bhi.n	8007cac <USBD_StdItfReq+0xc4>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <USBD_StdItfReq+0x26>
 8007c0a:	2b20      	cmp	r3, #32
 8007c0c:	d14e      	bne.n	8007cac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	3b01      	subs	r3, #1
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d840      	bhi.n	8007c9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	889b      	ldrh	r3, [r3, #4]
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d836      	bhi.n	8007c94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	889b      	ldrh	r3, [r3, #4]
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff fed9 	bl	80079e6 <USBD_CoreFindIF>
 8007c34:	4603      	mov	r3, r0
 8007c36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	2bff      	cmp	r3, #255	; 0xff
 8007c3c:	d01d      	beq.n	8007c7a <USBD_StdItfReq+0x92>
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d11a      	bne.n	8007c7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c44:	7bba      	ldrb	r2, [r7, #14]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	32ae      	adds	r2, #174	; 0xae
 8007c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00f      	beq.n	8007c74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c54:	7bba      	ldrb	r2, [r7, #14]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c5c:	7bba      	ldrb	r2, [r7, #14]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	32ae      	adds	r2, #174	; 0xae
 8007c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	4798      	blx	r3
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c72:	e004      	b.n	8007c7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c74:	2303      	movs	r3, #3
 8007c76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c78:	e001      	b.n	8007c7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	88db      	ldrh	r3, [r3, #6]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d110      	bne.n	8007ca8 <USBD_StdItfReq+0xc0>
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10d      	bne.n	8007ca8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fdf1 	bl	8008874 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c92:	e009      	b.n	8007ca8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fd21 	bl	80086de <USBD_CtlError>
          break;
 8007c9c:	e004      	b.n	8007ca8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fd1c 	bl	80086de <USBD_CtlError>
          break;
 8007ca6:	e000      	b.n	8007caa <USBD_StdItfReq+0xc2>
          break;
 8007ca8:	bf00      	nop
      }
      break;
 8007caa:	e004      	b.n	8007cb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fd15 	bl	80086de <USBD_CtlError>
      break;
 8007cb4:	bf00      	nop
  }

  return ret;
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	889b      	ldrh	r3, [r3, #4]
 8007cd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cdc:	2b40      	cmp	r3, #64	; 0x40
 8007cde:	d007      	beq.n	8007cf0 <USBD_StdEPReq+0x30>
 8007ce0:	2b40      	cmp	r3, #64	; 0x40
 8007ce2:	f200 817f 	bhi.w	8007fe4 <USBD_StdEPReq+0x324>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d02a      	beq.n	8007d40 <USBD_StdEPReq+0x80>
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	f040 817a 	bne.w	8007fe4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff fe83 	bl	8007a00 <USBD_CoreFindEP>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cfe:	7b7b      	ldrb	r3, [r7, #13]
 8007d00:	2bff      	cmp	r3, #255	; 0xff
 8007d02:	f000 8174 	beq.w	8007fee <USBD_StdEPReq+0x32e>
 8007d06:	7b7b      	ldrb	r3, [r7, #13]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f040 8170 	bne.w	8007fee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d0e:	7b7a      	ldrb	r2, [r7, #13]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d16:	7b7a      	ldrb	r2, [r7, #13]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	32ae      	adds	r2, #174	; 0xae
 8007d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 8163 	beq.w	8007fee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007d28:	7b7a      	ldrb	r2, [r7, #13]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	32ae      	adds	r2, #174	; 0xae
 8007d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d3e:	e156      	b.n	8007fee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	785b      	ldrb	r3, [r3, #1]
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d008      	beq.n	8007d5a <USBD_StdEPReq+0x9a>
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	f300 8145 	bgt.w	8007fd8 <USBD_StdEPReq+0x318>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 809b 	beq.w	8007e8a <USBD_StdEPReq+0x1ca>
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d03c      	beq.n	8007dd2 <USBD_StdEPReq+0x112>
 8007d58:	e13e      	b.n	8007fd8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d002      	beq.n	8007d6c <USBD_StdEPReq+0xac>
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d016      	beq.n	8007d98 <USBD_StdEPReq+0xd8>
 8007d6a:	e02c      	b.n	8007dc6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00d      	beq.n	8007d8e <USBD_StdEPReq+0xce>
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	2b80      	cmp	r3, #128	; 0x80
 8007d76:	d00a      	beq.n	8007d8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f001 f9b1 	bl	80090e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d82:	2180      	movs	r1, #128	; 0x80
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 f9ad 	bl	80090e4 <USBD_LL_StallEP>
 8007d8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d8c:	e020      	b.n	8007dd0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fca4 	bl	80086de <USBD_CtlError>
              break;
 8007d96:	e01b      	b.n	8007dd0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	885b      	ldrh	r3, [r3, #2]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10e      	bne.n	8007dbe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00b      	beq.n	8007dbe <USBD_StdEPReq+0xfe>
 8007da6:	7bbb      	ldrb	r3, [r7, #14]
 8007da8:	2b80      	cmp	r3, #128	; 0x80
 8007daa:	d008      	beq.n	8007dbe <USBD_StdEPReq+0xfe>
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	88db      	ldrh	r3, [r3, #6]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d104      	bne.n	8007dbe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 f993 	bl	80090e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fd58 	bl	8008874 <USBD_CtlSendStatus>

              break;
 8007dc4:	e004      	b.n	8007dd0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fc88 	bl	80086de <USBD_CtlError>
              break;
 8007dce:	bf00      	nop
          }
          break;
 8007dd0:	e107      	b.n	8007fe2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d002      	beq.n	8007de4 <USBD_StdEPReq+0x124>
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d016      	beq.n	8007e10 <USBD_StdEPReq+0x150>
 8007de2:	e04b      	b.n	8007e7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00d      	beq.n	8007e06 <USBD_StdEPReq+0x146>
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	2b80      	cmp	r3, #128	; 0x80
 8007dee:	d00a      	beq.n	8007e06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 f975 	bl	80090e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dfa:	2180      	movs	r1, #128	; 0x80
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f001 f971 	bl	80090e4 <USBD_LL_StallEP>
 8007e02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e04:	e040      	b.n	8007e88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fc68 	bl	80086de <USBD_CtlError>
              break;
 8007e0e:	e03b      	b.n	8007e88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	885b      	ldrh	r3, [r3, #2]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d136      	bne.n	8007e86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d004      	beq.n	8007e2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 f97b 	bl	8009122 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fd21 	bl	8008874 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff fde2 	bl	8007a00 <USBD_CoreFindEP>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e40:	7b7b      	ldrb	r3, [r7, #13]
 8007e42:	2bff      	cmp	r3, #255	; 0xff
 8007e44:	d01f      	beq.n	8007e86 <USBD_StdEPReq+0x1c6>
 8007e46:	7b7b      	ldrb	r3, [r7, #13]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d11c      	bne.n	8007e86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e4c:	7b7a      	ldrb	r2, [r7, #13]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e54:	7b7a      	ldrb	r2, [r7, #13]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	32ae      	adds	r2, #174	; 0xae
 8007e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d010      	beq.n	8007e86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e64:	7b7a      	ldrb	r2, [r7, #13]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	32ae      	adds	r2, #174	; 0xae
 8007e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	4798      	blx	r3
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007e7a:	e004      	b.n	8007e86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fc2d 	bl	80086de <USBD_CtlError>
              break;
 8007e84:	e000      	b.n	8007e88 <USBD_StdEPReq+0x1c8>
              break;
 8007e86:	bf00      	nop
          }
          break;
 8007e88:	e0ab      	b.n	8007fe2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d002      	beq.n	8007e9c <USBD_StdEPReq+0x1dc>
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d032      	beq.n	8007f00 <USBD_StdEPReq+0x240>
 8007e9a:	e097      	b.n	8007fcc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e9c:	7bbb      	ldrb	r3, [r7, #14]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <USBD_StdEPReq+0x1f2>
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	2b80      	cmp	r3, #128	; 0x80
 8007ea6:	d004      	beq.n	8007eb2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fc17 	bl	80086de <USBD_CtlError>
                break;
 8007eb0:	e091      	b.n	8007fd6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	da0b      	bge.n	8007ed2 <USBD_StdEPReq+0x212>
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
 8007ebc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	3310      	adds	r3, #16
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	4413      	add	r3, r2
 8007ece:	3304      	adds	r3, #4
 8007ed0:	e00b      	b.n	8007eea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
 8007ed4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	3304      	adds	r3, #4
 8007eea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fc61 	bl	80087c0 <USBD_CtlSendData>
              break;
 8007efe:	e06a      	b.n	8007fd6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	da11      	bge.n	8007f2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	f003 020f 	and.w	r2, r3, #15
 8007f0e:	6879      	ldr	r1, [r7, #4]
 8007f10:	4613      	mov	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4413      	add	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	440b      	add	r3, r1
 8007f1a:	3324      	adds	r3, #36	; 0x24
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d117      	bne.n	8007f52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fbda 	bl	80086de <USBD_CtlError>
                  break;
 8007f2a:	e054      	b.n	8007fd6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
 8007f2e:	f003 020f 	and.w	r2, r3, #15
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d104      	bne.n	8007f52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fbc7 	bl	80086de <USBD_CtlError>
                  break;
 8007f50:	e041      	b.n	8007fd6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	da0b      	bge.n	8007f72 <USBD_StdEPReq+0x2b2>
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f60:	4613      	mov	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	3310      	adds	r3, #16
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	3304      	adds	r3, #4
 8007f70:	e00b      	b.n	8007f8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f78:	4613      	mov	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	4413      	add	r3, r2
 8007f88:	3304      	adds	r3, #4
 8007f8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <USBD_StdEPReq+0x2d8>
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
 8007f94:	2b80      	cmp	r3, #128	; 0x80
 8007f96:	d103      	bne.n	8007fa0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	e00e      	b.n	8007fbe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 f8db 	bl	8009160 <USBD_LL_IsStallEP>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	601a      	str	r2, [r3, #0]
 8007fb6:	e002      	b.n	8007fbe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fbfb 	bl	80087c0 <USBD_CtlSendData>
              break;
 8007fca:	e004      	b.n	8007fd6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fb85 	bl	80086de <USBD_CtlError>
              break;
 8007fd4:	bf00      	nop
          }
          break;
 8007fd6:	e004      	b.n	8007fe2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fb7f 	bl	80086de <USBD_CtlError>
          break;
 8007fe0:	bf00      	nop
      }
      break;
 8007fe2:	e005      	b.n	8007ff0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fb79 	bl	80086de <USBD_CtlError>
      break;
 8007fec:	e000      	b.n	8007ff0 <USBD_StdEPReq+0x330>
      break;
 8007fee:	bf00      	nop
  }

  return ret;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800800a:	2300      	movs	r3, #0
 800800c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	885b      	ldrh	r3, [r3, #2]
 8008016:	0a1b      	lsrs	r3, r3, #8
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	2b0e      	cmp	r3, #14
 800801e:	f200 8152 	bhi.w	80082c6 <USBD_GetDescriptor+0x2ca>
 8008022:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <USBD_GetDescriptor+0x2c>)
 8008024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008028:	08008099 	.word	0x08008099
 800802c:	080080b1 	.word	0x080080b1
 8008030:	080080f1 	.word	0x080080f1
 8008034:	080082c7 	.word	0x080082c7
 8008038:	080082c7 	.word	0x080082c7
 800803c:	08008267 	.word	0x08008267
 8008040:	08008293 	.word	0x08008293
 8008044:	080082c7 	.word	0x080082c7
 8008048:	080082c7 	.word	0x080082c7
 800804c:	080082c7 	.word	0x080082c7
 8008050:	080082c7 	.word	0x080082c7
 8008054:	080082c7 	.word	0x080082c7
 8008058:	080082c7 	.word	0x080082c7
 800805c:	080082c7 	.word	0x080082c7
 8008060:	08008065 	.word	0x08008065
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	7c12      	ldrb	r2, [r2, #16]
 800807c:	f107 0108 	add.w	r1, r7, #8
 8008080:	4610      	mov	r0, r2
 8008082:	4798      	blx	r3
 8008084:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008086:	e126      	b.n	80082d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fb27 	bl	80086de <USBD_CtlError>
        err++;
 8008090:	7afb      	ldrb	r3, [r7, #11]
 8008092:	3301      	adds	r3, #1
 8008094:	72fb      	strb	r3, [r7, #11]
      break;
 8008096:	e11e      	b.n	80082d6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	7c12      	ldrb	r2, [r2, #16]
 80080a4:	f107 0108 	add.w	r1, r7, #8
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
 80080ac:	60f8      	str	r0, [r7, #12]
      break;
 80080ae:	e112      	b.n	80082d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	7c1b      	ldrb	r3, [r3, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10d      	bne.n	80080d4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c0:	f107 0208 	add.w	r2, r7, #8
 80080c4:	4610      	mov	r0, r2
 80080c6:	4798      	blx	r3
 80080c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3301      	adds	r3, #1
 80080ce:	2202      	movs	r2, #2
 80080d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080d2:	e100      	b.n	80082d6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080dc:	f107 0208 	add.w	r2, r7, #8
 80080e0:	4610      	mov	r0, r2
 80080e2:	4798      	blx	r3
 80080e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3301      	adds	r3, #1
 80080ea:	2202      	movs	r2, #2
 80080ec:	701a      	strb	r2, [r3, #0]
      break;
 80080ee:	e0f2      	b.n	80082d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	885b      	ldrh	r3, [r3, #2]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b05      	cmp	r3, #5
 80080f8:	f200 80ac 	bhi.w	8008254 <USBD_GetDescriptor+0x258>
 80080fc:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <USBD_GetDescriptor+0x108>)
 80080fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008102:	bf00      	nop
 8008104:	0800811d 	.word	0x0800811d
 8008108:	08008151 	.word	0x08008151
 800810c:	08008185 	.word	0x08008185
 8008110:	080081b9 	.word	0x080081b9
 8008114:	080081ed 	.word	0x080081ed
 8008118:	08008221 	.word	0x08008221
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00b      	beq.n	8008140 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	7c12      	ldrb	r2, [r2, #16]
 8008134:	f107 0108 	add.w	r1, r7, #8
 8008138:	4610      	mov	r0, r2
 800813a:	4798      	blx	r3
 800813c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800813e:	e091      	b.n	8008264 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 facb 	bl	80086de <USBD_CtlError>
            err++;
 8008148:	7afb      	ldrb	r3, [r7, #11]
 800814a:	3301      	adds	r3, #1
 800814c:	72fb      	strb	r3, [r7, #11]
          break;
 800814e:	e089      	b.n	8008264 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00b      	beq.n	8008174 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	7c12      	ldrb	r2, [r2, #16]
 8008168:	f107 0108 	add.w	r1, r7, #8
 800816c:	4610      	mov	r0, r2
 800816e:	4798      	blx	r3
 8008170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008172:	e077      	b.n	8008264 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fab1 	bl	80086de <USBD_CtlError>
            err++;
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	3301      	adds	r3, #1
 8008180:	72fb      	strb	r3, [r7, #11]
          break;
 8008182:	e06f      	b.n	8008264 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	7c12      	ldrb	r2, [r2, #16]
 800819c:	f107 0108 	add.w	r1, r7, #8
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081a6:	e05d      	b.n	8008264 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fa97 	bl	80086de <USBD_CtlError>
            err++;
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	3301      	adds	r3, #1
 80081b4:	72fb      	strb	r3, [r7, #11]
          break;
 80081b6:	e055      	b.n	8008264 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	7c12      	ldrb	r2, [r2, #16]
 80081d0:	f107 0108 	add.w	r1, r7, #8
 80081d4:	4610      	mov	r0, r2
 80081d6:	4798      	blx	r3
 80081d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081da:	e043      	b.n	8008264 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fa7d 	bl	80086de <USBD_CtlError>
            err++;
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	3301      	adds	r3, #1
 80081e8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ea:	e03b      	b.n	8008264 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	7c12      	ldrb	r2, [r2, #16]
 8008204:	f107 0108 	add.w	r1, r7, #8
 8008208:	4610      	mov	r0, r2
 800820a:	4798      	blx	r3
 800820c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800820e:	e029      	b.n	8008264 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fa63 	bl	80086de <USBD_CtlError>
            err++;
 8008218:	7afb      	ldrb	r3, [r7, #11]
 800821a:	3301      	adds	r3, #1
 800821c:	72fb      	strb	r3, [r7, #11]
          break;
 800821e:	e021      	b.n	8008264 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	7c12      	ldrb	r2, [r2, #16]
 8008238:	f107 0108 	add.w	r1, r7, #8
 800823c:	4610      	mov	r0, r2
 800823e:	4798      	blx	r3
 8008240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008242:	e00f      	b.n	8008264 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa49 	bl	80086de <USBD_CtlError>
            err++;
 800824c:	7afb      	ldrb	r3, [r7, #11]
 800824e:	3301      	adds	r3, #1
 8008250:	72fb      	strb	r3, [r7, #11]
          break;
 8008252:	e007      	b.n	8008264 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa41 	bl	80086de <USBD_CtlError>
          err++;
 800825c:	7afb      	ldrb	r3, [r7, #11]
 800825e:	3301      	adds	r3, #1
 8008260:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008262:	bf00      	nop
      }
      break;
 8008264:	e037      	b.n	80082d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	7c1b      	ldrb	r3, [r3, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d109      	bne.n	8008282 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008276:	f107 0208 	add.w	r2, r7, #8
 800827a:	4610      	mov	r0, r2
 800827c:	4798      	blx	r3
 800827e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008280:	e029      	b.n	80082d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fa2a 	bl	80086de <USBD_CtlError>
        err++;
 800828a:	7afb      	ldrb	r3, [r7, #11]
 800828c:	3301      	adds	r3, #1
 800828e:	72fb      	strb	r3, [r7, #11]
      break;
 8008290:	e021      	b.n	80082d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	7c1b      	ldrb	r3, [r3, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10d      	bne.n	80082b6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a2:	f107 0208 	add.w	r2, r7, #8
 80082a6:	4610      	mov	r0, r2
 80082a8:	4798      	blx	r3
 80082aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	3301      	adds	r3, #1
 80082b0:	2207      	movs	r2, #7
 80082b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082b4:	e00f      	b.n	80082d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fa10 	bl	80086de <USBD_CtlError>
        err++;
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	3301      	adds	r3, #1
 80082c2:	72fb      	strb	r3, [r7, #11]
      break;
 80082c4:	e007      	b.n	80082d6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fa08 	bl	80086de <USBD_CtlError>
      err++;
 80082ce:	7afb      	ldrb	r3, [r7, #11]
 80082d0:	3301      	adds	r3, #1
 80082d2:	72fb      	strb	r3, [r7, #11]
      break;
 80082d4:	bf00      	nop
  }

  if (err != 0U)
 80082d6:	7afb      	ldrb	r3, [r7, #11]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d11e      	bne.n	800831a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	88db      	ldrh	r3, [r3, #6]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d016      	beq.n	8008312 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80082e4:	893b      	ldrh	r3, [r7, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00e      	beq.n	8008308 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	88da      	ldrh	r2, [r3, #6]
 80082ee:	893b      	ldrh	r3, [r7, #8]
 80082f0:	4293      	cmp	r3, r2
 80082f2:	bf28      	it	cs
 80082f4:	4613      	movcs	r3, r2
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082fa:	893b      	ldrh	r3, [r7, #8]
 80082fc:	461a      	mov	r2, r3
 80082fe:	68f9      	ldr	r1, [r7, #12]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fa5d 	bl	80087c0 <USBD_CtlSendData>
 8008306:	e009      	b.n	800831c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f9e7 	bl	80086de <USBD_CtlError>
 8008310:	e004      	b.n	800831c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 faae 	bl	8008874 <USBD_CtlSendStatus>
 8008318:	e000      	b.n	800831c <USBD_GetDescriptor+0x320>
    return;
 800831a:	bf00      	nop
  }
}
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop

08008324 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	889b      	ldrh	r3, [r3, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d131      	bne.n	800839a <USBD_SetAddress+0x76>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	88db      	ldrh	r3, [r3, #6]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d12d      	bne.n	800839a <USBD_SetAddress+0x76>
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	885b      	ldrh	r3, [r3, #2]
 8008342:	2b7f      	cmp	r3, #127	; 0x7f
 8008344:	d829      	bhi.n	800839a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	885b      	ldrh	r3, [r3, #2]
 800834a:	b2db      	uxtb	r3, r3
 800834c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008350:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b03      	cmp	r3, #3
 800835c:	d104      	bne.n	8008368 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800835e:	6839      	ldr	r1, [r7, #0]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f9bc 	bl	80086de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008366:	e01d      	b.n	80083a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	7bfa      	ldrb	r2, [r7, #15]
 800836c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 ff1f 	bl	80091b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fa7a 	bl	8008874 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d004      	beq.n	8008390 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2202      	movs	r2, #2
 800838a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800838e:	e009      	b.n	80083a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008398:	e004      	b.n	80083a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f99e 	bl	80086de <USBD_CtlError>
  }
}
 80083a2:	bf00      	nop
 80083a4:	bf00      	nop
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	885b      	ldrh	r3, [r3, #2]
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	4b4e      	ldr	r3, [pc, #312]	; (80084fc <USBD_SetConfig+0x150>)
 80083c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083c4:	4b4d      	ldr	r3, [pc, #308]	; (80084fc <USBD_SetConfig+0x150>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d905      	bls.n	80083d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f985 	bl	80086de <USBD_CtlError>
    return USBD_FAIL;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e08c      	b.n	80084f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d002      	beq.n	80083ea <USBD_SetConfig+0x3e>
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d029      	beq.n	800843c <USBD_SetConfig+0x90>
 80083e8:	e075      	b.n	80084d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80083ea:	4b44      	ldr	r3, [pc, #272]	; (80084fc <USBD_SetConfig+0x150>)
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d020      	beq.n	8008434 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80083f2:	4b42      	ldr	r3, [pc, #264]	; (80084fc <USBD_SetConfig+0x150>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	461a      	mov	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083fc:	4b3f      	ldr	r3, [pc, #252]	; (80084fc <USBD_SetConfig+0x150>)
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7fe ffbd 	bl	8007382 <USBD_SetClassConfig>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d008      	beq.n	8008424 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f962 	bl	80086de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2202      	movs	r2, #2
 800841e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008422:	e065      	b.n	80084f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fa25 	bl	8008874 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2203      	movs	r2, #3
 800842e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008432:	e05d      	b.n	80084f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fa1d 	bl	8008874 <USBD_CtlSendStatus>
      break;
 800843a:	e059      	b.n	80084f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800843c:	4b2f      	ldr	r3, [pc, #188]	; (80084fc <USBD_SetConfig+0x150>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d112      	bne.n	800846a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2202      	movs	r2, #2
 8008448:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800844c:	4b2b      	ldr	r3, [pc, #172]	; (80084fc <USBD_SetConfig+0x150>)
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	461a      	mov	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008456:	4b29      	ldr	r3, [pc, #164]	; (80084fc <USBD_SetConfig+0x150>)
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7fe ffac 	bl	80073ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fa06 	bl	8008874 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008468:	e042      	b.n	80084f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800846a:	4b24      	ldr	r3, [pc, #144]	; (80084fc <USBD_SetConfig+0x150>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	429a      	cmp	r2, r3
 8008476:	d02a      	beq.n	80084ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7fe ff9a 	bl	80073ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008486:	4b1d      	ldr	r3, [pc, #116]	; (80084fc <USBD_SetConfig+0x150>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	461a      	mov	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008490:	4b1a      	ldr	r3, [pc, #104]	; (80084fc <USBD_SetConfig+0x150>)
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7fe ff73 	bl	8007382 <USBD_SetClassConfig>
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00f      	beq.n	80084c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f918 	bl	80086de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fe ff7f 	bl	80073ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084c4:	e014      	b.n	80084f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f9d4 	bl	8008874 <USBD_CtlSendStatus>
      break;
 80084cc:	e010      	b.n	80084f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f9d0 	bl	8008874 <USBD_CtlSendStatus>
      break;
 80084d4:	e00c      	b.n	80084f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f900 	bl	80086de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084de:	4b07      	ldr	r3, [pc, #28]	; (80084fc <USBD_SetConfig+0x150>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7fe ff68 	bl	80073ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80084ea:	2303      	movs	r3, #3
 80084ec:	73fb      	strb	r3, [r7, #15]
      break;
 80084ee:	bf00      	nop
  }

  return ret;
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20000370 	.word	0x20000370

08008500 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	88db      	ldrh	r3, [r3, #6]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d004      	beq.n	800851c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f8e2 	bl	80086de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800851a:	e023      	b.n	8008564 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b02      	cmp	r3, #2
 8008526:	dc02      	bgt.n	800852e <USBD_GetConfig+0x2e>
 8008528:	2b00      	cmp	r3, #0
 800852a:	dc03      	bgt.n	8008534 <USBD_GetConfig+0x34>
 800852c:	e015      	b.n	800855a <USBD_GetConfig+0x5a>
 800852e:	2b03      	cmp	r3, #3
 8008530:	d00b      	beq.n	800854a <USBD_GetConfig+0x4a>
 8008532:	e012      	b.n	800855a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	3308      	adds	r3, #8
 800853e:	2201      	movs	r2, #1
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f93c 	bl	80087c0 <USBD_CtlSendData>
        break;
 8008548:	e00c      	b.n	8008564 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3304      	adds	r3, #4
 800854e:	2201      	movs	r2, #1
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f934 	bl	80087c0 <USBD_CtlSendData>
        break;
 8008558:	e004      	b.n	8008564 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f8be 	bl	80086de <USBD_CtlError>
        break;
 8008562:	bf00      	nop
}
 8008564:	bf00      	nop
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857c:	b2db      	uxtb	r3, r3
 800857e:	3b01      	subs	r3, #1
 8008580:	2b02      	cmp	r3, #2
 8008582:	d81e      	bhi.n	80085c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	88db      	ldrh	r3, [r3, #6]
 8008588:	2b02      	cmp	r3, #2
 800858a:	d004      	beq.n	8008596 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f8a5 	bl	80086de <USBD_CtlError>
        break;
 8008594:	e01a      	b.n	80085cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d005      	beq.n	80085b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f043 0202 	orr.w	r2, r3, #2
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	330c      	adds	r3, #12
 80085b6:	2202      	movs	r2, #2
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f900 	bl	80087c0 <USBD_CtlSendData>
      break;
 80085c0:	e004      	b.n	80085cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f88a 	bl	80086de <USBD_CtlError>
      break;
 80085ca:	bf00      	nop
  }
}
 80085cc:	bf00      	nop
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	885b      	ldrh	r3, [r3, #2]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d107      	bne.n	80085f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f940 	bl	8008874 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80085f4:	e013      	b.n	800861e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	885b      	ldrh	r3, [r3, #2]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d10b      	bne.n	8008616 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	889b      	ldrh	r3, [r3, #4]
 8008602:	0a1b      	lsrs	r3, r3, #8
 8008604:	b29b      	uxth	r3, r3
 8008606:	b2da      	uxtb	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f930 	bl	8008874 <USBD_CtlSendStatus>
}
 8008614:	e003      	b.n	800861e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f860 	bl	80086de <USBD_CtlError>
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008636:	b2db      	uxtb	r3, r3
 8008638:	3b01      	subs	r3, #1
 800863a:	2b02      	cmp	r3, #2
 800863c:	d80b      	bhi.n	8008656 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	885b      	ldrh	r3, [r3, #2]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d10c      	bne.n	8008660 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f910 	bl	8008874 <USBD_CtlSendStatus>
      }
      break;
 8008654:	e004      	b.n	8008660 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f840 	bl	80086de <USBD_CtlError>
      break;
 800865e:	e000      	b.n	8008662 <USBD_ClrFeature+0x3c>
      break;
 8008660:	bf00      	nop
  }
}
 8008662:	bf00      	nop
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b084      	sub	sp, #16
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	781a      	ldrb	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3301      	adds	r3, #1
 8008684:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	781a      	ldrb	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3301      	adds	r3, #1
 8008692:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f7ff fa17 	bl	8007ac8 <SWAPBYTE>
 800869a:	4603      	mov	r3, r0
 800869c:	461a      	mov	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3301      	adds	r3, #1
 80086a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3301      	adds	r3, #1
 80086ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f7ff fa0a 	bl	8007ac8 <SWAPBYTE>
 80086b4:	4603      	mov	r3, r0
 80086b6:	461a      	mov	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3301      	adds	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3301      	adds	r3, #1
 80086c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f7ff f9fd 	bl	8007ac8 <SWAPBYTE>
 80086ce:	4603      	mov	r3, r0
 80086d0:	461a      	mov	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	80da      	strh	r2, [r3, #6]
}
 80086d6:	bf00      	nop
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086e8:	2180      	movs	r1, #128	; 0x80
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fcfa 	bl	80090e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086f0:	2100      	movs	r1, #0
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fcf6 	bl	80090e4 <USBD_LL_StallEP>
}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d036      	beq.n	8008784 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800871a:	6938      	ldr	r0, [r7, #16]
 800871c:	f000 f836 	bl	800878c <USBD_GetLen>
 8008720:	4603      	mov	r3, r0
 8008722:	3301      	adds	r3, #1
 8008724:	b29b      	uxth	r3, r3
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	b29a      	uxth	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	4413      	add	r3, r2
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	7812      	ldrb	r2, [r2, #0]
 8008738:	701a      	strb	r2, [r3, #0]
  idx++;
 800873a:	7dfb      	ldrb	r3, [r7, #23]
 800873c:	3301      	adds	r3, #1
 800873e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	4413      	add	r3, r2
 8008746:	2203      	movs	r2, #3
 8008748:	701a      	strb	r2, [r3, #0]
  idx++;
 800874a:	7dfb      	ldrb	r3, [r7, #23]
 800874c:	3301      	adds	r3, #1
 800874e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008750:	e013      	b.n	800877a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008752:	7dfb      	ldrb	r3, [r7, #23]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	4413      	add	r3, r2
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	7812      	ldrb	r2, [r2, #0]
 800875c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	3301      	adds	r3, #1
 8008762:	613b      	str	r3, [r7, #16]
    idx++;
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	3301      	adds	r3, #1
 8008768:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	4413      	add	r3, r2
 8008770:	2200      	movs	r2, #0
 8008772:	701a      	strb	r2, [r3, #0]
    idx++;
 8008774:	7dfb      	ldrb	r3, [r7, #23]
 8008776:	3301      	adds	r3, #1
 8008778:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e7      	bne.n	8008752 <USBD_GetString+0x52>
 8008782:	e000      	b.n	8008786 <USBD_GetString+0x86>
    return;
 8008784:	bf00      	nop
  }
}
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800879c:	e005      	b.n	80087aa <USBD_GetLen+0x1e>
  {
    len++;
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	3301      	adds	r3, #1
 80087a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	3301      	adds	r3, #1
 80087a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1f5      	bne.n	800879e <USBD_GetLen+0x12>
  }

  return len;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	2100      	movs	r1, #0
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 fd05 	bl	80091f6 <USBD_LL_Transmit>

  return USBD_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	2100      	movs	r1, #0
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f000 fcf4 	bl	80091f6 <USBD_LL_Transmit>

  return USBD_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2203      	movs	r2, #3
 8008828:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	2100      	movs	r1, #0
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 fcf8 	bl	8009238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	60f8      	str	r0, [r7, #12]
 800885a:	60b9      	str	r1, [r7, #8]
 800885c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	2100      	movs	r1, #0
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 fce7 	bl	8009238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2204      	movs	r2, #4
 8008880:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008884:	2300      	movs	r3, #0
 8008886:	2200      	movs	r2, #0
 8008888:	2100      	movs	r1, #0
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fcb3 	bl	80091f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2205      	movs	r2, #5
 80088a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088aa:	2300      	movs	r3, #0
 80088ac:	2200      	movs	r2, #0
 80088ae:	2100      	movs	r1, #0
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fcc1 	bl	8009238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088c4:	2200      	movs	r2, #0
 80088c6:	4912      	ldr	r1, [pc, #72]	; (8008910 <MX_USB_DEVICE_Init+0x50>)
 80088c8:	4812      	ldr	r0, [pc, #72]	; (8008914 <MX_USB_DEVICE_Init+0x54>)
 80088ca:	f7fe fcdd 	bl	8007288 <USBD_Init>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088d4:	f7f8 f8d2 	bl	8000a7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80088d8:	490f      	ldr	r1, [pc, #60]	; (8008918 <MX_USB_DEVICE_Init+0x58>)
 80088da:	480e      	ldr	r0, [pc, #56]	; (8008914 <MX_USB_DEVICE_Init+0x54>)
 80088dc:	f7fe fd04 	bl	80072e8 <USBD_RegisterClass>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088e6:	f7f8 f8c9 	bl	8000a7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80088ea:	490c      	ldr	r1, [pc, #48]	; (800891c <MX_USB_DEVICE_Init+0x5c>)
 80088ec:	4809      	ldr	r0, [pc, #36]	; (8008914 <MX_USB_DEVICE_Init+0x54>)
 80088ee:	f7fe fc3b 	bl	8007168 <USBD_CDC_RegisterInterface>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088f8:	f7f8 f8c0 	bl	8000a7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088fc:	4805      	ldr	r0, [pc, #20]	; (8008914 <MX_USB_DEVICE_Init+0x54>)
 80088fe:	f7fe fd29 	bl	8007354 <USBD_Start>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008908:	f7f8 f8b8 	bl	8000a7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800890c:	bf00      	nop
 800890e:	bd80      	pop	{r7, pc}
 8008910:	200000ac 	.word	0x200000ac
 8008914:	20000374 	.word	0x20000374
 8008918:	20000018 	.word	0x20000018
 800891c:	20000098 	.word	0x20000098

08008920 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008924:	2200      	movs	r2, #0
 8008926:	4905      	ldr	r1, [pc, #20]	; (800893c <CDC_Init_FS+0x1c>)
 8008928:	4805      	ldr	r0, [pc, #20]	; (8008940 <CDC_Init_FS+0x20>)
 800892a:	f7fe fc37 	bl	800719c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800892e:	4905      	ldr	r1, [pc, #20]	; (8008944 <CDC_Init_FS+0x24>)
 8008930:	4803      	ldr	r0, [pc, #12]	; (8008940 <CDC_Init_FS+0x20>)
 8008932:	f7fe fc55 	bl	80071e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008936:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008938:	4618      	mov	r0, r3
 800893a:	bd80      	pop	{r7, pc}
 800893c:	20000e50 	.word	0x20000e50
 8008940:	20000374 	.word	0x20000374
 8008944:	20000650 	.word	0x20000650

08008948 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008948:	b480      	push	{r7}
 800894a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800894c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800894e:	4618      	mov	r0, r3
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	6039      	str	r1, [r7, #0]
 8008962:	71fb      	strb	r3, [r7, #7]
 8008964:	4613      	mov	r3, r2
 8008966:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	2b23      	cmp	r3, #35	; 0x23
 800896c:	d84a      	bhi.n	8008a04 <CDC_Control_FS+0xac>
 800896e:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <CDC_Control_FS+0x1c>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	08008a05 	.word	0x08008a05
 8008978:	08008a05 	.word	0x08008a05
 800897c:	08008a05 	.word	0x08008a05
 8008980:	08008a05 	.word	0x08008a05
 8008984:	08008a05 	.word	0x08008a05
 8008988:	08008a05 	.word	0x08008a05
 800898c:	08008a05 	.word	0x08008a05
 8008990:	08008a05 	.word	0x08008a05
 8008994:	08008a05 	.word	0x08008a05
 8008998:	08008a05 	.word	0x08008a05
 800899c:	08008a05 	.word	0x08008a05
 80089a0:	08008a05 	.word	0x08008a05
 80089a4:	08008a05 	.word	0x08008a05
 80089a8:	08008a05 	.word	0x08008a05
 80089ac:	08008a05 	.word	0x08008a05
 80089b0:	08008a05 	.word	0x08008a05
 80089b4:	08008a05 	.word	0x08008a05
 80089b8:	08008a05 	.word	0x08008a05
 80089bc:	08008a05 	.word	0x08008a05
 80089c0:	08008a05 	.word	0x08008a05
 80089c4:	08008a05 	.word	0x08008a05
 80089c8:	08008a05 	.word	0x08008a05
 80089cc:	08008a05 	.word	0x08008a05
 80089d0:	08008a05 	.word	0x08008a05
 80089d4:	08008a05 	.word	0x08008a05
 80089d8:	08008a05 	.word	0x08008a05
 80089dc:	08008a05 	.word	0x08008a05
 80089e0:	08008a05 	.word	0x08008a05
 80089e4:	08008a05 	.word	0x08008a05
 80089e8:	08008a05 	.word	0x08008a05
 80089ec:	08008a05 	.word	0x08008a05
 80089f0:	08008a05 	.word	0x08008a05
 80089f4:	08008a05 	.word	0x08008a05
 80089f8:	08008a05 	.word	0x08008a05
 80089fc:	08008a05 	.word	0x08008a05
 8008a00:	08008a05 	.word	0x08008a05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a04:	bf00      	nop
  }

  return (USBD_OK);
 8008a06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a1e:	6879      	ldr	r1, [r7, #4]
 8008a20:	4805      	ldr	r0, [pc, #20]	; (8008a38 <CDC_Receive_FS+0x24>)
 8008a22:	f7fe fbdd 	bl	80071e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a26:	4804      	ldr	r0, [pc, #16]	; (8008a38 <CDC_Receive_FS+0x24>)
 8008a28:	f7fe fbf8 	bl	800721c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20000374 	.word	0x20000374

08008a3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	4613      	mov	r3, r2
 8008a48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	371c      	adds	r7, #28
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
	...

08008a60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2212      	movs	r2, #18
 8008a70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a72:	4b03      	ldr	r3, [pc, #12]	; (8008a80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	200000cc 	.word	0x200000cc

08008a84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	6039      	str	r1, [r7, #0]
 8008a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2204      	movs	r2, #4
 8008a94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a96:	4b03      	ldr	r3, [pc, #12]	; (8008aa4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	200000ec 	.word	0x200000ec

08008aa8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	6039      	str	r1, [r7, #0]
 8008ab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ab4:	79fb      	ldrb	r3, [r7, #7]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d105      	bne.n	8008ac6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	4907      	ldr	r1, [pc, #28]	; (8008adc <USBD_FS_ProductStrDescriptor+0x34>)
 8008abe:	4808      	ldr	r0, [pc, #32]	; (8008ae0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ac0:	f7ff fe1e 	bl	8008700 <USBD_GetString>
 8008ac4:	e004      	b.n	8008ad0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	4904      	ldr	r1, [pc, #16]	; (8008adc <USBD_FS_ProductStrDescriptor+0x34>)
 8008aca:	4805      	ldr	r0, [pc, #20]	; (8008ae0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008acc:	f7ff fe18 	bl	8008700 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ad0:	4b02      	ldr	r3, [pc, #8]	; (8008adc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	20001650 	.word	0x20001650
 8008ae0:	08009650 	.word	0x08009650

08008ae4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	4603      	mov	r3, r0
 8008aec:	6039      	str	r1, [r7, #0]
 8008aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	4904      	ldr	r1, [pc, #16]	; (8008b04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008af4:	4804      	ldr	r0, [pc, #16]	; (8008b08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008af6:	f7ff fe03 	bl	8008700 <USBD_GetString>
  return USBD_StrDesc;
 8008afa:	4b02      	ldr	r3, [pc, #8]	; (8008b04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	20001650 	.word	0x20001650
 8008b08:	08009668 	.word	0x08009668

08008b0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	221a      	movs	r2, #26
 8008b1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b1e:	f000 f855 	bl	8008bcc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b22:	4b02      	ldr	r3, [pc, #8]	; (8008b2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	200000f0 	.word	0x200000f0

08008b30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	6039      	str	r1, [r7, #0]
 8008b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d105      	bne.n	8008b4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	4907      	ldr	r1, [pc, #28]	; (8008b64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b46:	4808      	ldr	r0, [pc, #32]	; (8008b68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b48:	f7ff fdda 	bl	8008700 <USBD_GetString>
 8008b4c:	e004      	b.n	8008b58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	4904      	ldr	r1, [pc, #16]	; (8008b64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b52:	4805      	ldr	r0, [pc, #20]	; (8008b68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b54:	f7ff fdd4 	bl	8008700 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b58:	4b02      	ldr	r3, [pc, #8]	; (8008b64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20001650 	.word	0x20001650
 8008b68:	0800967c 	.word	0x0800967c

08008b6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	6039      	str	r1, [r7, #0]
 8008b76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d105      	bne.n	8008b8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	4907      	ldr	r1, [pc, #28]	; (8008ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b82:	4808      	ldr	r0, [pc, #32]	; (8008ba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b84:	f7ff fdbc 	bl	8008700 <USBD_GetString>
 8008b88:	e004      	b.n	8008b94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	4904      	ldr	r1, [pc, #16]	; (8008ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b8e:	4805      	ldr	r0, [pc, #20]	; (8008ba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b90:	f7ff fdb6 	bl	8008700 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b94:	4b02      	ldr	r3, [pc, #8]	; (8008ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20001650 	.word	0x20001650
 8008ba4:	08009688 	.word	0x08009688

08008ba8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	6039      	str	r1, [r7, #0]
 8008bb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	220c      	movs	r2, #12
 8008bb8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008bba:	4b03      	ldr	r3, [pc, #12]	; (8008bc8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr
 8008bc8:	200000e0 	.word	0x200000e0

08008bcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bd2:	4b0f      	ldr	r3, [pc, #60]	; (8008c10 <Get_SerialNum+0x44>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bd8:	4b0e      	ldr	r3, [pc, #56]	; (8008c14 <Get_SerialNum+0x48>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bde:	4b0e      	ldr	r3, [pc, #56]	; (8008c18 <Get_SerialNum+0x4c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4413      	add	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d009      	beq.n	8008c06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bf2:	2208      	movs	r2, #8
 8008bf4:	4909      	ldr	r1, [pc, #36]	; (8008c1c <Get_SerialNum+0x50>)
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 f814 	bl	8008c24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008bfc:	2204      	movs	r2, #4
 8008bfe:	4908      	ldr	r1, [pc, #32]	; (8008c20 <Get_SerialNum+0x54>)
 8008c00:	68b8      	ldr	r0, [r7, #8]
 8008c02:	f000 f80f 	bl	8008c24 <IntToUnicode>
  }
}
 8008c06:	bf00      	nop
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	1ff0f420 	.word	0x1ff0f420
 8008c14:	1ff0f424 	.word	0x1ff0f424
 8008c18:	1ff0f428 	.word	0x1ff0f428
 8008c1c:	200000f2 	.word	0x200000f2
 8008c20:	20000102 	.word	0x20000102

08008c24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c36:	2300      	movs	r3, #0
 8008c38:	75fb      	strb	r3, [r7, #23]
 8008c3a:	e027      	b.n	8008c8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	0f1b      	lsrs	r3, r3, #28
 8008c40:	2b09      	cmp	r3, #9
 8008c42:	d80b      	bhi.n	8008c5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	0f1b      	lsrs	r3, r3, #28
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	005b      	lsls	r3, r3, #1
 8008c4e:	4619      	mov	r1, r3
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	440b      	add	r3, r1
 8008c54:	3230      	adds	r2, #48	; 0x30
 8008c56:	b2d2      	uxtb	r2, r2
 8008c58:	701a      	strb	r2, [r3, #0]
 8008c5a:	e00a      	b.n	8008c72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	0f1b      	lsrs	r3, r3, #28
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	4619      	mov	r1, r3
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	440b      	add	r3, r1
 8008c6c:	3237      	adds	r2, #55	; 0x37
 8008c6e:	b2d2      	uxtb	r2, r2
 8008c70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	011b      	lsls	r3, r3, #4
 8008c76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	4413      	add	r3, r2
 8008c82:	2200      	movs	r2, #0
 8008c84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c86:	7dfb      	ldrb	r3, [r7, #23]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	75fb      	strb	r3, [r7, #23]
 8008c8c:	7dfa      	ldrb	r2, [r7, #23]
 8008c8e:	79fb      	ldrb	r3, [r7, #7]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d3d3      	bcc.n	8008c3c <IntToUnicode+0x18>
  }
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop
 8008c98:	371c      	adds	r7, #28
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
	...

08008ca4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b0ae      	sub	sp, #184	; 0xb8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	605a      	str	r2, [r3, #4]
 8008cb6:	609a      	str	r2, [r3, #8]
 8008cb8:	60da      	str	r2, [r3, #12]
 8008cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008cbc:	f107 0314 	add.w	r3, r7, #20
 8008cc0:	2290      	movs	r2, #144	; 0x90
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f000 fc27 	bl	8009518 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cd2:	d161      	bne.n	8008d98 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008cd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008cd8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008ce0:	f107 0314 	add.w	r3, r7, #20
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fb f8b7 	bl	8003e58 <HAL_RCCEx_PeriphCLKConfig>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8008cf0:	f7f7 fec4 	bl	8000a7c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cf4:	4b2a      	ldr	r3, [pc, #168]	; (8008da0 <HAL_PCD_MspInit+0xfc>)
 8008cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf8:	4a29      	ldr	r2, [pc, #164]	; (8008da0 <HAL_PCD_MspInit+0xfc>)
 8008cfa:	f043 0301 	orr.w	r3, r3, #1
 8008cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8008d00:	4b27      	ldr	r3, [pc, #156]	; (8008da0 <HAL_PCD_MspInit+0xfc>)
 8008d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	613b      	str	r3, [r7, #16]
 8008d0a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008d0c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8008d10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d14:	2302      	movs	r3, #2
 8008d16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d20:	2303      	movs	r3, #3
 8008d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d26:	230a      	movs	r3, #10
 8008d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008d30:	4619      	mov	r1, r3
 8008d32:	481c      	ldr	r0, [pc, #112]	; (8008da4 <HAL_PCD_MspInit+0x100>)
 8008d34:	f7f8 fdac 	bl	8001890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d40:	2300      	movs	r3, #0
 8008d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008d4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008d50:	4619      	mov	r1, r3
 8008d52:	4814      	ldr	r0, [pc, #80]	; (8008da4 <HAL_PCD_MspInit+0x100>)
 8008d54:	f7f8 fd9c 	bl	8001890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d58:	4b11      	ldr	r3, [pc, #68]	; (8008da0 <HAL_PCD_MspInit+0xfc>)
 8008d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5c:	4a10      	ldr	r2, [pc, #64]	; (8008da0 <HAL_PCD_MspInit+0xfc>)
 8008d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d62:	6353      	str	r3, [r2, #52]	; 0x34
 8008d64:	4b0e      	ldr	r3, [pc, #56]	; (8008da0 <HAL_PCD_MspInit+0xfc>)
 8008d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	4b0b      	ldr	r3, [pc, #44]	; (8008da0 <HAL_PCD_MspInit+0xfc>)
 8008d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d74:	4a0a      	ldr	r2, [pc, #40]	; (8008da0 <HAL_PCD_MspInit+0xfc>)
 8008d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d7a:	6453      	str	r3, [r2, #68]	; 0x44
 8008d7c:	4b08      	ldr	r3, [pc, #32]	; (8008da0 <HAL_PCD_MspInit+0xfc>)
 8008d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d84:	60bb      	str	r3, [r7, #8]
 8008d86:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	2043      	movs	r0, #67	; 0x43
 8008d8e:	f7f8 fa5e 	bl	800124e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d92:	2043      	movs	r0, #67	; 0x43
 8008d94:	f7f8 fa77 	bl	8001286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d98:	bf00      	nop
 8008d9a:	37b8      	adds	r7, #184	; 0xb8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	40023800 	.word	0x40023800
 8008da4:	40020000 	.word	0x40020000

08008da8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	f7fe fb15 	bl	80073ee <USBD_LL_SetupStage>
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8008dde:	78fa      	ldrb	r2, [r7, #3]
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	4613      	mov	r3, r2
 8008de4:	00db      	lsls	r3, r3, #3
 8008de6:	4413      	add	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	440b      	add	r3, r1
 8008dec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	4619      	mov	r1, r3
 8008df6:	f7fe fb4f 	bl	8007498 <USBD_LL_DataOutStage>
}
 8008dfa:	bf00      	nop
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8008e14:	78fa      	ldrb	r2, [r7, #3]
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	00db      	lsls	r3, r3, #3
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	440b      	add	r3, r1
 8008e22:	334c      	adds	r3, #76	; 0x4c
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	78fb      	ldrb	r3, [r7, #3]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	f7fe fbe8 	bl	80075fe <USBD_LL_DataInStage>
}
 8008e2e:	bf00      	nop
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe fd1c 	bl	8007882 <USBD_LL_SOF>
}
 8008e4a:	bf00      	nop
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d102      	bne.n	8008e6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008e66:	2300      	movs	r3, #0
 8008e68:	73fb      	strb	r3, [r7, #15]
 8008e6a:	e008      	b.n	8008e7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d102      	bne.n	8008e7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008e74:	2301      	movs	r3, #1
 8008e76:	73fb      	strb	r3, [r7, #15]
 8008e78:	e001      	b.n	8008e7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008e7a:	f7f7 fdff 	bl	8000a7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008e84:	7bfa      	ldrb	r2, [r7, #15]
 8008e86:	4611      	mov	r1, r2
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fe fcbc 	bl	8007806 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fe fc64 	bl	8007762 <USBD_LL_Reset>
}
 8008e9a:	bf00      	nop
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe fcb7 	bl	8007826 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	6812      	ldr	r2, [r2, #0]
 8008ec6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008eca:	f043 0301 	orr.w	r3, r3, #1
 8008ece:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ed8:	4b04      	ldr	r3, [pc, #16]	; (8008eec <HAL_PCD_SuspendCallback+0x48>)
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	4a03      	ldr	r2, [pc, #12]	; (8008eec <HAL_PCD_SuspendCallback+0x48>)
 8008ede:	f043 0306 	orr.w	r3, r3, #6
 8008ee2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	e000ed00 	.word	0xe000ed00

08008ef0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe fca7 	bl	8007852 <USBD_LL_Resume>
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008f1e:	78fa      	ldrb	r2, [r7, #3]
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fe fcff 	bl	8007926 <USBD_LL_IsoOUTIncomplete>
}
 8008f28:	bf00      	nop
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008f42:	78fa      	ldrb	r2, [r7, #3]
 8008f44:	4611      	mov	r1, r2
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fcbb 	bl	80078c2 <USBD_LL_IsoINIncomplete>
}
 8008f4c:	bf00      	nop
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe fd11 	bl	800798a <USBD_LL_DevConnected>
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fe fd0e 	bl	80079a0 <USBD_LL_DevDisconnected>
}
 8008f84:	bf00      	nop
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d13c      	bne.n	8009016 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f9c:	4a20      	ldr	r2, [pc, #128]	; (8009020 <USBD_LL_Init+0x94>)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a1e      	ldr	r2, [pc, #120]	; (8009020 <USBD_LL_Init+0x94>)
 8008fa8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008fac:	4b1c      	ldr	r3, [pc, #112]	; (8009020 <USBD_LL_Init+0x94>)
 8008fae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008fb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008fb4:	4b1a      	ldr	r3, [pc, #104]	; (8009020 <USBD_LL_Init+0x94>)
 8008fb6:	2206      	movs	r2, #6
 8008fb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008fba:	4b19      	ldr	r3, [pc, #100]	; (8009020 <USBD_LL_Init+0x94>)
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fc0:	4b17      	ldr	r3, [pc, #92]	; (8009020 <USBD_LL_Init+0x94>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fc6:	4b16      	ldr	r3, [pc, #88]	; (8009020 <USBD_LL_Init+0x94>)
 8008fc8:	2202      	movs	r2, #2
 8008fca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008fcc:	4b14      	ldr	r3, [pc, #80]	; (8009020 <USBD_LL_Init+0x94>)
 8008fce:	2201      	movs	r2, #1
 8008fd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008fd2:	4b13      	ldr	r3, [pc, #76]	; (8009020 <USBD_LL_Init+0x94>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008fd8:	4b11      	ldr	r3, [pc, #68]	; (8009020 <USBD_LL_Init+0x94>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008fde:	4b10      	ldr	r3, [pc, #64]	; (8009020 <USBD_LL_Init+0x94>)
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fe4:	4b0e      	ldr	r3, [pc, #56]	; (8009020 <USBD_LL_Init+0x94>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fea:	480d      	ldr	r0, [pc, #52]	; (8009020 <USBD_LL_Init+0x94>)
 8008fec:	f7f8 ff48 	bl	8001e80 <HAL_PCD_Init>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ff6:	f7f7 fd41 	bl	8000a7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ffa:	2180      	movs	r1, #128	; 0x80
 8008ffc:	4808      	ldr	r0, [pc, #32]	; (8009020 <USBD_LL_Init+0x94>)
 8008ffe:	f7fa f9c2 	bl	8003386 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009002:	2240      	movs	r2, #64	; 0x40
 8009004:	2100      	movs	r1, #0
 8009006:	4806      	ldr	r0, [pc, #24]	; (8009020 <USBD_LL_Init+0x94>)
 8009008:	f7fa f976 	bl	80032f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800900c:	2280      	movs	r2, #128	; 0x80
 800900e:	2101      	movs	r1, #1
 8009010:	4803      	ldr	r0, [pc, #12]	; (8009020 <USBD_LL_Init+0x94>)
 8009012:	f7fa f971 	bl	80032f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	20001850 	.word	0x20001850

08009024 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800903a:	4618      	mov	r0, r3
 800903c:	f7f9 f844 	bl	80020c8 <HAL_PCD_Start>
 8009040:	4603      	mov	r3, r0
 8009042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	4618      	mov	r0, r3
 8009048:	f000 f97e 	bl	8009348 <USBD_Get_USB_Status>
 800904c:	4603      	mov	r3, r0
 800904e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009050:	7bbb      	ldrb	r3, [r7, #14]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b084      	sub	sp, #16
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	4608      	mov	r0, r1
 8009064:	4611      	mov	r1, r2
 8009066:	461a      	mov	r2, r3
 8009068:	4603      	mov	r3, r0
 800906a:	70fb      	strb	r3, [r7, #3]
 800906c:	460b      	mov	r3, r1
 800906e:	70bb      	strb	r3, [r7, #2]
 8009070:	4613      	mov	r3, r2
 8009072:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009082:	78bb      	ldrb	r3, [r7, #2]
 8009084:	883a      	ldrh	r2, [r7, #0]
 8009086:	78f9      	ldrb	r1, [r7, #3]
 8009088:	f7f9 fd31 	bl	8002aee <HAL_PCD_EP_Open>
 800908c:	4603      	mov	r3, r0
 800908e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	4618      	mov	r0, r3
 8009094:	f000 f958 	bl	8009348 <USBD_Get_USB_Status>
 8009098:	4603      	mov	r3, r0
 800909a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800909c:	7bbb      	ldrb	r3, [r7, #14]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	460b      	mov	r3, r1
 80090b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090c0:	78fa      	ldrb	r2, [r7, #3]
 80090c2:	4611      	mov	r1, r2
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7f9 fd7a 	bl	8002bbe <HAL_PCD_EP_Close>
 80090ca:	4603      	mov	r3, r0
 80090cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 f939 	bl	8009348 <USBD_Get_USB_Status>
 80090d6:	4603      	mov	r3, r0
 80090d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090da:	7bbb      	ldrb	r3, [r7, #14]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090fe:	78fa      	ldrb	r2, [r7, #3]
 8009100:	4611      	mov	r1, r2
 8009102:	4618      	mov	r0, r3
 8009104:	f7f9 fe52 	bl	8002dac <HAL_PCD_EP_SetStall>
 8009108:	4603      	mov	r3, r0
 800910a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	4618      	mov	r0, r3
 8009110:	f000 f91a 	bl	8009348 <USBD_Get_USB_Status>
 8009114:	4603      	mov	r3, r0
 8009116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009118:	7bbb      	ldrb	r3, [r7, #14]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b084      	sub	sp, #16
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	460b      	mov	r3, r1
 800912c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800913c:	78fa      	ldrb	r2, [r7, #3]
 800913e:	4611      	mov	r1, r2
 8009140:	4618      	mov	r0, r3
 8009142:	f7f9 fe97 	bl	8002e74 <HAL_PCD_EP_ClrStall>
 8009146:	4603      	mov	r3, r0
 8009148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	4618      	mov	r0, r3
 800914e:	f000 f8fb 	bl	8009348 <USBD_Get_USB_Status>
 8009152:	4603      	mov	r3, r0
 8009154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009156:	7bbb      	ldrb	r3, [r7, #14]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009172:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009178:	2b00      	cmp	r3, #0
 800917a:	da0b      	bge.n	8009194 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009182:	68f9      	ldr	r1, [r7, #12]
 8009184:	4613      	mov	r3, r2
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	4413      	add	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	440b      	add	r3, r1
 800918e:	333e      	adds	r3, #62	; 0x3e
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	e00b      	b.n	80091ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800919a:	68f9      	ldr	r1, [r7, #12]
 800919c:	4613      	mov	r3, r2
 800919e:	00db      	lsls	r3, r3, #3
 80091a0:	4413      	add	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	440b      	add	r3, r1
 80091a6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80091aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7f9 fc64 	bl	8002aa4 <HAL_PCD_SetAddress>
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f8b0 	bl	8009348 <USBD_Get_USB_Status>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b086      	sub	sp, #24
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	60f8      	str	r0, [r7, #12]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
 8009202:	460b      	mov	r3, r1
 8009204:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009214:	7af9      	ldrb	r1, [r7, #11]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	f7f9 fd7d 	bl	8002d18 <HAL_PCD_EP_Transmit>
 800921e:	4603      	mov	r3, r0
 8009220:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009222:	7dfb      	ldrb	r3, [r7, #23]
 8009224:	4618      	mov	r0, r3
 8009226:	f000 f88f 	bl	8009348 <USBD_Get_USB_Status>
 800922a:	4603      	mov	r3, r0
 800922c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800922e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3718      	adds	r7, #24
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	607a      	str	r2, [r7, #4]
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	460b      	mov	r3, r1
 8009246:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009256:	7af9      	ldrb	r1, [r7, #11]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	f7f9 fcf9 	bl	8002c52 <HAL_PCD_EP_Receive>
 8009260:	4603      	mov	r3, r0
 8009262:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	4618      	mov	r0, r3
 8009268:	f000 f86e 	bl	8009348 <USBD_Get_USB_Status>
 800926c:	4603      	mov	r3, r0
 800926e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009270:	7dbb      	ldrb	r3, [r7, #22]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3718      	adds	r7, #24
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b082      	sub	sp, #8
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	460b      	mov	r3, r1
 8009284:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800928c:	78fa      	ldrb	r2, [r7, #3]
 800928e:	4611      	mov	r1, r2
 8009290:	4618      	mov	r0, r3
 8009292:	f7f9 fd29 	bl	8002ce8 <HAL_PCD_EP_GetRxCount>
 8009296:	4603      	mov	r3, r0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80092ac:	78fb      	ldrb	r3, [r7, #3]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d002      	beq.n	80092b8 <HAL_PCDEx_LPM_Callback+0x18>
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d01f      	beq.n	80092f6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80092b6:	e03b      	b.n	8009330 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a1b      	ldr	r3, [r3, #32]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d007      	beq.n	80092d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80092c0:	f000 f83c 	bl	800933c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092c4:	4b1c      	ldr	r3, [pc, #112]	; (8009338 <HAL_PCDEx_LPM_Callback+0x98>)
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	4a1b      	ldr	r2, [pc, #108]	; (8009338 <HAL_PCDEx_LPM_Callback+0x98>)
 80092ca:	f023 0306 	bic.w	r3, r3, #6
 80092ce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	6812      	ldr	r2, [r2, #0]
 80092de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092e2:	f023 0301 	bic.w	r3, r3, #1
 80092e6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7fe faaf 	bl	8007852 <USBD_LL_Resume>
    break;
 80092f4:	e01c      	b.n	8009330 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	6812      	ldr	r2, [r2, #0]
 8009304:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009308:	f043 0301 	orr.w	r3, r3, #1
 800930c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009314:	4618      	mov	r0, r3
 8009316:	f7fe fa86 	bl	8007826 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d005      	beq.n	800932e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009322:	4b05      	ldr	r3, [pc, #20]	; (8009338 <HAL_PCDEx_LPM_Callback+0x98>)
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	4a04      	ldr	r2, [pc, #16]	; (8009338 <HAL_PCDEx_LPM_Callback+0x98>)
 8009328:	f043 0306 	orr.w	r3, r3, #6
 800932c:	6113      	str	r3, [r2, #16]
    break;
 800932e:	bf00      	nop
}
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	e000ed00 	.word	0xe000ed00

0800933c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009340:	f7f7 f924 	bl	800058c <SystemClock_Config>
}
 8009344:	bf00      	nop
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009356:	79fb      	ldrb	r3, [r7, #7]
 8009358:	2b03      	cmp	r3, #3
 800935a:	d817      	bhi.n	800938c <USBD_Get_USB_Status+0x44>
 800935c:	a201      	add	r2, pc, #4	; (adr r2, 8009364 <USBD_Get_USB_Status+0x1c>)
 800935e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009362:	bf00      	nop
 8009364:	08009375 	.word	0x08009375
 8009368:	0800937b 	.word	0x0800937b
 800936c:	08009381 	.word	0x08009381
 8009370:	08009387 	.word	0x08009387
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	73fb      	strb	r3, [r7, #15]
    break;
 8009378:	e00b      	b.n	8009392 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800937a:	2303      	movs	r3, #3
 800937c:	73fb      	strb	r3, [r7, #15]
    break;
 800937e:	e008      	b.n	8009392 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009380:	2301      	movs	r3, #1
 8009382:	73fb      	strb	r3, [r7, #15]
    break;
 8009384:	e005      	b.n	8009392 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009386:	2303      	movs	r3, #3
 8009388:	73fb      	strb	r3, [r7, #15]
    break;
 800938a:	e002      	b.n	8009392 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800938c:	2303      	movs	r3, #3
 800938e:	73fb      	strb	r3, [r7, #15]
    break;
 8009390:	bf00      	nop
  }
  return usb_status;
 8009392:	7bfb      	ldrb	r3, [r7, #15]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <malloc>:
 80093a0:	4b02      	ldr	r3, [pc, #8]	; (80093ac <malloc+0xc>)
 80093a2:	4601      	mov	r1, r0
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	f000 b82b 	b.w	8009400 <_malloc_r>
 80093aa:	bf00      	nop
 80093ac:	20000158 	.word	0x20000158

080093b0 <free>:
 80093b0:	4b02      	ldr	r3, [pc, #8]	; (80093bc <free+0xc>)
 80093b2:	4601      	mov	r1, r0
 80093b4:	6818      	ldr	r0, [r3, #0]
 80093b6:	f000 b8f3 	b.w	80095a0 <_free_r>
 80093ba:	bf00      	nop
 80093bc:	20000158 	.word	0x20000158

080093c0 <sbrk_aligned>:
 80093c0:	b570      	push	{r4, r5, r6, lr}
 80093c2:	4e0e      	ldr	r6, [pc, #56]	; (80093fc <sbrk_aligned+0x3c>)
 80093c4:	460c      	mov	r4, r1
 80093c6:	6831      	ldr	r1, [r6, #0]
 80093c8:	4605      	mov	r5, r0
 80093ca:	b911      	cbnz	r1, 80093d2 <sbrk_aligned+0x12>
 80093cc:	f000 f8ac 	bl	8009528 <_sbrk_r>
 80093d0:	6030      	str	r0, [r6, #0]
 80093d2:	4621      	mov	r1, r4
 80093d4:	4628      	mov	r0, r5
 80093d6:	f000 f8a7 	bl	8009528 <_sbrk_r>
 80093da:	1c43      	adds	r3, r0, #1
 80093dc:	d00a      	beq.n	80093f4 <sbrk_aligned+0x34>
 80093de:	1cc4      	adds	r4, r0, #3
 80093e0:	f024 0403 	bic.w	r4, r4, #3
 80093e4:	42a0      	cmp	r0, r4
 80093e6:	d007      	beq.n	80093f8 <sbrk_aligned+0x38>
 80093e8:	1a21      	subs	r1, r4, r0
 80093ea:	4628      	mov	r0, r5
 80093ec:	f000 f89c 	bl	8009528 <_sbrk_r>
 80093f0:	3001      	adds	r0, #1
 80093f2:	d101      	bne.n	80093f8 <sbrk_aligned+0x38>
 80093f4:	f04f 34ff 	mov.w	r4, #4294967295
 80093f8:	4620      	mov	r0, r4
 80093fa:	bd70      	pop	{r4, r5, r6, pc}
 80093fc:	20001d5c 	.word	0x20001d5c

08009400 <_malloc_r>:
 8009400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009404:	1ccd      	adds	r5, r1, #3
 8009406:	f025 0503 	bic.w	r5, r5, #3
 800940a:	3508      	adds	r5, #8
 800940c:	2d0c      	cmp	r5, #12
 800940e:	bf38      	it	cc
 8009410:	250c      	movcc	r5, #12
 8009412:	2d00      	cmp	r5, #0
 8009414:	4607      	mov	r7, r0
 8009416:	db01      	blt.n	800941c <_malloc_r+0x1c>
 8009418:	42a9      	cmp	r1, r5
 800941a:	d905      	bls.n	8009428 <_malloc_r+0x28>
 800941c:	230c      	movs	r3, #12
 800941e:	603b      	str	r3, [r7, #0]
 8009420:	2600      	movs	r6, #0
 8009422:	4630      	mov	r0, r6
 8009424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009428:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80094fc <_malloc_r+0xfc>
 800942c:	f000 f868 	bl	8009500 <__malloc_lock>
 8009430:	f8d8 3000 	ldr.w	r3, [r8]
 8009434:	461c      	mov	r4, r3
 8009436:	bb5c      	cbnz	r4, 8009490 <_malloc_r+0x90>
 8009438:	4629      	mov	r1, r5
 800943a:	4638      	mov	r0, r7
 800943c:	f7ff ffc0 	bl	80093c0 <sbrk_aligned>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	4604      	mov	r4, r0
 8009444:	d155      	bne.n	80094f2 <_malloc_r+0xf2>
 8009446:	f8d8 4000 	ldr.w	r4, [r8]
 800944a:	4626      	mov	r6, r4
 800944c:	2e00      	cmp	r6, #0
 800944e:	d145      	bne.n	80094dc <_malloc_r+0xdc>
 8009450:	2c00      	cmp	r4, #0
 8009452:	d048      	beq.n	80094e6 <_malloc_r+0xe6>
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	4631      	mov	r1, r6
 8009458:	4638      	mov	r0, r7
 800945a:	eb04 0903 	add.w	r9, r4, r3
 800945e:	f000 f863 	bl	8009528 <_sbrk_r>
 8009462:	4581      	cmp	r9, r0
 8009464:	d13f      	bne.n	80094e6 <_malloc_r+0xe6>
 8009466:	6821      	ldr	r1, [r4, #0]
 8009468:	1a6d      	subs	r5, r5, r1
 800946a:	4629      	mov	r1, r5
 800946c:	4638      	mov	r0, r7
 800946e:	f7ff ffa7 	bl	80093c0 <sbrk_aligned>
 8009472:	3001      	adds	r0, #1
 8009474:	d037      	beq.n	80094e6 <_malloc_r+0xe6>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	442b      	add	r3, r5
 800947a:	6023      	str	r3, [r4, #0]
 800947c:	f8d8 3000 	ldr.w	r3, [r8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d038      	beq.n	80094f6 <_malloc_r+0xf6>
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	42a2      	cmp	r2, r4
 8009488:	d12b      	bne.n	80094e2 <_malloc_r+0xe2>
 800948a:	2200      	movs	r2, #0
 800948c:	605a      	str	r2, [r3, #4]
 800948e:	e00f      	b.n	80094b0 <_malloc_r+0xb0>
 8009490:	6822      	ldr	r2, [r4, #0]
 8009492:	1b52      	subs	r2, r2, r5
 8009494:	d41f      	bmi.n	80094d6 <_malloc_r+0xd6>
 8009496:	2a0b      	cmp	r2, #11
 8009498:	d917      	bls.n	80094ca <_malloc_r+0xca>
 800949a:	1961      	adds	r1, r4, r5
 800949c:	42a3      	cmp	r3, r4
 800949e:	6025      	str	r5, [r4, #0]
 80094a0:	bf18      	it	ne
 80094a2:	6059      	strne	r1, [r3, #4]
 80094a4:	6863      	ldr	r3, [r4, #4]
 80094a6:	bf08      	it	eq
 80094a8:	f8c8 1000 	streq.w	r1, [r8]
 80094ac:	5162      	str	r2, [r4, r5]
 80094ae:	604b      	str	r3, [r1, #4]
 80094b0:	4638      	mov	r0, r7
 80094b2:	f104 060b 	add.w	r6, r4, #11
 80094b6:	f000 f829 	bl	800950c <__malloc_unlock>
 80094ba:	f026 0607 	bic.w	r6, r6, #7
 80094be:	1d23      	adds	r3, r4, #4
 80094c0:	1af2      	subs	r2, r6, r3
 80094c2:	d0ae      	beq.n	8009422 <_malloc_r+0x22>
 80094c4:	1b9b      	subs	r3, r3, r6
 80094c6:	50a3      	str	r3, [r4, r2]
 80094c8:	e7ab      	b.n	8009422 <_malloc_r+0x22>
 80094ca:	42a3      	cmp	r3, r4
 80094cc:	6862      	ldr	r2, [r4, #4]
 80094ce:	d1dd      	bne.n	800948c <_malloc_r+0x8c>
 80094d0:	f8c8 2000 	str.w	r2, [r8]
 80094d4:	e7ec      	b.n	80094b0 <_malloc_r+0xb0>
 80094d6:	4623      	mov	r3, r4
 80094d8:	6864      	ldr	r4, [r4, #4]
 80094da:	e7ac      	b.n	8009436 <_malloc_r+0x36>
 80094dc:	4634      	mov	r4, r6
 80094de:	6876      	ldr	r6, [r6, #4]
 80094e0:	e7b4      	b.n	800944c <_malloc_r+0x4c>
 80094e2:	4613      	mov	r3, r2
 80094e4:	e7cc      	b.n	8009480 <_malloc_r+0x80>
 80094e6:	230c      	movs	r3, #12
 80094e8:	603b      	str	r3, [r7, #0]
 80094ea:	4638      	mov	r0, r7
 80094ec:	f000 f80e 	bl	800950c <__malloc_unlock>
 80094f0:	e797      	b.n	8009422 <_malloc_r+0x22>
 80094f2:	6025      	str	r5, [r4, #0]
 80094f4:	e7dc      	b.n	80094b0 <_malloc_r+0xb0>
 80094f6:	605b      	str	r3, [r3, #4]
 80094f8:	deff      	udf	#255	; 0xff
 80094fa:	bf00      	nop
 80094fc:	20001d58 	.word	0x20001d58

08009500 <__malloc_lock>:
 8009500:	4801      	ldr	r0, [pc, #4]	; (8009508 <__malloc_lock+0x8>)
 8009502:	f000 b84b 	b.w	800959c <__retarget_lock_acquire_recursive>
 8009506:	bf00      	nop
 8009508:	20001e9c 	.word	0x20001e9c

0800950c <__malloc_unlock>:
 800950c:	4801      	ldr	r0, [pc, #4]	; (8009514 <__malloc_unlock+0x8>)
 800950e:	f000 b846 	b.w	800959e <__retarget_lock_release_recursive>
 8009512:	bf00      	nop
 8009514:	20001e9c 	.word	0x20001e9c

08009518 <memset>:
 8009518:	4402      	add	r2, r0
 800951a:	4603      	mov	r3, r0
 800951c:	4293      	cmp	r3, r2
 800951e:	d100      	bne.n	8009522 <memset+0xa>
 8009520:	4770      	bx	lr
 8009522:	f803 1b01 	strb.w	r1, [r3], #1
 8009526:	e7f9      	b.n	800951c <memset+0x4>

08009528 <_sbrk_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4d06      	ldr	r5, [pc, #24]	; (8009544 <_sbrk_r+0x1c>)
 800952c:	2300      	movs	r3, #0
 800952e:	4604      	mov	r4, r0
 8009530:	4608      	mov	r0, r1
 8009532:	602b      	str	r3, [r5, #0]
 8009534:	f7f7 fcbe 	bl	8000eb4 <_sbrk>
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	d102      	bne.n	8009542 <_sbrk_r+0x1a>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	b103      	cbz	r3, 8009542 <_sbrk_r+0x1a>
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	bd38      	pop	{r3, r4, r5, pc}
 8009544:	20001e98 	.word	0x20001e98

08009548 <__errno>:
 8009548:	4b01      	ldr	r3, [pc, #4]	; (8009550 <__errno+0x8>)
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	20000158 	.word	0x20000158

08009554 <__libc_init_array>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	4d0d      	ldr	r5, [pc, #52]	; (800958c <__libc_init_array+0x38>)
 8009558:	4c0d      	ldr	r4, [pc, #52]	; (8009590 <__libc_init_array+0x3c>)
 800955a:	1b64      	subs	r4, r4, r5
 800955c:	10a4      	asrs	r4, r4, #2
 800955e:	2600      	movs	r6, #0
 8009560:	42a6      	cmp	r6, r4
 8009562:	d109      	bne.n	8009578 <__libc_init_array+0x24>
 8009564:	4d0b      	ldr	r5, [pc, #44]	; (8009594 <__libc_init_array+0x40>)
 8009566:	4c0c      	ldr	r4, [pc, #48]	; (8009598 <__libc_init_array+0x44>)
 8009568:	f000 f866 	bl	8009638 <_init>
 800956c:	1b64      	subs	r4, r4, r5
 800956e:	10a4      	asrs	r4, r4, #2
 8009570:	2600      	movs	r6, #0
 8009572:	42a6      	cmp	r6, r4
 8009574:	d105      	bne.n	8009582 <__libc_init_array+0x2e>
 8009576:	bd70      	pop	{r4, r5, r6, pc}
 8009578:	f855 3b04 	ldr.w	r3, [r5], #4
 800957c:	4798      	blx	r3
 800957e:	3601      	adds	r6, #1
 8009580:	e7ee      	b.n	8009560 <__libc_init_array+0xc>
 8009582:	f855 3b04 	ldr.w	r3, [r5], #4
 8009586:	4798      	blx	r3
 8009588:	3601      	adds	r6, #1
 800958a:	e7f2      	b.n	8009572 <__libc_init_array+0x1e>
 800958c:	080096c0 	.word	0x080096c0
 8009590:	080096c0 	.word	0x080096c0
 8009594:	080096c0 	.word	0x080096c0
 8009598:	080096c4 	.word	0x080096c4

0800959c <__retarget_lock_acquire_recursive>:
 800959c:	4770      	bx	lr

0800959e <__retarget_lock_release_recursive>:
 800959e:	4770      	bx	lr

080095a0 <_free_r>:
 80095a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095a2:	2900      	cmp	r1, #0
 80095a4:	d044      	beq.n	8009630 <_free_r+0x90>
 80095a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095aa:	9001      	str	r0, [sp, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f1a1 0404 	sub.w	r4, r1, #4
 80095b2:	bfb8      	it	lt
 80095b4:	18e4      	addlt	r4, r4, r3
 80095b6:	f7ff ffa3 	bl	8009500 <__malloc_lock>
 80095ba:	4a1e      	ldr	r2, [pc, #120]	; (8009634 <_free_r+0x94>)
 80095bc:	9801      	ldr	r0, [sp, #4]
 80095be:	6813      	ldr	r3, [r2, #0]
 80095c0:	b933      	cbnz	r3, 80095d0 <_free_r+0x30>
 80095c2:	6063      	str	r3, [r4, #4]
 80095c4:	6014      	str	r4, [r2, #0]
 80095c6:	b003      	add	sp, #12
 80095c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095cc:	f7ff bf9e 	b.w	800950c <__malloc_unlock>
 80095d0:	42a3      	cmp	r3, r4
 80095d2:	d908      	bls.n	80095e6 <_free_r+0x46>
 80095d4:	6825      	ldr	r5, [r4, #0]
 80095d6:	1961      	adds	r1, r4, r5
 80095d8:	428b      	cmp	r3, r1
 80095da:	bf01      	itttt	eq
 80095dc:	6819      	ldreq	r1, [r3, #0]
 80095de:	685b      	ldreq	r3, [r3, #4]
 80095e0:	1949      	addeq	r1, r1, r5
 80095e2:	6021      	streq	r1, [r4, #0]
 80095e4:	e7ed      	b.n	80095c2 <_free_r+0x22>
 80095e6:	461a      	mov	r2, r3
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	b10b      	cbz	r3, 80095f0 <_free_r+0x50>
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	d9fa      	bls.n	80095e6 <_free_r+0x46>
 80095f0:	6811      	ldr	r1, [r2, #0]
 80095f2:	1855      	adds	r5, r2, r1
 80095f4:	42a5      	cmp	r5, r4
 80095f6:	d10b      	bne.n	8009610 <_free_r+0x70>
 80095f8:	6824      	ldr	r4, [r4, #0]
 80095fa:	4421      	add	r1, r4
 80095fc:	1854      	adds	r4, r2, r1
 80095fe:	42a3      	cmp	r3, r4
 8009600:	6011      	str	r1, [r2, #0]
 8009602:	d1e0      	bne.n	80095c6 <_free_r+0x26>
 8009604:	681c      	ldr	r4, [r3, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	6053      	str	r3, [r2, #4]
 800960a:	440c      	add	r4, r1
 800960c:	6014      	str	r4, [r2, #0]
 800960e:	e7da      	b.n	80095c6 <_free_r+0x26>
 8009610:	d902      	bls.n	8009618 <_free_r+0x78>
 8009612:	230c      	movs	r3, #12
 8009614:	6003      	str	r3, [r0, #0]
 8009616:	e7d6      	b.n	80095c6 <_free_r+0x26>
 8009618:	6825      	ldr	r5, [r4, #0]
 800961a:	1961      	adds	r1, r4, r5
 800961c:	428b      	cmp	r3, r1
 800961e:	bf04      	itt	eq
 8009620:	6819      	ldreq	r1, [r3, #0]
 8009622:	685b      	ldreq	r3, [r3, #4]
 8009624:	6063      	str	r3, [r4, #4]
 8009626:	bf04      	itt	eq
 8009628:	1949      	addeq	r1, r1, r5
 800962a:	6021      	streq	r1, [r4, #0]
 800962c:	6054      	str	r4, [r2, #4]
 800962e:	e7ca      	b.n	80095c6 <_free_r+0x26>
 8009630:	b003      	add	sp, #12
 8009632:	bd30      	pop	{r4, r5, pc}
 8009634:	20001d58 	.word	0x20001d58

08009638 <_init>:
 8009638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963a:	bf00      	nop
 800963c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963e:	bc08      	pop	{r3}
 8009640:	469e      	mov	lr, r3
 8009642:	4770      	bx	lr

08009644 <_fini>:
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	bf00      	nop
 8009648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964a:	bc08      	pop	{r3}
 800964c:	469e      	mov	lr, r3
 800964e:	4770      	bx	lr
