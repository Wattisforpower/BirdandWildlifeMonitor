
PROJ515_DSP_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6e4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a8c  0800e8e8  0800e8e8  0001e8e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022374  08022374  000402dc  2**0
                  CONTENTS
  4 .ARM          00000008  08022374  08022374  00032374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802237c  0802237c  000402dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802237c  0802237c  0003237c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022380  08022380  00032380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08022384  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c274  200002dc  08022660  000402dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001c550  08022660  0004c550  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000402dc  2**0
                  CONTENTS, READONLY
 12 .comment      000000b1  00000000  00000000  0004030a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c4c  00000000  00000000  000403bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004039  00000000  00000000  00057007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  0005b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ccc  00000000  00000000  0005c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b377  00000000  00000000  0005cf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182bf  00000000  00000000  00088293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7b72  00000000  00000000  000a0552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005810  00000000  00000000  001980c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  0019d8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003a35  00000000  00000000  0019d96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000128  00000000  00000000  001a139f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002dc 	.word	0x200002dc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e8cc 	.word	0x0800e8cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002e0 	.word	0x200002e0
 800023c:	0800e8cc 	.word	0x0800e8cc

08000240 <arm_bitreversal_32>:
 8000240:	1c4b      	adds	r3, r1, #1
 8000242:	2b01      	cmp	r3, #1
 8000244:	bf98      	it	ls
 8000246:	4770      	bxls	lr
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024c:	1c91      	adds	r1, r2, #2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000258:	880a      	ldrh	r2, [r1, #0]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800025e:	4480      	add	r8, r0
 8000260:	4481      	add	r9, r0
 8000262:	4402      	add	r2, r0
 8000264:	4484      	add	ip, r0
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
 800026e:	6815      	ldr	r5, [r2, #0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
 8000274:	f8c9 6000 	str.w	r6, [r9]
 8000278:	f8c8 7000 	str.w	r7, [r8]
 800027c:	f8cc 5000 	str.w	r5, [ip]
 8000280:	6014      	str	r4, [r2, #0]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800028a:	6855      	ldr	r5, [r2, #4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
 800029c:	6054      	str	r4, [r2, #4]
 800029e:	3108      	adds	r1, #8
 80002a0:	3b01      	subs	r3, #1
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
 80002aa:	1c4b      	adds	r3, r1, #1
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	bf98      	it	ls
 80002b0:	4770      	bxls	lr
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002b6:	1c91      	adds	r1, r2, #2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002c2:	880a      	ldrh	r2, [r1, #0]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
 80002e0:	6815      	ldr	r5, [r2, #0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
 80002f2:	6014      	str	r4, [r2, #0]
 80002f4:	3108      	adds	r1, #8
 80002f6:	3b01      	subs	r3, #1
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <spi_data_send>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t spi_data_send(int32_t data)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

	if (spi_buffer_head <= SPI_BUFFER_SIZE-5)//BUFFER IS NOT FULL
 80006b4:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <spi_data_send+0xf8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 80006bc:	da2c      	bge.n	8000718 <spi_data_send+0x6c>
	{
		//SERIALISE FLOAT
		int bit_shift_number = 24;
 80006be:	2318      	movs	r3, #24
 80006c0:	60fb      	str	r3, [r7, #12]
		//unsigned int ivalue = *((unsigned int*)&data);
		for(int idx = 0; idx < 4;idx++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	e016      	b.n	80006f6 <spi_data_send+0x4a>
		{
			*spi_buffer_pointer = data >> bit_shift_number;		//store next data bit
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	411a      	asrs	r2, r3
 80006ce:	4b36      	ldr	r3, [pc, #216]	; (80007a8 <spi_data_send+0xfc>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	701a      	strb	r2, [r3, #0]
			spi_buffer_pointer++;			//point to next data bit location
 80006d6:	4b34      	ldr	r3, [pc, #208]	; (80007a8 <spi_data_send+0xfc>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	4a32      	ldr	r2, [pc, #200]	; (80007a8 <spi_data_send+0xfc>)
 80006de:	6013      	str	r3, [r2, #0]
			spi_buffer_head++;				//increment buffer size
 80006e0:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <spi_data_send+0xf8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	4a2f      	ldr	r2, [pc, #188]	; (80007a4 <spi_data_send+0xf8>)
 80006e8:	6013      	str	r3, [r2, #0]
			bit_shift_number -= 8;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3b08      	subs	r3, #8
 80006ee:	60fb      	str	r3, [r7, #12]
		for(int idx = 0; idx < 4;idx++)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	3301      	adds	r3, #1
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	dde5      	ble.n	80006c8 <spi_data_send+0x1c>
		}
		*spi_buffer_pointer = '\n';		//store next data bit
 80006fc:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <spi_data_send+0xfc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	220a      	movs	r2, #10
 8000702:	701a      	strb	r2, [r3, #0]
		spi_buffer_pointer++;			//point to next data bit location
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <spi_data_send+0xfc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	4a27      	ldr	r2, [pc, #156]	; (80007a8 <spi_data_send+0xfc>)
 800070c:	6013      	str	r3, [r2, #0]
		spi_buffer_head++;
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <spi_data_send+0xf8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <spi_data_send+0xf8>)
 8000716:	6013      	str	r3, [r2, #0]

	}



	if (spi_buffer_head >= SPI_BUFFER_SIZE)//BUFFER IS FULL
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <spi_data_send+0xf8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000720:	db3b      	blt.n	800079a <spi_data_send+0xee>
	{
		if((spi_buffer_idx == 0)&&spi_tx_ready_flag)//BUFFER 0 IS FULL and buffer 1 has been transfered
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <spi_data_send+0x100>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d116      	bne.n	8000758 <spi_data_send+0xac>
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <spi_data_send+0x104>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d012      	beq.n	8000758 <spi_data_send+0xac>
		{
			spi_buffer_head = 0;					//set buffer head to 0
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <spi_data_send+0xf8>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
			spi_buffer_pointer = &spi_buffer_1[0];	//start filling buffer 1
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <spi_data_send+0xfc>)
 800073a:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <spi_data_send+0x108>)
 800073c:	601a      	str	r2, [r3, #0]
			spi_buffer_idx = 1;						//set buffer 1 to input buffer
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <spi_data_send+0x100>)
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]

			spi_tx_ready_flag = 0; 					//tell system transmit is in process
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <spi_data_send+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
			//PULL PF0 HIGH
			HAL_SPI_Transmit_DMA(&hspi4, (uint8_t*)spi_buffer_0, SPI_BUFFER_SIZE);//initiate dma transmit
 800074a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800074e:	491a      	ldr	r1, [pc, #104]	; (80007b8 <spi_data_send+0x10c>)
 8000750:	481a      	ldr	r0, [pc, #104]	; (80007bc <spi_data_send+0x110>)
 8000752:	f004 fecb 	bl	80054ec <HAL_SPI_Transmit_DMA>
 8000756:	e020      	b.n	800079a <spi_data_send+0xee>

		}
		else if((spi_buffer_idx == 1)&&spi_tx_ready_flag)//BUFFER 1 IS FULLand buffer 0 has been transfered
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <spi_data_send+0x100>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d116      	bne.n	800078e <spi_data_send+0xe2>
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <spi_data_send+0x104>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d012      	beq.n	800078e <spi_data_send+0xe2>
		{
			spi_buffer_head = 0;					//set buffer head to 0
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <spi_data_send+0xf8>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
			spi_buffer_pointer = &spi_buffer_0[0];	//start filling buffer 0
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <spi_data_send+0xfc>)
 8000770:	4a11      	ldr	r2, [pc, #68]	; (80007b8 <spi_data_send+0x10c>)
 8000772:	601a      	str	r2, [r3, #0]
			spi_buffer_idx = 0;						//set buffer 0 to input buffer
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <spi_data_send+0x100>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]

			spi_tx_ready_flag = 0; 					//tell system transmit is in process
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <spi_data_send+0x104>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
			//PULL PF0 HIGH
			HAL_SPI_Transmit_DMA(&hspi4, (uint8_t*)spi_buffer_1, SPI_BUFFER_SIZE);//initiate dma transmit
 8000780:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000784:	490b      	ldr	r1, [pc, #44]	; (80007b4 <spi_data_send+0x108>)
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <spi_data_send+0x110>)
 8000788:	f004 feb0 	bl	80054ec <HAL_SPI_Transmit_DMA>
 800078c:	e005      	b.n	800079a <spi_data_send+0xee>

		}
		else if(!spi_tx_ready_flag)
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <spi_data_send+0x104>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <spi_data_send+0xee>
		{
			return 0;
 8000796:	2300      	movs	r3, #0
 8000798:	e000      	b.n	800079c <spi_data_send+0xf0>
		}
	}
	return 1;
 800079a:	2301      	movs	r3, #1

}
 800079c:	4618      	mov	r0, r3
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2001aa0c 	.word	0x2001aa0c
 80007a8:	20000000 	.word	0x20000000
 80007ac:	2001aa10 	.word	0x2001aa10
 80007b0:	20000004 	.word	0x20000004
 80007b4:	2001a818 	.word	0x2001a818
 80007b8:	2001a624 	.word	0x2001a624
 80007bc:	20000438 	.word	0x20000438

080007c0 <BAD>:

int BAD()
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
	//CALCULATE STE
	float ste = 0;
 80007c6:	f04f 0300 	mov.w	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
	for (int idx = 0; idx < FFT_BUFFER_SIZE; idx++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	e016      	b.n	8000800 <BAD+0x40>
	{
		ste = ste + (fft_input_buffer[idx]*fft_input_buffer[idx]);
 80007d2:	4a4f      	ldr	r2, [pc, #316]	; (8000910 <BAD+0x150>)
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	ed93 7a00 	vldr	s14, [r3]
 80007de:	4a4c      	ldr	r2, [pc, #304]	; (8000910 <BAD+0x150>)
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	edd3 7a00 	vldr	s15, [r3]
 80007ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80007f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007f6:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int idx = 0; idx < FFT_BUFFER_SIZE; idx++)
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	3301      	adds	r3, #1
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000806:	dbe4      	blt.n	80007d2 <BAD+0x12>
	}

	//GET STE AVERAGE
	ste_avg_array[ste_avg_head] = ste;
 8000808:	4b42      	ldr	r3, [pc, #264]	; (8000914 <BAD+0x154>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a42      	ldr	r2, [pc, #264]	; (8000918 <BAD+0x158>)
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	601a      	str	r2, [r3, #0]
	ste_avg_head++;
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <BAD+0x154>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	4a3d      	ldr	r2, [pc, #244]	; (8000914 <BAD+0x154>)
 800081e:	6013      	str	r3, [r2, #0]
	if (ste_avg_head >= STE_AVG_SIZE)
 8000820:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <BAD+0x154>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b3f      	cmp	r3, #63	; 0x3f
 8000826:	dd02      	ble.n	800082e <BAD+0x6e>
	{
		ste_avg_head = 0;
 8000828:	4b3a      	ldr	r3, [pc, #232]	; (8000914 <BAD+0x154>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
	}

	float sum = 0;
 800082e:	f04f 0300 	mov.w	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
	for (int idx = 0; idx < STE_AVG_SIZE; idx++)
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	e00e      	b.n	8000858 <BAD+0x98>
	{
		sum += ste_avg_array[idx];
 800083a:	4a37      	ldr	r2, [pc, #220]	; (8000918 <BAD+0x158>)
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	ed97 7a03 	vldr	s14, [r7, #12]
 800084a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800084e:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int idx = 0; idx < STE_AVG_SIZE; idx++)
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	3301      	adds	r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	2b3f      	cmp	r3, #63	; 0x3f
 800085c:	dded      	ble.n	800083a <BAD+0x7a>
	}

	float ste_avg =(sum/STE_AVG_SIZE);
 800085e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000862:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800091c <BAD+0x15c>
 8000866:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800086a:	edc7 7a01 	vstr	s15, [r7, #4]
	if((ste_avg + (ste_avg * STE_AVG_THRESHOLD_OFFSET)) <= ste)
 800086e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000872:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000876:	edd7 7a01 	vldr	s15, [r7, #4]
 800087a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800087e:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8000908 <BAD+0x148>
 8000882:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000886:	ee36 6b07 	vadd.f64	d6, d6, d7
 800088a:	edd7 7a05 	vldr	s15, [r7, #20]
 800088e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000892:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089a:	d80e      	bhi.n	80008ba <BAD+0xfa>
	{
		ste_frame_count = STE_FRAME_HOLD;
 800089c:	4b20      	ldr	r3, [pc, #128]	; (8000920 <BAD+0x160>)
 800089e:	2205      	movs	r2, #5
 80008a0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	481f      	ldr	r0, [pc, #124]	; (8000924 <BAD+0x164>)
 80008a8:	f001 fe40 	bl	800252c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIN_F0_GPIO_Port, PIN_F0_Pin, 1);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2101      	movs	r1, #1
 80008b0:	481d      	ldr	r0, [pc, #116]	; (8000928 <BAD+0x168>)
 80008b2:	f001 fe3b 	bl	800252c <HAL_GPIO_WritePin>
		return 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e01f      	b.n	80008fa <BAD+0x13a>
	}
	else if(ste_frame_count > 0)
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <BAD+0x160>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	dd10      	ble.n	80008e4 <BAD+0x124>
	{
		ste_frame_count--;
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <BAD+0x160>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	4a15      	ldr	r2, [pc, #84]	; (8000920 <BAD+0x160>)
 80008ca:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2180      	movs	r1, #128	; 0x80
 80008d0:	4814      	ldr	r0, [pc, #80]	; (8000924 <BAD+0x164>)
 80008d2:	f001 fe2b 	bl	800252c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIN_F0_GPIO_Port, PIN_F0_Pin, 1);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2101      	movs	r1, #1
 80008da:	4813      	ldr	r0, [pc, #76]	; (8000928 <BAD+0x168>)
 80008dc:	f001 fe26 	bl	800252c <HAL_GPIO_WritePin>
		return 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e00a      	b.n	80008fa <BAD+0x13a>
	}
	else
	{
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	480e      	ldr	r0, [pc, #56]	; (8000924 <BAD+0x164>)
 80008ea:	f001 fe1f 	bl	800252c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIN_F0_GPIO_Port, PIN_F0_Pin, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2101      	movs	r1, #1
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <BAD+0x168>)
 80008f4:	f001 fe1a 	bl	800252c <HAL_GPIO_WritePin>
		return 0;
 80008f8:	2300      	movs	r3, #0
	}
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	f3af 8000 	nop.w
 8000908:	9999999a 	.word	0x9999999a
 800090c:	3fb99999 	.word	0x3fb99999
 8000910:	2000a620 	.word	0x2000a620
 8000914:	2000a604 	.word	0x2000a604
 8000918:	2000a504 	.word	0x2000a504
 800091c:	42800000 	.word	0x42800000
 8000920:	2000a500 	.word	0x2000a500
 8000924:	40020000 	.word	0x40020000
 8000928:	40021400 	.word	0x40021400

0800092c <spectral_subtraction>:

void spectral_subtraction()
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0

	int activity = BAD();
 8000932:	f7ff ff45 	bl	80007c0 <BAD>
 8000936:	60b8      	str	r0, [r7, #8]

	arm_rfft_fast_f32(&fft_handler, (float32_t*)fft_input_buffer, (float32_t*)fft_output_buffer, 0);
 8000938:	2300      	movs	r3, #0
 800093a:	4a82      	ldr	r2, [pc, #520]	; (8000b44 <spectral_subtraction+0x218>)
 800093c:	4982      	ldr	r1, [pc, #520]	; (8000b48 <spectral_subtraction+0x21c>)
 800093e:	4883      	ldr	r0, [pc, #524]	; (8000b4c <spectral_subtraction+0x220>)
 8000940:	f009 fb58 	bl	8009ff4 <arm_rfft_fast_f32>

	//PHASE CORRECTION COEFFICIENT CALCULATION
	uint16_t buffer_index = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	83fb      	strh	r3, [r7, #30]
	for(uint16_t i = 0 ; i< FFT_BUFFER_SIZE ; i = i + 2)
 8000948:	2300      	movs	r3, #0
 800094a:	83bb      	strh	r3, [r7, #28]
 800094c:	e026      	b.n	800099c <spectral_subtraction+0x70>
	{
		phases[buffer_index] = atan2(fft_output_buffer[i + 1],fft_output_buffer[i]);
 800094e:	8bbb      	ldrh	r3, [r7, #28]
 8000950:	3301      	adds	r3, #1
 8000952:	4a7c      	ldr	r2, [pc, #496]	; (8000b44 <spectral_subtraction+0x218>)
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4413      	add	r3, r2
 8000958:	edd3 7a00 	vldr	s15, [r3]
 800095c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000960:	8bbb      	ldrh	r3, [r7, #28]
 8000962:	4a78      	ldr	r2, [pc, #480]	; (8000b44 <spectral_subtraction+0x218>)
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	edd3 6a00 	vldr	s13, [r3]
 800096c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000970:	eeb0 1b46 	vmov.f64	d1, d6
 8000974:	eeb0 0b47 	vmov.f64	d0, d7
 8000978:	f00a fb7a 	bl	800b070 <atan2>
 800097c:	eeb0 7b40 	vmov.f64	d7, d0
 8000980:	8bfb      	ldrh	r3, [r7, #30]
 8000982:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000986:	4a72      	ldr	r2, [pc, #456]	; (8000b50 <spectral_subtraction+0x224>)
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	edc3 7a00 	vstr	s15, [r3]
		buffer_index++;
 8000990:	8bfb      	ldrh	r3, [r7, #30]
 8000992:	3301      	adds	r3, #1
 8000994:	83fb      	strh	r3, [r7, #30]
	for(uint16_t i = 0 ; i< FFT_BUFFER_SIZE ; i = i + 2)
 8000996:	8bbb      	ldrh	r3, [r7, #28]
 8000998:	3302      	adds	r3, #2
 800099a:	83bb      	strh	r3, [r7, #28]
 800099c:	8bbb      	ldrh	r3, [r7, #28]
 800099e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009a2:	d3d4      	bcc.n	800094e <spectral_subtraction+0x22>
	}
	buffer_index = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	83fb      	strh	r3, [r7, #30]

	//COMPUTE MAGNITUDES
	arm_cmplx_mag_f32(fft_output_buffer, magnitudes, FFT_BUFFER_SIZE/2);
 80009a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009ac:	4969      	ldr	r1, [pc, #420]	; (8000b54 <spectral_subtraction+0x228>)
 80009ae:	4865      	ldr	r0, [pc, #404]	; (8000b44 <spectral_subtraction+0x218>)
 80009b0:	f009 ff84 	bl	800a8bc <arm_cmplx_mag_f32>

	//UPDATE AVERAGE NOISE
	if(activity == 0)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d129      	bne.n	8000a0e <spectral_subtraction+0xe2>
	{
		for (int idx = 0; idx < (FFT_BUFFER_SIZE/2);idx++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
 80009be:	e022      	b.n	8000a06 <spectral_subtraction+0xda>
		{
			avg_noise_magnitudes[idx] = ((avg_noise_magnitudes[idx]  * (AVG_NOISE_ESTIMATE_LENGTH - 1)) / AVG_NOISE_ESTIMATE_LENGTH) + (magnitudes[idx] / AVG_NOISE_ESTIMATE_LENGTH);
 80009c0:	4a65      	ldr	r2, [pc, #404]	; (8000b58 <spectral_subtraction+0x22c>)
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	edd3 7a00 	vldr	s15, [r3]
 80009cc:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8000b5c <spectral_subtraction+0x230>
 80009d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009d4:	eddf 6a62 	vldr	s13, [pc, #392]	; 8000b60 <spectral_subtraction+0x234>
 80009d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80009dc:	4a5d      	ldr	r2, [pc, #372]	; (8000b54 <spectral_subtraction+0x228>)
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	edd3 6a00 	vldr	s13, [r3]
 80009e8:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 8000b60 <spectral_subtraction+0x234>
 80009ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80009f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009f4:	4a58      	ldr	r2, [pc, #352]	; (8000b58 <spectral_subtraction+0x22c>)
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	4413      	add	r3, r2
 80009fc:	edc3 7a00 	vstr	s15, [r3]
		for (int idx = 0; idx < (FFT_BUFFER_SIZE/2);idx++)
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	3301      	adds	r3, #1
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a0c:	dbd8      	blt.n	80009c0 <spectral_subtraction+0x94>
		}
	}

	//SPECTRAL SUBTRACTION PROCESS
	for (int idx = 0; idx < (FFT_BUFFER_SIZE/2);idx++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	e016      	b.n	8000a42 <spectral_subtraction+0x116>
	{
		clean_magnitudes[idx] = magnitudes[idx] - avg_noise_magnitudes[idx];
 8000a14:	4a4f      	ldr	r2, [pc, #316]	; (8000b54 <spectral_subtraction+0x228>)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4413      	add	r3, r2
 8000a1c:	ed93 7a00 	vldr	s14, [r3]
 8000a20:	4a4d      	ldr	r2, [pc, #308]	; (8000b58 <spectral_subtraction+0x22c>)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	edd3 7a00 	vldr	s15, [r3]
 8000a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a30:	4a4c      	ldr	r2, [pc, #304]	; (8000b64 <spectral_subtraction+0x238>)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	edc3 7a00 	vstr	s15, [r3]
	for (int idx = 0; idx < (FFT_BUFFER_SIZE/2);idx++)
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a48:	dbe4      	blt.n	8000a14 <spectral_subtraction+0xe8>
	}

	//PHASE CORRECTION
	for(uint16_t i = 0 ; i< FFT_BUFFER_SIZE ; i++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	827b      	strh	r3, [r7, #18]
 8000a4e:	e04c      	b.n	8000aea <spectral_subtraction+0x1be>
	{
		if((i % 2 ) == 0)
 8000a50:	8a7b      	ldrh	r3, [r7, #18]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d120      	bne.n	8000a9e <spectral_subtraction+0x172>
		{
			fft_output_buffer[i] = cos(phases[buffer_index])*clean_magnitudes[buffer_index];
 8000a5c:	8bfb      	ldrh	r3, [r7, #30]
 8000a5e:	4a3c      	ldr	r2, [pc, #240]	; (8000b50 <spectral_subtraction+0x224>)
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	edd3 7a00 	vldr	s15, [r3]
 8000a68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a6c:	eeb0 0b47 	vmov.f64	d0, d7
 8000a70:	f00a fb02 	bl	800b078 <cos>
 8000a74:	eeb0 6b40 	vmov.f64	d6, d0
 8000a78:	8bfb      	ldrh	r3, [r7, #30]
 8000a7a:	4a3a      	ldr	r2, [pc, #232]	; (8000b64 <spectral_subtraction+0x238>)
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	edd3 7a00 	vldr	s15, [r3]
 8000a84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a88:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a8c:	8a7b      	ldrh	r3, [r7, #18]
 8000a8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a92:	4a2c      	ldr	r2, [pc, #176]	; (8000b44 <spectral_subtraction+0x218>)
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	edc3 7a00 	vstr	s15, [r3]
 8000a9c:	e022      	b.n	8000ae4 <spectral_subtraction+0x1b8>
		}
		else
		{
			fft_output_buffer[i] = sin(phases[buffer_index])*clean_magnitudes[buffer_index];
 8000a9e:	8bfb      	ldrh	r3, [r7, #30]
 8000aa0:	4a2b      	ldr	r2, [pc, #172]	; (8000b50 <spectral_subtraction+0x224>)
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	edd3 7a00 	vldr	s15, [r3]
 8000aaa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aae:	eeb0 0b47 	vmov.f64	d0, d7
 8000ab2:	f00a fb2d 	bl	800b110 <sin>
 8000ab6:	eeb0 6b40 	vmov.f64	d6, d0
 8000aba:	8bfb      	ldrh	r3, [r7, #30]
 8000abc:	4a29      	ldr	r2, [pc, #164]	; (8000b64 <spectral_subtraction+0x238>)
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	edd3 7a00 	vldr	s15, [r3]
 8000ac6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aca:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ace:	8a7b      	ldrh	r3, [r7, #18]
 8000ad0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <spectral_subtraction+0x218>)
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	edc3 7a00 	vstr	s15, [r3]
			buffer_index++;
 8000ade:	8bfb      	ldrh	r3, [r7, #30]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	83fb      	strh	r3, [r7, #30]
	for(uint16_t i = 0 ; i< FFT_BUFFER_SIZE ; i++)
 8000ae4:	8a7b      	ldrh	r3, [r7, #18]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	827b      	strh	r3, [r7, #18]
 8000aea:	8a7b      	ldrh	r3, [r7, #18]
 8000aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000af0:	d3ae      	bcc.n	8000a50 <spectral_subtraction+0x124>
		}
	}

	//INVERSE FFT TO RECONSTRUCT SIGNAL
	arm_rfft_fast_f32(&fft_handler, (float32_t*)fft_output_buffer, (float32_t*)fft_input_buffer, 1);
 8000af2:	2301      	movs	r3, #1
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <spectral_subtraction+0x21c>)
 8000af6:	4913      	ldr	r1, [pc, #76]	; (8000b44 <spectral_subtraction+0x218>)
 8000af8:	4814      	ldr	r0, [pc, #80]	; (8000b4c <spectral_subtraction+0x220>)
 8000afa:	f009 fa7b 	bl	8009ff4 <arm_rfft_fast_f32>

	//SPI TRANSFER
	int32_t data_to_transfer = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
	for (int idx = 0; idx < FFT_BUFFER_SIZE; idx++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	e014      	b.n	8000b32 <spectral_subtraction+0x206>
	{
		data_to_transfer = (int32_t)(FLOAT32_TO_INT32 * fft_input_buffer[idx]);
 8000b08:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <spectral_subtraction+0x21c>)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	edd3 7a00 	vldr	s15, [r3]
 8000b14:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000b68 <spectral_subtraction+0x23c>
 8000b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b20:	ee17 3a90 	vmov	r3, s15
 8000b24:	607b      	str	r3, [r7, #4]
		spi_data_send(data_to_transfer);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fdc0 	bl	80006ac <spi_data_send>
	for (int idx = 0; idx < FFT_BUFFER_SIZE; idx++)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b38:	dbe6      	blt.n	8000b08 <spectral_subtraction+0x1dc>
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	bf00      	nop
 8000b3e:	3720      	adds	r7, #32
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2000e620 	.word	0x2000e620
 8000b48:	2000a620 	.word	0x2000a620
 8000b4c:	2000a608 	.word	0x2000a608
 8000b50:	20012624 	.word	0x20012624
 8000b54:	20014624 	.word	0x20014624
 8000b58:	20016624 	.word	0x20016624
 8000b5c:	43ff8000 	.word	0x43ff8000
 8000b60:	44000000 	.word	0x44000000
 8000b64:	20018624 	.word	0x20018624
 8000b68:	4f000000 	.word	0x4f000000

08000b6c <process_data>:


void process_data(int m)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	i2s_rx_half_complete_flag = 0;
 8000b74:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <process_data+0xe4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
	i2s_rx_full_complete_flag = 0;
 8000b7a:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <process_data+0xe8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]

	int buffer_start = m * (BUFFER_SIZE/2);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	031b      	lsls	r3, r3, #12
 8000b84:	60fb      	str	r3, [r7, #12]
	int buffer_end = buffer_start + (BUFFER_SIZE/2);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b8c:	60bb      	str	r3, [r7, #8]
	int idx = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]

	for (int position = buffer_start; position < buffer_end; position += 4)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	e052      	b.n	8000c3e <process_data+0xd2>
	{
		left_sample[idx] = INT32_TO_FLOAT32 * ((int)(rx_buffer[position]<<16)|rx_buffer[position + 1]);
 8000b98:	4a2f      	ldr	r2, [pc, #188]	; (8000c58 <process_data+0xec>)
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba0:	041b      	lsls	r3, r3, #16
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	3201      	adds	r2, #1
 8000ba6:	492c      	ldr	r1, [pc, #176]	; (8000c58 <process_data+0xec>)
 8000ba8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	ee07 3a90 	vmov	s15, r3
 8000bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bb6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000c5c <process_data+0xf0>
 8000bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bbe:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <process_data+0xf4>)
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	edc3 7a00 	vstr	s15, [r3]
		right_sample[idx] = INT32_TO_FLOAT32 * ((int) (rx_buffer[position+2]<<16)|rx_buffer[position + 3]);
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3302      	adds	r3, #2
 8000bce:	4a22      	ldr	r2, [pc, #136]	; (8000c58 <process_data+0xec>)
 8000bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd4:	041b      	lsls	r3, r3, #16
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	3203      	adds	r2, #3
 8000bda:	491f      	ldr	r1, [pc, #124]	; (8000c58 <process_data+0xec>)
 8000bdc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	ee07 3a90 	vmov	s15, r3
 8000be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bea:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000c5c <process_data+0xf0>
 8000bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf2:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <process_data+0xf8>)
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	edc3 7a00 	vstr	s15, [r3]

		fft_input_buffer[fft_idx] = left_sample[idx];
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <process_data+0xfc>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4917      	ldr	r1, [pc, #92]	; (8000c60 <process_data+0xf4>)
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	0092      	lsls	r2, r2, #2
 8000c08:	440a      	add	r2, r1
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	4917      	ldr	r1, [pc, #92]	; (8000c6c <process_data+0x100>)
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	440b      	add	r3, r1
 8000c12:	601a      	str	r2, [r3, #0]
		fft_idx++;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <process_data+0xfc>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <process_data+0xfc>)
 8000c1c:	6013      	str	r3, [r2, #0]
		if(fft_idx == FFT_BUFFER_SIZE)
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <process_data+0xfc>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c26:	d104      	bne.n	8000c32 <process_data+0xc6>
		{
			spectral_subtraction();
 8000c28:	f7ff fe80 	bl	800092c <spectral_subtraction>
			fft_idx = 0;
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <process_data+0xfc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
		}
		idx++;
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	3301      	adds	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
	for (int position = buffer_start; position < buffer_end; position += 4)
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	dba8      	blt.n	8000b98 <process_data+0x2c>
	}
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200084fc 	.word	0x200084fc
 8000c54:	200084fd 	.word	0x200084fd
 8000c58:	200004fc 	.word	0x200004fc
 8000c5c:	30000000 	.word	0x30000000
 8000c60:	20008500 	.word	0x20008500
 8000c64:	20009500 	.word	0x20009500
 8000c68:	20012620 	.word	0x20012620
 8000c6c:	2000a620 	.word	0x2000a620

08000c70 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	i2s_rx_half_complete_flag = 1;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin,1);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2104      	movs	r1, #4
 8000c82:	4804      	ldr	r0, [pc, #16]	; (8000c94 <HAL_I2S_RxHalfCpltCallback+0x24>)
 8000c84:	f001 fc52 	bl	800252c <HAL_GPIO_WritePin>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	200084fc 	.word	0x200084fc
 8000c94:	40020000 	.word	0x40020000

08000c98 <HAL_SPI_TxCpltCallback>:
	i2s_rx_full_complete_flag = 1;
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin,1);
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	spi_tx_ready_flag = 1;
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <HAL_SPI_TxCpltCallback+0x1c>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b5b0      	push	{r4, r5, r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbe:	f000 fd7e 	bl	80017be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc2:	f000 f855 	bl	8000d70 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cc6:	f000 f8c1 	bl	8000e4c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cca:	f000 f9ad 	bl	8001028 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cce:	f000 f971 	bl	8000fb4 <MX_DMA_Init>
  MX_SPI4_Init();
 8000cd2:	f000 f935 	bl	8000f40 <MX_SPI4_Init>
  MX_I2S2_Init();
 8000cd6:	f000 f8dd 	bl	8000e94 <MX_I2S2_Init>
  MX_USB_DEVICE_Init();
 8000cda:	f008 fb51 	bl	8009380 <MX_USB_DEVICE_Init>
  MX_I2S3_Init();
 8000cde:	f000 f905 	bl	8000eec <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  uint8_t startup_msg[20] = "PROGRAM STARTING\n";
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <main+0x94>)
 8000ce4:	1d3c      	adds	r4, r7, #4
 8000ce6:	461d      	mov	r5, r3
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cec:	682b      	ldr	r3, [r5, #0]
 8000cee:	8023      	strh	r3, [r4, #0]
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	82fb      	strh	r3, [r7, #22]
  CDC_Transmit_FS(startup_msg, 20);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2114      	movs	r1, #20
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f008 fbff 	bl	80094fc <CDC_Transmit_FS>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin,1);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2110      	movs	r1, #16
 8000d02:	4813      	ldr	r0, [pc, #76]	; (8000d50 <main+0x98>)
 8000d04:	f001 fc12 	bl	800252c <HAL_GPIO_WritePin>

  HAL_I2S_Receive_DMA(&hi2s2, rx_buffer, BUFFER_SIZE/2);
 8000d08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d0c:	4911      	ldr	r1, [pc, #68]	; (8000d54 <main+0x9c>)
 8000d0e:	4812      	ldr	r0, [pc, #72]	; (8000d58 <main+0xa0>)
 8000d10:	f001 fdb4 	bl	800287c <HAL_I2S_Receive_DMA>
  HAL_I2S_Transmit_DMA(&hi2s3, tx_buffer, BUFFER_SIZE/2);
 8000d14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d18:	4910      	ldr	r1, [pc, #64]	; (8000d5c <main+0xa4>)
 8000d1a:	4811      	ldr	r0, [pc, #68]	; (8000d60 <main+0xa8>)
 8000d1c:	f001 fd06 	bl	800272c <HAL_I2S_Transmit_DMA>

  arm_rfft_fast_init_f32(&fft_handler, FFT_BUFFER_SIZE);
 8000d20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d24:	480f      	ldr	r0, [pc, #60]	; (8000d64 <main+0xac>)
 8000d26:	f009 f8b1 	bl	8009e8c <arm_rfft_fast_init_f32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (i2s_rx_half_complete_flag)
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <main+0xb0>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <main+0x82>
	  {
	  	process_data(0);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff ff1a 	bl	8000b6c <process_data>
 8000d38:	e7f7      	b.n	8000d2a <main+0x72>
	  }
	  else if (i2s_rx_full_complete_flag)
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <main+0xb4>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f3      	beq.n	8000d2a <main+0x72>
	  {
	  	process_data(1);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff ff12 	bl	8000b6c <process_data>
	  if (i2s_rx_half_complete_flag)
 8000d48:	e7ef      	b.n	8000d2a <main+0x72>
 8000d4a:	bf00      	nop
 8000d4c:	0800e8e8 	.word	0x0800e8e8
 8000d50:	40020800 	.word	0x40020800
 8000d54:	200004fc 	.word	0x200004fc
 8000d58:	200002f8 	.word	0x200002f8
 8000d5c:	200044fc 	.word	0x200044fc
 8000d60:	20000338 	.word	0x20000338
 8000d64:	2000a608 	.word	0x2000a608
 8000d68:	200084fc 	.word	0x200084fc
 8000d6c:	200084fd 	.word	0x200084fd

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b094      	sub	sp, #80	; 0x50
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	2234      	movs	r2, #52	; 0x34
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f00b ff8d 	bl	800cc9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d94:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <SystemClock_Config+0xd4>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a2a      	ldr	r2, [pc, #168]	; (8000e44 <SystemClock_Config+0xd4>)
 8000d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <SystemClock_Config+0xd4>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <SystemClock_Config+0xd8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a25      	ldr	r2, [pc, #148]	; (8000e48 <SystemClock_Config+0xd8>)
 8000db2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <SystemClock_Config+0xd8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dcc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000ddc:	23d8      	movs	r3, #216	; 0xd8
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000de4:	2309      	movs	r3, #9
 8000de6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 f9fd 	bl	80041f0 <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000dfc:	f000 f9ac 	bl	8001158 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e00:	f003 f9a6 	bl	8004150 <HAL_PWREx_EnableOverDrive>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e0a:	f000 f9a5 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2302      	movs	r3, #2
 8000e14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	2107      	movs	r1, #7
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 fc8d 	bl	800474c <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000e38:	f000 f98e 	bl	8001158 <Error_Handler>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3750      	adds	r7, #80	; 0x50
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40007000 	.word	0x40007000

08000e4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b0a4      	sub	sp, #144	; 0x90
 8000e50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e52:	463b      	mov	r3, r7
 8000e54:	2290      	movs	r2, #144	; 0x90
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f00b ff20 	bl	800cc9e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 99;
 8000e62:	2363      	movs	r3, #99	; 0x63
 8000e64:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000e76:	2300      	movs	r3, #0
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 fe61 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <PeriphCommonClock_Config+0x40>
  {
    Error_Handler();
 8000e88:	f000 f966 	bl	8001158 <Error_Handler>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3790      	adds	r7, #144	; 0x90
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_I2S2_Init+0x50>)
 8000e9a:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <MX_I2S2_Init+0x54>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_I2S2_Init+0x50>)
 8000ea0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ea4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_I2S2_Init+0x50>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <MX_I2S2_Init+0x50>)
 8000eae:	2203      	movs	r2, #3
 8000eb0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_I2S2_Init+0x50>)
 8000eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_I2S2_Init+0x50>)
 8000ebc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ec0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_I2S2_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_I2S2_Init+0x50>)
 8000eca:	2202      	movs	r2, #2
 8000ecc:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_I2S2_Init+0x50>)
 8000ed0:	f001 fb46 	bl	8002560 <HAL_I2S_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_I2S2_Init+0x4a>
  {
    Error_Handler();
 8000eda:	f000 f93d 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200002f8 	.word	0x200002f8
 8000ee8:	40003800 	.word	0x40003800

08000eec <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_I2S3_Init+0x4c>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <MX_I2S3_Init+0x50>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_I2S3_Init+0x4c>)
 8000ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_I2S3_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_I2S3_Init+0x4c>)
 8000f06:	2203      	movs	r2, #3
 8000f08:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_I2S3_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_I2S3_Init+0x4c>)
 8000f12:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000f16:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <MX_I2S3_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_I2S3_Init+0x4c>)
 8000f20:	2202      	movs	r2, #2
 8000f22:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_I2S3_Init+0x4c>)
 8000f26:	f001 fb1b 	bl	8002560 <HAL_I2S_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_I2S3_Init+0x48>
  {
    Error_Handler();
 8000f30:	f000 f912 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000338 	.word	0x20000338
 8000f3c:	40003c00 	.word	0x40003c00

08000f40 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_SPI4_Init+0x6c>)
 8000f46:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <MX_SPI4_Init+0x70>)
 8000f48:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_SPI4_Init+0x6c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_SPI4_Init+0x6c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_SPI4_Init+0x6c>)
 8000f58:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f5c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_SPI4_Init+0x6c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_SPI4_Init+0x6c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <MX_SPI4_Init+0x6c>)
 8000f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f70:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_SPI4_Init+0x6c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_SPI4_Init+0x6c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_SPI4_Init+0x6c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_SPI4_Init+0x6c>)
 8000f86:	2207      	movs	r2, #7
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_SPI4_Init+0x6c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_SPI4_Init+0x6c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_SPI4_Init+0x6c>)
 8000f98:	f004 f9fc 	bl	8005394 <HAL_SPI_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_SPI4_Init+0x66>
  {
    Error_Handler();
 8000fa2:	f000 f8d9 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000438 	.word	0x20000438
 8000fb0:	40013400 	.word	0x40013400

08000fb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_DMA_Init+0x70>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a19      	ldr	r2, [pc, #100]	; (8001024 <MX_DMA_Init+0x70>)
 8000fc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_DMA_Init+0x70>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_DMA_Init+0x70>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a13      	ldr	r2, [pc, #76]	; (8001024 <MX_DMA_Init+0x70>)
 8000fd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_DMA_Init+0x70>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	200c      	movs	r0, #12
 8000ff0:	f000 fd41 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ff4:	200c      	movs	r0, #12
 8000ff6:	f000 fd5a 	bl	8001aae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2010      	movs	r0, #16
 8001000:	f000 fd39 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001004:	2010      	movs	r0, #16
 8001006:	f000 fd52 	bl	8001aae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	2039      	movs	r0, #57	; 0x39
 8001010:	f000 fd31 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001014:	2039      	movs	r0, #57	; 0x39
 8001016:	f000 fd4a 	bl	8001aae <HAL_NVIC_EnableIRQ>

}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800103e:	4b42      	ldr	r3, [pc, #264]	; (8001148 <MX_GPIO_Init+0x120>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a41      	ldr	r2, [pc, #260]	; (8001148 <MX_GPIO_Init+0x120>)
 8001044:	f043 0310 	orr.w	r3, r3, #16
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <MX_GPIO_Init+0x120>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0310 	and.w	r3, r3, #16
 8001052:	61bb      	str	r3, [r7, #24]
 8001054:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001056:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <MX_GPIO_Init+0x120>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a3b      	ldr	r2, [pc, #236]	; (8001148 <MX_GPIO_Init+0x120>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b39      	ldr	r3, [pc, #228]	; (8001148 <MX_GPIO_Init+0x120>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	4b36      	ldr	r3, [pc, #216]	; (8001148 <MX_GPIO_Init+0x120>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a35      	ldr	r2, [pc, #212]	; (8001148 <MX_GPIO_Init+0x120>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b33      	ldr	r3, [pc, #204]	; (8001148 <MX_GPIO_Init+0x120>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	4b30      	ldr	r3, [pc, #192]	; (8001148 <MX_GPIO_Init+0x120>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a2f      	ldr	r2, [pc, #188]	; (8001148 <MX_GPIO_Init+0x120>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <MX_GPIO_Init+0x120>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <MX_GPIO_Init+0x120>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a29      	ldr	r2, [pc, #164]	; (8001148 <MX_GPIO_Init+0x120>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b27      	ldr	r3, [pc, #156]	; (8001148 <MX_GPIO_Init+0x120>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <MX_GPIO_Init+0x120>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a23      	ldr	r2, [pc, #140]	; (8001148 <MX_GPIO_Init+0x120>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <MX_GPIO_Init+0x120>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_F0_GPIO_Port, PIN_F0_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2101      	movs	r1, #1
 80010d2:	481e      	ldr	r0, [pc, #120]	; (800114c <MX_GPIO_Init+0x124>)
 80010d4:	f001 fa2a 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2184      	movs	r1, #132	; 0x84
 80010dc:	481c      	ldr	r0, [pc, #112]	; (8001150 <MX_GPIO_Init+0x128>)
 80010de:	f001 fa25 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2110      	movs	r1, #16
 80010e6:	481b      	ldr	r0, [pc, #108]	; (8001154 <MX_GPIO_Init+0x12c>)
 80010e8:	f001 fa20 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PIN_F0_Pin */
  GPIO_InitStruct.Pin = PIN_F0_Pin;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PIN_F0_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4812      	ldr	r0, [pc, #72]	; (800114c <MX_GPIO_Init+0x124>)
 8001104:	f001 f866 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_3_Pin;
 8001108:	2384      	movs	r3, #132	; 0x84
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <MX_GPIO_Init+0x128>)
 8001120:	f001 f858 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8001124:	2310      	movs	r3, #16
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_GPIO_Init+0x12c>)
 800113c:	f001 f84a 	bl	80021d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001140:	bf00      	nop
 8001142:	3730      	adds	r7, #48	; 0x30
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40021400 	.word	0x40021400
 8001150:	40020000 	.word	0x40020000
 8001154:	40020800 	.word	0x40020800

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <Error_Handler+0x8>
	...

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_MspInit+0x44>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <HAL_MspInit+0x44>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_MspInit+0x44>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_MspInit+0x44>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_MspInit+0x44>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_MspInit+0x44>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08e      	sub	sp, #56	; 0x38
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a8e      	ldr	r2, [pc, #568]	; (8001404 <HAL_I2S_MspInit+0x258>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d176      	bne.n	80012bc <HAL_I2S_MspInit+0x110>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011ce:	4b8e      	ldr	r3, [pc, #568]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a8d      	ldr	r2, [pc, #564]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b8b      	ldr	r3, [pc, #556]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	623b      	str	r3, [r7, #32]
 80011e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b88      	ldr	r3, [pc, #544]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a87      	ldr	r2, [pc, #540]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b85      	ldr	r3, [pc, #532]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b82      	ldr	r3, [pc, #520]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a81      	ldr	r2, [pc, #516]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b7f      	ldr	r3, [pc, #508]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001216:	2348      	movs	r3, #72	; 0x48
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001226:	2305      	movs	r3, #5
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	4876      	ldr	r0, [pc, #472]	; (800140c <HAL_I2S_MspInit+0x260>)
 8001232:	f000 ffcf 	bl	80021d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001236:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001248:	2305      	movs	r3, #5
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	486f      	ldr	r0, [pc, #444]	; (8001410 <HAL_I2S_MspInit+0x264>)
 8001254:	f000 ffbe 	bl	80021d4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8001258:	4b6e      	ldr	r3, [pc, #440]	; (8001414 <HAL_I2S_MspInit+0x268>)
 800125a:	4a6f      	ldr	r2, [pc, #444]	; (8001418 <HAL_I2S_MspInit+0x26c>)
 800125c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 800125e:	4b6d      	ldr	r3, [pc, #436]	; (8001414 <HAL_I2S_MspInit+0x268>)
 8001260:	f04f 5290 	mov.w	r2, #301989888	; 0x12000000
 8001264:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001266:	4b6b      	ldr	r3, [pc, #428]	; (8001414 <HAL_I2S_MspInit+0x268>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126c:	4b69      	ldr	r3, [pc, #420]	; (8001414 <HAL_I2S_MspInit+0x268>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001272:	4b68      	ldr	r3, [pc, #416]	; (8001414 <HAL_I2S_MspInit+0x268>)
 8001274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001278:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800127a:	4b66      	ldr	r3, [pc, #408]	; (8001414 <HAL_I2S_MspInit+0x268>)
 800127c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001280:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001282:	4b64      	ldr	r3, [pc, #400]	; (8001414 <HAL_I2S_MspInit+0x268>)
 8001284:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001288:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800128a:	4b62      	ldr	r3, [pc, #392]	; (8001414 <HAL_I2S_MspInit+0x268>)
 800128c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001290:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001292:	4b60      	ldr	r3, [pc, #384]	; (8001414 <HAL_I2S_MspInit+0x268>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001298:	4b5e      	ldr	r3, [pc, #376]	; (8001414 <HAL_I2S_MspInit+0x268>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800129e:	485d      	ldr	r0, [pc, #372]	; (8001414 <HAL_I2S_MspInit+0x268>)
 80012a0:	f000 fc20 	bl	8001ae4 <HAL_DMA_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2S_MspInit+0x102>
    {
      Error_Handler();
 80012aa:	f7ff ff55 	bl	8001158 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a58      	ldr	r2, [pc, #352]	; (8001414 <HAL_I2S_MspInit+0x268>)
 80012b2:	635a      	str	r2, [r3, #52]	; 0x34
 80012b4:	4a57      	ldr	r2, [pc, #348]	; (8001414 <HAL_I2S_MspInit+0x268>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012ba:	e09f      	b.n	80013fc <HAL_I2S_MspInit+0x250>
  else if(hi2s->Instance==SPI3)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a56      	ldr	r2, [pc, #344]	; (800141c <HAL_I2S_MspInit+0x270>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	f040 809a 	bne.w	80013fc <HAL_I2S_MspInit+0x250>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012c8:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a4e      	ldr	r2, [pc, #312]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 80012ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
 80012d4:	4b4c      	ldr	r3, [pc, #304]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b49      	ldr	r3, [pc, #292]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	4a48      	ldr	r2, [pc, #288]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6313      	str	r3, [r2, #48]	; 0x30
 80012ec:	4b46      	ldr	r3, [pc, #280]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	4b43      	ldr	r3, [pc, #268]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4a42      	ldr	r2, [pc, #264]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	6313      	str	r3, [r2, #48]	; 0x30
 8001304:	4b40      	ldr	r3, [pc, #256]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001310:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4a3c      	ldr	r2, [pc, #240]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6313      	str	r3, [r2, #48]	; 0x30
 800131c:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <HAL_I2S_MspInit+0x25c>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001328:	2310      	movs	r3, #16
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001338:	2306      	movs	r3, #6
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	4837      	ldr	r0, [pc, #220]	; (8001420 <HAL_I2S_MspInit+0x274>)
 8001344:	f000 ff46 	bl	80021d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001348:	2304      	movs	r3, #4
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001358:	2307      	movs	r3, #7
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	482b      	ldr	r0, [pc, #172]	; (8001410 <HAL_I2S_MspInit+0x264>)
 8001364:	f000 ff36 	bl	80021d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800137a:	2306      	movs	r3, #6
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	4821      	ldr	r0, [pc, #132]	; (800140c <HAL_I2S_MspInit+0x260>)
 8001386:	f000 ff25 	bl	80021d4 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <HAL_I2S_MspInit+0x278>)
 800138c:	4a26      	ldr	r2, [pc, #152]	; (8001428 <HAL_I2S_MspInit+0x27c>)
 800138e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_I2S_MspInit+0x278>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <HAL_I2S_MspInit+0x278>)
 8001398:	2240      	movs	r2, #64	; 0x40
 800139a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800139c:	4b21      	ldr	r3, [pc, #132]	; (8001424 <HAL_I2S_MspInit+0x278>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <HAL_I2S_MspInit+0x278>)
 80013a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <HAL_I2S_MspInit+0x278>)
 80013ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <HAL_I2S_MspInit+0x278>)
 80013b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013b8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <HAL_I2S_MspInit+0x278>)
 80013bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_I2S_MspInit+0x278>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_I2S_MspInit+0x278>)
 80013ca:	2204      	movs	r2, #4
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_I2S_MspInit+0x278>)
 80013d0:	2203      	movs	r2, #3
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_I2S_MspInit+0x278>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_I2S_MspInit+0x278>)
 80013dc:	2200      	movs	r2, #0
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80013e0:	4810      	ldr	r0, [pc, #64]	; (8001424 <HAL_I2S_MspInit+0x278>)
 80013e2:	f000 fb7f 	bl	8001ae4 <HAL_DMA_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_I2S_MspInit+0x244>
      Error_Handler();
 80013ec:	f7ff feb4 	bl	8001158 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <HAL_I2S_MspInit+0x278>)
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <HAL_I2S_MspInit+0x278>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6393      	str	r3, [r2, #56]	; 0x38
}
 80013fc:	bf00      	nop
 80013fe:	3738      	adds	r7, #56	; 0x38
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40003800 	.word	0x40003800
 8001408:	40023800 	.word	0x40023800
 800140c:	40020800 	.word	0x40020800
 8001410:	40020400 	.word	0x40020400
 8001414:	20000378 	.word	0x20000378
 8001418:	40026028 	.word	0x40026028
 800141c:	40003c00 	.word	0x40003c00
 8001420:	40020000 	.word	0x40020000
 8001424:	200003d8 	.word	0x200003d8
 8001428:	40026088 	.word	0x40026088

0800142c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a2e      	ldr	r2, [pc, #184]	; (8001504 <HAL_SPI_MspInit+0xd8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d155      	bne.n	80014fa <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800144e:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_SPI_MspInit+0xdc>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a2d      	ldr	r2, [pc, #180]	; (8001508 <HAL_SPI_MspInit+0xdc>)
 8001454:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_SPI_MspInit+0xdc>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_SPI_MspInit+0xdc>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a27      	ldr	r2, [pc, #156]	; (8001508 <HAL_SPI_MspInit+0xdc>)
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <HAL_SPI_MspInit+0xdc>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800147e:	2364      	movs	r3, #100	; 0x64
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800148e:	2305      	movs	r3, #5
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	481c      	ldr	r0, [pc, #112]	; (800150c <HAL_SPI_MspInit+0xe0>)
 800149a:	f000 fe9b 	bl	80021d4 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <HAL_SPI_MspInit+0xe4>)
 80014a0:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <HAL_SPI_MspInit+0xe8>)
 80014a2:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <HAL_SPI_MspInit+0xe4>)
 80014a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014aa:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_SPI_MspInit+0xe4>)
 80014ae:	2240      	movs	r2, #64	; 0x40
 80014b0:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_SPI_MspInit+0xe4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_SPI_MspInit+0xe4>)
 80014ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014be:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_SPI_MspInit+0xe4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_SPI_MspInit+0xe4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_SPI_MspInit+0xe4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_SPI_MspInit+0xe4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_SPI_MspInit+0xe4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <HAL_SPI_MspInit+0xe4>)
 80014e0:	f000 fb00 	bl	8001ae4 <HAL_DMA_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 80014ea:	f7ff fe35 	bl	8001158 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a07      	ldr	r2, [pc, #28]	; (8001510 <HAL_SPI_MspInit+0xe4>)
 80014f2:	655a      	str	r2, [r3, #84]	; 0x54
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <HAL_SPI_MspInit+0xe4>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	; 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40013400 	.word	0x40013400
 8001508:	40023800 	.word	0x40023800
 800150c:	40021000 	.word	0x40021000
 8001510:	2000049c 	.word	0x2000049c
 8001514:	40026428 	.word	0x40026428

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001564:	f000 f968 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <DMA1_Stream1_IRQHandler+0x10>)
 8001572:	f000 fbc5 	bl	8001d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000378 	.word	0x20000378

08001580 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <DMA1_Stream5_IRQHandler+0x10>)
 8001586:	f000 fbbb 	bl	8001d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200003d8 	.word	0x200003d8

08001594 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <DMA2_Stream1_IRQHandler+0x10>)
 800159a:	f000 fbb1 	bl	8001d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000049c 	.word	0x2000049c

080015a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <OTG_FS_IRQHandler+0x10>)
 80015ae:	f001 fc5d 	bl	8002e6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2001befc 	.word	0x2001befc

080015bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return 1;
 80015c0:	2301      	movs	r3, #1
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <_kill>:

int _kill(int pid, int sig)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015d6:	f00b fbc5 	bl	800cd64 <__errno>
 80015da:	4603      	mov	r3, r0
 80015dc:	2216      	movs	r2, #22
 80015de:	601a      	str	r2, [r3, #0]
  return -1;
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_exit>:

void _exit (int status)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ffe7 	bl	80015cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80015fe:	e7fe      	b.n	80015fe <_exit+0x12>

08001600 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	e00a      	b.n	8001628 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001612:	f3af 8000 	nop.w
 8001616:	4601      	mov	r1, r0
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	60ba      	str	r2, [r7, #8]
 800161e:	b2ca      	uxtb	r2, r1
 8001620:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3301      	adds	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	429a      	cmp	r2, r3
 800162e:	dbf0      	blt.n	8001612 <_read+0x12>
  }

  return len;
 8001630:	687b      	ldr	r3, [r7, #4]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e009      	b.n	8001660 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	60ba      	str	r2, [r7, #8]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbf1      	blt.n	800164c <_write+0x12>
  }
  return len;
 8001668:	687b      	ldr	r3, [r7, #4]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_close>:

int _close(int file)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800169a:	605a      	str	r2, [r3, #4]
  return 0;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_isatty>:

int _isatty(int file)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <_sbrk+0x5c>)
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <_sbrk+0x60>)
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <_sbrk+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <_sbrk+0x64>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <_sbrk+0x68>)
 80016fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	429a      	cmp	r2, r3
 800170a:	d207      	bcs.n	800171c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800170c:	f00b fb2a 	bl	800cd64 <__errno>
 8001710:	4603      	mov	r3, r0
 8001712:	220c      	movs	r2, #12
 8001714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	e009      	b.n	8001730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <_sbrk+0x64>)
 800172c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20080000 	.word	0x20080000
 800173c:	00000400 	.word	0x00000400
 8001740:	2001aa14 	.word	0x2001aa14
 8001744:	2001c550 	.word	0x2001c550

08001748 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SystemInit+0x20>)
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <SystemInit+0x20>)
 8001754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800176c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001770:	480d      	ldr	r0, [pc, #52]	; (80017a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001772:	490e      	ldr	r1, [pc, #56]	; (80017ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001774:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001778:	e002      	b.n	8001780 <LoopCopyDataInit>

0800177a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800177c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177e:	3304      	adds	r3, #4

08001780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001784:	d3f9      	bcc.n	800177a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001786:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001788:	4c0b      	ldr	r4, [pc, #44]	; (80017b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800178c:	e001      	b.n	8001792 <LoopFillZerobss>

0800178e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001790:	3204      	adds	r2, #4

08001792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001794:	d3fb      	bcc.n	800178e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001796:	f7ff ffd7 	bl	8001748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800179a:	f00b fae9 	bl	800cd70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800179e:	f7ff fa8b 	bl	8000cb8 <main>
  bx  lr    
 80017a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017a4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80017a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ac:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 80017b0:	08022384 	.word	0x08022384
  ldr r2, =_sbss
 80017b4:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 80017b8:	2001c550 	.word	0x2001c550

080017bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017bc:	e7fe      	b.n	80017bc <ADC_IRQHandler>

080017be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c2:	2003      	movs	r0, #3
 80017c4:	f000 f94c 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c8:	200f      	movs	r0, #15
 80017ca:	f000 f805 	bl	80017d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ce:	f7ff fcc9 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x54>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x58>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f967 	bl	8001aca <HAL_SYSTICK_Config>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e00e      	b.n	8001824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d80a      	bhi.n	8001822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f000 f92f 	bl	8001a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <HAL_InitTick+0x5c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000008 	.word	0x20000008
 8001830:	20000010 	.word	0x20000010
 8001834:	2000000c 	.word	0x2000000c

08001838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x20>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x24>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HAL_IncTick+0x24>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000010 	.word	0x20000010
 800185c:	2001aa18 	.word	0x2001aa18

08001860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return uwTick;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_GetTick+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	2001aa18 	.word	0x2001aa18

08001878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff ffee 	bl	8001860 <HAL_GetTick>
 8001884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d005      	beq.n	800189e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_Delay+0x44>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800189e:	bf00      	nop
 80018a0:	f7ff ffde 	bl	8001860 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8f7      	bhi.n	80018a0 <HAL_Delay+0x28>
  {
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000010 	.word	0x20000010

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <__NVIC_SetPriorityGrouping+0x40>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ee:	4a04      	ldr	r2, [pc, #16]	; (8001900 <__NVIC_SetPriorityGrouping+0x40>)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	60d3      	str	r3, [r2, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00
 8001904:	05fa0000 	.word	0x05fa0000

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4907      	ldr	r1, [pc, #28]	; (800195c <__NVIC_EnableIRQ+0x38>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2c:	d301      	bcc.n	8001a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <SysTick_Config+0x40>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f7ff ff8e 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SysTick_Config+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <SysTick_Config+0x40>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff29 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff3e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff8e 	bl	80019b4 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5d 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff31 	bl	8001924 <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffa2 	bl	8001a1c <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff feb6 	bl	8001860 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e099      	b.n	8001c34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b20:	e00f      	b.n	8001b42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b22:	f7ff fe9d 	bl	8001860 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d908      	bls.n	8001b42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2220      	movs	r2, #32
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e078      	b.n	8001c34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1e8      	bne.n	8001b22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_DMA_Init+0x158>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d107      	bne.n	8001bac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f023 0307 	bic.w	r3, r3, #7
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d117      	bne.n	8001c06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00e      	beq.n	8001c06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fa77 	bl	80020dc <DMA_CheckFifoParam>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2240      	movs	r2, #64	; 0x40
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c02:	2301      	movs	r3, #1
 8001c04:	e016      	b.n	8001c34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fa2e 	bl	8002070 <DMA_CalcBaseAndBitshift>
 8001c14:	4603      	mov	r3, r0
 8001c16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1c:	223f      	movs	r2, #63	; 0x3f
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	e010803f 	.word	0xe010803f

08001c40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_DMA_Start_IT+0x26>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e048      	b.n	8001cf8 <HAL_DMA_Start_IT+0xb8>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d137      	bne.n	8001cea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f9c0 	bl	8002014 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c98:	223f      	movs	r2, #63	; 0x3f
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0216 	orr.w	r2, r2, #22
 8001cae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cbe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0208 	orr.w	r2, r2, #8
 8001cd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	e005      	b.n	8001cf6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001d0c:	4b8e      	ldr	r3, [pc, #568]	; (8001f48 <HAL_DMA_IRQHandler+0x248>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a8e      	ldr	r2, [pc, #568]	; (8001f4c <HAL_DMA_IRQHandler+0x24c>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0a9b      	lsrs	r3, r3, #10
 8001d18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d01a      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0204 	bic.w	r2, r2, #4
 8001d52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	2208      	movs	r2, #8
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	2201      	movs	r2, #1
 8001d72:	409a      	lsls	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d012      	beq.n	8001da2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	2201      	movs	r2, #1
 8001d90:	409a      	lsls	r2, r3
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	f043 0202 	orr.w	r2, r3, #2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da6:	2204      	movs	r2, #4
 8001da8:	409a      	lsls	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d012      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00b      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd0:	f043 0204 	orr.w	r2, r3, #4
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	2210      	movs	r2, #16
 8001dde:	409a      	lsls	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d043      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d03c      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d018      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d108      	bne.n	8001e30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d024      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	4798      	blx	r3
 8001e2e:	e01f      	b.n	8001e70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01b      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	4798      	blx	r3
 8001e40:	e016      	b.n	8001e70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d107      	bne.n	8001e60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0208 	bic.w	r2, r2, #8
 8001e5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	2220      	movs	r2, #32
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 808f 	beq.w	8001fa0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8087 	beq.w	8001fa0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	2220      	movs	r2, #32
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d136      	bne.n	8001f18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0216 	bic.w	r2, r2, #22
 8001eb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d103      	bne.n	8001eda <HAL_DMA_IRQHandler+0x1da>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d007      	beq.n	8001eea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0208 	bic.w	r2, r2, #8
 8001ee8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	223f      	movs	r2, #63	; 0x3f
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d07e      	beq.n	800200c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	4798      	blx	r3
        }
        return;
 8001f16:	e079      	b.n	800200c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d01d      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10d      	bne.n	8001f50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d031      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
 8001f44:	e02c      	b.n	8001fa0 <HAL_DMA_IRQHandler+0x2a0>
 8001f46:	bf00      	nop
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d023      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	4798      	blx	r3
 8001f60:	e01e      	b.n	8001fa0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10f      	bne.n	8001f90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0210 	bic.w	r2, r2, #16
 8001f7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d032      	beq.n	800200e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d022      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2205      	movs	r2, #5
 8001fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d307      	bcc.n	8001fe8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f2      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x2cc>
 8001fe6:	e000      	b.n	8001fea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fe8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
 800200a:	e000      	b.n	800200e <HAL_DMA_IRQHandler+0x30e>
        return;
 800200c:	bf00      	nop
    }
  }
}
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002030:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d108      	bne.n	8002054 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002052:	e007      	b.n	8002064 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	60da      	str	r2, [r3, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	3b10      	subs	r3, #16
 8002080:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <DMA_CalcBaseAndBitshift+0x60>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <DMA_CalcBaseAndBitshift+0x64>)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b03      	cmp	r3, #3
 800209c:	d908      	bls.n	80020b0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <DMA_CalcBaseAndBitshift+0x68>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	1d1a      	adds	r2, r3, #4
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	659a      	str	r2, [r3, #88]	; 0x58
 80020ae:	e006      	b.n	80020be <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <DMA_CalcBaseAndBitshift+0x68>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	aaaaaaab 	.word	0xaaaaaaab
 80020d4:	0800e954 	.word	0x0800e954
 80020d8:	fffffc00 	.word	0xfffffc00

080020dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d11f      	bne.n	8002136 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d856      	bhi.n	80021aa <DMA_CheckFifoParam+0xce>
 80020fc:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <DMA_CheckFifoParam+0x28>)
 80020fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002102:	bf00      	nop
 8002104:	08002115 	.word	0x08002115
 8002108:	08002127 	.word	0x08002127
 800210c:	08002115 	.word	0x08002115
 8002110:	080021ab 	.word	0x080021ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d046      	beq.n	80021ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002124:	e043      	b.n	80021ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800212e:	d140      	bne.n	80021b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002134:	e03d      	b.n	80021b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800213e:	d121      	bne.n	8002184 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b03      	cmp	r3, #3
 8002144:	d837      	bhi.n	80021b6 <DMA_CheckFifoParam+0xda>
 8002146:	a201      	add	r2, pc, #4	; (adr r2, 800214c <DMA_CheckFifoParam+0x70>)
 8002148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214c:	0800215d 	.word	0x0800215d
 8002150:	08002163 	.word	0x08002163
 8002154:	0800215d 	.word	0x0800215d
 8002158:	08002175 	.word	0x08002175
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
      break;
 8002160:	e030      	b.n	80021c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d025      	beq.n	80021ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002172:	e022      	b.n	80021ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002178:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800217c:	d11f      	bne.n	80021be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002182:	e01c      	b.n	80021be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d903      	bls.n	8002192 <DMA_CheckFifoParam+0xb6>
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d003      	beq.n	8002198 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002190:	e018      	b.n	80021c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
      break;
 8002196:	e015      	b.n	80021c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00e      	beq.n	80021c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
      break;
 80021a8:	e00b      	b.n	80021c2 <DMA_CheckFifoParam+0xe6>
      break;
 80021aa:	bf00      	nop
 80021ac:	e00a      	b.n	80021c4 <DMA_CheckFifoParam+0xe8>
      break;
 80021ae:	bf00      	nop
 80021b0:	e008      	b.n	80021c4 <DMA_CheckFifoParam+0xe8>
      break;
 80021b2:	bf00      	nop
 80021b4:	e006      	b.n	80021c4 <DMA_CheckFifoParam+0xe8>
      break;
 80021b6:	bf00      	nop
 80021b8:	e004      	b.n	80021c4 <DMA_CheckFifoParam+0xe8>
      break;
 80021ba:	bf00      	nop
 80021bc:	e002      	b.n	80021c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80021be:	bf00      	nop
 80021c0:	e000      	b.n	80021c4 <DMA_CheckFifoParam+0xe8>
      break;
 80021c2:	bf00      	nop
    }
  } 
  
  return status; 
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e175      	b.n	80024e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	429a      	cmp	r2, r3
 800220e:	f040 8164 	bne.w	80024da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d005      	beq.n	800222a <HAL_GPIO_Init+0x56>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d130      	bne.n	800228c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002260:	2201      	movs	r2, #1
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 0201 	and.w	r2, r3, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b03      	cmp	r3, #3
 8002296:	d017      	beq.n	80022c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d123      	bne.n	800231c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	08da      	lsrs	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3208      	adds	r2, #8
 80022dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	220f      	movs	r2, #15
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	08da      	lsrs	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3208      	adds	r2, #8
 8002316:	69b9      	ldr	r1, [r7, #24]
 8002318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0203 	and.w	r2, r3, #3
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80be 	beq.w	80024da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	4b66      	ldr	r3, [pc, #408]	; (80024f8 <HAL_GPIO_Init+0x324>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a65      	ldr	r2, [pc, #404]	; (80024f8 <HAL_GPIO_Init+0x324>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <HAL_GPIO_Init+0x324>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002376:	4a61      	ldr	r2, [pc, #388]	; (80024fc <HAL_GPIO_Init+0x328>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a58      	ldr	r2, [pc, #352]	; (8002500 <HAL_GPIO_Init+0x32c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d037      	beq.n	8002412 <HAL_GPIO_Init+0x23e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a57      	ldr	r2, [pc, #348]	; (8002504 <HAL_GPIO_Init+0x330>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d031      	beq.n	800240e <HAL_GPIO_Init+0x23a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a56      	ldr	r2, [pc, #344]	; (8002508 <HAL_GPIO_Init+0x334>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d02b      	beq.n	800240a <HAL_GPIO_Init+0x236>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a55      	ldr	r2, [pc, #340]	; (800250c <HAL_GPIO_Init+0x338>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d025      	beq.n	8002406 <HAL_GPIO_Init+0x232>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a54      	ldr	r2, [pc, #336]	; (8002510 <HAL_GPIO_Init+0x33c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01f      	beq.n	8002402 <HAL_GPIO_Init+0x22e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a53      	ldr	r2, [pc, #332]	; (8002514 <HAL_GPIO_Init+0x340>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d019      	beq.n	80023fe <HAL_GPIO_Init+0x22a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a52      	ldr	r2, [pc, #328]	; (8002518 <HAL_GPIO_Init+0x344>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_GPIO_Init+0x226>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a51      	ldr	r2, [pc, #324]	; (800251c <HAL_GPIO_Init+0x348>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00d      	beq.n	80023f6 <HAL_GPIO_Init+0x222>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a50      	ldr	r2, [pc, #320]	; (8002520 <HAL_GPIO_Init+0x34c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_Init+0x21e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4f      	ldr	r2, [pc, #316]	; (8002524 <HAL_GPIO_Init+0x350>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d101      	bne.n	80023ee <HAL_GPIO_Init+0x21a>
 80023ea:	2309      	movs	r3, #9
 80023ec:	e012      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023ee:	230a      	movs	r3, #10
 80023f0:	e010      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023f2:	2308      	movs	r3, #8
 80023f4:	e00e      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023f6:	2307      	movs	r3, #7
 80023f8:	e00c      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023fa:	2306      	movs	r3, #6
 80023fc:	e00a      	b.n	8002414 <HAL_GPIO_Init+0x240>
 80023fe:	2305      	movs	r3, #5
 8002400:	e008      	b.n	8002414 <HAL_GPIO_Init+0x240>
 8002402:	2304      	movs	r3, #4
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x240>
 8002406:	2303      	movs	r3, #3
 8002408:	e004      	b.n	8002414 <HAL_GPIO_Init+0x240>
 800240a:	2302      	movs	r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x240>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x240>
 8002412:	2300      	movs	r3, #0
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	f002 0203 	and.w	r2, r2, #3
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	4093      	lsls	r3, r2
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002424:	4935      	ldr	r1, [pc, #212]	; (80024fc <HAL_GPIO_Init+0x328>)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002432:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <HAL_GPIO_Init+0x354>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002456:	4a34      	ldr	r2, [pc, #208]	; (8002528 <HAL_GPIO_Init+0x354>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245c:	4b32      	ldr	r3, [pc, #200]	; (8002528 <HAL_GPIO_Init+0x354>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002480:	4a29      	ldr	r2, [pc, #164]	; (8002528 <HAL_GPIO_Init+0x354>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002486:	4b28      	ldr	r3, [pc, #160]	; (8002528 <HAL_GPIO_Init+0x354>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024aa:	4a1f      	ldr	r2, [pc, #124]	; (8002528 <HAL_GPIO_Init+0x354>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <HAL_GPIO_Init+0x354>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d4:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_GPIO_Init+0x354>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	f67f ae86 	bls.w	80021f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40013800 	.word	0x40013800
 8002500:	40020000 	.word	0x40020000
 8002504:	40020400 	.word	0x40020400
 8002508:	40020800 	.word	0x40020800
 800250c:	40020c00 	.word	0x40020c00
 8002510:	40021000 	.word	0x40021000
 8002514:	40021400 	.word	0x40021400
 8002518:	40021800 	.word	0x40021800
 800251c:	40021c00 	.word	0x40021c00
 8002520:	40022000 	.word	0x40022000
 8002524:	40022400 	.word	0x40022400
 8002528:	40013c00 	.word	0x40013c00

0800252c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002548:	e003      	b.n	8002552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800254a:	887b      	ldrh	r3, [r7, #2]
 800254c:	041a      	lsls	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0d2      	b.n	8002718 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fe10 	bl	80011ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69d9      	ldr	r1, [r3, #28]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b60      	ldr	r3, [pc, #384]	; (8002720 <HAL_I2S_Init+0x1c0>)
 80025a0:	400b      	ands	r3, r1
 80025a2:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2202      	movs	r2, #2
 80025aa:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d067      	beq.n	8002684 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80025bc:	2310      	movs	r3, #16
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	e001      	b.n	80025c6 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80025c2:	2320      	movs	r3, #32
 80025c4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b20      	cmp	r3, #32
 80025cc:	d802      	bhi.n	80025d4 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d102      	bne.n	80025e2 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 80025dc:	4b51      	ldr	r3, [pc, #324]	; (8002724 <HAL_I2S_Init+0x1c4>)
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	e003      	b.n	80025ea <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fa2e 	bl	8002a44 <I2S_GetClockFreq>
 80025e8:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f2:	d125      	bne.n	8002640 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d010      	beq.n	800261e <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	fbb2 f2f3 	udiv	r2, r2, r3
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	461a      	mov	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	3305      	adds	r3, #5
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	e01f      	b.n	800265e <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	fbb2 f2f3 	udiv	r2, r2, r3
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	461a      	mov	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	3305      	adds	r3, #5
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	e00e      	b.n	800265e <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	fbb2 f2f3 	udiv	r2, r2, r3
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	461a      	mov	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	3305      	adds	r3, #5
 800265c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4a31      	ldr	r2, [pc, #196]	; (8002728 <HAL_I2S_Init+0x1c8>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	08db      	lsrs	r3, r3, #3
 8002668:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	085b      	lsrs	r3, r3, #1
 800267a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	e003      	b.n	800268c <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002684:	2302      	movs	r3, #2
 8002686:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d902      	bls.n	8002698 <HAL_I2S_Init+0x138>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	2bff      	cmp	r3, #255	; 0xff
 8002696:	d907      	bls.n	80026a8 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	f043 0210 	orr.w	r2, r3, #16
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e037      	b.n	8002718 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	ea42 0103 	orr.w	r1, r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69da      	ldr	r2, [r3, #28]
 80026c2:	4b17      	ldr	r3, [pc, #92]	; (8002720 <HAL_I2S_Init+0x1c0>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6851      	ldr	r1, [r2, #4]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6892      	ldr	r2, [r2, #8]
 80026ce:	4311      	orrs	r1, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	68d2      	ldr	r2, [r2, #12]
 80026d4:	4311      	orrs	r1, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6992      	ldr	r2, [r2, #24]
 80026da:	430a      	orrs	r2, r1
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b30      	cmp	r3, #48	; 0x30
 80026ee:	d003      	beq.n	80026f8 <HAL_I2S_Init+0x198>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2bb0      	cmp	r3, #176	; 0xb0
 80026f6:	d107      	bne.n	8002708 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002706:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3720      	adds	r7, #32
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	fffff040 	.word	0xfffff040
 8002724:	00bb8000 	.word	0x00bb8000
 8002728:	cccccccd 	.word	0xcccccccd

0800272c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	4613      	mov	r3, r2
 8002738:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_I2S_Transmit_DMA+0x1a>
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e08e      	b.n	8002868 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_I2S_Transmit_DMA+0x2e>
 8002756:	2302      	movs	r3, #2
 8002758:	e086      	b.n	8002868 <HAL_I2S_Transmit_DMA+0x13c>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d005      	beq.n	800277a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 8002776:	2302      	movs	r3, #2
 8002778:	e076      	b.n	8002868 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2203      	movs	r2, #3
 800277e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pTxBuffPtr = pData;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	621a      	str	r2, [r3, #32]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d002      	beq.n	80027a6 <HAL_I2S_Transmit_DMA+0x7a>
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d10a      	bne.n	80027bc <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = (Size << 1U);
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	84da      	strh	r2, [r3, #38]	; 0x26
 80027ba:	e005      	b.n	80027c8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	88fa      	ldrh	r2, [r7, #6]
 80027c0:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = Size;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	88fa      	ldrh	r2, [r7, #6]
 80027c6:	84da      	strh	r2, [r3, #38]	; 0x26
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	4a28      	ldr	r2, [pc, #160]	; (8002870 <HAL_I2S_Transmit_DMA+0x144>)
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	4a27      	ldr	r2, [pc, #156]	; (8002874 <HAL_I2S_Transmit_DMA+0x148>)
 80027d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	4a26      	ldr	r2, [pc, #152]	; (8002878 <HAL_I2S_Transmit_DMA+0x14c>)
 80027de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
                                 (uint32_t)hi2s->pTxBuffPtr,
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027e8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027f0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80027f8:	f7ff fa22 	bl	8001c40 <HAL_DMA_Start_IT>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00f      	beq.n	8002822 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002806:	f043 0208 	orr.w	r2, r3, #8
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e022      	b.n	8002868 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d107      	bne.n	8002840 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69da      	ldr	r2, [r3, #28]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800283e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d107      	bne.n	800285e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0202 	orr.w	r2, r2, #2
 800285c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	08002b1b 	.word	0x08002b1b
 8002874:	08002ad9 	.word	0x08002ad9
 8002878:	08002b95 	.word	0x08002b95

0800287c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_I2S_Receive_DMA+0x1a>
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0a1      	b.n	80029de <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_I2S_Receive_DMA+0x2e>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e099      	b.n	80029de <HAL_I2S_Receive_DMA+0x162>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d005      	beq.n	80028ca <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 80028c6:	2302      	movs	r3, #2
 80028c8:	e089      	b.n	80029de <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2204      	movs	r2, #4
 80028ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pRxBuffPtr = pData;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d002      	beq.n	80028f6 <HAL_I2S_Receive_DMA+0x7a>
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	d10a      	bne.n	800290c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	85da      	strh	r2, [r3, #46]	; 0x2e
 800290a:	e005      	b.n	8002918 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	88fa      	ldrh	r2, [r7, #6]
 8002910:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = Size;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	88fa      	ldrh	r2, [r7, #6]
 8002916:	85da      	strh	r2, [r3, #46]	; 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291c:	4a32      	ldr	r2, [pc, #200]	; (80029e8 <HAL_I2S_Receive_DMA+0x16c>)
 800291e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002924:	4a31      	ldr	r2, [pc, #196]	; (80029ec <HAL_I2S_Receive_DMA+0x170>)
 8002926:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292c:	4a30      	ldr	r2, [pc, #192]	; (80029f0 <HAL_I2S_Receive_DMA+0x174>)
 800292e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800293e:	d10a      	bne.n	8002956 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002940:	2300      	movs	r3, #0
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	330c      	adds	r3, #12
 8002960:	4619      	mov	r1, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800296c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800296e:	f7ff f967 	bl	8001c40 <HAL_DMA_Start_IT>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00f      	beq.n	8002998 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297c:	f043 0208 	orr.w	r2, r3, #8
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e022      	b.n	80029de <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d107      	bne.n	80029b6 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69da      	ldr	r2, [r3, #28]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029b4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d107      	bne.n	80029d4 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	08002b79 	.word	0x08002b79
 80029ec:	08002b37 	.word	0x08002b37
 80029f0:	08002b95 	.word	0x08002b95

080029f4 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d02d      	beq.n	8002ab0 <I2S_GetClockFreq+0x6c>
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d12e      	bne.n	8002ab6 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002a58:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <I2S_GetClockFreq+0x88>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d108      	bne.n	8002a76 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <I2S_GetClockFreq+0x88>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a6c:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <I2S_GetClockFreq+0x8c>)
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	e007      	b.n	8002a86 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <I2S_GetClockFreq+0x88>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a7e:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <I2S_GetClockFreq+0x8c>)
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <I2S_GetClockFreq+0x88>)
 8002a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a8c:	0f1b      	lsrs	r3, r3, #28
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8002a94:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <I2S_GetClockFreq+0x88>)
 8002a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a9a:	099b      	lsrs	r3, r3, #6
 8002a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	fb03 f202 	mul.w	r2, r3, r2
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aac:	613b      	str	r3, [r7, #16]

      break;
 8002aae:	e005      	b.n	8002abc <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <I2S_GetClockFreq+0x90>)
 8002ab2:	613b      	str	r3, [r7, #16]
      break;
 8002ab4:	e002      	b.n	8002abc <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
      break;
 8002aba:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8002abc:	693b      	ldr	r3, [r7, #16]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	00f42400 	.word	0x00f42400
 8002ad4:	00bb8000 	.word	0x00bb8000

08002ad8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10e      	bne.n	8002b0c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0202 	bic.w	r2, r2, #2
 8002afc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	84da      	strh	r2, [r3, #38]	; 0x26
    hi2s->State = HAL_I2S_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f7ff ff7b 	bl	8002a08 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7ff ff63 	bl	80029f4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10e      	bne.n	8002b6a <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7ff ff56 	bl	8002a1c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f7fe f872 	bl	8000c70 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b8c:	bf00      	nop
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0203 	bic.w	r2, r2, #3
 8002bb0:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	84da      	strh	r2, [r3, #38]	; 0x26
  hi2s->RxXferCount = 0U;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	85da      	strh	r2, [r3, #46]	; 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bca:	f043 0208 	orr.w	r2, r3, #8
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f7ff ff2c 	bl	8002a30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be2:	b08f      	sub	sp, #60	; 0x3c
 8002be4:	af0a      	add	r7, sp, #40	; 0x28
 8002be6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e116      	b.n	8002e20 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d106      	bne.n	8002c12 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f006 fdcf 	bl	80097b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2203      	movs	r2, #3
 8002c16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 f878 	bl	8005d26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	687e      	ldr	r6, [r7, #4]
 8002c3e:	466d      	mov	r5, sp
 8002c40:	f106 0410 	add.w	r4, r6, #16
 8002c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c50:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c54:	1d33      	adds	r3, r6, #4
 8002c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c58:	6838      	ldr	r0, [r7, #0]
 8002c5a:	f002 ff59 	bl	8005b10 <USB_CoreInit>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0d7      	b.n	8002e20 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 f866 	bl	8005d48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]
 8002c80:	e04a      	b.n	8002d18 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	333d      	adds	r3, #61	; 0x3d
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	333c      	adds	r3, #60	; 0x3c
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	b298      	uxth	r0, r3
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3344      	adds	r3, #68	; 0x44
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	3340      	adds	r3, #64	; 0x40
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3348      	adds	r3, #72	; 0x48
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	334c      	adds	r3, #76	; 0x4c
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cfe:	7bfa      	ldrb	r2, [r7, #15]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3354      	adds	r3, #84	; 0x54
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	3301      	adds	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d3af      	bcc.n	8002c82 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
 8002d26:	e044      	b.n	8002db2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d3e:	7bfa      	ldrb	r2, [r7, #15]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	3301      	adds	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
 8002db2:	7bfa      	ldrb	r2, [r7, #15]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d3b5      	bcc.n	8002d28 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	687e      	ldr	r6, [r7, #4]
 8002dc4:	466d      	mov	r5, sp
 8002dc6:	f106 0410 	add.w	r4, r6, #16
 8002dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dda:	1d33      	adds	r3, r6, #4
 8002ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dde:	6838      	ldr	r0, [r7, #0]
 8002de0:	f002 fffe 	bl	8005de0 <USB_DevInit>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e014      	b.n	8002e20 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d102      	bne.n	8002e14 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f001 f97a 	bl	8004108 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f004 f94c 	bl	80070b6 <USB_DevDisconnect>

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e28 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_PCD_Start+0x16>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e012      	b.n	8002e64 <HAL_PCD_Start+0x3c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f002 ff5a 	bl	8005d04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f004 f90d 	bl	8007074 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e6c:	b590      	push	{r4, r7, lr}
 8002e6e:	b08d      	sub	sp, #52	; 0x34
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f004 f9cb 	bl	800721e <USB_GetMode>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f040 84b7 	bne.w	80037fe <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f004 f92f 	bl	80070f8 <USB_ReadInterrupts>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 84ad 	beq.w	80037fc <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f004 f91c 	bl	80070f8 <USB_ReadInterrupts>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d107      	bne.n	8002eda <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f002 0202 	and.w	r2, r2, #2
 8002ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f004 f90a 	bl	80070f8 <USB_ReadInterrupts>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b10      	cmp	r3, #16
 8002eec:	d161      	bne.n	8002fb2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0210 	bic.w	r2, r2, #16
 8002efc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	f003 020f 	and.w	r2, r3, #15
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4413      	add	r3, r2
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	0c5b      	lsrs	r3, r3, #17
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d124      	bne.n	8002f74 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d035      	beq.n	8002fa2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	6a38      	ldr	r0, [r7, #32]
 8002f4a:	f003 ff41 	bl	8006dd0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f5a:	441a      	add	r2, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	6a1a      	ldr	r2, [r3, #32]
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f6c:	441a      	add	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	621a      	str	r2, [r3, #32]
 8002f72:	e016      	b.n	8002fa2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	0c5b      	lsrs	r3, r3, #17
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	2b06      	cmp	r3, #6
 8002f7e:	d110      	bne.n	8002fa2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f86:	2208      	movs	r2, #8
 8002f88:	4619      	mov	r1, r3
 8002f8a:	6a38      	ldr	r0, [r7, #32]
 8002f8c:	f003 ff20 	bl	8006dd0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	6a1a      	ldr	r2, [r3, #32]
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f9c:	441a      	add	r2, r3
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0210 	orr.w	r2, r2, #16
 8002fb0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f004 f89e 	bl	80070f8 <USB_ReadInterrupts>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fc6:	f040 80a7 	bne.w	8003118 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f004 f8a3 	bl	800711e <USB_ReadDevAllOutEpInterrupt>
 8002fd8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002fda:	e099      	b.n	8003110 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 808e 	beq.w	8003104 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f004 f8c7 	bl	8007186 <USB_ReadDevOutEPInterrupt>
 8002ff8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00c      	beq.n	800301e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003010:	461a      	mov	r2, r3
 8003012:	2301      	movs	r3, #1
 8003014:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003016:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 feef 	bl	8003dfc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00c      	beq.n	8003042 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	4413      	add	r3, r2
 8003030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003034:	461a      	mov	r2, r3
 8003036:	2308      	movs	r3, #8
 8003038:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800303a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 ffc5 	bl	8003fcc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003058:	461a      	mov	r2, r3
 800305a:	2310      	movs	r3, #16
 800305c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d030      	beq.n	80030ca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003070:	2b80      	cmp	r3, #128	; 0x80
 8003072:	d109      	bne.n	8003088 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003086:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	3304      	adds	r3, #4
 800309c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	78db      	ldrb	r3, [r3, #3]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d108      	bne.n	80030b8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2200      	movs	r2, #0
 80030aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	4619      	mov	r1, r3
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f006 fca0 	bl	80099f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c4:	461a      	mov	r2, r3
 80030c6:	2302      	movs	r3, #2
 80030c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e0:	461a      	mov	r2, r3
 80030e2:	2320      	movs	r3, #32
 80030e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d009      	beq.n	8003104 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fc:	461a      	mov	r2, r3
 80030fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003102:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	3301      	adds	r3, #1
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	f47f af62 	bne.w	8002fdc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f003 ffeb 	bl	80070f8 <USB_ReadInterrupts>
 8003122:	4603      	mov	r3, r0
 8003124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003128:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800312c:	f040 80db 	bne.w	80032e6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f004 f80c 	bl	8007152 <USB_ReadDevAllInEpInterrupt>
 800313a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003140:	e0cd      	b.n	80032de <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80c2 	beq.w	80032d2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f004 f832 	bl	80071c2 <USB_ReadDevInEPInterrupt>
 800315e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d057      	beq.n	800321a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	2201      	movs	r2, #1
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43db      	mvns	r3, r3
 8003184:	69f9      	ldr	r1, [r7, #28]
 8003186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800318a:	4013      	ands	r3, r2
 800318c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319a:	461a      	mov	r2, r3
 800319c:	2301      	movs	r3, #1
 800319e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d132      	bne.n	800320e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	334c      	adds	r3, #76	; 0x4c
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4403      	add	r3, r0
 80031c8:	3348      	adds	r3, #72	; 0x48
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4419      	add	r1, r3
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4403      	add	r3, r0
 80031dc:	334c      	adds	r3, #76	; 0x4c
 80031de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d113      	bne.n	800320e <HAL_PCD_IRQHandler+0x3a2>
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	3354      	adds	r3, #84	; 0x54
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d108      	bne.n	800320e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003206:	461a      	mov	r2, r3
 8003208:	2101      	movs	r1, #1
 800320a:	f004 f83b 	bl	8007284 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f006 fb6a 	bl	80098ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003230:	461a      	mov	r2, r3
 8003232:	2308      	movs	r3, #8
 8003234:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800324c:	461a      	mov	r2, r3
 800324e:	2310      	movs	r3, #16
 8003250:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003268:	461a      	mov	r2, r3
 800326a:	2340      	movs	r3, #64	; 0x40
 800326c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d023      	beq.n	80032c0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800327a:	6a38      	ldr	r0, [r7, #32]
 800327c:	f002 ff0e 	bl	800609c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	3338      	adds	r3, #56	; 0x38
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	4413      	add	r3, r2
 8003290:	3304      	adds	r3, #4
 8003292:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	78db      	ldrb	r3, [r3, #3]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d108      	bne.n	80032ae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2200      	movs	r2, #0
 80032a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	4619      	mov	r1, r3
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f006 fbb7 	bl	8009a1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ba:	461a      	mov	r2, r3
 80032bc:	2302      	movs	r3, #2
 80032be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fd08 	bl	8003ce2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	3301      	adds	r3, #1
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f47f af2e 	bne.w	8003142 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f003 ff04 	bl	80070f8 <USB_ReadInterrupts>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032fa:	d122      	bne.n	8003342 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003316:	2b01      	cmp	r3, #1
 8003318:	d108      	bne.n	800332c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003322:	2100      	movs	r1, #0
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f006 fd31 	bl	8009d8c <HAL_PCDEx_LPM_Callback>
 800332a:	e002      	b.n	8003332 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f006 fb55 	bl	80099dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f003 fed6 	bl	80070f8 <USB_ReadInterrupts>
 800334c:	4603      	mov	r3, r0
 800334e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003356:	d112      	bne.n	800337e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b01      	cmp	r3, #1
 8003366:	d102      	bne.n	800336e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f006 fb11 	bl	8009990 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800337c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f003 feb8 	bl	80070f8 <USB_ReadInterrupts>
 8003388:	4603      	mov	r3, r0
 800338a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800338e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003392:	d121      	bne.n	80033d8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80033a2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d111      	bne.n	80033d2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	f003 020f 	and.w	r2, r3, #15
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80033c8:	2101      	movs	r1, #1
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f006 fcde 	bl	8009d8c <HAL_PCDEx_LPM_Callback>
 80033d0:	e002      	b.n	80033d8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f006 fadc 	bl	8009990 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f003 fe8b 	bl	80070f8 <USB_ReadInterrupts>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ec:	f040 80b7 	bne.w	800355e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2110      	movs	r1, #16
 800340a:	4618      	mov	r0, r3
 800340c:	f002 fe46 	bl	800609c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003410:	2300      	movs	r3, #0
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003414:	e046      	b.n	80034a4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003422:	461a      	mov	r2, r3
 8003424:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003428:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800343a:	0151      	lsls	r1, r2, #5
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	440a      	add	r2, r1
 8003440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003444:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003448:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003456:	461a      	mov	r2, r3
 8003458:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800345c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800346e:	0151      	lsls	r1, r2, #5
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	440a      	add	r2, r1
 8003474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003478:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800347c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348e:	0151      	lsls	r1, r2, #5
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	440a      	add	r2, r1
 8003494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003498:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800349c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a0:	3301      	adds	r3, #1
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d3b3      	bcc.n	8003416 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034da:	f043 030b 	orr.w	r3, r3, #11
 80034de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f0:	f043 030b 	orr.w	r3, r3, #11
 80034f4:	6453      	str	r3, [r2, #68]	; 0x44
 80034f6:	e015      	b.n	8003524 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003506:	4619      	mov	r1, r3
 8003508:	f242 032b 	movw	r3, #8235	; 0x202b
 800350c:	4313      	orrs	r3, r2
 800350e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800351e:	f043 030b 	orr.w	r3, r3, #11
 8003522:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003532:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003536:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003548:	461a      	mov	r2, r3
 800354a:	f003 fe9b 	bl	8007284 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800355c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f003 fdc8 	bl	80070f8 <USB_ReadInterrupts>
 8003568:	4603      	mov	r3, r0
 800356a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003572:	d124      	bne.n	80035be <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f003 fe5f 	bl	800723c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f002 fe07 	bl	8006196 <USB_GetDevSpeed>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681c      	ldr	r4, [r3, #0]
 8003594:	f001 faca 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8003598:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	4620      	mov	r0, r4
 80035a4:	f002 fb0c 	bl	8005bc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f006 f9c8 	bl	800993e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80035bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f003 fd98 	bl	80070f8 <USB_ReadInterrupts>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d10a      	bne.n	80035e8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f006 f9a5 	bl	8009922 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f002 0208 	and.w	r2, r2, #8
 80035e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f003 fd83 	bl	80070f8 <USB_ReadInterrupts>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	2b80      	cmp	r3, #128	; 0x80
 80035fa:	d122      	bne.n	8003642 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003608:	2301      	movs	r3, #1
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
 800360c:	e014      	b.n	8003638 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d105      	bne.n	8003632 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fb27 	bl	8003c80 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	3301      	adds	r3, #1
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363e:	429a      	cmp	r2, r3
 8003640:	d3e5      	bcc.n	800360e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f003 fd56 	bl	80070f8 <USB_ReadInterrupts>
 800364c:	4603      	mov	r3, r0
 800364e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003656:	d13b      	bne.n	80036d0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003658:	2301      	movs	r3, #1
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
 800365c:	e02b      	b.n	80036b6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	3340      	adds	r3, #64	; 0x40
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d115      	bne.n	80036b0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003684:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003686:	2b00      	cmp	r3, #0
 8003688:	da12      	bge.n	80036b0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	333f      	adds	r3, #63	; 0x3f
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	4619      	mov	r1, r3
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fae8 	bl	8003c80 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	3301      	adds	r3, #1
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	429a      	cmp	r2, r3
 80036be:	d3ce      	bcc.n	800365e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80036ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f003 fd0f 	bl	80070f8 <USB_ReadInterrupts>
 80036da:	4603      	mov	r3, r0
 80036dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036e4:	d155      	bne.n	8003792 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036e6:	2301      	movs	r3, #1
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ea:	e045      	b.n	8003778 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003700:	4613      	mov	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d12e      	bne.n	8003772 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003714:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003716:	2b00      	cmp	r3, #0
 8003718:	da2b      	bge.n	8003772 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003726:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800372a:	429a      	cmp	r2, r3
 800372c:	d121      	bne.n	8003772 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003740:	2201      	movs	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800376a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800376e:	6053      	str	r3, [r2, #4]
            break;
 8003770:	e007      	b.n	8003782 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	3301      	adds	r3, #1
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377e:	429a      	cmp	r2, r3
 8003780:	d3b4      	bcc.n	80036ec <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003790:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f003 fcae 	bl	80070f8 <USB_ReadInterrupts>
 800379c:	4603      	mov	r3, r0
 800379e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a6:	d10a      	bne.n	80037be <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f006 f949 	bl	8009a40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f003 fc98 	bl	80070f8 <USB_ReadInterrupts>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d115      	bne.n	80037fe <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f006 f939 	bl	8009a5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	e000      	b.n	80037fe <HAL_PCD_IRQHandler+0x992>
      return;
 80037fc:	bf00      	nop
    }
  }
}
 80037fe:	3734      	adds	r7, #52	; 0x34
 8003800:	46bd      	mov	sp, r7
 8003802:	bd90      	pop	{r4, r7, pc}

08003804 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_PCD_SetAddress+0x1a>
 800381a:	2302      	movs	r3, #2
 800381c:	e013      	b.n	8003846 <HAL_PCD_SetAddress+0x42>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f003 fbf6 	bl	8007028 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	4608      	mov	r0, r1
 8003858:	4611      	mov	r1, r2
 800385a:	461a      	mov	r2, r3
 800385c:	4603      	mov	r3, r0
 800385e:	70fb      	strb	r3, [r7, #3]
 8003860:	460b      	mov	r3, r1
 8003862:	803b      	strh	r3, [r7, #0]
 8003864:	4613      	mov	r3, r2
 8003866:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800386c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003870:	2b00      	cmp	r3, #0
 8003872:	da0f      	bge.n	8003894 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	f003 020f 	and.w	r2, r3, #15
 800387a:	4613      	mov	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	3338      	adds	r3, #56	; 0x38
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	4413      	add	r3, r2
 8003888:	3304      	adds	r3, #4
 800388a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	705a      	strb	r2, [r3, #1]
 8003892:	e00f      	b.n	80038b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	f003 020f 	and.w	r2, r3, #15
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	4413      	add	r3, r2
 80038aa:	3304      	adds	r3, #4
 80038ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038c0:	883a      	ldrh	r2, [r7, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	78ba      	ldrb	r2, [r7, #2]
 80038ca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	785b      	ldrb	r3, [r3, #1]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038de:	78bb      	ldrb	r3, [r7, #2]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d102      	bne.n	80038ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_PCD_EP_Open+0xaa>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e00e      	b.n	8003916 <HAL_PCD_EP_Open+0xc8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68f9      	ldr	r1, [r7, #12]
 8003906:	4618      	mov	r0, r3
 8003908:	f002 fc6a 	bl	80061e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003914:	7afb      	ldrb	r3, [r7, #11]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	460b      	mov	r3, r1
 8003928:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800392a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800392e:	2b00      	cmp	r3, #0
 8003930:	da0f      	bge.n	8003952 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	f003 020f 	and.w	r2, r3, #15
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	3338      	adds	r3, #56	; 0x38
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	3304      	adds	r3, #4
 8003948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	705a      	strb	r2, [r3, #1]
 8003950:	e00f      	b.n	8003972 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	f003 020f 	and.w	r2, r3, #15
 8003958:	4613      	mov	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	3304      	adds	r3, #4
 800396a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	b2da      	uxtb	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_PCD_EP_Close+0x6e>
 8003988:	2302      	movs	r3, #2
 800398a:	e00e      	b.n	80039aa <HAL_PCD_EP_Close+0x8c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68f9      	ldr	r1, [r7, #12]
 800399a:	4618      	mov	r0, r3
 800399c:	f002 fca8 	bl	80062f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b086      	sub	sp, #24
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
 80039be:	460b      	mov	r3, r1
 80039c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039c2:	7afb      	ldrb	r3, [r7, #11]
 80039c4:	f003 020f 	and.w	r2, r3, #15
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	3304      	adds	r3, #4
 80039da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2200      	movs	r2, #0
 80039ec:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2200      	movs	r2, #0
 80039f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039f4:	7afb      	ldrb	r3, [r7, #11]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d102      	bne.n	8003a0e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a0e:	7afb      	ldrb	r3, [r7, #11]
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	6979      	ldr	r1, [r7, #20]
 8003a26:	f002 ff8f 	bl	8006948 <USB_EP0StartXfer>
 8003a2a:	e008      	b.n	8003a3e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	6979      	ldr	r1, [r7, #20]
 8003a3a:	f002 fd35 	bl	80064a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	f003 020f 	and.w	r2, r3, #15
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	607a      	str	r2, [r7, #4]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	460b      	mov	r3, r1
 8003a86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a88:	7afb      	ldrb	r3, [r7, #11]
 8003a8a:	f003 020f 	and.w	r2, r3, #15
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	3338      	adds	r3, #56	; 0x38
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab8:	7afb      	ldrb	r3, [r7, #11]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d102      	bne.n	8003ad2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ad2:	7afb      	ldrb	r3, [r7, #11]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6979      	ldr	r1, [r7, #20]
 8003aea:	f002 ff2d 	bl	8006948 <USB_EP0StartXfer>
 8003aee:	e008      	b.n	8003b02 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	6979      	ldr	r1, [r7, #20]
 8003afe:	f002 fcd3 	bl	80064a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 020f 	and.w	r2, r3, #15
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d901      	bls.n	8003b2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e050      	b.n	8003bcc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	da0f      	bge.n	8003b52 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	f003 020f 	and.w	r2, r3, #15
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	3338      	adds	r3, #56	; 0x38
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	3304      	adds	r3, #4
 8003b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	705a      	strb	r2, [r3, #1]
 8003b50:	e00d      	b.n	8003b6e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	4413      	add	r3, r2
 8003b64:	3304      	adds	r3, #4
 8003b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_PCD_EP_SetStall+0x82>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e01e      	b.n	8003bcc <HAL_PCD_EP_SetStall+0xc0>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68f9      	ldr	r1, [r7, #12]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f003 f96f 	bl	8006e80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10a      	bne.n	8003bc2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	b2d9      	uxtb	r1, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f003 fb61 	bl	8007284 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	f003 020f 	and.w	r2, r3, #15
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d901      	bls.n	8003bf2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e042      	b.n	8003c78 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	da0f      	bge.n	8003c1a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	f003 020f 	and.w	r2, r3, #15
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	3338      	adds	r3, #56	; 0x38
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3304      	adds	r3, #4
 8003c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	705a      	strb	r2, [r3, #1]
 8003c18:	e00f      	b.n	8003c3a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	f003 020f 	and.w	r2, r3, #15
 8003c20:	4613      	mov	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	3304      	adds	r3, #4
 8003c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_PCD_EP_ClrStall+0x86>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e00e      	b.n	8003c78 <HAL_PCD_EP_ClrStall+0xa4>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f003 f977 	bl	8006f5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	da0c      	bge.n	8003cae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	f003 020f 	and.w	r2, r3, #15
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	3338      	adds	r3, #56	; 0x38
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3304      	adds	r3, #4
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	e00c      	b.n	8003cc8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	f003 020f 	and.w	r2, r3, #15
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68f9      	ldr	r1, [r7, #12]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f002 ff96 	bl	8006c00 <USB_EPStopXfer>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003cd8:	7afb      	ldrb	r3, [r7, #11]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b08a      	sub	sp, #40	; 0x28
 8003ce6:	af02      	add	r7, sp, #8
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	3338      	adds	r3, #56	; 0x38
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	3304      	adds	r3, #4
 8003d08:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1a      	ldr	r2, [r3, #32]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d901      	bls.n	8003d1a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e06c      	b.n	8003df4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d902      	bls.n	8003d36 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3303      	adds	r3, #3
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d3e:	e02b      	b.n	8003d98 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	699a      	ldr	r2, [r3, #24]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d902      	bls.n	8003d5c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	3303      	adds	r3, #3
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6919      	ldr	r1, [r3, #16]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	4603      	mov	r3, r0
 8003d7a:	6978      	ldr	r0, [r7, #20]
 8003d7c:	f002 ffea 	bl	8006d54 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	441a      	add	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1a      	ldr	r2, [r3, #32]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	441a      	add	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d809      	bhi.n	8003dc2 <PCD_WriteEmptyTxFifo+0xe0>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a1a      	ldr	r2, [r3, #32]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d203      	bcs.n	8003dc2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1be      	bne.n	8003d40 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d811      	bhi.n	8003df2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	6939      	ldr	r1, [r7, #16]
 8003dea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dee:	4013      	ands	r3, r2
 8003df0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	333c      	adds	r3, #60	; 0x3c
 8003e14:	3304      	adds	r3, #4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d17b      	bne.n	8003f2a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d015      	beq.n	8003e68 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	4a61      	ldr	r2, [pc, #388]	; (8003fc4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	f240 80b9 	bls.w	8003fb8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80b3 	beq.w	8003fb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e64:	6093      	str	r3, [r2, #8]
 8003e66:	e0a7      	b.n	8003fb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2320      	movs	r3, #32
 8003e82:	6093      	str	r3, [r2, #8]
 8003e84:	e098      	b.n	8003fb8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f040 8093 	bne.w	8003fb8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	4a4b      	ldr	r2, [pc, #300]	; (8003fc4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d90f      	bls.n	8003eba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb6:	6093      	str	r3, [r2, #8]
 8003eb8:	e07e      	b.n	8003fb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4413      	add	r3, r2
 8003ecc:	3304      	adds	r3, #4
 8003ece:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	0159      	lsls	r1, r3, #5
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	440b      	add	r3, r1
 8003edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee6:	1ad2      	subs	r2, r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d114      	bne.n	8003f1c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f04:	461a      	mov	r2, r3
 8003f06:	2101      	movs	r1, #1
 8003f08:	f003 f9bc 	bl	8007284 <USB_EP0_OutStart>
 8003f0c:	e006      	b.n	8003f1c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	441a      	add	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	4619      	mov	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f005 fcc8 	bl	80098b8 <HAL_PCD_DataOutStageCallback>
 8003f28:	e046      	b.n	8003fb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	4a26      	ldr	r2, [pc, #152]	; (8003fc8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d124      	bne.n	8003f7c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4e:	6093      	str	r3, [r2, #8]
 8003f50:	e032      	b.n	8003fb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2320      	movs	r3, #32
 8003f6c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	4619      	mov	r1, r3
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f005 fc9f 	bl	80098b8 <HAL_PCD_DataOutStageCallback>
 8003f7a:	e01d      	b.n	8003fb8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d114      	bne.n	8003fac <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d108      	bne.n	8003fac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	f003 f96c 	bl	8007284 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f005 fc80 	bl	80098b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	4f54300a 	.word	0x4f54300a
 8003fc8:	4f54310a 	.word	0x4f54310a

08003fcc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	333c      	adds	r3, #60	; 0x3c
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4a15      	ldr	r2, [pc, #84]	; (8004054 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d90e      	bls.n	8004020 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004008:	2b00      	cmp	r3, #0
 800400a:	d009      	beq.n	8004020 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004018:	461a      	mov	r2, r3
 800401a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f005 fc37 	bl	8009894 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <PCD_EP_OutSetupPacket_int+0x88>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d90c      	bls.n	8004048 <PCD_EP_OutSetupPacket_int+0x7c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d108      	bne.n	8004048 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004040:	461a      	mov	r2, r3
 8004042:	2101      	movs	r1, #1
 8004044:	f003 f91e 	bl	8007284 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	4f54300a 	.word	0x4f54300a

08004058 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
 8004064:	4613      	mov	r3, r2
 8004066:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004076:	883b      	ldrh	r3, [r7, #0]
 8004078:	0419      	lsls	r1, r3, #16
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	430a      	orrs	r2, r1
 8004082:	629a      	str	r2, [r3, #40]	; 0x28
 8004084:	e028      	b.n	80040d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	0c1b      	lsrs	r3, r3, #16
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	4413      	add	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004094:	2300      	movs	r3, #0
 8004096:	73fb      	strb	r3, [r7, #15]
 8004098:	e00d      	b.n	80040b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	3340      	adds	r3, #64	; 0x40
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	0c1b      	lsrs	r3, r3, #16
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	4413      	add	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	3301      	adds	r3, #1
 80040b4:	73fb      	strb	r3, [r7, #15]
 80040b6:	7bfa      	ldrb	r2, [r7, #15]
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	429a      	cmp	r2, r3
 80040be:	d3ec      	bcc.n	800409a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040c0:	883b      	ldrh	r3, [r7, #0]
 80040c2:	0418      	lsls	r0, r3, #16
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6819      	ldr	r1, [r3, #0]
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	4302      	orrs	r2, r0
 80040d0:	3340      	adds	r3, #64	; 0x40
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	460b      	mov	r3, r1
 80040f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_PCDEx_ActivateLPM+0x44>)
 8004138:	4313      	orrs	r3, r2
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	10000003 	.word	0x10000003

08004150 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800415a:	4b23      	ldr	r3, [pc, #140]	; (80041e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	4a22      	ldr	r2, [pc, #136]	; (80041e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004164:	6413      	str	r3, [r2, #64]	; 0x40
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004172:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800417e:	f7fd fb6f 	bl	8001860 <HAL_GetTick>
 8004182:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004184:	e009      	b.n	800419a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004186:	f7fd fb6b 	bl	8001860 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004194:	d901      	bls.n	800419a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e022      	b.n	80041e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800419a:	4b14      	ldr	r3, [pc, #80]	; (80041ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a6:	d1ee      	bne.n	8004186 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041a8:	4b10      	ldr	r3, [pc, #64]	; (80041ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a0f      	ldr	r2, [pc, #60]	; (80041ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80041ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041b4:	f7fd fb54 	bl	8001860 <HAL_GetTick>
 80041b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041ba:	e009      	b.n	80041d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041bc:	f7fd fb50 	bl	8001860 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ca:	d901      	bls.n	80041d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e007      	b.n	80041e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041dc:	d1ee      	bne.n	80041bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40007000 	.word	0x40007000

080041f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041f8:	2300      	movs	r3, #0
 80041fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e29b      	b.n	800473e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8087 	beq.w	8004322 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004214:	4b96      	ldr	r3, [pc, #600]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 030c 	and.w	r3, r3, #12
 800421c:	2b04      	cmp	r3, #4
 800421e:	d00c      	beq.n	800423a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004220:	4b93      	ldr	r3, [pc, #588]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 030c 	and.w	r3, r3, #12
 8004228:	2b08      	cmp	r3, #8
 800422a:	d112      	bne.n	8004252 <HAL_RCC_OscConfig+0x62>
 800422c:	4b90      	ldr	r3, [pc, #576]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004238:	d10b      	bne.n	8004252 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800423a:	4b8d      	ldr	r3, [pc, #564]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d06c      	beq.n	8004320 <HAL_RCC_OscConfig+0x130>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d168      	bne.n	8004320 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e275      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425a:	d106      	bne.n	800426a <HAL_RCC_OscConfig+0x7a>
 800425c:	4b84      	ldr	r3, [pc, #528]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a83      	ldr	r2, [pc, #524]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 8004262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	e02e      	b.n	80042c8 <HAL_RCC_OscConfig+0xd8>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10c      	bne.n	800428c <HAL_RCC_OscConfig+0x9c>
 8004272:	4b7f      	ldr	r3, [pc, #508]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a7e      	ldr	r2, [pc, #504]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 8004278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4b7c      	ldr	r3, [pc, #496]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a7b      	ldr	r2, [pc, #492]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 8004284:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e01d      	b.n	80042c8 <HAL_RCC_OscConfig+0xd8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004294:	d10c      	bne.n	80042b0 <HAL_RCC_OscConfig+0xc0>
 8004296:	4b76      	ldr	r3, [pc, #472]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a75      	ldr	r2, [pc, #468]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 800429c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	4b73      	ldr	r3, [pc, #460]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a72      	ldr	r2, [pc, #456]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 80042a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e00b      	b.n	80042c8 <HAL_RCC_OscConfig+0xd8>
 80042b0:	4b6f      	ldr	r3, [pc, #444]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a6e      	ldr	r2, [pc, #440]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 80042b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	4b6c      	ldr	r3, [pc, #432]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a6b      	ldr	r2, [pc, #428]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 80042c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d013      	beq.n	80042f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fd fac6 	bl	8001860 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d8:	f7fd fac2 	bl	8001860 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	; 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e229      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	4b61      	ldr	r3, [pc, #388]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0xe8>
 80042f6:	e014      	b.n	8004322 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7fd fab2 	bl	8001860 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004300:	f7fd faae 	bl	8001860 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e215      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004312:	4b57      	ldr	r3, [pc, #348]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x110>
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d069      	beq.n	8004402 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800432e:	4b50      	ldr	r3, [pc, #320]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800433a:	4b4d      	ldr	r3, [pc, #308]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b08      	cmp	r3, #8
 8004344:	d11c      	bne.n	8004380 <HAL_RCC_OscConfig+0x190>
 8004346:	4b4a      	ldr	r3, [pc, #296]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d116      	bne.n	8004380 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004352:	4b47      	ldr	r3, [pc, #284]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_RCC_OscConfig+0x17a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e1e9      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436a:	4b41      	ldr	r3, [pc, #260]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	493d      	ldr	r1, [pc, #244]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437e:	e040      	b.n	8004402 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d023      	beq.n	80043d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004388:	4b39      	ldr	r3, [pc, #228]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a38      	ldr	r2, [pc, #224]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd fa64 	bl	8001860 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439c:	f7fd fa60 	bl	8001860 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e1c7      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ae:	4b30      	ldr	r3, [pc, #192]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ba:	4b2d      	ldr	r3, [pc, #180]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4929      	ldr	r1, [pc, #164]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]
 80043ce:	e018      	b.n	8004402 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043d0:	4b27      	ldr	r3, [pc, #156]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a26      	ldr	r2, [pc, #152]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fd fa40 	bl	8001860 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e4:	f7fd fa3c 	bl	8001860 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e1a3      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f6:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d038      	beq.n	8004480 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d019      	beq.n	800444a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004416:	4b16      	ldr	r3, [pc, #88]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 8004418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441a:	4a15      	ldr	r2, [pc, #84]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004422:	f7fd fa1d 	bl	8001860 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800442a:	f7fd fa19 	bl	8001860 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e180      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 800443e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x23a>
 8004448:	e01a      	b.n	8004480 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 800444c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444e:	4a08      	ldr	r2, [pc, #32]	; (8004470 <HAL_RCC_OscConfig+0x280>)
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004456:	f7fd fa03 	bl	8001860 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445c:	e00a      	b.n	8004474 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800445e:	f7fd f9ff 	bl	8001860 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d903      	bls.n	8004474 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e166      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
 8004470:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004474:	4b92      	ldr	r3, [pc, #584]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1ee      	bne.n	800445e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80a4 	beq.w	80045d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448e:	4b8c      	ldr	r3, [pc, #560]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10d      	bne.n	80044b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800449a:	4b89      	ldr	r3, [pc, #548]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	4a88      	ldr	r2, [pc, #544]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 80044a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a4:	6413      	str	r3, [r2, #64]	; 0x40
 80044a6:	4b86      	ldr	r3, [pc, #536]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b2:	2301      	movs	r3, #1
 80044b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b6:	4b83      	ldr	r3, [pc, #524]	; (80046c4 <HAL_RCC_OscConfig+0x4d4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d118      	bne.n	80044f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80044c2:	4b80      	ldr	r3, [pc, #512]	; (80046c4 <HAL_RCC_OscConfig+0x4d4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a7f      	ldr	r2, [pc, #508]	; (80046c4 <HAL_RCC_OscConfig+0x4d4>)
 80044c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ce:	f7fd f9c7 	bl	8001860 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d6:	f7fd f9c3 	bl	8001860 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b64      	cmp	r3, #100	; 0x64
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e12a      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e8:	4b76      	ldr	r3, [pc, #472]	; (80046c4 <HAL_RCC_OscConfig+0x4d4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d106      	bne.n	800450a <HAL_RCC_OscConfig+0x31a>
 80044fc:	4b70      	ldr	r3, [pc, #448]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	4a6f      	ldr	r2, [pc, #444]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	6713      	str	r3, [r2, #112]	; 0x70
 8004508:	e02d      	b.n	8004566 <HAL_RCC_OscConfig+0x376>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10c      	bne.n	800452c <HAL_RCC_OscConfig+0x33c>
 8004512:	4b6b      	ldr	r3, [pc, #428]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a6a      	ldr	r2, [pc, #424]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	6713      	str	r3, [r2, #112]	; 0x70
 800451e:	4b68      	ldr	r3, [pc, #416]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	4a67      	ldr	r2, [pc, #412]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004524:	f023 0304 	bic.w	r3, r3, #4
 8004528:	6713      	str	r3, [r2, #112]	; 0x70
 800452a:	e01c      	b.n	8004566 <HAL_RCC_OscConfig+0x376>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b05      	cmp	r3, #5
 8004532:	d10c      	bne.n	800454e <HAL_RCC_OscConfig+0x35e>
 8004534:	4b62      	ldr	r3, [pc, #392]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	4a61      	ldr	r2, [pc, #388]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 800453a:	f043 0304 	orr.w	r3, r3, #4
 800453e:	6713      	str	r3, [r2, #112]	; 0x70
 8004540:	4b5f      	ldr	r3, [pc, #380]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	4a5e      	ldr	r2, [pc, #376]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6713      	str	r3, [r2, #112]	; 0x70
 800454c:	e00b      	b.n	8004566 <HAL_RCC_OscConfig+0x376>
 800454e:	4b5c      	ldr	r3, [pc, #368]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	4a5b      	ldr	r2, [pc, #364]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	6713      	str	r3, [r2, #112]	; 0x70
 800455a:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455e:	4a58      	ldr	r2, [pc, #352]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004560:	f023 0304 	bic.w	r3, r3, #4
 8004564:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d015      	beq.n	800459a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456e:	f7fd f977 	bl	8001860 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004574:	e00a      	b.n	800458c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004576:	f7fd f973 	bl	8001860 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f241 3288 	movw	r2, #5000	; 0x1388
 8004584:	4293      	cmp	r3, r2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e0d8      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458c:	4b4c      	ldr	r3, [pc, #304]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0ee      	beq.n	8004576 <HAL_RCC_OscConfig+0x386>
 8004598:	e014      	b.n	80045c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459a:	f7fd f961 	bl	8001860 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a0:	e00a      	b.n	80045b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a2:	f7fd f95d 	bl	8001860 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e0c2      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b8:	4b41      	ldr	r3, [pc, #260]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1ee      	bne.n	80045a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d105      	bne.n	80045d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ca:	4b3d      	ldr	r3, [pc, #244]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	4a3c      	ldr	r2, [pc, #240]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 80045d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80ae 	beq.w	800473c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045e0:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d06d      	beq.n	80046c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d14b      	bne.n	800468c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f4:	4b32      	ldr	r3, [pc, #200]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a31      	ldr	r2, [pc, #196]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 80045fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fd f92e 	bl	8001860 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004608:	f7fd f92a 	bl	8001860 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e091      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	4b29      	ldr	r3, [pc, #164]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69da      	ldr	r2, [r3, #28]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	019b      	lsls	r3, r3, #6
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	3b01      	subs	r3, #1
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	061b      	lsls	r3, r3, #24
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	071b      	lsls	r3, r3, #28
 8004652:	491b      	ldr	r1, [pc, #108]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004658:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 800465e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7fd f8fc 	bl	8001860 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466c:	f7fd f8f8 	bl	8001860 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e05f      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467e:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x47c>
 800468a:	e057      	b.n	800473c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468c:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a0b      	ldr	r2, [pc, #44]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 8004692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fd f8e2 	bl	8001860 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a0:	f7fd f8de 	bl	8001860 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e045      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b2:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <HAL_RCC_OscConfig+0x4d0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4b0>
 80046be:	e03d      	b.n	800473c <HAL_RCC_OscConfig+0x54c>
 80046c0:	40023800 	.word	0x40023800
 80046c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046c8:	4b1f      	ldr	r3, [pc, #124]	; (8004748 <HAL_RCC_OscConfig+0x558>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d030      	beq.n	8004738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d129      	bne.n	8004738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d122      	bne.n	8004738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046f8:	4013      	ands	r3, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004700:	4293      	cmp	r3, r2
 8004702:	d119      	bne.n	8004738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	085b      	lsrs	r3, r3, #1
 8004710:	3b01      	subs	r3, #1
 8004712:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004714:	429a      	cmp	r2, r3
 8004716:	d10f      	bne.n	8004738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d107      	bne.n	8004738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40023800 	.word	0x40023800

0800474c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0d0      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004764:	4b6a      	ldr	r3, [pc, #424]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d910      	bls.n	8004794 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004772:	4b67      	ldr	r3, [pc, #412]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 020f 	bic.w	r2, r3, #15
 800477a:	4965      	ldr	r1, [pc, #404]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b63      	ldr	r3, [pc, #396]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0b8      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d020      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ac:	4b59      	ldr	r3, [pc, #356]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4a58      	ldr	r2, [pc, #352]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80047b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047c4:	4b53      	ldr	r3, [pc, #332]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a52      	ldr	r2, [pc, #328]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80047ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d0:	4b50      	ldr	r3, [pc, #320]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	494d      	ldr	r1, [pc, #308]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d040      	beq.n	8004870 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f6:	4b47      	ldr	r3, [pc, #284]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d115      	bne.n	800482e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e07f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480e:	4b41      	ldr	r3, [pc, #260]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e073      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481e:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e06b      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800482e:	4b39      	ldr	r3, [pc, #228]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f023 0203 	bic.w	r2, r3, #3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4936      	ldr	r1, [pc, #216]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 800483c:	4313      	orrs	r3, r2
 800483e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004840:	f7fd f80e 	bl	8001860 <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004846:	e00a      	b.n	800485e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004848:	f7fd f80a 	bl	8001860 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e053      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	4b2d      	ldr	r3, [pc, #180]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 020c 	and.w	r2, r3, #12
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	429a      	cmp	r2, r3
 800486e:	d1eb      	bne.n	8004848 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004870:	4b27      	ldr	r3, [pc, #156]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d210      	bcs.n	80048a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4b24      	ldr	r3, [pc, #144]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 020f 	bic.w	r2, r3, #15
 8004886:	4922      	ldr	r1, [pc, #136]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b20      	ldr	r3, [pc, #128]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e032      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ac:	4b19      	ldr	r3, [pc, #100]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4916      	ldr	r1, [pc, #88]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048ca:	4b12      	ldr	r3, [pc, #72]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	490e      	ldr	r1, [pc, #56]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048de:	f000 f821 	bl	8004924 <HAL_RCC_GetSysClockFreq>
 80048e2:	4602      	mov	r2, r0
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	490a      	ldr	r1, [pc, #40]	; (8004918 <HAL_RCC_ClockConfig+0x1cc>)
 80048f0:	5ccb      	ldrb	r3, [r1, r3]
 80048f2:	fa22 f303 	lsr.w	r3, r2, r3
 80048f6:	4a09      	ldr	r2, [pc, #36]	; (800491c <HAL_RCC_ClockConfig+0x1d0>)
 80048f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048fa:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_RCC_ClockConfig+0x1d4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc ff6a 	bl	80017d8 <HAL_InitTick>

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40023c00 	.word	0x40023c00
 8004914:	40023800 	.word	0x40023800
 8004918:	0800e944 	.word	0x0800e944
 800491c:	20000008 	.word	0x20000008
 8004920:	2000000c 	.word	0x2000000c

08004924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004928:	b094      	sub	sp, #80	; 0x50
 800492a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	647b      	str	r3, [r7, #68]	; 0x44
 8004930:	2300      	movs	r3, #0
 8004932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004934:	2300      	movs	r3, #0
 8004936:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800493c:	4b79      	ldr	r3, [pc, #484]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b08      	cmp	r3, #8
 8004946:	d00d      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x40>
 8004948:	2b08      	cmp	r3, #8
 800494a:	f200 80e1 	bhi.w	8004b10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0x34>
 8004952:	2b04      	cmp	r3, #4
 8004954:	d003      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x3a>
 8004956:	e0db      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004958:	4b73      	ldr	r3, [pc, #460]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x204>)
 800495a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800495c:	e0db      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800495e:	4b72      	ldr	r3, [pc, #456]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004960:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004962:	e0d8      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004964:	4b6f      	ldr	r3, [pc, #444]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800496c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800496e:	4b6d      	ldr	r3, [pc, #436]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d063      	beq.n	8004a42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800497a:	4b6a      	ldr	r3, [pc, #424]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	099b      	lsrs	r3, r3, #6
 8004980:	2200      	movs	r2, #0
 8004982:	63bb      	str	r3, [r7, #56]	; 0x38
 8004984:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498c:	633b      	str	r3, [r7, #48]	; 0x30
 800498e:	2300      	movs	r3, #0
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
 8004992:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004996:	4622      	mov	r2, r4
 8004998:	462b      	mov	r3, r5
 800499a:	f04f 0000 	mov.w	r0, #0
 800499e:	f04f 0100 	mov.w	r1, #0
 80049a2:	0159      	lsls	r1, r3, #5
 80049a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049a8:	0150      	lsls	r0, r2, #5
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4621      	mov	r1, r4
 80049b0:	1a51      	subs	r1, r2, r1
 80049b2:	6139      	str	r1, [r7, #16]
 80049b4:	4629      	mov	r1, r5
 80049b6:	eb63 0301 	sbc.w	r3, r3, r1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049c8:	4659      	mov	r1, fp
 80049ca:	018b      	lsls	r3, r1, #6
 80049cc:	4651      	mov	r1, sl
 80049ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049d2:	4651      	mov	r1, sl
 80049d4:	018a      	lsls	r2, r1, #6
 80049d6:	4651      	mov	r1, sl
 80049d8:	ebb2 0801 	subs.w	r8, r2, r1
 80049dc:	4659      	mov	r1, fp
 80049de:	eb63 0901 	sbc.w	r9, r3, r1
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f6:	4690      	mov	r8, r2
 80049f8:	4699      	mov	r9, r3
 80049fa:	4623      	mov	r3, r4
 80049fc:	eb18 0303 	adds.w	r3, r8, r3
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	462b      	mov	r3, r5
 8004a04:	eb49 0303 	adc.w	r3, r9, r3
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a16:	4629      	mov	r1, r5
 8004a18:	028b      	lsls	r3, r1, #10
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a20:	4621      	mov	r1, r4
 8004a22:	028a      	lsls	r2, r1, #10
 8004a24:	4610      	mov	r0, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a34:	f7fb fcbc 	bl	80003b0 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a40:	e058      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a42:	4b38      	ldr	r3, [pc, #224]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a52:	623b      	str	r3, [r7, #32]
 8004a54:	2300      	movs	r3, #0
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
 8004a58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	f04f 0000 	mov.w	r0, #0
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	0159      	lsls	r1, r3, #5
 8004a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a6e:	0150      	lsls	r0, r2, #5
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4641      	mov	r1, r8
 8004a76:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a94:	ebb2 040a 	subs.w	r4, r2, sl
 8004a98:	eb63 050b 	sbc.w	r5, r3, fp
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	00eb      	lsls	r3, r5, #3
 8004aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aaa:	00e2      	lsls	r2, r4, #3
 8004aac:	4614      	mov	r4, r2
 8004aae:	461d      	mov	r5, r3
 8004ab0:	4643      	mov	r3, r8
 8004ab2:	18e3      	adds	r3, r4, r3
 8004ab4:	603b      	str	r3, [r7, #0]
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	eb45 0303 	adc.w	r3, r5, r3
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aca:	4629      	mov	r1, r5
 8004acc:	028b      	lsls	r3, r1, #10
 8004ace:	4621      	mov	r1, r4
 8004ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	028a      	lsls	r2, r1, #10
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ade:	2200      	movs	r2, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	61fa      	str	r2, [r7, #28]
 8004ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae8:	f7fb fc62 	bl	80003b0 <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4613      	mov	r3, r2
 8004af2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	3301      	adds	r3, #1
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004b04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b0e:	e002      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3750      	adds	r7, #80	; 0x50
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b22:	bf00      	nop
 8004b24:	40023800 	.word	0x40023800
 8004b28:	00f42400 	.word	0x00f42400

08004b2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b32:	681b      	ldr	r3, [r3, #0]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000008 	.word	0x20000008

08004b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d012      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b6c:	4b69      	ldr	r3, [pc, #420]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a68      	ldr	r2, [pc, #416]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b76:	6093      	str	r3, [r2, #8]
 8004b78:	4b66      	ldr	r3, [pc, #408]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b80:	4964      	ldr	r1, [pc, #400]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d017      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b9e:	4b5d      	ldr	r3, [pc, #372]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bac:	4959      	ldr	r1, [pc, #356]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d017      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bda:	4b4e      	ldr	r3, [pc, #312]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	494a      	ldr	r1, [pc, #296]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c06:	2301      	movs	r3, #1
 8004c08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c16:	2301      	movs	r3, #1
 8004c18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 808b 	beq.w	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c28:	4b3a      	ldr	r3, [pc, #232]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	4a39      	ldr	r2, [pc, #228]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c32:	6413      	str	r3, [r2, #64]	; 0x40
 8004c34:	4b37      	ldr	r3, [pc, #220]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c40:	4b35      	ldr	r3, [pc, #212]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a34      	ldr	r2, [pc, #208]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c4c:	f7fc fe08 	bl	8001860 <HAL_GetTick>
 8004c50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c54:	f7fc fe04 	bl	8001860 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e38f      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c66:	4b2c      	ldr	r3, [pc, #176]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c72:	4b28      	ldr	r3, [pc, #160]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d035      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d02e      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c90:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c9a:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004cb2:	4a18      	ldr	r2, [pc, #96]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cb8:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d114      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fc fdcc 	bl	8001860 <HAL_GetTick>
 8004cc8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cca:	e00a      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ccc:	f7fc fdc8 	bl	8001860 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e351      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0ee      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cfa:	d111      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d08:	4b04      	ldr	r3, [pc, #16]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d0a:	400b      	ands	r3, r1
 8004d0c:	4901      	ldr	r1, [pc, #4]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
 8004d12:	e00b      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d14:	40023800 	.word	0x40023800
 8004d18:	40007000 	.word	0x40007000
 8004d1c:	0ffffcff 	.word	0x0ffffcff
 8004d20:	4bac      	ldr	r3, [pc, #688]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	4aab      	ldr	r2, [pc, #684]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d2a:	6093      	str	r3, [r2, #8]
 8004d2c:	4ba9      	ldr	r3, [pc, #676]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d38:	49a6      	ldr	r1, [pc, #664]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d010      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d4a:	4ba2      	ldr	r3, [pc, #648]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d50:	4aa0      	ldr	r2, [pc, #640]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d5a:	4b9e      	ldr	r3, [pc, #632]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	499b      	ldr	r1, [pc, #620]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d78:	4b96      	ldr	r3, [pc, #600]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d86:	4993      	ldr	r1, [pc, #588]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d9a:	4b8e      	ldr	r3, [pc, #568]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da8:	498a      	ldr	r1, [pc, #552]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dbc:	4b85      	ldr	r3, [pc, #532]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dca:	4982      	ldr	r1, [pc, #520]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dde:	4b7d      	ldr	r3, [pc, #500]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	4979      	ldr	r1, [pc, #484]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e00:	4b74      	ldr	r3, [pc, #464]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e06:	f023 0203 	bic.w	r2, r3, #3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0e:	4971      	ldr	r1, [pc, #452]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e22:	4b6c      	ldr	r3, [pc, #432]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e28:	f023 020c 	bic.w	r2, r3, #12
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e30:	4968      	ldr	r1, [pc, #416]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e44:	4b63      	ldr	r3, [pc, #396]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e52:	4960      	ldr	r1, [pc, #384]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e66:	4b5b      	ldr	r3, [pc, #364]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e74:	4957      	ldr	r1, [pc, #348]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e88:	4b52      	ldr	r3, [pc, #328]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e96:	494f      	ldr	r1, [pc, #316]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004eaa:	4b4a      	ldr	r3, [pc, #296]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	4946      	ldr	r1, [pc, #280]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ecc:	4b41      	ldr	r3, [pc, #260]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eda:	493e      	ldr	r1, [pc, #248]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004eee:	4b39      	ldr	r3, [pc, #228]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efc:	4935      	ldr	r1, [pc, #212]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f10:	4b30      	ldr	r3, [pc, #192]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f1e:	492d      	ldr	r1, [pc, #180]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d011      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f32:	4b28      	ldr	r3, [pc, #160]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f40:	4924      	ldr	r1, [pc, #144]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f50:	d101      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f52:	2301      	movs	r3, #1
 8004f54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f62:	2301      	movs	r3, #1
 8004f64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f72:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f80:	4914      	ldr	r1, [pc, #80]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f94:	4b0f      	ldr	r3, [pc, #60]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa4:	490b      	ldr	r1, [pc, #44]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00f      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc8:	4902      	ldr	r1, [pc, #8]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fd0:	e002      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004fd2:	bf00      	nop
 8004fd4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fe4:	4b8a      	ldr	r3, [pc, #552]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff4:	4986      	ldr	r1, [pc, #536]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005008:	4b81      	ldr	r3, [pc, #516]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800500a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800500e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005018:	497d      	ldr	r1, [pc, #500]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d006      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 80d6 	beq.w	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005034:	4b76      	ldr	r3, [pc, #472]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a75      	ldr	r2, [pc, #468]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800503e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005040:	f7fc fc0e 	bl	8001860 <HAL_GetTick>
 8005044:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005048:	f7fc fc0a 	bl	8001860 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	; 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e195      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800505a:	4b6d      	ldr	r3, [pc, #436]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d021      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005076:	2b00      	cmp	r3, #0
 8005078:	d11d      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800507a:	4b65      	ldr	r3, [pc, #404]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800507c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005080:	0c1b      	lsrs	r3, r3, #16
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005088:	4b61      	ldr	r3, [pc, #388]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800508a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508e:	0e1b      	lsrs	r3, r3, #24
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	019a      	lsls	r2, r3, #6
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	041b      	lsls	r3, r3, #16
 80050a0:	431a      	orrs	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	061b      	lsls	r3, r3, #24
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	071b      	lsls	r3, r3, #28
 80050ae:	4958      	ldr	r1, [pc, #352]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d02e      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e0:	d129      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050e2:	4b4b      	ldr	r3, [pc, #300]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e8:	0c1b      	lsrs	r3, r3, #16
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050f0:	4b47      	ldr	r3, [pc, #284]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f6:	0f1b      	lsrs	r3, r3, #28
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	019a      	lsls	r2, r3, #6
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	041b      	lsls	r3, r3, #16
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	061b      	lsls	r3, r3, #24
 8005110:	431a      	orrs	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	071b      	lsls	r3, r3, #28
 8005116:	493e      	ldr	r1, [pc, #248]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800511e:	4b3c      	ldr	r3, [pc, #240]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005124:	f023 021f 	bic.w	r2, r3, #31
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	3b01      	subs	r3, #1
 800512e:	4938      	ldr	r1, [pc, #224]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d01d      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005142:	4b33      	ldr	r3, [pc, #204]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005148:	0e1b      	lsrs	r3, r3, #24
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005150:	4b2f      	ldr	r3, [pc, #188]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005156:	0f1b      	lsrs	r3, r3, #28
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	019a      	lsls	r2, r3, #6
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	041b      	lsls	r3, r3, #16
 800516a:	431a      	orrs	r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	061b      	lsls	r3, r3, #24
 8005170:	431a      	orrs	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	071b      	lsls	r3, r3, #28
 8005176:	4926      	ldr	r1, [pc, #152]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d011      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	019a      	lsls	r2, r3, #6
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	041b      	lsls	r3, r3, #16
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	061b      	lsls	r3, r3, #24
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	071b      	lsls	r3, r3, #28
 80051a6:	491a      	ldr	r1, [pc, #104]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051ae:	4b18      	ldr	r3, [pc, #96]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a17      	ldr	r2, [pc, #92]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ba:	f7fc fb51 	bl	8001860 <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051c0:	e008      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051c2:	f7fc fb4d 	bl	8001860 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b64      	cmp	r3, #100	; 0x64
 80051ce:	d901      	bls.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e0d8      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051d4:	4b0e      	ldr	r3, [pc, #56]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	f040 80ce 	bne.w	8005384 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a08      	ldr	r2, [pc, #32]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f4:	f7fc fb34 	bl	8001860 <HAL_GetTick>
 80051f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051fa:	e00b      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051fc:	f7fc fb30 	bl	8001860 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	; 0x64
 8005208:	d904      	bls.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e0bb      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800520e:	bf00      	nop
 8005210:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005214:	4b5e      	ldr	r3, [pc, #376]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800521c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005220:	d0ec      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800523e:	2b00      	cmp	r3, #0
 8005240:	d02e      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d12a      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800524a:	4b51      	ldr	r3, [pc, #324]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005250:	0c1b      	lsrs	r3, r3, #16
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005258:	4b4d      	ldr	r3, [pc, #308]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525e:	0f1b      	lsrs	r3, r3, #28
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	019a      	lsls	r2, r3, #6
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	041b      	lsls	r3, r3, #16
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	061b      	lsls	r3, r3, #24
 8005278:	431a      	orrs	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	071b      	lsls	r3, r3, #28
 800527e:	4944      	ldr	r1, [pc, #272]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005286:	4b42      	ldr	r3, [pc, #264]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800528c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005294:	3b01      	subs	r3, #1
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	493d      	ldr	r1, [pc, #244]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d022      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b4:	d11d      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052b6:	4b36      	ldr	r3, [pc, #216]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052bc:	0e1b      	lsrs	r3, r3, #24
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052c4:	4b32      	ldr	r3, [pc, #200]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ca:	0f1b      	lsrs	r3, r3, #28
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	019a      	lsls	r2, r3, #6
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	041b      	lsls	r3, r3, #16
 80052de:	431a      	orrs	r2, r3
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	061b      	lsls	r3, r3, #24
 80052e4:	431a      	orrs	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	071b      	lsls	r3, r3, #28
 80052ea:	4929      	ldr	r1, [pc, #164]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d028      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052fe:	4b24      	ldr	r3, [pc, #144]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	0e1b      	lsrs	r3, r3, #24
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800530c:	4b20      	ldr	r3, [pc, #128]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	0c1b      	lsrs	r3, r3, #16
 8005314:	f003 0303 	and.w	r3, r3, #3
 8005318:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	019a      	lsls	r2, r3, #6
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	041b      	lsls	r3, r3, #16
 8005324:	431a      	orrs	r2, r3
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	061b      	lsls	r3, r3, #24
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	071b      	lsls	r3, r3, #28
 8005332:	4917      	ldr	r1, [pc, #92]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800533a:	4b15      	ldr	r3, [pc, #84]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800533c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005340:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	4911      	ldr	r1, [pc, #68]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005350:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a0e      	ldr	r2, [pc, #56]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800535c:	f7fc fa80 	bl	8001860 <HAL_GetTick>
 8005360:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005364:	f7fc fa7c 	bl	8001860 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	; 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e007      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800537e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005382:	d1ef      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3720      	adds	r7, #32
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40023800 	.word	0x40023800

08005394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e09d      	b.n	80054e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d108      	bne.n	80053c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053b6:	d009      	beq.n	80053cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	61da      	str	r2, [r3, #28]
 80053be:	e005      	b.n	80053cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fc f820 	bl	800142c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005402:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800540c:	d902      	bls.n	8005414 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	e002      	b.n	800541a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005418:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005422:	d007      	beq.n	8005434 <HAL_SPI_Init+0xa0>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800542c:	d002      	beq.n	8005434 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	ea42 0103 	orr.w	r1, r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	0c1b      	lsrs	r3, r3, #16
 8005490:	f003 0204 	and.w	r2, r3, #4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054b0:	ea42 0103 	orr.w	r1, r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	4613      	mov	r3, r2
 80054f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_SPI_Transmit_DMA+0x20>
 8005508:	2302      	movs	r3, #2
 800550a:	e0d8      	b.n	80056be <HAL_SPI_Transmit_DMA+0x1d2>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	d002      	beq.n	8005526 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005520:	2302      	movs	r3, #2
 8005522:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005524:	e0c6      	b.n	80056b4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_SPI_Transmit_DMA+0x46>
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005536:	e0bd      	b.n	80056b4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2203      	movs	r2, #3
 800553c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	88fa      	ldrh	r2, [r7, #6]
 8005550:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	88fa      	ldrh	r2, [r7, #6]
 8005556:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005582:	d10f      	bne.n	80055a4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005592:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a8:	4a47      	ldr	r2, [pc, #284]	; (80056c8 <HAL_SPI_Transmit_DMA+0x1dc>)
 80055aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b0:	4a46      	ldr	r2, [pc, #280]	; (80056cc <HAL_SPI_Transmit_DMA+0x1e0>)
 80055b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b8:	4a45      	ldr	r2, [pc, #276]	; (80056d0 <HAL_SPI_Transmit_DMA+0x1e4>)
 80055ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c0:	2200      	movs	r2, #0
 80055c2:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055d2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055dc:	d82d      	bhi.n	800563a <HAL_SPI_Transmit_DMA+0x14e>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e8:	d127      	bne.n	800563a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10f      	bne.n	8005618 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005606:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560c:	b29b      	uxth	r3, r3
 800560e:	085b      	lsrs	r3, r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005616:	e010      	b.n	800563a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005626:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562c:	b29b      	uxth	r3, r3
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	b29b      	uxth	r3, r3
 8005632:	3301      	adds	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	4619      	mov	r1, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005650:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005652:	f7fc faf5 	bl	8001c40 <HAL_DMA_Start_IT>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00c      	beq.n	8005676 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005660:	f043 0210 	orr.w	r2, r3, #16
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005674:	e01e      	b.n	80056b4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d007      	beq.n	8005694 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005692:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0220 	orr.w	r2, r2, #32
 80056a2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0202 	orr.w	r2, r2, #2
 80056b2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	080057a5 	.word	0x080057a5
 80056cc:	080056fd 	.word	0x080056fd
 80056d0:	080057c1 	.word	0x080057c1

080056d4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800570a:	f7fc f8a9 	bl	8001860 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800571e:	d03b      	beq.n	8005798 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0220 	bic.w	r2, r2, #32
 800572e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0202 	bic.w	r2, r2, #2
 800573e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	2164      	movs	r1, #100	; 0x64
 8005744:	6978      	ldr	r0, [r7, #20]
 8005746:	f000 f979 	bl	8005a3c <SPI_EndRxTxTransaction>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005754:	f043 0220 	orr.w	r2, r3, #32
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2200      	movs	r2, #0
 800577e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005790:	6978      	ldr	r0, [r7, #20]
 8005792:	f7ff ffa9 	bl	80056e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005796:	e002      	b.n	800579e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005798:	6978      	ldr	r0, [r7, #20]
 800579a:	f7fb fa7d 	bl	8000c98 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7ff ff8e 	bl	80056d4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057b8:	bf00      	nop
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0203 	bic.w	r2, r2, #3
 80057dc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e2:	f043 0210 	orr.w	r2, r3, #16
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f7ff ff78 	bl	80056e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	4613      	mov	r3, r2
 800580e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005810:	f7fc f826 	bl	8001860 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	4413      	add	r3, r2
 800581e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005820:	f7fc f81e 	bl	8001860 <HAL_GetTick>
 8005824:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005826:	4b39      	ldr	r3, [pc, #228]	; (800590c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	015b      	lsls	r3, r3, #5
 800582c:	0d1b      	lsrs	r3, r3, #20
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	fb02 f303 	mul.w	r3, r2, r3
 8005834:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005836:	e054      	b.n	80058e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583e:	d050      	beq.n	80058e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005840:	f7fc f80e 	bl	8001860 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	429a      	cmp	r2, r3
 800584e:	d902      	bls.n	8005856 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d13d      	bne.n	80058d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005864:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800586e:	d111      	bne.n	8005894 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005878:	d004      	beq.n	8005884 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005882:	d107      	bne.n	8005894 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005892:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589c:	d10f      	bne.n	80058be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e017      	b.n	8005902 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	3b01      	subs	r3, #1
 80058e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4013      	ands	r3, r2
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d19b      	bne.n	8005838 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000008 	.word	0x20000008

08005910 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	; 0x28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005922:	f7fb ff9d 	bl	8001860 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	1a9b      	subs	r3, r3, r2
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	4413      	add	r3, r2
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005932:	f7fb ff95 	bl	8001860 <HAL_GetTick>
 8005936:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	330c      	adds	r3, #12
 800593e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005940:	4b3d      	ldr	r3, [pc, #244]	; (8005a38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	00da      	lsls	r2, r3, #3
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	0d1b      	lsrs	r3, r3, #20
 8005950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005952:	fb02 f303 	mul.w	r3, r2, r3
 8005956:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005958:	e060      	b.n	8005a1c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005960:	d107      	bne.n	8005972 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d104      	bne.n	8005972 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005970:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d050      	beq.n	8005a1c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800597a:	f7fb ff71 	bl	8001860 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005986:	429a      	cmp	r2, r3
 8005988:	d902      	bls.n	8005990 <SPI_WaitFifoStateUntilTimeout+0x80>
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	2b00      	cmp	r3, #0
 800598e:	d13d      	bne.n	8005a0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800599e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059a8:	d111      	bne.n	80059ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b2:	d004      	beq.n	80059be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059bc:	d107      	bne.n	80059ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d6:	d10f      	bne.n	80059f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e010      	b.n	8005a2e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4013      	ands	r3, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d196      	bne.n	800595a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3728      	adds	r7, #40	; 0x28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000008 	.word	0x20000008

08005a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b088      	sub	sp, #32
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f7ff ff5b 	bl	8005910 <SPI_WaitFifoStateUntilTimeout>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d007      	beq.n	8005a70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a64:	f043 0220 	orr.w	r2, r3, #32
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e046      	b.n	8005afe <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a70:	4b25      	ldr	r3, [pc, #148]	; (8005b08 <SPI_EndRxTxTransaction+0xcc>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a25      	ldr	r2, [pc, #148]	; (8005b0c <SPI_EndRxTxTransaction+0xd0>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	0d5b      	lsrs	r3, r3, #21
 8005a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a80:	fb02 f303 	mul.w	r3, r2, r3
 8005a84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a8e:	d112      	bne.n	8005ab6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2200      	movs	r2, #0
 8005a98:	2180      	movs	r1, #128	; 0x80
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f7ff feb0 	bl	8005800 <SPI_WaitFlagStateUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d016      	beq.n	8005ad4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aaa:	f043 0220 	orr.w	r2, r3, #32
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e023      	b.n	8005afe <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005acc:	2b80      	cmp	r3, #128	; 0x80
 8005ace:	d0f2      	beq.n	8005ab6 <SPI_EndRxTxTransaction+0x7a>
 8005ad0:	e000      	b.n	8005ad4 <SPI_EndRxTxTransaction+0x98>
        break;
 8005ad2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7ff ff15 	bl	8005910 <SPI_WaitFifoStateUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af0:	f043 0220 	orr.w	r2, r3, #32
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e000      	b.n	8005afe <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000008 	.word	0x20000008
 8005b0c:	165e9f81 	.word	0x165e9f81

08005b10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b10:	b084      	sub	sp, #16
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	f107 001c 	add.w	r0, r7, #28
 8005b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d120      	bne.n	8005b6a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <USB_CoreInit+0xac>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d105      	bne.n	8005b5e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f001 fbee 	bl	8007340 <USB_CoreReset>
 8005b64:	4603      	mov	r3, r0
 8005b66:	73fb      	strb	r3, [r7, #15]
 8005b68:	e010      	b.n	8005b8c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 fbe2 	bl	8007340 <USB_CoreReset>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d10b      	bne.n	8005baa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f043 0206 	orr.w	r2, r3, #6
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f043 0220 	orr.w	r2, r3, #32
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bb6:	b004      	add	sp, #16
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	ffbdffbf 	.word	0xffbdffbf

08005bc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005bce:	79fb      	ldrb	r3, [r7, #7]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d165      	bne.n	8005ca0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4a41      	ldr	r2, [pc, #260]	; (8005cdc <USB_SetTurnaroundTime+0x11c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d906      	bls.n	8005bea <USB_SetTurnaroundTime+0x2a>
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4a40      	ldr	r2, [pc, #256]	; (8005ce0 <USB_SetTurnaroundTime+0x120>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d202      	bcs.n	8005bea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005be4:	230f      	movs	r3, #15
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	e062      	b.n	8005cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	4a3c      	ldr	r2, [pc, #240]	; (8005ce0 <USB_SetTurnaroundTime+0x120>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d306      	bcc.n	8005c00 <USB_SetTurnaroundTime+0x40>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	4a3b      	ldr	r2, [pc, #236]	; (8005ce4 <USB_SetTurnaroundTime+0x124>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d202      	bcs.n	8005c00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005bfa:	230e      	movs	r3, #14
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	e057      	b.n	8005cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	4a38      	ldr	r2, [pc, #224]	; (8005ce4 <USB_SetTurnaroundTime+0x124>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d306      	bcc.n	8005c16 <USB_SetTurnaroundTime+0x56>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4a37      	ldr	r2, [pc, #220]	; (8005ce8 <USB_SetTurnaroundTime+0x128>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d202      	bcs.n	8005c16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c10:	230d      	movs	r3, #13
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	e04c      	b.n	8005cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4a33      	ldr	r2, [pc, #204]	; (8005ce8 <USB_SetTurnaroundTime+0x128>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d306      	bcc.n	8005c2c <USB_SetTurnaroundTime+0x6c>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	4a32      	ldr	r2, [pc, #200]	; (8005cec <USB_SetTurnaroundTime+0x12c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d802      	bhi.n	8005c2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c26:	230c      	movs	r3, #12
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	e041      	b.n	8005cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4a2f      	ldr	r2, [pc, #188]	; (8005cec <USB_SetTurnaroundTime+0x12c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d906      	bls.n	8005c42 <USB_SetTurnaroundTime+0x82>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4a2e      	ldr	r2, [pc, #184]	; (8005cf0 <USB_SetTurnaroundTime+0x130>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d802      	bhi.n	8005c42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c3c:	230b      	movs	r3, #11
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e036      	b.n	8005cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	4a2a      	ldr	r2, [pc, #168]	; (8005cf0 <USB_SetTurnaroundTime+0x130>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d906      	bls.n	8005c58 <USB_SetTurnaroundTime+0x98>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	4a29      	ldr	r2, [pc, #164]	; (8005cf4 <USB_SetTurnaroundTime+0x134>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d802      	bhi.n	8005c58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c52:	230a      	movs	r3, #10
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	e02b      	b.n	8005cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4a26      	ldr	r2, [pc, #152]	; (8005cf4 <USB_SetTurnaroundTime+0x134>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d906      	bls.n	8005c6e <USB_SetTurnaroundTime+0xae>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4a25      	ldr	r2, [pc, #148]	; (8005cf8 <USB_SetTurnaroundTime+0x138>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d202      	bcs.n	8005c6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c68:	2309      	movs	r3, #9
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	e020      	b.n	8005cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	4a21      	ldr	r2, [pc, #132]	; (8005cf8 <USB_SetTurnaroundTime+0x138>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d306      	bcc.n	8005c84 <USB_SetTurnaroundTime+0xc4>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4a20      	ldr	r2, [pc, #128]	; (8005cfc <USB_SetTurnaroundTime+0x13c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d802      	bhi.n	8005c84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c7e:	2308      	movs	r3, #8
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	e015      	b.n	8005cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4a1d      	ldr	r2, [pc, #116]	; (8005cfc <USB_SetTurnaroundTime+0x13c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d906      	bls.n	8005c9a <USB_SetTurnaroundTime+0xda>
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4a1c      	ldr	r2, [pc, #112]	; (8005d00 <USB_SetTurnaroundTime+0x140>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d202      	bcs.n	8005c9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005c94:	2307      	movs	r3, #7
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	e00a      	b.n	8005cb0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005c9a:	2306      	movs	r3, #6
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	e007      	b.n	8005cb0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ca6:	2309      	movs	r3, #9
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	e001      	b.n	8005cb0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005cac:	2309      	movs	r3, #9
 8005cae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	029b      	lsls	r3, r3, #10
 8005cc4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	00d8acbf 	.word	0x00d8acbf
 8005ce0:	00e4e1c0 	.word	0x00e4e1c0
 8005ce4:	00f42400 	.word	0x00f42400
 8005ce8:	01067380 	.word	0x01067380
 8005cec:	011a499f 	.word	0x011a499f
 8005cf0:	01312cff 	.word	0x01312cff
 8005cf4:	014ca43f 	.word	0x014ca43f
 8005cf8:	016e3600 	.word	0x016e3600
 8005cfc:	01a6ab1f 	.word	0x01a6ab1f
 8005d00:	01e84800 	.word	0x01e84800

08005d04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f043 0201 	orr.w	r2, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f023 0201 	bic.w	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d115      	bne.n	8005d96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d76:	2001      	movs	r0, #1
 8005d78:	f7fb fd7e 	bl	8001878 <HAL_Delay>
      ms++;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f001 fa4b 	bl	800721e <USB_GetMode>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d01e      	beq.n	8005dcc <USB_SetCurrentMode+0x84>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b31      	cmp	r3, #49	; 0x31
 8005d92:	d9f0      	bls.n	8005d76 <USB_SetCurrentMode+0x2e>
 8005d94:	e01a      	b.n	8005dcc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d96:	78fb      	ldrb	r3, [r7, #3]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d115      	bne.n	8005dc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005da8:	2001      	movs	r0, #1
 8005daa:	f7fb fd65 	bl	8001878 <HAL_Delay>
      ms++;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3301      	adds	r3, #1
 8005db2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f001 fa32 	bl	800721e <USB_GetMode>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d005      	beq.n	8005dcc <USB_SetCurrentMode+0x84>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b31      	cmp	r3, #49	; 0x31
 8005dc4:	d9f0      	bls.n	8005da8 <USB_SetCurrentMode+0x60>
 8005dc6:	e001      	b.n	8005dcc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e005      	b.n	8005dd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b32      	cmp	r3, #50	; 0x32
 8005dd0:	d101      	bne.n	8005dd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005de0:	b084      	sub	sp, #16
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b086      	sub	sp, #24
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	e009      	b.n	8005e14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	3340      	adds	r3, #64	; 0x40
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	3301      	adds	r3, #1
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	2b0e      	cmp	r3, #14
 8005e18:	d9f2      	bls.n	8005e00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d11c      	bne.n	8005e5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e2e:	f043 0302 	orr.w	r3, r3, #2
 8005e32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	e005      	b.n	8005e66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	2300      	movs	r3, #0
 8005e70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e78:	4619      	mov	r1, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e80:	461a      	mov	r2, r3
 8005e82:	680b      	ldr	r3, [r1, #0]
 8005e84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d10c      	bne.n	8005ea6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e92:	2100      	movs	r1, #0
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f965 	bl	8006164 <USB_SetDevSpeed>
 8005e9a:	e008      	b.n	8005eae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f960 	bl	8006164 <USB_SetDevSpeed>
 8005ea4:	e003      	b.n	8005eae <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ea6:	2103      	movs	r1, #3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f95b 	bl	8006164 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005eae:	2110      	movs	r1, #16
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f8f3 	bl	800609c <USB_FlushTxFifo>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f91f 	bl	8006104 <USB_FlushRxFifo>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eee:	461a      	mov	r2, r3
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	613b      	str	r3, [r7, #16]
 8005ef8:	e043      	b.n	8005f82 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f10:	d118      	bne.n	8005f44 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f24:	461a      	mov	r2, r3
 8005f26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	e013      	b.n	8005f56 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	e008      	b.n	8005f56 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	461a      	mov	r2, r3
 8005f52:	2300      	movs	r3, #0
 8005f54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f62:	461a      	mov	r2, r3
 8005f64:	2300      	movs	r3, #0
 8005f66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f74:	461a      	mov	r2, r3
 8005f76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	613b      	str	r3, [r7, #16]
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d3b7      	bcc.n	8005efa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	613b      	str	r3, [r7, #16]
 8005f8e:	e043      	b.n	8006018 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fa6:	d118      	bne.n	8005fda <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10a      	bne.n	8005fc4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fc0:	6013      	str	r3, [r2, #0]
 8005fc2:	e013      	b.n	8005fec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	e008      	b.n	8005fec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	2300      	movs	r3, #0
 8005fea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	461a      	mov	r2, r3
 800600c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006010:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	3301      	adds	r3, #1
 8006016:	613b      	str	r3, [r7, #16]
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	429a      	cmp	r2, r3
 800601e:	d3b7      	bcc.n	8005f90 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800602e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006032:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006040:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	2b00      	cmp	r3, #0
 8006046:	d105      	bne.n	8006054 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f043 0210 	orr.w	r2, r3, #16
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699a      	ldr	r2, [r3, #24]
 8006058:	4b0e      	ldr	r3, [pc, #56]	; (8006094 <USB_DevInit+0x2b4>)
 800605a:	4313      	orrs	r3, r2
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d005      	beq.n	8006072 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f043 0208 	orr.w	r2, r3, #8
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006074:	2b01      	cmp	r3, #1
 8006076:	d105      	bne.n	8006084 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	4b06      	ldr	r3, [pc, #24]	; (8006098 <USB_DevInit+0x2b8>)
 800607e:	4313      	orrs	r3, r2
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006084:	7dfb      	ldrb	r3, [r7, #23]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006090:	b004      	add	sp, #16
 8006092:	4770      	bx	lr
 8006094:	803c3800 	.word	0x803c3800
 8006098:	40000004 	.word	0x40000004

0800609c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3301      	adds	r3, #1
 80060ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a13      	ldr	r2, [pc, #76]	; (8006100 <USB_FlushTxFifo+0x64>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e01b      	b.n	80060f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	daf2      	bge.n	80060aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	019b      	lsls	r3, r3, #6
 80060cc:	f043 0220 	orr.w	r2, r3, #32
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a08      	ldr	r2, [pc, #32]	; (8006100 <USB_FlushTxFifo+0x64>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d901      	bls.n	80060e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e006      	b.n	80060f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d0f0      	beq.n	80060d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	00030d40 	.word	0x00030d40

08006104 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3301      	adds	r3, #1
 8006114:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4a11      	ldr	r2, [pc, #68]	; (8006160 <USB_FlushRxFifo+0x5c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d901      	bls.n	8006122 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e018      	b.n	8006154 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	daf2      	bge.n	8006110 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2210      	movs	r2, #16
 8006132:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3301      	adds	r3, #1
 8006138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4a08      	ldr	r2, [pc, #32]	; (8006160 <USB_FlushRxFifo+0x5c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d901      	bls.n	8006146 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e006      	b.n	8006154 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f003 0310 	and.w	r3, r3, #16
 800614e:	2b10      	cmp	r3, #16
 8006150:	d0f0      	beq.n	8006134 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	00030d40 	.word	0x00030d40

08006164 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	78fb      	ldrb	r3, [r7, #3]
 800617e:	68f9      	ldr	r1, [r7, #12]
 8006180:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006184:	4313      	orrs	r3, r2
 8006186:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006196:	b480      	push	{r7}
 8006198:	b087      	sub	sp, #28
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0306 	and.w	r3, r3, #6
 80061ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d102      	bne.n	80061bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80061b6:	2300      	movs	r3, #0
 80061b8:	75fb      	strb	r3, [r7, #23]
 80061ba:	e00a      	b.n	80061d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d002      	beq.n	80061c8 <USB_GetDevSpeed+0x32>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b06      	cmp	r3, #6
 80061c6:	d102      	bne.n	80061ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80061c8:	2302      	movs	r3, #2
 80061ca:	75fb      	strb	r3, [r7, #23]
 80061cc:	e001      	b.n	80061d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80061ce:	230f      	movs	r3, #15
 80061d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d139      	bne.n	8006270 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f003 030f 	and.w	r3, r3, #15
 800620c:	2101      	movs	r1, #1
 800620e:	fa01 f303 	lsl.w	r3, r1, r3
 8006212:	b29b      	uxth	r3, r3
 8006214:	68f9      	ldr	r1, [r7, #12]
 8006216:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800621a:	4313      	orrs	r3, r2
 800621c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d153      	bne.n	80062dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	791b      	ldrb	r3, [r3, #4]
 800624e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006250:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	059b      	lsls	r3, r3, #22
 8006256:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006258:	431a      	orrs	r2, r3
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	0159      	lsls	r1, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	440b      	add	r3, r1
 8006262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006266:	4619      	mov	r1, r3
 8006268:	4b20      	ldr	r3, [pc, #128]	; (80062ec <USB_ActivateEndpoint+0x10c>)
 800626a:	4313      	orrs	r3, r2
 800626c:	600b      	str	r3, [r1, #0]
 800626e:	e035      	b.n	80062dc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	f003 030f 	and.w	r3, r3, #15
 8006280:	2101      	movs	r1, #1
 8006282:	fa01 f303 	lsl.w	r3, r1, r3
 8006286:	041b      	lsls	r3, r3, #16
 8006288:	68f9      	ldr	r1, [r7, #12]
 800628a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800628e:	4313      	orrs	r3, r2
 8006290:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d119      	bne.n	80062dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	791b      	ldrb	r3, [r3, #4]
 80062c2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062c4:	430b      	orrs	r3, r1
 80062c6:	431a      	orrs	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	0159      	lsls	r1, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	440b      	add	r3, r1
 80062d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d4:	4619      	mov	r1, r3
 80062d6:	4b05      	ldr	r3, [pc, #20]	; (80062ec <USB_ActivateEndpoint+0x10c>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	10008000 	.word	0x10008000

080062f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	785b      	ldrb	r3, [r3, #1]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d161      	bne.n	80063d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800631e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006322:	d11f      	bne.n	8006364 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	440a      	add	r2, r1
 800633a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006342:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006362:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	2101      	movs	r1, #1
 8006376:	fa01 f303 	lsl.w	r3, r1, r3
 800637a:	b29b      	uxth	r3, r3
 800637c:	43db      	mvns	r3, r3
 800637e:	68f9      	ldr	r1, [r7, #12]
 8006380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006384:	4013      	ands	r3, r2
 8006386:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	2101      	movs	r1, #1
 800639a:	fa01 f303 	lsl.w	r3, r1, r3
 800639e:	b29b      	uxth	r3, r3
 80063a0:	43db      	mvns	r3, r3
 80063a2:	68f9      	ldr	r1, [r7, #12]
 80063a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a8:	4013      	ands	r3, r2
 80063aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	0159      	lsls	r1, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	440b      	add	r3, r1
 80063c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c6:	4619      	mov	r1, r3
 80063c8:	4b35      	ldr	r3, [pc, #212]	; (80064a0 <USB_DeactivateEndpoint+0x1b0>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	600b      	str	r3, [r1, #0]
 80063ce:	e060      	b.n	8006492 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e6:	d11f      	bne.n	8006428 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006402:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006406:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	440a      	add	r2, r1
 800641e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006422:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006426:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	2101      	movs	r1, #1
 800643a:	fa01 f303 	lsl.w	r3, r1, r3
 800643e:	041b      	lsls	r3, r3, #16
 8006440:	43db      	mvns	r3, r3
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006448:	4013      	ands	r3, r2
 800644a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	f003 030f 	and.w	r3, r3, #15
 800645c:	2101      	movs	r1, #1
 800645e:	fa01 f303 	lsl.w	r3, r1, r3
 8006462:	041b      	lsls	r3, r3, #16
 8006464:	43db      	mvns	r3, r3
 8006466:	68f9      	ldr	r1, [r7, #12]
 8006468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800646c:	4013      	ands	r3, r2
 800646e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	0159      	lsls	r1, r3, #5
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	440b      	add	r3, r1
 8006486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648a:	4619      	mov	r1, r3
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <USB_DeactivateEndpoint+0x1b4>)
 800648e:	4013      	ands	r3, r2
 8006490:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	ec337800 	.word	0xec337800
 80064a4:	eff37800 	.word	0xeff37800

080064a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	; 0x28
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4613      	mov	r3, r2
 80064b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	f040 8163 	bne.w	8006790 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d132      	bne.n	8006538 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	0159      	lsls	r1, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	440b      	add	r3, r1
 80064e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ec:	4619      	mov	r1, r3
 80064ee:	4ba5      	ldr	r3, [pc, #660]	; (8006784 <USB_EPStartXfer+0x2dc>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	0151      	lsls	r1, r2, #5
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	440a      	add	r2, r1
 800650a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	0159      	lsls	r1, r3, #5
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	440b      	add	r3, r1
 800652a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652e:	4619      	mov	r1, r3
 8006530:	4b95      	ldr	r3, [pc, #596]	; (8006788 <USB_EPStartXfer+0x2e0>)
 8006532:	4013      	ands	r3, r2
 8006534:	610b      	str	r3, [r1, #16]
 8006536:	e074      	b.n	8006622 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	0159      	lsls	r1, r3, #5
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	440b      	add	r3, r1
 800654e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006552:	4619      	mov	r1, r3
 8006554:	4b8c      	ldr	r3, [pc, #560]	; (8006788 <USB_EPStartXfer+0x2e0>)
 8006556:	4013      	ands	r3, r2
 8006558:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	0159      	lsls	r1, r3, #5
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	440b      	add	r3, r1
 8006570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006574:	4619      	mov	r1, r3
 8006576:	4b83      	ldr	r3, [pc, #524]	; (8006784 <USB_EPStartXfer+0x2dc>)
 8006578:	4013      	ands	r3, r2
 800657a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006588:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	6999      	ldr	r1, [r3, #24]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	440b      	add	r3, r1
 8006594:	1e59      	subs	r1, r3, #1
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	fbb1 f3f3 	udiv	r3, r1, r3
 800659e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80065a0:	4b7a      	ldr	r3, [pc, #488]	; (800678c <USB_EPStartXfer+0x2e4>)
 80065a2:	400b      	ands	r3, r1
 80065a4:	69b9      	ldr	r1, [r7, #24]
 80065a6:	0148      	lsls	r0, r1, #5
 80065a8:	69f9      	ldr	r1, [r7, #28]
 80065aa:	4401      	add	r1, r0
 80065ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065b0:	4313      	orrs	r3, r2
 80065b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c0:	691a      	ldr	r2, [r3, #16]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ca:	69b9      	ldr	r1, [r7, #24]
 80065cc:	0148      	lsls	r0, r1, #5
 80065ce:	69f9      	ldr	r1, [r7, #28]
 80065d0:	4401      	add	r1, r0
 80065d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065d6:	4313      	orrs	r3, r2
 80065d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	791b      	ldrb	r3, [r3, #4]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d11f      	bne.n	8006622 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	0151      	lsls	r1, r2, #5
 80065f4:	69fa      	ldr	r2, [r7, #28]
 80065f6:	440a      	add	r2, r1
 80065f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006600:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	0151      	lsls	r1, r2, #5
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	440a      	add	r2, r1
 8006618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800661c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006620:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d14b      	bne.n	80066c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d009      	beq.n	8006644 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663c:	461a      	mov	r2, r3
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	791b      	ldrb	r3, [r3, #4]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d128      	bne.n	800669e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006658:	2b00      	cmp	r3, #0
 800665a:	d110      	bne.n	800667e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	440a      	add	r2, r1
 8006672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006676:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	e00f      	b.n	800669e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	0151      	lsls	r1, r2, #5
 8006690:	69fa      	ldr	r2, [r7, #28]
 8006692:	440a      	add	r2, r1
 8006694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800669c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	e137      	b.n	8006930 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	0151      	lsls	r1, r2, #5
 80066d2:	69fa      	ldr	r2, [r7, #28]
 80066d4:	440a      	add	r2, r1
 80066d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	791b      	ldrb	r3, [r3, #4]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d015      	beq.n	8006714 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 811f 	beq.w	8006930 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	2101      	movs	r1, #1
 8006704:	fa01 f303 	lsl.w	r3, r1, r3
 8006708:	69f9      	ldr	r1, [r7, #28]
 800670a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800670e:	4313      	orrs	r3, r2
 8006710:	634b      	str	r3, [r1, #52]	; 0x34
 8006712:	e10d      	b.n	8006930 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006720:	2b00      	cmp	r3, #0
 8006722:	d110      	bne.n	8006746 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	440a      	add	r2, r1
 800673a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	e00f      	b.n	8006766 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	0151      	lsls	r1, r2, #5
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	440a      	add	r2, r1
 800675c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006764:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	6919      	ldr	r1, [r3, #16]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	781a      	ldrb	r2, [r3, #0]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	b298      	uxth	r0, r3
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	4603      	mov	r3, r0
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 faea 	bl	8006d54 <USB_WritePacket>
 8006780:	e0d6      	b.n	8006930 <USB_EPStartXfer+0x488>
 8006782:	bf00      	nop
 8006784:	e007ffff 	.word	0xe007ffff
 8006788:	fff80000 	.word	0xfff80000
 800678c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	691a      	ldr	r2, [r3, #16]
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	0159      	lsls	r1, r3, #5
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	440b      	add	r3, r1
 80067a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067aa:	4619      	mov	r1, r3
 80067ac:	4b63      	ldr	r3, [pc, #396]	; (800693c <USB_EPStartXfer+0x494>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067be:	691a      	ldr	r2, [r3, #16]
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	0159      	lsls	r1, r3, #5
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	440b      	add	r3, r1
 80067c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067cc:	4619      	mov	r1, r3
 80067ce:	4b5c      	ldr	r3, [pc, #368]	; (8006940 <USB_EPStartXfer+0x498>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d123      	bne.n	8006824 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067f2:	69b9      	ldr	r1, [r7, #24]
 80067f4:	0148      	lsls	r0, r1, #5
 80067f6:	69f9      	ldr	r1, [r7, #28]
 80067f8:	4401      	add	r1, r0
 80067fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067fe:	4313      	orrs	r3, r2
 8006800:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	4413      	add	r3, r2
 800680a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	0151      	lsls	r1, r2, #5
 8006814:	69fa      	ldr	r2, [r7, #28]
 8006816:	440a      	add	r2, r1
 8006818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800681c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006820:	6113      	str	r3, [r2, #16]
 8006822:	e037      	b.n	8006894 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	699a      	ldr	r2, [r3, #24]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	4413      	add	r3, r2
 800682e:	1e5a      	subs	r2, r3, #1
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	fbb2 f3f3 	udiv	r3, r2, r3
 8006838:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	8afa      	ldrh	r2, [r7, #22]
 8006840:	fb03 f202 	mul.w	r2, r3, r2
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	691a      	ldr	r2, [r3, #16]
 8006856:	8afb      	ldrh	r3, [r7, #22]
 8006858:	04d9      	lsls	r1, r3, #19
 800685a:	4b3a      	ldr	r3, [pc, #232]	; (8006944 <USB_EPStartXfer+0x49c>)
 800685c:	400b      	ands	r3, r1
 800685e:	69b9      	ldr	r1, [r7, #24]
 8006860:	0148      	lsls	r0, r1, #5
 8006862:	69f9      	ldr	r1, [r7, #28]
 8006864:	4401      	add	r1, r0
 8006866:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800686a:	4313      	orrs	r3, r2
 800686c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687a:	691a      	ldr	r2, [r3, #16]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006884:	69b9      	ldr	r1, [r7, #24]
 8006886:	0148      	lsls	r0, r1, #5
 8006888:	69f9      	ldr	r1, [r7, #28]
 800688a:	4401      	add	r1, r0
 800688c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006890:	4313      	orrs	r3, r2
 8006892:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006894:	79fb      	ldrb	r3, [r7, #7]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d10d      	bne.n	80068b6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d009      	beq.n	80068b6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	6919      	ldr	r1, [r3, #16]
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b2:	460a      	mov	r2, r1
 80068b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	791b      	ldrb	r3, [r3, #4]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d128      	bne.n	8006910 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d110      	bne.n	80068f0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	e00f      	b.n	8006910 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	0151      	lsls	r1, r2, #5
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	440a      	add	r2, r1
 8006906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800690a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800690e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	440a      	add	r2, r1
 8006926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800692a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800692e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3720      	adds	r7, #32
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	fff80000 	.word	0xfff80000
 8006940:	e007ffff 	.word	0xe007ffff
 8006944:	1ff80000 	.word	0x1ff80000

08006948 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	4613      	mov	r3, r2
 8006954:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	785b      	ldrb	r3, [r3, #1]
 8006964:	2b01      	cmp	r3, #1
 8006966:	f040 80ce 	bne.w	8006b06 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d132      	bne.n	80069d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	0159      	lsls	r1, r3, #5
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	440b      	add	r3, r1
 8006988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698c:	4619      	mov	r1, r3
 800698e:	4b9a      	ldr	r3, [pc, #616]	; (8006bf8 <USB_EP0StartXfer+0x2b0>)
 8006990:	4013      	ands	r3, r2
 8006992:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	0159      	lsls	r1, r3, #5
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	440b      	add	r3, r1
 80069ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ce:	4619      	mov	r1, r3
 80069d0:	4b8a      	ldr	r3, [pc, #552]	; (8006bfc <USB_EP0StartXfer+0x2b4>)
 80069d2:	4013      	ands	r3, r2
 80069d4:	610b      	str	r3, [r1, #16]
 80069d6:	e04e      	b.n	8006a76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	0159      	lsls	r1, r3, #5
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	440b      	add	r3, r1
 80069ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f2:	4619      	mov	r1, r3
 80069f4:	4b81      	ldr	r3, [pc, #516]	; (8006bfc <USB_EP0StartXfer+0x2b4>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a06:	691a      	ldr	r2, [r3, #16]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	0159      	lsls	r1, r3, #5
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	440b      	add	r3, r1
 8006a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a14:	4619      	mov	r1, r3
 8006a16:	4b78      	ldr	r3, [pc, #480]	; (8006bf8 <USB_EP0StartXfer+0x2b0>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	699a      	ldr	r2, [r3, #24]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d903      	bls.n	8006a30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	68da      	ldr	r2, [r3, #12]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a66:	6939      	ldr	r1, [r7, #16]
 8006a68:	0148      	lsls	r0, r1, #5
 8006a6a:	6979      	ldr	r1, [r7, #20]
 8006a6c:	4401      	add	r1, r0
 8006a6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a72:	4313      	orrs	r3, r2
 8006a74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d11e      	bne.n	8006aba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d009      	beq.n	8006a98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a90:	461a      	mov	r2, r3
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	0151      	lsls	r1, r2, #5
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	440a      	add	r2, r1
 8006aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	e097      	b.n	8006bea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	0151      	lsls	r1, r2, #5
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	440a      	add	r2, r1
 8006ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ad8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 8083 	beq.w	8006bea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	2101      	movs	r1, #1
 8006af6:	fa01 f303 	lsl.w	r3, r1, r3
 8006afa:	6979      	ldr	r1, [r7, #20]
 8006afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b00:	4313      	orrs	r3, r2
 8006b02:	634b      	str	r3, [r1, #52]	; 0x34
 8006b04:	e071      	b.n	8006bea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b12:	691a      	ldr	r2, [r3, #16]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	0159      	lsls	r1, r3, #5
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	440b      	add	r3, r1
 8006b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b20:	4619      	mov	r1, r3
 8006b22:	4b36      	ldr	r3, [pc, #216]	; (8006bfc <USB_EP0StartXfer+0x2b4>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	0159      	lsls	r1, r3, #5
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	440b      	add	r3, r1
 8006b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b42:	4619      	mov	r1, r3
 8006b44:	4b2c      	ldr	r3, [pc, #176]	; (8006bf8 <USB_EP0StartXfer+0x2b0>)
 8006b46:	4013      	ands	r3, r2
 8006b48:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	0151      	lsls	r1, r2, #5
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	440a      	add	r2, r1
 8006b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8e:	691a      	ldr	r2, [r3, #16]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b98:	6939      	ldr	r1, [r7, #16]
 8006b9a:	0148      	lsls	r0, r1, #5
 8006b9c:	6979      	ldr	r1, [r7, #20]
 8006b9e:	4401      	add	r1, r0
 8006ba0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d10d      	bne.n	8006bca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d009      	beq.n	8006bca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	6919      	ldr	r1, [r3, #16]
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc6:	460a      	mov	r2, r1
 8006bc8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	0151      	lsls	r1, r2, #5
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	440a      	add	r2, r1
 8006be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006be4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006be8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	e007ffff 	.word	0xe007ffff
 8006bfc:	fff80000 	.word	0xfff80000

08006c00 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	785b      	ldrb	r3, [r3, #1]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d14a      	bne.n	8006cb4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c36:	f040 8086 	bne.w	8006d46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	7812      	ldrb	r2, [r2, #0]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c5c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	7812      	ldrb	r2, [r2, #0]
 8006c72:	0151      	lsls	r1, r2, #5
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	440a      	add	r2, r1
 8006c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3301      	adds	r3, #1
 8006c86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d902      	bls.n	8006c98 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	75fb      	strb	r3, [r7, #23]
          break;
 8006c96:	e056      	b.n	8006d46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cb0:	d0e7      	beq.n	8006c82 <USB_EPStopXfer+0x82>
 8006cb2:	e048      	b.n	8006d46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ccc:	d13b      	bne.n	8006d46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	7812      	ldrb	r2, [r2, #0]
 8006ce2:	0151      	lsls	r1, r2, #5
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	440a      	add	r2, r1
 8006ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cf0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	7812      	ldrb	r2, [r2, #0]
 8006d06:	0151      	lsls	r1, r2, #5
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	440a      	add	r2, r1
 8006d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d902      	bls.n	8006d2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	75fb      	strb	r3, [r7, #23]
          break;
 8006d2a:	e00c      	b.n	8006d46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d44:	d0e7      	beq.n	8006d16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b089      	sub	sp, #36	; 0x24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	4611      	mov	r1, r2
 8006d60:	461a      	mov	r2, r3
 8006d62:	460b      	mov	r3, r1
 8006d64:	71fb      	strb	r3, [r7, #7]
 8006d66:	4613      	mov	r3, r2
 8006d68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d123      	bne.n	8006dc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d7a:	88bb      	ldrh	r3, [r7, #4]
 8006d7c:	3303      	adds	r3, #3
 8006d7e:	089b      	lsrs	r3, r3, #2
 8006d80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d82:	2300      	movs	r3, #0
 8006d84:	61bb      	str	r3, [r7, #24]
 8006d86:	e018      	b.n	8006dba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d88:	79fb      	ldrb	r3, [r7, #7]
 8006d8a:	031a      	lsls	r2, r3, #12
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d94:	461a      	mov	r2, r3
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	3301      	adds	r3, #1
 8006da6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	3301      	adds	r3, #1
 8006dac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	3301      	adds	r3, #1
 8006db2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	3301      	adds	r3, #1
 8006db8:	61bb      	str	r3, [r7, #24]
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d3e2      	bcc.n	8006d88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3724      	adds	r7, #36	; 0x24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b08b      	sub	sp, #44	; 0x2c
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	089b      	lsrs	r3, r3, #2
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	f003 0303 	and.w	r3, r3, #3
 8006df4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006df6:	2300      	movs	r3, #0
 8006df8:	623b      	str	r3, [r7, #32]
 8006dfa:	e014      	b.n	8006e26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	3301      	adds	r3, #1
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	3301      	adds	r3, #1
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	3301      	adds	r3, #1
 8006e24:	623b      	str	r3, [r7, #32]
 8006e26:	6a3a      	ldr	r2, [r7, #32]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d3e6      	bcc.n	8006dfc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e2e:	8bfb      	ldrh	r3, [r7, #30]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d01e      	beq.n	8006e72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f107 0310 	add.w	r3, r7, #16
 8006e44:	6812      	ldr	r2, [r2, #0]
 8006e46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	701a      	strb	r2, [r3, #0]
      i++;
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	3301      	adds	r3, #1
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006e66:	8bfb      	ldrh	r3, [r7, #30]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e6c:	8bfb      	ldrh	r3, [r7, #30]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1ea      	bne.n	8006e48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	372c      	adds	r7, #44	; 0x2c
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d12c      	bne.n	8006ef6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	db12      	blt.n	8006ed4 <USB_EPSetStall+0x54>
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00f      	beq.n	8006ed4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	0151      	lsls	r1, r2, #5
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	440a      	add	r2, r1
 8006eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ece:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ed2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	0151      	lsls	r1, r2, #5
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	440a      	add	r2, r1
 8006eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	e02b      	b.n	8006f4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	db12      	blt.n	8006f2e <USB_EPSetStall+0xae>
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00f      	beq.n	8006f2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	0151      	lsls	r1, r2, #5
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	440a      	add	r2, r1
 8006f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	0151      	lsls	r1, r2, #5
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	440a      	add	r2, r1
 8006f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	785b      	ldrb	r3, [r3, #1]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d128      	bne.n	8006fca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	0151      	lsls	r1, r2, #5
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	440a      	add	r2, r1
 8006f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	791b      	ldrb	r3, [r3, #4]
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d003      	beq.n	8006fa8 <USB_EPClearStall+0x4c>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	791b      	ldrb	r3, [r3, #4]
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d138      	bne.n	800701a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	0151      	lsls	r1, r2, #5
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	440a      	add	r2, r1
 8006fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	e027      	b.n	800701a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	0151      	lsls	r1, r2, #5
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	440a      	add	r2, r1
 8006fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fe8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	791b      	ldrb	r3, [r3, #4]
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d003      	beq.n	8006ffa <USB_EPClearStall+0x9e>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	791b      	ldrb	r3, [r3, #4]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d10f      	bne.n	800701a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	440a      	add	r2, r1
 8007010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007018:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007046:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800704a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800705c:	68f9      	ldr	r1, [r7, #12]
 800705e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007062:	4313      	orrs	r3, r2
 8007064:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800708e:	f023 0303 	bic.w	r3, r3, #3
 8007092:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070a2:	f023 0302 	bic.w	r3, r3, #2
 80070a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b085      	sub	sp, #20
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070d0:	f023 0303 	bic.w	r3, r3, #3
 80070d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070e4:	f043 0302 	orr.w	r3, r3, #2
 80070e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4013      	ands	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007110:	68fb      	ldr	r3, [r7, #12]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	4013      	ands	r3, r2
 8007140:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	0c1b      	lsrs	r3, r3, #16
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007152:	b480      	push	{r7}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	4013      	ands	r3, r2
 8007174:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	b29b      	uxth	r3, r3
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007186:	b480      	push	{r7}
 8007188:	b085      	sub	sp, #20
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	460b      	mov	r3, r1
 8007190:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	4013      	ands	r3, r2
 80071b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071b4:	68bb      	ldr	r3, [r7, #8]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b087      	sub	sp, #28
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	f003 030f 	and.w	r3, r3, #15
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	fa22 f303 	lsr.w	r3, r2, r3
 80071f2:	01db      	lsls	r3, r3, #7
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4013      	ands	r3, r2
 800720e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007210:	68bb      	ldr	r3, [r7, #8]
}
 8007212:	4618      	mov	r0, r3
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	f003 0301 	and.w	r3, r3, #1
}
 800722e:	4618      	mov	r0, r3
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
	...

0800723c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007256:	4619      	mov	r1, r3
 8007258:	4b09      	ldr	r3, [pc, #36]	; (8007280 <USB_ActivateSetup+0x44>)
 800725a:	4013      	ands	r3, r2
 800725c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800726c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007270:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	fffff800 	.word	0xfffff800

08007284 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	460b      	mov	r3, r1
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	333c      	adds	r3, #60	; 0x3c
 800729a:	3304      	adds	r3, #4
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4a26      	ldr	r2, [pc, #152]	; (800733c <USB_EP0_OutStart+0xb8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d90a      	bls.n	80072be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072b8:	d101      	bne.n	80072be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	e037      	b.n	800732e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c4:	461a      	mov	r2, r3
 80072c6:	2300      	movs	r3, #0
 80072c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ec:	f043 0318 	orr.w	r3, r3, #24
 80072f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007300:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007304:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007306:	7afb      	ldrb	r3, [r7, #11]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d10f      	bne.n	800732c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007312:	461a      	mov	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007326:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800732a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	4f54300a 	.word	0x4f54300a

08007340 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3301      	adds	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4a13      	ldr	r2, [pc, #76]	; (80073a4 <USB_CoreReset+0x64>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d901      	bls.n	800735e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e01b      	b.n	8007396 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	daf2      	bge.n	800734c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	f043 0201 	orr.w	r2, r3, #1
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3301      	adds	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4a09      	ldr	r2, [pc, #36]	; (80073a4 <USB_CoreReset+0x64>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d901      	bls.n	8007388 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e006      	b.n	8007396 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b01      	cmp	r3, #1
 8007392:	d0f0      	beq.n	8007376 <USB_CoreReset+0x36>

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	00030d40 	.word	0x00030d40

080073a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80073b8:	f004 fe76 	bl	800c0a8 <malloc>
 80073bc:	4603      	mov	r3, r0
 80073be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d109      	bne.n	80073da <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	32b0      	adds	r2, #176	; 0xb0
 80073d0:	2100      	movs	r1, #0
 80073d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80073d6:	2302      	movs	r3, #2
 80073d8:	e0d4      	b.n	8007584 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80073da:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80073de:	2100      	movs	r1, #0
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f005 fc5c 	bl	800cc9e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	32b0      	adds	r2, #176	; 0xb0
 80073f0:	68f9      	ldr	r1, [r7, #12]
 80073f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	32b0      	adds	r2, #176	; 0xb0
 8007400:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	7c1b      	ldrb	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d138      	bne.n	8007484 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007412:	4b5e      	ldr	r3, [pc, #376]	; (800758c <USBD_CDC_Init+0x1e4>)
 8007414:	7819      	ldrb	r1, [r3, #0]
 8007416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800741a:	2202      	movs	r2, #2
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f002 fb92 	bl	8009b46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007422:	4b5a      	ldr	r3, [pc, #360]	; (800758c <USBD_CDC_Init+0x1e4>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	f003 020f 	and.w	r2, r3, #15
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	440b      	add	r3, r1
 8007436:	3324      	adds	r3, #36	; 0x24
 8007438:	2201      	movs	r2, #1
 800743a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800743c:	4b54      	ldr	r3, [pc, #336]	; (8007590 <USBD_CDC_Init+0x1e8>)
 800743e:	7819      	ldrb	r1, [r3, #0]
 8007440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007444:	2202      	movs	r2, #2
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f002 fb7d 	bl	8009b46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800744c:	4b50      	ldr	r3, [pc, #320]	; (8007590 <USBD_CDC_Init+0x1e8>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	f003 020f 	and.w	r2, r3, #15
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	4613      	mov	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	440b      	add	r3, r1
 8007460:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007464:	2201      	movs	r2, #1
 8007466:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007468:	4b4a      	ldr	r3, [pc, #296]	; (8007594 <USBD_CDC_Init+0x1ec>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	f003 020f 	and.w	r2, r3, #15
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	440b      	add	r3, r1
 800747c:	3326      	adds	r3, #38	; 0x26
 800747e:	2210      	movs	r2, #16
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	e035      	b.n	80074f0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007484:	4b41      	ldr	r3, [pc, #260]	; (800758c <USBD_CDC_Init+0x1e4>)
 8007486:	7819      	ldrb	r1, [r3, #0]
 8007488:	2340      	movs	r3, #64	; 0x40
 800748a:	2202      	movs	r2, #2
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f002 fb5a 	bl	8009b46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007492:	4b3e      	ldr	r3, [pc, #248]	; (800758c <USBD_CDC_Init+0x1e4>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	f003 020f 	and.w	r2, r3, #15
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	4613      	mov	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	440b      	add	r3, r1
 80074a6:	3324      	adds	r3, #36	; 0x24
 80074a8:	2201      	movs	r2, #1
 80074aa:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80074ac:	4b38      	ldr	r3, [pc, #224]	; (8007590 <USBD_CDC_Init+0x1e8>)
 80074ae:	7819      	ldrb	r1, [r3, #0]
 80074b0:	2340      	movs	r3, #64	; 0x40
 80074b2:	2202      	movs	r2, #2
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f002 fb46 	bl	8009b46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80074ba:	4b35      	ldr	r3, [pc, #212]	; (8007590 <USBD_CDC_Init+0x1e8>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	f003 020f 	and.w	r2, r3, #15
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	4613      	mov	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	440b      	add	r3, r1
 80074ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074d2:	2201      	movs	r2, #1
 80074d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80074d6:	4b2f      	ldr	r3, [pc, #188]	; (8007594 <USBD_CDC_Init+0x1ec>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	f003 020f 	and.w	r2, r3, #15
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	4613      	mov	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	3326      	adds	r3, #38	; 0x26
 80074ec:	2210      	movs	r2, #16
 80074ee:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074f0:	4b28      	ldr	r3, [pc, #160]	; (8007594 <USBD_CDC_Init+0x1ec>)
 80074f2:	7819      	ldrb	r1, [r3, #0]
 80074f4:	2308      	movs	r3, #8
 80074f6:	2203      	movs	r2, #3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f002 fb24 	bl	8009b46 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80074fe:	4b25      	ldr	r3, [pc, #148]	; (8007594 <USBD_CDC_Init+0x1ec>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	f003 020f 	and.w	r2, r3, #15
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	4613      	mov	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	440b      	add	r3, r1
 8007512:	3324      	adds	r3, #36	; 0x24
 8007514:	2201      	movs	r2, #1
 8007516:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	33b0      	adds	r3, #176	; 0xb0
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800754e:	2302      	movs	r3, #2
 8007550:	e018      	b.n	8007584 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	7c1b      	ldrb	r3, [r3, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10a      	bne.n	8007570 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800755a:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <USBD_CDC_Init+0x1e8>)
 800755c:	7819      	ldrb	r1, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f002 fbdb 	bl	8009d24 <USBD_LL_PrepareReceive>
 800756e:	e008      	b.n	8007582 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007570:	4b07      	ldr	r3, [pc, #28]	; (8007590 <USBD_CDC_Init+0x1e8>)
 8007572:	7819      	ldrb	r1, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800757a:	2340      	movs	r3, #64	; 0x40
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f002 fbd1 	bl	8009d24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	2000009b 	.word	0x2000009b
 8007590:	2000009c 	.word	0x2000009c
 8007594:	2000009d 	.word	0x2000009d

08007598 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80075a4:	4b3a      	ldr	r3, [pc, #232]	; (8007690 <USBD_CDC_DeInit+0xf8>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f002 faf1 	bl	8009b92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80075b0:	4b37      	ldr	r3, [pc, #220]	; (8007690 <USBD_CDC_DeInit+0xf8>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	f003 020f 	and.w	r2, r3, #15
 80075b8:	6879      	ldr	r1, [r7, #4]
 80075ba:	4613      	mov	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	440b      	add	r3, r1
 80075c4:	3324      	adds	r3, #36	; 0x24
 80075c6:	2200      	movs	r2, #0
 80075c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80075ca:	4b32      	ldr	r3, [pc, #200]	; (8007694 <USBD_CDC_DeInit+0xfc>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f002 fade 	bl	8009b92 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80075d6:	4b2f      	ldr	r3, [pc, #188]	; (8007694 <USBD_CDC_DeInit+0xfc>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	f003 020f 	and.w	r2, r3, #15
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	440b      	add	r3, r1
 80075ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075ee:	2200      	movs	r2, #0
 80075f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80075f2:	4b29      	ldr	r3, [pc, #164]	; (8007698 <USBD_CDC_DeInit+0x100>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f002 faca 	bl	8009b92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80075fe:	4b26      	ldr	r3, [pc, #152]	; (8007698 <USBD_CDC_DeInit+0x100>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	f003 020f 	and.w	r2, r3, #15
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	3324      	adds	r3, #36	; 0x24
 8007614:	2200      	movs	r2, #0
 8007616:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007618:	4b1f      	ldr	r3, [pc, #124]	; (8007698 <USBD_CDC_DeInit+0x100>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f003 020f 	and.w	r2, r3, #15
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	3326      	adds	r3, #38	; 0x26
 800762e:	2200      	movs	r2, #0
 8007630:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	32b0      	adds	r2, #176	; 0xb0
 800763c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d01f      	beq.n	8007684 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	33b0      	adds	r3, #176	; 0xb0
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	32b0      	adds	r2, #176	; 0xb0
 8007662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007666:	4618      	mov	r0, r3
 8007668:	f004 fd26 	bl	800c0b8 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	32b0      	adds	r2, #176	; 0xb0
 8007676:	2100      	movs	r1, #0
 8007678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	2000009b 	.word	0x2000009b
 8007694:	2000009c 	.word	0x2000009c
 8007698:	2000009d 	.word	0x2000009d

0800769c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	32b0      	adds	r2, #176	; 0xb0
 80076b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e0bf      	b.n	800784c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d050      	beq.n	800777a <USBD_CDC_Setup+0xde>
 80076d8:	2b20      	cmp	r3, #32
 80076da:	f040 80af 	bne.w	800783c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	88db      	ldrh	r3, [r3, #6]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d03a      	beq.n	800775c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	b25b      	sxtb	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	da1b      	bge.n	8007728 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	33b0      	adds	r3, #176	; 0xb0
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007706:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	88d2      	ldrh	r2, [r2, #6]
 800770c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	88db      	ldrh	r3, [r3, #6]
 8007712:	2b07      	cmp	r3, #7
 8007714:	bf28      	it	cs
 8007716:	2307      	movcs	r3, #7
 8007718:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	89fa      	ldrh	r2, [r7, #14]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 fdad 	bl	8009280 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007726:	e090      	b.n	800784a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	785a      	ldrb	r2, [r3, #1]
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	88db      	ldrh	r3, [r3, #6]
 8007736:	2b3f      	cmp	r3, #63	; 0x3f
 8007738:	d803      	bhi.n	8007742 <USBD_CDC_Setup+0xa6>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	88db      	ldrh	r3, [r3, #6]
 800773e:	b2da      	uxtb	r2, r3
 8007740:	e000      	b.n	8007744 <USBD_CDC_Setup+0xa8>
 8007742:	2240      	movs	r2, #64	; 0x40
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800774a:	6939      	ldr	r1, [r7, #16]
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007752:	461a      	mov	r2, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f001 fdbf 	bl	80092d8 <USBD_CtlPrepareRx>
      break;
 800775a:	e076      	b.n	800784a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	33b0      	adds	r3, #176	; 0xb0
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	7850      	ldrb	r0, [r2, #1]
 8007772:	2200      	movs	r2, #0
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	4798      	blx	r3
      break;
 8007778:	e067      	b.n	800784a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	785b      	ldrb	r3, [r3, #1]
 800777e:	2b0b      	cmp	r3, #11
 8007780:	d851      	bhi.n	8007826 <USBD_CDC_Setup+0x18a>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <USBD_CDC_Setup+0xec>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077b9 	.word	0x080077b9
 800778c:	08007835 	.word	0x08007835
 8007790:	08007827 	.word	0x08007827
 8007794:	08007827 	.word	0x08007827
 8007798:	08007827 	.word	0x08007827
 800779c:	08007827 	.word	0x08007827
 80077a0:	08007827 	.word	0x08007827
 80077a4:	08007827 	.word	0x08007827
 80077a8:	08007827 	.word	0x08007827
 80077ac:	08007827 	.word	0x08007827
 80077b0:	080077e3 	.word	0x080077e3
 80077b4:	0800780d 	.word	0x0800780d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d107      	bne.n	80077d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80077c4:	f107 030a 	add.w	r3, r7, #10
 80077c8:	2202      	movs	r2, #2
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 fd57 	bl	8009280 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077d2:	e032      	b.n	800783a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 fce1 	bl	800919e <USBD_CtlError>
            ret = USBD_FAIL;
 80077dc:	2303      	movs	r3, #3
 80077de:	75fb      	strb	r3, [r7, #23]
          break;
 80077e0:	e02b      	b.n	800783a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d107      	bne.n	80077fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80077ee:	f107 030d 	add.w	r3, r7, #13
 80077f2:	2201      	movs	r2, #1
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f001 fd42 	bl	8009280 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077fc:	e01d      	b.n	800783a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f001 fccc 	bl	800919e <USBD_CtlError>
            ret = USBD_FAIL;
 8007806:	2303      	movs	r3, #3
 8007808:	75fb      	strb	r3, [r7, #23]
          break;
 800780a:	e016      	b.n	800783a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b03      	cmp	r3, #3
 8007816:	d00f      	beq.n	8007838 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 fcbf 	bl	800919e <USBD_CtlError>
            ret = USBD_FAIL;
 8007820:	2303      	movs	r3, #3
 8007822:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007824:	e008      	b.n	8007838 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 fcb8 	bl	800919e <USBD_CtlError>
          ret = USBD_FAIL;
 800782e:	2303      	movs	r3, #3
 8007830:	75fb      	strb	r3, [r7, #23]
          break;
 8007832:	e002      	b.n	800783a <USBD_CDC_Setup+0x19e>
          break;
 8007834:	bf00      	nop
 8007836:	e008      	b.n	800784a <USBD_CDC_Setup+0x1ae>
          break;
 8007838:	bf00      	nop
      }
      break;
 800783a:	e006      	b.n	800784a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 fcad 	bl	800919e <USBD_CtlError>
      ret = USBD_FAIL;
 8007844:	2303      	movs	r3, #3
 8007846:	75fb      	strb	r3, [r7, #23]
      break;
 8007848:	bf00      	nop
  }

  return (uint8_t)ret;
 800784a:	7dfb      	ldrb	r3, [r7, #23]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3718      	adds	r7, #24
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007866:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	32b0      	adds	r2, #176	; 0xb0
 8007872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800787a:	2303      	movs	r3, #3
 800787c:	e065      	b.n	800794a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	32b0      	adds	r2, #176	; 0xb0
 8007888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800788e:	78fb      	ldrb	r3, [r7, #3]
 8007890:	f003 020f 	and.w	r2, r3, #15
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	440b      	add	r3, r1
 80078a0:	3318      	adds	r3, #24
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d02f      	beq.n	8007908 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80078a8:	78fb      	ldrb	r3, [r7, #3]
 80078aa:	f003 020f 	and.w	r2, r3, #15
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	440b      	add	r3, r1
 80078ba:	3318      	adds	r3, #24
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	f003 010f 	and.w	r1, r3, #15
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	460b      	mov	r3, r1
 80078c8:	00db      	lsls	r3, r3, #3
 80078ca:	440b      	add	r3, r1
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4403      	add	r3, r0
 80078d0:	3348      	adds	r3, #72	; 0x48
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80078d8:	fb01 f303 	mul.w	r3, r1, r3
 80078dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d112      	bne.n	8007908 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80078e2:	78fb      	ldrb	r3, [r7, #3]
 80078e4:	f003 020f 	and.w	r2, r3, #15
 80078e8:	6879      	ldr	r1, [r7, #4]
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	440b      	add	r3, r1
 80078f4:	3318      	adds	r3, #24
 80078f6:	2200      	movs	r2, #0
 80078f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80078fa:	78f9      	ldrb	r1, [r7, #3]
 80078fc:	2300      	movs	r3, #0
 80078fe:	2200      	movs	r2, #0
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f002 f9ee 	bl	8009ce2 <USBD_LL_Transmit>
 8007906:	e01f      	b.n	8007948 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2200      	movs	r2, #0
 800790c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	33b0      	adds	r3, #176	; 0xb0
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d010      	beq.n	8007948 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	33b0      	adds	r3, #176	; 0xb0
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007944:	78fa      	ldrb	r2, [r7, #3]
 8007946:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	460b      	mov	r3, r1
 800795c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	32b0      	adds	r2, #176	; 0xb0
 8007968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	32b0      	adds	r2, #176	; 0xb0
 8007978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007980:	2303      	movs	r3, #3
 8007982:	e01a      	b.n	80079ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f002 f9ec 	bl	8009d66 <USBD_LL_GetRxDataSize>
 800798e:	4602      	mov	r2, r0
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	33b0      	adds	r3, #176	; 0xb0
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80079b4:	4611      	mov	r1, r2
 80079b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	32b0      	adds	r2, #176	; 0xb0
 80079d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e025      	b.n	8007a30 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	33b0      	adds	r3, #176	; 0xb0
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01a      	beq.n	8007a2e <USBD_CDC_EP0_RxReady+0x6c>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079fe:	2bff      	cmp	r3, #255	; 0xff
 8007a00:	d015      	beq.n	8007a2e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	33b0      	adds	r3, #176	; 0xb0
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007a1a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a22:	b292      	uxth	r2, r2
 8007a24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	22ff      	movs	r2, #255	; 0xff
 8007a2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a40:	2182      	movs	r1, #130	; 0x82
 8007a42:	4818      	ldr	r0, [pc, #96]	; (8007aa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a44:	f000 fd49 	bl	80084da <USBD_GetEpDesc>
 8007a48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	4815      	ldr	r0, [pc, #84]	; (8007aa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a4e:	f000 fd44 	bl	80084da <USBD_GetEpDesc>
 8007a52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a54:	2181      	movs	r1, #129	; 0x81
 8007a56:	4813      	ldr	r0, [pc, #76]	; (8007aa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a58:	f000 fd3f 	bl	80084da <USBD_GetEpDesc>
 8007a5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2210      	movs	r2, #16
 8007a68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d006      	beq.n	8007a7e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a78:	711a      	strb	r2, [r3, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d006      	beq.n	8007a92 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a8c:	711a      	strb	r2, [r3, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2243      	movs	r2, #67	; 0x43
 8007a96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a98:	4b02      	ldr	r3, [pc, #8]	; (8007aa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000058 	.word	0x20000058

08007aa8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ab0:	2182      	movs	r1, #130	; 0x82
 8007ab2:	4818      	ldr	r0, [pc, #96]	; (8007b14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ab4:	f000 fd11 	bl	80084da <USBD_GetEpDesc>
 8007ab8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007aba:	2101      	movs	r1, #1
 8007abc:	4815      	ldr	r0, [pc, #84]	; (8007b14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007abe:	f000 fd0c 	bl	80084da <USBD_GetEpDesc>
 8007ac2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ac4:	2181      	movs	r1, #129	; 0x81
 8007ac6:	4813      	ldr	r0, [pc, #76]	; (8007b14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ac8:	f000 fd07 	bl	80084da <USBD_GetEpDesc>
 8007acc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2210      	movs	r2, #16
 8007ad8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d006      	beq.n	8007aee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	711a      	strb	r2, [r3, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f042 0202 	orr.w	r2, r2, #2
 8007aec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d006      	beq.n	8007b02 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	711a      	strb	r2, [r3, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f042 0202 	orr.w	r2, r2, #2
 8007b00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2243      	movs	r2, #67	; 0x43
 8007b06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b08:	4b02      	ldr	r3, [pc, #8]	; (8007b14 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000058 	.word	0x20000058

08007b18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b20:	2182      	movs	r1, #130	; 0x82
 8007b22:	4818      	ldr	r0, [pc, #96]	; (8007b84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b24:	f000 fcd9 	bl	80084da <USBD_GetEpDesc>
 8007b28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	4815      	ldr	r0, [pc, #84]	; (8007b84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b2e:	f000 fcd4 	bl	80084da <USBD_GetEpDesc>
 8007b32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b34:	2181      	movs	r1, #129	; 0x81
 8007b36:	4813      	ldr	r0, [pc, #76]	; (8007b84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b38:	f000 fccf 	bl	80084da <USBD_GetEpDesc>
 8007b3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2210      	movs	r2, #16
 8007b48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d006      	beq.n	8007b5e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b58:	711a      	strb	r2, [r3, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d006      	beq.n	8007b72 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b6c:	711a      	strb	r2, [r3, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2243      	movs	r2, #67	; 0x43
 8007b76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b78:	4b02      	ldr	r3, [pc, #8]	; (8007b84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3718      	adds	r7, #24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	20000058 	.word	0x20000058

08007b88 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	220a      	movs	r2, #10
 8007b94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007b96:	4b03      	ldr	r3, [pc, #12]	; (8007ba4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	20000014 	.word	0x20000014

08007ba8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e009      	b.n	8007bd0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	33b0      	adds	r3, #176	; 0xb0
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	32b0      	adds	r2, #176	; 0xb0
 8007bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e008      	b.n	8007c14 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	32b0      	adds	r2, #176	; 0xb0
 8007c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e004      	b.n	8007c4e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
	...

08007c5c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	32b0      	adds	r2, #176	; 0xb0
 8007c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c72:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007c74:	2301      	movs	r3, #1
 8007c76:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e025      	b.n	8007cce <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11f      	bne.n	8007ccc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007c94:	4b10      	ldr	r3, [pc, #64]	; (8007cd8 <USBD_CDC_TransmitPacket+0x7c>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	f003 020f 	and.w	r2, r3, #15
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4403      	add	r3, r0
 8007cae:	3318      	adds	r3, #24
 8007cb0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007cb2:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <USBD_CDC_TransmitPacket+0x7c>)
 8007cb4:	7819      	ldrb	r1, [r3, #0]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f002 f80d 	bl	8009ce2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	2000009b 	.word	0x2000009b

08007cdc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	32b0      	adds	r2, #176	; 0xb0
 8007cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	32b0      	adds	r2, #176	; 0xb0
 8007cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e018      	b.n	8007d3c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	7c1b      	ldrb	r3, [r3, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10a      	bne.n	8007d28 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d12:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <USBD_CDC_ReceivePacket+0x68>)
 8007d14:	7819      	ldrb	r1, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 ffff 	bl	8009d24 <USBD_LL_PrepareReceive>
 8007d26:	e008      	b.n	8007d3a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d28:	4b06      	ldr	r3, [pc, #24]	; (8007d44 <USBD_CDC_ReceivePacket+0x68>)
 8007d2a:	7819      	ldrb	r1, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d32:	2340      	movs	r3, #64	; 0x40
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 fff5 	bl	8009d24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	2000009c 	.word	0x2000009c

08007d48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	4613      	mov	r3, r2
 8007d54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e01f      	b.n	8007da0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	79fa      	ldrb	r2, [r7, #7]
 8007d92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f001 fe6f 	bl	8009a78 <USBD_LL_Init>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e025      	b.n	8007e0c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	32ae      	adds	r2, #174	; 0xae
 8007dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00f      	beq.n	8007dfc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	32ae      	adds	r2, #174	; 0xae
 8007de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	f107 020e 	add.w	r2, r7, #14
 8007df0:	4610      	mov	r0, r2
 8007df2:	4798      	blx	r3
 8007df4:	4602      	mov	r2, r0
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007e02:	1c5a      	adds	r2, r3, #1
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 fe77 	bl	8009b10 <USBD_LL_Start>
 8007e22:	4603      	mov	r3, r0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e34:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d009      	beq.n	8007e70 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	78fa      	ldrb	r2, [r7, #3]
 8007e66:	4611      	mov	r1, r2
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	4798      	blx	r3
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	460b      	mov	r3, r1
 8007e84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	78fa      	ldrb	r2, [r7, #3]
 8007e94:	4611      	mov	r1, r2
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b084      	sub	sp, #16
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 f932 	bl	800912a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ee2:	f003 031f 	and.w	r3, r3, #31
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d01a      	beq.n	8007f20 <USBD_LL_SetupStage+0x72>
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d822      	bhi.n	8007f34 <USBD_LL_SetupStage+0x86>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d002      	beq.n	8007ef8 <USBD_LL_SetupStage+0x4a>
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d00a      	beq.n	8007f0c <USBD_LL_SetupStage+0x5e>
 8007ef6:	e01d      	b.n	8007f34 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fb5f 	bl	80085c4 <USBD_StdDevReq>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]
      break;
 8007f0a:	e020      	b.n	8007f4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fbc7 	bl	80086a8 <USBD_StdItfReq>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f1e:	e016      	b.n	8007f4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fc29 	bl	8008780 <USBD_StdEPReq>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73fb      	strb	r3, [r7, #15]
      break;
 8007f32:	e00c      	b.n	8007f4e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 fe44 	bl	8009bd0 <USBD_LL_StallEP>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f4c:	bf00      	nop
  }

  return ret;
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	460b      	mov	r3, r1
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007f6a:	7afb      	ldrb	r3, [r7, #11]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d16e      	bne.n	800804e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	f040 8098 	bne.w	80080b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d913      	bls.n	8007fb8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	1ad2      	subs	r2, r2, r3
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	bf28      	it	cs
 8007faa:	4613      	movcs	r3, r2
 8007fac:	461a      	mov	r2, r3
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f001 f9ae 	bl	8009312 <USBD_CtlContinueRx>
 8007fb6:	e07d      	b.n	80080b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fbe:	f003 031f 	and.w	r3, r3, #31
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d014      	beq.n	8007ff0 <USBD_LL_DataOutStage+0x98>
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d81d      	bhi.n	8008006 <USBD_LL_DataOutStage+0xae>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <USBD_LL_DataOutStage+0x7c>
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d003      	beq.n	8007fda <USBD_LL_DataOutStage+0x82>
 8007fd2:	e018      	b.n	8008006 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	75bb      	strb	r3, [r7, #22]
            break;
 8007fd8:	e018      	b.n	800800c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 fa5e 	bl	80084a6 <USBD_CoreFindIF>
 8007fea:	4603      	mov	r3, r0
 8007fec:	75bb      	strb	r3, [r7, #22]
            break;
 8007fee:	e00d      	b.n	800800c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 fa60 	bl	80084c0 <USBD_CoreFindEP>
 8008000:	4603      	mov	r3, r0
 8008002:	75bb      	strb	r3, [r7, #22]
            break;
 8008004:	e002      	b.n	800800c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	75bb      	strb	r3, [r7, #22]
            break;
 800800a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800800c:	7dbb      	ldrb	r3, [r7, #22]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d119      	bne.n	8008046 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b03      	cmp	r3, #3
 800801c:	d113      	bne.n	8008046 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800801e:	7dba      	ldrb	r2, [r7, #22]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	32ae      	adds	r2, #174	; 0xae
 8008024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800802e:	7dba      	ldrb	r2, [r7, #22]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008036:	7dba      	ldrb	r2, [r7, #22]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	32ae      	adds	r2, #174	; 0xae
 800803c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f001 f974 	bl	8009334 <USBD_CtlSendStatus>
 800804c:	e032      	b.n	80080b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800804e:	7afb      	ldrb	r3, [r7, #11]
 8008050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008054:	b2db      	uxtb	r3, r3
 8008056:	4619      	mov	r1, r3
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 fa31 	bl	80084c0 <USBD_CoreFindEP>
 800805e:	4603      	mov	r3, r0
 8008060:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008062:	7dbb      	ldrb	r3, [r7, #22]
 8008064:	2bff      	cmp	r3, #255	; 0xff
 8008066:	d025      	beq.n	80080b4 <USBD_LL_DataOutStage+0x15c>
 8008068:	7dbb      	ldrb	r3, [r7, #22]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d122      	bne.n	80080b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b03      	cmp	r3, #3
 8008078:	d117      	bne.n	80080aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800807a:	7dba      	ldrb	r2, [r7, #22]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	32ae      	adds	r2, #174	; 0xae
 8008080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00f      	beq.n	80080aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800808a:	7dba      	ldrb	r2, [r7, #22]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008092:	7dba      	ldrb	r2, [r7, #22]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	32ae      	adds	r2, #174	; 0xae
 8008098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	7afa      	ldrb	r2, [r7, #11]
 80080a0:	4611      	mov	r1, r2
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	4798      	blx	r3
 80080a6:	4603      	mov	r3, r0
 80080a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	e000      	b.n	80080b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b086      	sub	sp, #24
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	460b      	mov	r3, r1
 80080c8:	607a      	str	r2, [r7, #4]
 80080ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80080cc:	7afb      	ldrb	r3, [r7, #11]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d16f      	bne.n	80081b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3314      	adds	r3, #20
 80080d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d15a      	bne.n	8008198 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	689a      	ldr	r2, [r3, #8]
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d914      	bls.n	8008118 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	1ad2      	subs	r2, r2, r3
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	461a      	mov	r2, r3
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f001 f8d6 	bl	80092b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800810a:	2300      	movs	r3, #0
 800810c:	2200      	movs	r2, #0
 800810e:	2100      	movs	r1, #0
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f001 fe07 	bl	8009d24 <USBD_LL_PrepareReceive>
 8008116:	e03f      	b.n	8008198 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	68da      	ldr	r2, [r3, #12]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	429a      	cmp	r2, r3
 8008122:	d11c      	bne.n	800815e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800812c:	429a      	cmp	r2, r3
 800812e:	d316      	bcc.n	800815e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800813a:	429a      	cmp	r2, r3
 800813c:	d20f      	bcs.n	800815e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800813e:	2200      	movs	r2, #0
 8008140:	2100      	movs	r1, #0
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f001 f8b7 	bl	80092b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008150:	2300      	movs	r3, #0
 8008152:	2200      	movs	r2, #0
 8008154:	2100      	movs	r1, #0
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f001 fde4 	bl	8009d24 <USBD_LL_PrepareReceive>
 800815c:	e01c      	b.n	8008198 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b03      	cmp	r3, #3
 8008168:	d10f      	bne.n	800818a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d009      	beq.n	800818a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800818a:	2180      	movs	r1, #128	; 0x80
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f001 fd1f 	bl	8009bd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f001 f8e1 	bl	800935a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d03a      	beq.n	8008218 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f7ff fe42 	bl	8007e2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80081b0:	e032      	b.n	8008218 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80081b2:	7afb      	ldrb	r3, [r7, #11]
 80081b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	4619      	mov	r1, r3
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 f97f 	bl	80084c0 <USBD_CoreFindEP>
 80081c2:	4603      	mov	r3, r0
 80081c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	2bff      	cmp	r3, #255	; 0xff
 80081ca:	d025      	beq.n	8008218 <USBD_LL_DataInStage+0x15a>
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d122      	bne.n	8008218 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d11c      	bne.n	8008218 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80081de:	7dfa      	ldrb	r2, [r7, #23]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	32ae      	adds	r2, #174	; 0xae
 80081e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d014      	beq.n	8008218 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80081ee:	7dfa      	ldrb	r2, [r7, #23]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80081f6:	7dfa      	ldrb	r2, [r7, #23]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	32ae      	adds	r2, #174	; 0xae
 80081fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	7afa      	ldrb	r2, [r7, #11]
 8008204:	4611      	mov	r1, r2
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	4798      	blx	r3
 800820a:	4603      	mov	r3, r0
 800820c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800820e:	7dbb      	ldrb	r3, [r7, #22]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008214:	7dbb      	ldrb	r3, [r7, #22]
 8008216:	e000      	b.n	800821a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d014      	beq.n	8008288 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00e      	beq.n	8008288 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6852      	ldr	r2, [r2, #4]
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	4611      	mov	r1, r2
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	4798      	blx	r3
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008284:	2303      	movs	r3, #3
 8008286:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008288:	2340      	movs	r3, #64	; 0x40
 800828a:	2200      	movs	r2, #0
 800828c:	2100      	movs	r1, #0
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f001 fc59 	bl	8009b46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2240      	movs	r2, #64	; 0x40
 80082a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082a4:	2340      	movs	r3, #64	; 0x40
 80082a6:	2200      	movs	r2, #0
 80082a8:	2180      	movs	r1, #128	; 0x80
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 fc4b 	bl	8009b46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2240      	movs	r2, #64	; 0x40
 80082ba:	621a      	str	r2, [r3, #32]

  return ret;
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082c6:	b480      	push	{r7}
 80082c8:	b083      	sub	sp, #12
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	78fa      	ldrb	r2, [r7, #3]
 80082d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2204      	movs	r2, #4
 8008300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b04      	cmp	r3, #4
 8008324:	d106      	bne.n	8008334 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800832c:	b2da      	uxtb	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b082      	sub	sp, #8
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b03      	cmp	r3, #3
 8008354:	d110      	bne.n	8008378 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00b      	beq.n	8008378 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d005      	beq.n	8008378 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b082      	sub	sp, #8
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	460b      	mov	r3, r1
 800838c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	32ae      	adds	r2, #174	; 0xae
 8008398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e01c      	b.n	80083de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d115      	bne.n	80083dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	32ae      	adds	r2, #174	; 0xae
 80083ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	32ae      	adds	r2, #174	; 0xae
 80083ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	78fa      	ldrb	r2, [r7, #3]
 80083d6:	4611      	mov	r1, r2
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	460b      	mov	r3, r1
 80083f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	32ae      	adds	r2, #174	; 0xae
 80083fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008404:	2303      	movs	r3, #3
 8008406:	e01c      	b.n	8008442 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b03      	cmp	r3, #3
 8008412:	d115      	bne.n	8008440 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	32ae      	adds	r2, #174	; 0xae
 800841e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00b      	beq.n	8008440 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	32ae      	adds	r2, #174	; 0xae
 8008432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	78fa      	ldrb	r2, [r7, #3]
 800843a:	4611      	mov	r1, r2
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00e      	beq.n	800849c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	6852      	ldr	r2, [r2, #4]
 800848a:	b2d2      	uxtb	r2, r2
 800848c:	4611      	mov	r1, r2
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	4798      	blx	r3
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008498:	2303      	movs	r3, #3
 800849a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800849c:	7bfb      	ldrb	r3, [r7, #15]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b086      	sub	sp, #24
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80084ee:	2300      	movs	r3, #0
 80084f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	885b      	ldrh	r3, [r3, #2]
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	429a      	cmp	r2, r3
 8008500:	d920      	bls.n	8008544 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	b29b      	uxth	r3, r3
 8008508:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800850a:	e013      	b.n	8008534 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800850c:	f107 030a 	add.w	r3, r7, #10
 8008510:	4619      	mov	r1, r3
 8008512:	6978      	ldr	r0, [r7, #20]
 8008514:	f000 f81b 	bl	800854e <USBD_GetNextDesc>
 8008518:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	785b      	ldrb	r3, [r3, #1]
 800851e:	2b05      	cmp	r3, #5
 8008520:	d108      	bne.n	8008534 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	789b      	ldrb	r3, [r3, #2]
 800852a:	78fa      	ldrb	r2, [r7, #3]
 800852c:	429a      	cmp	r2, r3
 800852e:	d008      	beq.n	8008542 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008530:	2300      	movs	r3, #0
 8008532:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	885b      	ldrh	r3, [r3, #2]
 8008538:	b29a      	uxth	r2, r3
 800853a:	897b      	ldrh	r3, [r7, #10]
 800853c:	429a      	cmp	r2, r3
 800853e:	d8e5      	bhi.n	800850c <USBD_GetEpDesc+0x32>
 8008540:	e000      	b.n	8008544 <USBD_GetEpDesc+0x6a>
          break;
 8008542:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008544:	693b      	ldr	r3, [r7, #16]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800854e:	b480      	push	{r7}
 8008550:	b085      	sub	sp, #20
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	881a      	ldrh	r2, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	b29b      	uxth	r3, r3
 8008566:	4413      	add	r3, r2
 8008568:	b29a      	uxth	r2, r3
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4413      	add	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800857a:	68fb      	ldr	r3, [r7, #12]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008588:	b480      	push	{r7}
 800858a:	b087      	sub	sp, #28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	3301      	adds	r3, #1
 800859e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80085a6:	8a3b      	ldrh	r3, [r7, #16]
 80085a8:	021b      	lsls	r3, r3, #8
 80085aa:	b21a      	sxth	r2, r3
 80085ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	b21b      	sxth	r3, r3
 80085b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80085b6:	89fb      	ldrh	r3, [r7, #14]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	371c      	adds	r7, #28
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085da:	2b40      	cmp	r3, #64	; 0x40
 80085dc:	d005      	beq.n	80085ea <USBD_StdDevReq+0x26>
 80085de:	2b40      	cmp	r3, #64	; 0x40
 80085e0:	d857      	bhi.n	8008692 <USBD_StdDevReq+0xce>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00f      	beq.n	8008606 <USBD_StdDevReq+0x42>
 80085e6:	2b20      	cmp	r3, #32
 80085e8:	d153      	bne.n	8008692 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	32ae      	adds	r2, #174	; 0xae
 80085f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	4798      	blx	r3
 8008600:	4603      	mov	r3, r0
 8008602:	73fb      	strb	r3, [r7, #15]
      break;
 8008604:	e04a      	b.n	800869c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	785b      	ldrb	r3, [r3, #1]
 800860a:	2b09      	cmp	r3, #9
 800860c:	d83b      	bhi.n	8008686 <USBD_StdDevReq+0xc2>
 800860e:	a201      	add	r2, pc, #4	; (adr r2, 8008614 <USBD_StdDevReq+0x50>)
 8008610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008614:	08008669 	.word	0x08008669
 8008618:	0800867d 	.word	0x0800867d
 800861c:	08008687 	.word	0x08008687
 8008620:	08008673 	.word	0x08008673
 8008624:	08008687 	.word	0x08008687
 8008628:	08008647 	.word	0x08008647
 800862c:	0800863d 	.word	0x0800863d
 8008630:	08008687 	.word	0x08008687
 8008634:	0800865f 	.word	0x0800865f
 8008638:	08008651 	.word	0x08008651
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa3c 	bl	8008abc <USBD_GetDescriptor>
          break;
 8008644:	e024      	b.n	8008690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fbcb 	bl	8008de4 <USBD_SetAddress>
          break;
 800864e:	e01f      	b.n	8008690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fc0a 	bl	8008e6c <USBD_SetConfig>
 8008658:	4603      	mov	r3, r0
 800865a:	73fb      	strb	r3, [r7, #15]
          break;
 800865c:	e018      	b.n	8008690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fcad 	bl	8008fc0 <USBD_GetConfig>
          break;
 8008666:	e013      	b.n	8008690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fcde 	bl	800902c <USBD_GetStatus>
          break;
 8008670:	e00e      	b.n	8008690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fd0d 	bl	8009094 <USBD_SetFeature>
          break;
 800867a:	e009      	b.n	8008690 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fd31 	bl	80090e6 <USBD_ClrFeature>
          break;
 8008684:	e004      	b.n	8008690 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fd88 	bl	800919e <USBD_CtlError>
          break;
 800868e:	bf00      	nop
      }
      break;
 8008690:	e004      	b.n	800869c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fd82 	bl	800919e <USBD_CtlError>
      break;
 800869a:	bf00      	nop
  }

  return ret;
 800869c:	7bfb      	ldrb	r3, [r7, #15]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop

080086a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086be:	2b40      	cmp	r3, #64	; 0x40
 80086c0:	d005      	beq.n	80086ce <USBD_StdItfReq+0x26>
 80086c2:	2b40      	cmp	r3, #64	; 0x40
 80086c4:	d852      	bhi.n	800876c <USBD_StdItfReq+0xc4>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <USBD_StdItfReq+0x26>
 80086ca:	2b20      	cmp	r3, #32
 80086cc:	d14e      	bne.n	800876c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	3b01      	subs	r3, #1
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d840      	bhi.n	800875e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	889b      	ldrh	r3, [r3, #4]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d836      	bhi.n	8008754 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	889b      	ldrh	r3, [r3, #4]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7ff fed9 	bl	80084a6 <USBD_CoreFindIF>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	2bff      	cmp	r3, #255	; 0xff
 80086fc:	d01d      	beq.n	800873a <USBD_StdItfReq+0x92>
 80086fe:	7bbb      	ldrb	r3, [r7, #14]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d11a      	bne.n	800873a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008704:	7bba      	ldrb	r2, [r7, #14]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	32ae      	adds	r2, #174	; 0xae
 800870a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00f      	beq.n	8008734 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008714:	7bba      	ldrb	r2, [r7, #14]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800871c:	7bba      	ldrb	r2, [r7, #14]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	32ae      	adds	r2, #174	; 0xae
 8008722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	4798      	blx	r3
 800872e:	4603      	mov	r3, r0
 8008730:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008732:	e004      	b.n	800873e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008734:	2303      	movs	r3, #3
 8008736:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008738:	e001      	b.n	800873e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800873a:	2303      	movs	r3, #3
 800873c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	88db      	ldrh	r3, [r3, #6]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d110      	bne.n	8008768 <USBD_StdItfReq+0xc0>
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10d      	bne.n	8008768 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fdf1 	bl	8009334 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008752:	e009      	b.n	8008768 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fd21 	bl	800919e <USBD_CtlError>
          break;
 800875c:	e004      	b.n	8008768 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fd1c 	bl	800919e <USBD_CtlError>
          break;
 8008766:	e000      	b.n	800876a <USBD_StdItfReq+0xc2>
          break;
 8008768:	bf00      	nop
      }
      break;
 800876a:	e004      	b.n	8008776 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fd15 	bl	800919e <USBD_CtlError>
      break;
 8008774:	bf00      	nop
  }

  return ret;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	889b      	ldrh	r3, [r3, #4]
 8008792:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800879c:	2b40      	cmp	r3, #64	; 0x40
 800879e:	d007      	beq.n	80087b0 <USBD_StdEPReq+0x30>
 80087a0:	2b40      	cmp	r3, #64	; 0x40
 80087a2:	f200 817f 	bhi.w	8008aa4 <USBD_StdEPReq+0x324>
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d02a      	beq.n	8008800 <USBD_StdEPReq+0x80>
 80087aa:	2b20      	cmp	r3, #32
 80087ac:	f040 817a 	bne.w	8008aa4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80087b0:	7bbb      	ldrb	r3, [r7, #14]
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff fe83 	bl	80084c0 <USBD_CoreFindEP>
 80087ba:	4603      	mov	r3, r0
 80087bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087be:	7b7b      	ldrb	r3, [r7, #13]
 80087c0:	2bff      	cmp	r3, #255	; 0xff
 80087c2:	f000 8174 	beq.w	8008aae <USBD_StdEPReq+0x32e>
 80087c6:	7b7b      	ldrb	r3, [r7, #13]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f040 8170 	bne.w	8008aae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80087ce:	7b7a      	ldrb	r2, [r7, #13]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80087d6:	7b7a      	ldrb	r2, [r7, #13]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	32ae      	adds	r2, #174	; 0xae
 80087dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 8163 	beq.w	8008aae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80087e8:	7b7a      	ldrb	r2, [r7, #13]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	32ae      	adds	r2, #174	; 0xae
 80087ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	4798      	blx	r3
 80087fa:	4603      	mov	r3, r0
 80087fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087fe:	e156      	b.n	8008aae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	785b      	ldrb	r3, [r3, #1]
 8008804:	2b03      	cmp	r3, #3
 8008806:	d008      	beq.n	800881a <USBD_StdEPReq+0x9a>
 8008808:	2b03      	cmp	r3, #3
 800880a:	f300 8145 	bgt.w	8008a98 <USBD_StdEPReq+0x318>
 800880e:	2b00      	cmp	r3, #0
 8008810:	f000 809b 	beq.w	800894a <USBD_StdEPReq+0x1ca>
 8008814:	2b01      	cmp	r3, #1
 8008816:	d03c      	beq.n	8008892 <USBD_StdEPReq+0x112>
 8008818:	e13e      	b.n	8008a98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b02      	cmp	r3, #2
 8008824:	d002      	beq.n	800882c <USBD_StdEPReq+0xac>
 8008826:	2b03      	cmp	r3, #3
 8008828:	d016      	beq.n	8008858 <USBD_StdEPReq+0xd8>
 800882a:	e02c      	b.n	8008886 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00d      	beq.n	800884e <USBD_StdEPReq+0xce>
 8008832:	7bbb      	ldrb	r3, [r7, #14]
 8008834:	2b80      	cmp	r3, #128	; 0x80
 8008836:	d00a      	beq.n	800884e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f001 f9c7 	bl	8009bd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008842:	2180      	movs	r1, #128	; 0x80
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f001 f9c3 	bl	8009bd0 <USBD_LL_StallEP>
 800884a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800884c:	e020      	b.n	8008890 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fca4 	bl	800919e <USBD_CtlError>
              break;
 8008856:	e01b      	b.n	8008890 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	885b      	ldrh	r3, [r3, #2]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10e      	bne.n	800887e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008860:	7bbb      	ldrb	r3, [r7, #14]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00b      	beq.n	800887e <USBD_StdEPReq+0xfe>
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	2b80      	cmp	r3, #128	; 0x80
 800886a:	d008      	beq.n	800887e <USBD_StdEPReq+0xfe>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	88db      	ldrh	r3, [r3, #6]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d104      	bne.n	800887e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f001 f9a9 	bl	8009bd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fd58 	bl	8009334 <USBD_CtlSendStatus>

              break;
 8008884:	e004      	b.n	8008890 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fc88 	bl	800919e <USBD_CtlError>
              break;
 800888e:	bf00      	nop
          }
          break;
 8008890:	e107      	b.n	8008aa2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b02      	cmp	r3, #2
 800889c:	d002      	beq.n	80088a4 <USBD_StdEPReq+0x124>
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d016      	beq.n	80088d0 <USBD_StdEPReq+0x150>
 80088a2:	e04b      	b.n	800893c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00d      	beq.n	80088c6 <USBD_StdEPReq+0x146>
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b80      	cmp	r3, #128	; 0x80
 80088ae:	d00a      	beq.n	80088c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 f98b 	bl	8009bd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ba:	2180      	movs	r1, #128	; 0x80
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f001 f987 	bl	8009bd0 <USBD_LL_StallEP>
 80088c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088c4:	e040      	b.n	8008948 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fc68 	bl	800919e <USBD_CtlError>
              break;
 80088ce:	e03b      	b.n	8008948 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	885b      	ldrh	r3, [r3, #2]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d136      	bne.n	8008946 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d004      	beq.n	80088ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 f991 	bl	8009c0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fd21 	bl	8009334 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff fde2 	bl	80084c0 <USBD_CoreFindEP>
 80088fc:	4603      	mov	r3, r0
 80088fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008900:	7b7b      	ldrb	r3, [r7, #13]
 8008902:	2bff      	cmp	r3, #255	; 0xff
 8008904:	d01f      	beq.n	8008946 <USBD_StdEPReq+0x1c6>
 8008906:	7b7b      	ldrb	r3, [r7, #13]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d11c      	bne.n	8008946 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800890c:	7b7a      	ldrb	r2, [r7, #13]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008914:	7b7a      	ldrb	r2, [r7, #13]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	32ae      	adds	r2, #174	; 0xae
 800891a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d010      	beq.n	8008946 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008924:	7b7a      	ldrb	r2, [r7, #13]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	32ae      	adds	r2, #174	; 0xae
 800892a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
 8008936:	4603      	mov	r3, r0
 8008938:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800893a:	e004      	b.n	8008946 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fc2d 	bl	800919e <USBD_CtlError>
              break;
 8008944:	e000      	b.n	8008948 <USBD_StdEPReq+0x1c8>
              break;
 8008946:	bf00      	nop
          }
          break;
 8008948:	e0ab      	b.n	8008aa2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d002      	beq.n	800895c <USBD_StdEPReq+0x1dc>
 8008956:	2b03      	cmp	r3, #3
 8008958:	d032      	beq.n	80089c0 <USBD_StdEPReq+0x240>
 800895a:	e097      	b.n	8008a8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <USBD_StdEPReq+0x1f2>
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	2b80      	cmp	r3, #128	; 0x80
 8008966:	d004      	beq.n	8008972 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fc17 	bl	800919e <USBD_CtlError>
                break;
 8008970:	e091      	b.n	8008a96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008976:	2b00      	cmp	r3, #0
 8008978:	da0b      	bge.n	8008992 <USBD_StdEPReq+0x212>
 800897a:	7bbb      	ldrb	r3, [r7, #14]
 800897c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008980:	4613      	mov	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	3310      	adds	r3, #16
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	4413      	add	r3, r2
 800898e:	3304      	adds	r3, #4
 8008990:	e00b      	b.n	80089aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008998:	4613      	mov	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	4413      	add	r3, r2
 80089a8:	3304      	adds	r3, #4
 80089aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2202      	movs	r2, #2
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fc61 	bl	8009280 <USBD_CtlSendData>
              break;
 80089be:	e06a      	b.n	8008a96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80089c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	da11      	bge.n	80089ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	f003 020f 	and.w	r2, r3, #15
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	440b      	add	r3, r1
 80089da:	3324      	adds	r3, #36	; 0x24
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d117      	bne.n	8008a12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fbda 	bl	800919e <USBD_CtlError>
                  break;
 80089ea:	e054      	b.n	8008a96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	f003 020f 	and.w	r2, r3, #15
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	4613      	mov	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	440b      	add	r3, r1
 80089fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a02:	881b      	ldrh	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d104      	bne.n	8008a12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fbc7 	bl	800919e <USBD_CtlError>
                  break;
 8008a10:	e041      	b.n	8008a96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	da0b      	bge.n	8008a32 <USBD_StdEPReq+0x2b2>
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a20:	4613      	mov	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	3310      	adds	r3, #16
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	3304      	adds	r3, #4
 8008a30:	e00b      	b.n	8008a4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a32:	7bbb      	ldrb	r3, [r7, #14]
 8008a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	4413      	add	r3, r2
 8008a48:	3304      	adds	r3, #4
 8008a4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <USBD_StdEPReq+0x2d8>
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	2b80      	cmp	r3, #128	; 0x80
 8008a56:	d103      	bne.n	8008a60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	e00e      	b.n	8008a7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f001 f8f1 	bl	8009c4c <USBD_LL_IsStallEP>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2201      	movs	r2, #1
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	e002      	b.n	8008a7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2202      	movs	r2, #2
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fbfb 	bl	8009280 <USBD_CtlSendData>
              break;
 8008a8a:	e004      	b.n	8008a96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fb85 	bl	800919e <USBD_CtlError>
              break;
 8008a94:	bf00      	nop
          }
          break;
 8008a96:	e004      	b.n	8008aa2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fb7f 	bl	800919e <USBD_CtlError>
          break;
 8008aa0:	bf00      	nop
      }
      break;
 8008aa2:	e005      	b.n	8008ab0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fb79 	bl	800919e <USBD_CtlError>
      break;
 8008aac:	e000      	b.n	8008ab0 <USBD_StdEPReq+0x330>
      break;
 8008aae:	bf00      	nop
  }

  return ret;
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	885b      	ldrh	r3, [r3, #2]
 8008ad6:	0a1b      	lsrs	r3, r3, #8
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	3b01      	subs	r3, #1
 8008adc:	2b0e      	cmp	r3, #14
 8008ade:	f200 8152 	bhi.w	8008d86 <USBD_GetDescriptor+0x2ca>
 8008ae2:	a201      	add	r2, pc, #4	; (adr r2, 8008ae8 <USBD_GetDescriptor+0x2c>)
 8008ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae8:	08008b59 	.word	0x08008b59
 8008aec:	08008b71 	.word	0x08008b71
 8008af0:	08008bb1 	.word	0x08008bb1
 8008af4:	08008d87 	.word	0x08008d87
 8008af8:	08008d87 	.word	0x08008d87
 8008afc:	08008d27 	.word	0x08008d27
 8008b00:	08008d53 	.word	0x08008d53
 8008b04:	08008d87 	.word	0x08008d87
 8008b08:	08008d87 	.word	0x08008d87
 8008b0c:	08008d87 	.word	0x08008d87
 8008b10:	08008d87 	.word	0x08008d87
 8008b14:	08008d87 	.word	0x08008d87
 8008b18:	08008d87 	.word	0x08008d87
 8008b1c:	08008d87 	.word	0x08008d87
 8008b20:	08008b25 	.word	0x08008b25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2a:	69db      	ldr	r3, [r3, #28]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	7c12      	ldrb	r2, [r2, #16]
 8008b3c:	f107 0108 	add.w	r1, r7, #8
 8008b40:	4610      	mov	r0, r2
 8008b42:	4798      	blx	r3
 8008b44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b46:	e126      	b.n	8008d96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fb27 	bl	800919e <USBD_CtlError>
        err++;
 8008b50:	7afb      	ldrb	r3, [r7, #11]
 8008b52:	3301      	adds	r3, #1
 8008b54:	72fb      	strb	r3, [r7, #11]
      break;
 8008b56:	e11e      	b.n	8008d96 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	7c12      	ldrb	r2, [r2, #16]
 8008b64:	f107 0108 	add.w	r1, r7, #8
 8008b68:	4610      	mov	r0, r2
 8008b6a:	4798      	blx	r3
 8008b6c:	60f8      	str	r0, [r7, #12]
      break;
 8008b6e:	e112      	b.n	8008d96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	7c1b      	ldrb	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10d      	bne.n	8008b94 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b80:	f107 0208 	add.w	r2, r7, #8
 8008b84:	4610      	mov	r0, r2
 8008b86:	4798      	blx	r3
 8008b88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	2202      	movs	r2, #2
 8008b90:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b92:	e100      	b.n	8008d96 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	f107 0208 	add.w	r2, r7, #8
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4798      	blx	r3
 8008ba4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	2202      	movs	r2, #2
 8008bac:	701a      	strb	r2, [r3, #0]
      break;
 8008bae:	e0f2      	b.n	8008d96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	885b      	ldrh	r3, [r3, #2]
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b05      	cmp	r3, #5
 8008bb8:	f200 80ac 	bhi.w	8008d14 <USBD_GetDescriptor+0x258>
 8008bbc:	a201      	add	r2, pc, #4	; (adr r2, 8008bc4 <USBD_GetDescriptor+0x108>)
 8008bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc2:	bf00      	nop
 8008bc4:	08008bdd 	.word	0x08008bdd
 8008bc8:	08008c11 	.word	0x08008c11
 8008bcc:	08008c45 	.word	0x08008c45
 8008bd0:	08008c79 	.word	0x08008c79
 8008bd4:	08008cad 	.word	0x08008cad
 8008bd8:	08008ce1 	.word	0x08008ce1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	7c12      	ldrb	r2, [r2, #16]
 8008bf4:	f107 0108 	add.w	r1, r7, #8
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4798      	blx	r3
 8008bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bfe:	e091      	b.n	8008d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 facb 	bl	800919e <USBD_CtlError>
            err++;
 8008c08:	7afb      	ldrb	r3, [r7, #11]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c0e:	e089      	b.n	8008d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00b      	beq.n	8008c34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	7c12      	ldrb	r2, [r2, #16]
 8008c28:	f107 0108 	add.w	r1, r7, #8
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	4798      	blx	r3
 8008c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c32:	e077      	b.n	8008d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fab1 	bl	800919e <USBD_CtlError>
            err++;
 8008c3c:	7afb      	ldrb	r3, [r7, #11]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	72fb      	strb	r3, [r7, #11]
          break;
 8008c42:	e06f      	b.n	8008d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00b      	beq.n	8008c68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	7c12      	ldrb	r2, [r2, #16]
 8008c5c:	f107 0108 	add.w	r1, r7, #8
 8008c60:	4610      	mov	r0, r2
 8008c62:	4798      	blx	r3
 8008c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c66:	e05d      	b.n	8008d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fa97 	bl	800919e <USBD_CtlError>
            err++;
 8008c70:	7afb      	ldrb	r3, [r7, #11]
 8008c72:	3301      	adds	r3, #1
 8008c74:	72fb      	strb	r3, [r7, #11]
          break;
 8008c76:	e055      	b.n	8008d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00b      	beq.n	8008c9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	7c12      	ldrb	r2, [r2, #16]
 8008c90:	f107 0108 	add.w	r1, r7, #8
 8008c94:	4610      	mov	r0, r2
 8008c96:	4798      	blx	r3
 8008c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c9a:	e043      	b.n	8008d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fa7d 	bl	800919e <USBD_CtlError>
            err++;
 8008ca4:	7afb      	ldrb	r3, [r7, #11]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8008caa:	e03b      	b.n	8008d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00b      	beq.n	8008cd0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	7c12      	ldrb	r2, [r2, #16]
 8008cc4:	f107 0108 	add.w	r1, r7, #8
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4798      	blx	r3
 8008ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cce:	e029      	b.n	8008d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fa63 	bl	800919e <USBD_CtlError>
            err++;
 8008cd8:	7afb      	ldrb	r3, [r7, #11]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cde:	e021      	b.n	8008d24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00b      	beq.n	8008d04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	7c12      	ldrb	r2, [r2, #16]
 8008cf8:	f107 0108 	add.w	r1, r7, #8
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	4798      	blx	r3
 8008d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d02:	e00f      	b.n	8008d24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fa49 	bl	800919e <USBD_CtlError>
            err++;
 8008d0c:	7afb      	ldrb	r3, [r7, #11]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	72fb      	strb	r3, [r7, #11]
          break;
 8008d12:	e007      	b.n	8008d24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fa41 	bl	800919e <USBD_CtlError>
          err++;
 8008d1c:	7afb      	ldrb	r3, [r7, #11]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008d22:	bf00      	nop
      }
      break;
 8008d24:	e037      	b.n	8008d96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	7c1b      	ldrb	r3, [r3, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d109      	bne.n	8008d42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d36:	f107 0208 	add.w	r2, r7, #8
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	4798      	blx	r3
 8008d3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d40:	e029      	b.n	8008d96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fa2a 	bl	800919e <USBD_CtlError>
        err++;
 8008d4a:	7afb      	ldrb	r3, [r7, #11]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d50:	e021      	b.n	8008d96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	7c1b      	ldrb	r3, [r3, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10d      	bne.n	8008d76 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d62:	f107 0208 	add.w	r2, r7, #8
 8008d66:	4610      	mov	r0, r2
 8008d68:	4798      	blx	r3
 8008d6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	2207      	movs	r2, #7
 8008d72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d74:	e00f      	b.n	8008d96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fa10 	bl	800919e <USBD_CtlError>
        err++;
 8008d7e:	7afb      	ldrb	r3, [r7, #11]
 8008d80:	3301      	adds	r3, #1
 8008d82:	72fb      	strb	r3, [r7, #11]
      break;
 8008d84:	e007      	b.n	8008d96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fa08 	bl	800919e <USBD_CtlError>
      err++;
 8008d8e:	7afb      	ldrb	r3, [r7, #11]
 8008d90:	3301      	adds	r3, #1
 8008d92:	72fb      	strb	r3, [r7, #11]
      break;
 8008d94:	bf00      	nop
  }

  if (err != 0U)
 8008d96:	7afb      	ldrb	r3, [r7, #11]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d11e      	bne.n	8008dda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	88db      	ldrh	r3, [r3, #6]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d016      	beq.n	8008dd2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008da4:	893b      	ldrh	r3, [r7, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00e      	beq.n	8008dc8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	88da      	ldrh	r2, [r3, #6]
 8008dae:	893b      	ldrh	r3, [r7, #8]
 8008db0:	4293      	cmp	r3, r2
 8008db2:	bf28      	it	cs
 8008db4:	4613      	movcs	r3, r2
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dba:	893b      	ldrh	r3, [r7, #8]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	68f9      	ldr	r1, [r7, #12]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fa5d 	bl	8009280 <USBD_CtlSendData>
 8008dc6:	e009      	b.n	8008ddc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f9e7 	bl	800919e <USBD_CtlError>
 8008dd0:	e004      	b.n	8008ddc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 faae 	bl	8009334 <USBD_CtlSendStatus>
 8008dd8:	e000      	b.n	8008ddc <USBD_GetDescriptor+0x320>
    return;
 8008dda:	bf00      	nop
  }
}
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop

08008de4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	889b      	ldrh	r3, [r3, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d131      	bne.n	8008e5a <USBD_SetAddress+0x76>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	88db      	ldrh	r3, [r3, #6]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d12d      	bne.n	8008e5a <USBD_SetAddress+0x76>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	885b      	ldrh	r3, [r3, #2]
 8008e02:	2b7f      	cmp	r3, #127	; 0x7f
 8008e04:	d829      	bhi.n	8008e5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	885b      	ldrh	r3, [r3, #2]
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d104      	bne.n	8008e28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f9bc 	bl	800919e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e26:	e01d      	b.n	8008e64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	7bfa      	ldrb	r2, [r7, #15]
 8008e2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 ff35 	bl	8009ca4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fa7a 	bl	8009334 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d004      	beq.n	8008e50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2202      	movs	r2, #2
 8008e4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e4e:	e009      	b.n	8008e64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e58:	e004      	b.n	8008e64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f99e 	bl	800919e <USBD_CtlError>
  }
}
 8008e62:	bf00      	nop
 8008e64:	bf00      	nop
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	885b      	ldrh	r3, [r3, #2]
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	4b4e      	ldr	r3, [pc, #312]	; (8008fbc <USBD_SetConfig+0x150>)
 8008e82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e84:	4b4d      	ldr	r3, [pc, #308]	; (8008fbc <USBD_SetConfig+0x150>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d905      	bls.n	8008e98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f985 	bl	800919e <USBD_CtlError>
    return USBD_FAIL;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e08c      	b.n	8008fb2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d002      	beq.n	8008eaa <USBD_SetConfig+0x3e>
 8008ea4:	2b03      	cmp	r3, #3
 8008ea6:	d029      	beq.n	8008efc <USBD_SetConfig+0x90>
 8008ea8:	e075      	b.n	8008f96 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008eaa:	4b44      	ldr	r3, [pc, #272]	; (8008fbc <USBD_SetConfig+0x150>)
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d020      	beq.n	8008ef4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008eb2:	4b42      	ldr	r3, [pc, #264]	; (8008fbc <USBD_SetConfig+0x150>)
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ebc:	4b3f      	ldr	r3, [pc, #252]	; (8008fbc <USBD_SetConfig+0x150>)
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7fe ffbd 	bl	8007e42 <USBD_SetClassConfig>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d008      	beq.n	8008ee4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f962 	bl	800919e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2202      	movs	r2, #2
 8008ede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ee2:	e065      	b.n	8008fb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fa25 	bl	8009334 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2203      	movs	r2, #3
 8008eee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ef2:	e05d      	b.n	8008fb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fa1d 	bl	8009334 <USBD_CtlSendStatus>
      break;
 8008efa:	e059      	b.n	8008fb0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008efc:	4b2f      	ldr	r3, [pc, #188]	; (8008fbc <USBD_SetConfig+0x150>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d112      	bne.n	8008f2a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008f0c:	4b2b      	ldr	r3, [pc, #172]	; (8008fbc <USBD_SetConfig+0x150>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	461a      	mov	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f16:	4b29      	ldr	r3, [pc, #164]	; (8008fbc <USBD_SetConfig+0x150>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7fe ffac 	bl	8007e7a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa06 	bl	8009334 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f28:	e042      	b.n	8008fb0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008f2a:	4b24      	ldr	r3, [pc, #144]	; (8008fbc <USBD_SetConfig+0x150>)
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d02a      	beq.n	8008f8e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7fe ff9a 	bl	8007e7a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f46:	4b1d      	ldr	r3, [pc, #116]	; (8008fbc <USBD_SetConfig+0x150>)
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f50:	4b1a      	ldr	r3, [pc, #104]	; (8008fbc <USBD_SetConfig+0x150>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7fe ff73 	bl	8007e42 <USBD_SetClassConfig>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00f      	beq.n	8008f86 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f918 	bl	800919e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7fe ff7f 	bl	8007e7a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f84:	e014      	b.n	8008fb0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f9d4 	bl	8009334 <USBD_CtlSendStatus>
      break;
 8008f8c:	e010      	b.n	8008fb0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f9d0 	bl	8009334 <USBD_CtlSendStatus>
      break;
 8008f94:	e00c      	b.n	8008fb0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f900 	bl	800919e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f9e:	4b07      	ldr	r3, [pc, #28]	; (8008fbc <USBD_SetConfig+0x150>)
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7fe ff68 	bl	8007e7a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008faa:	2303      	movs	r3, #3
 8008fac:	73fb      	strb	r3, [r7, #15]
      break;
 8008fae:	bf00      	nop
  }

  return ret;
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	2001aa1c 	.word	0x2001aa1c

08008fc0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	88db      	ldrh	r3, [r3, #6]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d004      	beq.n	8008fdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f8e2 	bl	800919e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008fda:	e023      	b.n	8009024 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	dc02      	bgt.n	8008fee <USBD_GetConfig+0x2e>
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	dc03      	bgt.n	8008ff4 <USBD_GetConfig+0x34>
 8008fec:	e015      	b.n	800901a <USBD_GetConfig+0x5a>
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d00b      	beq.n	800900a <USBD_GetConfig+0x4a>
 8008ff2:	e012      	b.n	800901a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	2201      	movs	r2, #1
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f93c 	bl	8009280 <USBD_CtlSendData>
        break;
 8009008:	e00c      	b.n	8009024 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3304      	adds	r3, #4
 800900e:	2201      	movs	r2, #1
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f934 	bl	8009280 <USBD_CtlSendData>
        break;
 8009018:	e004      	b.n	8009024 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f8be 	bl	800919e <USBD_CtlError>
        break;
 8009022:	bf00      	nop
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800903c:	b2db      	uxtb	r3, r3
 800903e:	3b01      	subs	r3, #1
 8009040:	2b02      	cmp	r3, #2
 8009042:	d81e      	bhi.n	8009082 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	88db      	ldrh	r3, [r3, #6]
 8009048:	2b02      	cmp	r3, #2
 800904a:	d004      	beq.n	8009056 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f8a5 	bl	800919e <USBD_CtlError>
        break;
 8009054:	e01a      	b.n	800908c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009062:	2b00      	cmp	r3, #0
 8009064:	d005      	beq.n	8009072 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f043 0202 	orr.w	r2, r3, #2
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	330c      	adds	r3, #12
 8009076:	2202      	movs	r2, #2
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f900 	bl	8009280 <USBD_CtlSendData>
      break;
 8009080:	e004      	b.n	800908c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f88a 	bl	800919e <USBD_CtlError>
      break;
 800908a:	bf00      	nop
  }
}
 800908c:	bf00      	nop
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	885b      	ldrh	r3, [r3, #2]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d107      	bne.n	80090b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f940 	bl	8009334 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80090b4:	e013      	b.n	80090de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	885b      	ldrh	r3, [r3, #2]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d10b      	bne.n	80090d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	889b      	ldrh	r3, [r3, #4]
 80090c2:	0a1b      	lsrs	r3, r3, #8
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f930 	bl	8009334 <USBD_CtlSendStatus>
}
 80090d4:	e003      	b.n	80090de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f860 	bl	800919e <USBD_CtlError>
}
 80090de:	bf00      	nop
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	3b01      	subs	r3, #1
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d80b      	bhi.n	8009116 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	885b      	ldrh	r3, [r3, #2]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d10c      	bne.n	8009120 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f910 	bl	8009334 <USBD_CtlSendStatus>
      }
      break;
 8009114:	e004      	b.n	8009120 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f840 	bl	800919e <USBD_CtlError>
      break;
 800911e:	e000      	b.n	8009122 <USBD_ClrFeature+0x3c>
      break;
 8009120:	bf00      	nop
  }
}
 8009122:	bf00      	nop
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	781a      	ldrb	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	3301      	adds	r3, #1
 8009144:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	781a      	ldrb	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3301      	adds	r3, #1
 8009152:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7ff fa17 	bl	8008588 <SWAPBYTE>
 800915a:	4603      	mov	r3, r0
 800915c:	461a      	mov	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3301      	adds	r3, #1
 800916c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f7ff fa0a 	bl	8008588 <SWAPBYTE>
 8009174:	4603      	mov	r3, r0
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3301      	adds	r3, #1
 8009180:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	3301      	adds	r3, #1
 8009186:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f7ff f9fd 	bl	8008588 <SWAPBYTE>
 800918e:	4603      	mov	r3, r0
 8009190:	461a      	mov	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	80da      	strh	r2, [r3, #6]
}
 8009196:	bf00      	nop
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b082      	sub	sp, #8
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091a8:	2180      	movs	r1, #128	; 0x80
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fd10 	bl	8009bd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091b0:	2100      	movs	r1, #0
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fd0c 	bl	8009bd0 <USBD_LL_StallEP>
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d036      	beq.n	8009244 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091da:	6938      	ldr	r0, [r7, #16]
 80091dc:	f000 f836 	bl	800924c <USBD_GetLen>
 80091e0:	4603      	mov	r3, r0
 80091e2:	3301      	adds	r3, #1
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	005b      	lsls	r3, r3, #1
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	4413      	add	r3, r2
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	7812      	ldrb	r2, [r2, #0]
 80091f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
 80091fc:	3301      	adds	r3, #1
 80091fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009200:	7dfb      	ldrb	r3, [r7, #23]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	4413      	add	r3, r2
 8009206:	2203      	movs	r2, #3
 8009208:	701a      	strb	r2, [r3, #0]
  idx++;
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	3301      	adds	r3, #1
 800920e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009210:	e013      	b.n	800923a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	4413      	add	r3, r2
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	7812      	ldrb	r2, [r2, #0]
 800921c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	3301      	adds	r3, #1
 8009222:	613b      	str	r3, [r7, #16]
    idx++;
 8009224:	7dfb      	ldrb	r3, [r7, #23]
 8009226:	3301      	adds	r3, #1
 8009228:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	4413      	add	r3, r2
 8009230:	2200      	movs	r2, #0
 8009232:	701a      	strb	r2, [r3, #0]
    idx++;
 8009234:	7dfb      	ldrb	r3, [r7, #23]
 8009236:	3301      	adds	r3, #1
 8009238:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e7      	bne.n	8009212 <USBD_GetString+0x52>
 8009242:	e000      	b.n	8009246 <USBD_GetString+0x86>
    return;
 8009244:	bf00      	nop
  }
}
 8009246:	3718      	adds	r7, #24
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009254:	2300      	movs	r3, #0
 8009256:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800925c:	e005      	b.n	800926a <USBD_GetLen+0x1e>
  {
    len++;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	3301      	adds	r3, #1
 8009262:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	3301      	adds	r3, #1
 8009268:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1f5      	bne.n	800925e <USBD_GetLen+0x12>
  }

  return len;
 8009272:	7bfb      	ldrb	r3, [r7, #15]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2202      	movs	r2, #2
 8009290:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	2100      	movs	r1, #0
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f000 fd1b 	bl	8009ce2 <USBD_LL_Transmit>

  return USBD_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68ba      	ldr	r2, [r7, #8]
 80092c6:	2100      	movs	r1, #0
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f000 fd0a 	bl	8009ce2 <USBD_LL_Transmit>

  return USBD_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2203      	movs	r2, #3
 80092e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	2100      	movs	r1, #0
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f000 fd0e 	bl	8009d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	60f8      	str	r0, [r7, #12]
 800931a:	60b9      	str	r1, [r7, #8]
 800931c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	2100      	movs	r1, #0
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 fcfd 	bl	8009d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2204      	movs	r2, #4
 8009340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009344:	2300      	movs	r3, #0
 8009346:	2200      	movs	r2, #0
 8009348:	2100      	movs	r1, #0
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fcc9 	bl	8009ce2 <USBD_LL_Transmit>

  return USBD_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b082      	sub	sp, #8
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2205      	movs	r2, #5
 8009366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800936a:	2300      	movs	r3, #0
 800936c:	2200      	movs	r2, #0
 800936e:	2100      	movs	r1, #0
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fcd7 	bl	8009d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009384:	2200      	movs	r2, #0
 8009386:	4912      	ldr	r1, [pc, #72]	; (80093d0 <MX_USB_DEVICE_Init+0x50>)
 8009388:	4812      	ldr	r0, [pc, #72]	; (80093d4 <MX_USB_DEVICE_Init+0x54>)
 800938a:	f7fe fcdd 	bl	8007d48 <USBD_Init>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009394:	f7f7 fee0 	bl	8001158 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009398:	490f      	ldr	r1, [pc, #60]	; (80093d8 <MX_USB_DEVICE_Init+0x58>)
 800939a:	480e      	ldr	r0, [pc, #56]	; (80093d4 <MX_USB_DEVICE_Init+0x54>)
 800939c:	f7fe fd04 	bl	8007da8 <USBD_RegisterClass>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093a6:	f7f7 fed7 	bl	8001158 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093aa:	490c      	ldr	r1, [pc, #48]	; (80093dc <MX_USB_DEVICE_Init+0x5c>)
 80093ac:	4809      	ldr	r0, [pc, #36]	; (80093d4 <MX_USB_DEVICE_Init+0x54>)
 80093ae:	f7fe fbfb 	bl	8007ba8 <USBD_CDC_RegisterInterface>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093b8:	f7f7 fece 	bl	8001158 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093bc:	4805      	ldr	r0, [pc, #20]	; (80093d4 <MX_USB_DEVICE_Init+0x54>)
 80093be:	f7fe fd29 	bl	8007e14 <USBD_Start>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093c8:	f7f7 fec6 	bl	8001158 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093cc:	bf00      	nop
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	200000b4 	.word	0x200000b4
 80093d4:	2001aa20 	.word	0x2001aa20
 80093d8:	20000020 	.word	0x20000020
 80093dc:	200000a0 	.word	0x200000a0

080093e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093e4:	2200      	movs	r2, #0
 80093e6:	4905      	ldr	r1, [pc, #20]	; (80093fc <CDC_Init_FS+0x1c>)
 80093e8:	4805      	ldr	r0, [pc, #20]	; (8009400 <CDC_Init_FS+0x20>)
 80093ea:	f7fe fbf7 	bl	8007bdc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093ee:	4905      	ldr	r1, [pc, #20]	; (8009404 <CDC_Init_FS+0x24>)
 80093f0:	4803      	ldr	r0, [pc, #12]	; (8009400 <CDC_Init_FS+0x20>)
 80093f2:	f7fe fc15 	bl	8007c20 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	2001b4fc 	.word	0x2001b4fc
 8009400:	2001aa20 	.word	0x2001aa20
 8009404:	2001acfc 	.word	0x2001acfc

08009408 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009408:	b480      	push	{r7}
 800940a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800940c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800940e:	4618      	mov	r0, r3
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	4603      	mov	r3, r0
 8009420:	6039      	str	r1, [r7, #0]
 8009422:	71fb      	strb	r3, [r7, #7]
 8009424:	4613      	mov	r3, r2
 8009426:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	2b23      	cmp	r3, #35	; 0x23
 800942c:	d84a      	bhi.n	80094c4 <CDC_Control_FS+0xac>
 800942e:	a201      	add	r2, pc, #4	; (adr r2, 8009434 <CDC_Control_FS+0x1c>)
 8009430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009434:	080094c5 	.word	0x080094c5
 8009438:	080094c5 	.word	0x080094c5
 800943c:	080094c5 	.word	0x080094c5
 8009440:	080094c5 	.word	0x080094c5
 8009444:	080094c5 	.word	0x080094c5
 8009448:	080094c5 	.word	0x080094c5
 800944c:	080094c5 	.word	0x080094c5
 8009450:	080094c5 	.word	0x080094c5
 8009454:	080094c5 	.word	0x080094c5
 8009458:	080094c5 	.word	0x080094c5
 800945c:	080094c5 	.word	0x080094c5
 8009460:	080094c5 	.word	0x080094c5
 8009464:	080094c5 	.word	0x080094c5
 8009468:	080094c5 	.word	0x080094c5
 800946c:	080094c5 	.word	0x080094c5
 8009470:	080094c5 	.word	0x080094c5
 8009474:	080094c5 	.word	0x080094c5
 8009478:	080094c5 	.word	0x080094c5
 800947c:	080094c5 	.word	0x080094c5
 8009480:	080094c5 	.word	0x080094c5
 8009484:	080094c5 	.word	0x080094c5
 8009488:	080094c5 	.word	0x080094c5
 800948c:	080094c5 	.word	0x080094c5
 8009490:	080094c5 	.word	0x080094c5
 8009494:	080094c5 	.word	0x080094c5
 8009498:	080094c5 	.word	0x080094c5
 800949c:	080094c5 	.word	0x080094c5
 80094a0:	080094c5 	.word	0x080094c5
 80094a4:	080094c5 	.word	0x080094c5
 80094a8:	080094c5 	.word	0x080094c5
 80094ac:	080094c5 	.word	0x080094c5
 80094b0:	080094c5 	.word	0x080094c5
 80094b4:	080094c5 	.word	0x080094c5
 80094b8:	080094c5 	.word	0x080094c5
 80094bc:	080094c5 	.word	0x080094c5
 80094c0:	080094c5 	.word	0x080094c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094c4:	bf00      	nop
  }

  return (USBD_OK);
 80094c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	4805      	ldr	r0, [pc, #20]	; (80094f8 <CDC_Receive_FS+0x24>)
 80094e2:	f7fe fb9d 	bl	8007c20 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094e6:	4804      	ldr	r0, [pc, #16]	; (80094f8 <CDC_Receive_FS+0x24>)
 80094e8:	f7fe fbf8 	bl	8007cdc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80094ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	2001aa20 	.word	0x2001aa20

080094fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800950c:	4b0d      	ldr	r3, [pc, #52]	; (8009544 <CDC_Transmit_FS+0x48>)
 800950e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009512:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800951e:	2301      	movs	r3, #1
 8009520:	e00b      	b.n	800953a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009522:	887b      	ldrh	r3, [r7, #2]
 8009524:	461a      	mov	r2, r3
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	4806      	ldr	r0, [pc, #24]	; (8009544 <CDC_Transmit_FS+0x48>)
 800952a:	f7fe fb57 	bl	8007bdc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800952e:	4805      	ldr	r0, [pc, #20]	; (8009544 <CDC_Transmit_FS+0x48>)
 8009530:	f7fe fb94 	bl	8007c5c <USBD_CDC_TransmitPacket>
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009538:	7bfb      	ldrb	r3, [r7, #15]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	2001aa20 	.word	0x2001aa20

08009548 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	4613      	mov	r3, r2
 8009554:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800955a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800955e:	4618      	mov	r0, r3
 8009560:	371c      	adds	r7, #28
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
	...

0800956c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	4603      	mov	r3, r0
 8009574:	6039      	str	r1, [r7, #0]
 8009576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2212      	movs	r2, #18
 800957c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800957e:	4b03      	ldr	r3, [pc, #12]	; (800958c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009580:	4618      	mov	r0, r3
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	200000d4 	.word	0x200000d4

08009590 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	4603      	mov	r3, r0
 8009598:	6039      	str	r1, [r7, #0]
 800959a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2204      	movs	r2, #4
 80095a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095a2:	4b03      	ldr	r3, [pc, #12]	; (80095b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	200000f4 	.word	0x200000f4

080095b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	4603      	mov	r3, r0
 80095bc:	6039      	str	r1, [r7, #0]
 80095be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d105      	bne.n	80095d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	4907      	ldr	r1, [pc, #28]	; (80095e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80095ca:	4808      	ldr	r0, [pc, #32]	; (80095ec <USBD_FS_ProductStrDescriptor+0x38>)
 80095cc:	f7ff fdf8 	bl	80091c0 <USBD_GetString>
 80095d0:	e004      	b.n	80095dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	4904      	ldr	r1, [pc, #16]	; (80095e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80095d6:	4805      	ldr	r0, [pc, #20]	; (80095ec <USBD_FS_ProductStrDescriptor+0x38>)
 80095d8:	f7ff fdf2 	bl	80091c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095dc:	4b02      	ldr	r3, [pc, #8]	; (80095e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	2001bcfc 	.word	0x2001bcfc
 80095ec:	0800e8fc 	.word	0x0800e8fc

080095f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	6039      	str	r1, [r7, #0]
 80095fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	4904      	ldr	r1, [pc, #16]	; (8009610 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009600:	4804      	ldr	r0, [pc, #16]	; (8009614 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009602:	f7ff fddd 	bl	80091c0 <USBD_GetString>
  return USBD_StrDesc;
 8009606:	4b02      	ldr	r3, [pc, #8]	; (8009610 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009608:	4618      	mov	r0, r3
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	2001bcfc 	.word	0x2001bcfc
 8009614:	0800e914 	.word	0x0800e914

08009618 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	6039      	str	r1, [r7, #0]
 8009622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	221a      	movs	r2, #26
 8009628:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800962a:	f000 f855 	bl	80096d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800962e:	4b02      	ldr	r3, [pc, #8]	; (8009638 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	200000f8 	.word	0x200000f8

0800963c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	6039      	str	r1, [r7, #0]
 8009646:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d105      	bne.n	800965a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	4907      	ldr	r1, [pc, #28]	; (8009670 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009652:	4808      	ldr	r0, [pc, #32]	; (8009674 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009654:	f7ff fdb4 	bl	80091c0 <USBD_GetString>
 8009658:	e004      	b.n	8009664 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	4904      	ldr	r1, [pc, #16]	; (8009670 <USBD_FS_ConfigStrDescriptor+0x34>)
 800965e:	4805      	ldr	r0, [pc, #20]	; (8009674 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009660:	f7ff fdae 	bl	80091c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009664:	4b02      	ldr	r3, [pc, #8]	; (8009670 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	2001bcfc 	.word	0x2001bcfc
 8009674:	0800e928 	.word	0x0800e928

08009678 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	4603      	mov	r3, r0
 8009680:	6039      	str	r1, [r7, #0]
 8009682:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009684:	79fb      	ldrb	r3, [r7, #7]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d105      	bne.n	8009696 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	4907      	ldr	r1, [pc, #28]	; (80096ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800968e:	4808      	ldr	r0, [pc, #32]	; (80096b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009690:	f7ff fd96 	bl	80091c0 <USBD_GetString>
 8009694:	e004      	b.n	80096a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009696:	683a      	ldr	r2, [r7, #0]
 8009698:	4904      	ldr	r1, [pc, #16]	; (80096ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800969a:	4805      	ldr	r0, [pc, #20]	; (80096b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800969c:	f7ff fd90 	bl	80091c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096a0:	4b02      	ldr	r3, [pc, #8]	; (80096ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	2001bcfc 	.word	0x2001bcfc
 80096b0:	0800e934 	.word	0x0800e934

080096b4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	4603      	mov	r3, r0
 80096bc:	6039      	str	r1, [r7, #0]
 80096be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	220c      	movs	r2, #12
 80096c4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80096c6:	4b03      	ldr	r3, [pc, #12]	; (80096d4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	200000e8 	.word	0x200000e8

080096d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096de:	4b0f      	ldr	r3, [pc, #60]	; (800971c <Get_SerialNum+0x44>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096e4:	4b0e      	ldr	r3, [pc, #56]	; (8009720 <Get_SerialNum+0x48>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096ea:	4b0e      	ldr	r3, [pc, #56]	; (8009724 <Get_SerialNum+0x4c>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4413      	add	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d009      	beq.n	8009712 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096fe:	2208      	movs	r2, #8
 8009700:	4909      	ldr	r1, [pc, #36]	; (8009728 <Get_SerialNum+0x50>)
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 f814 	bl	8009730 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009708:	2204      	movs	r2, #4
 800970a:	4908      	ldr	r1, [pc, #32]	; (800972c <Get_SerialNum+0x54>)
 800970c:	68b8      	ldr	r0, [r7, #8]
 800970e:	f000 f80f 	bl	8009730 <IntToUnicode>
  }
}
 8009712:	bf00      	nop
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	1ff0f420 	.word	0x1ff0f420
 8009720:	1ff0f424 	.word	0x1ff0f424
 8009724:	1ff0f428 	.word	0x1ff0f428
 8009728:	200000fa 	.word	0x200000fa
 800972c:	2000010a 	.word	0x2000010a

08009730 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	4613      	mov	r3, r2
 800973c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800973e:	2300      	movs	r3, #0
 8009740:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009742:	2300      	movs	r3, #0
 8009744:	75fb      	strb	r3, [r7, #23]
 8009746:	e027      	b.n	8009798 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	0f1b      	lsrs	r3, r3, #28
 800974c:	2b09      	cmp	r3, #9
 800974e:	d80b      	bhi.n	8009768 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	0f1b      	lsrs	r3, r3, #28
 8009754:	b2da      	uxtb	r2, r3
 8009756:	7dfb      	ldrb	r3, [r7, #23]
 8009758:	005b      	lsls	r3, r3, #1
 800975a:	4619      	mov	r1, r3
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	440b      	add	r3, r1
 8009760:	3230      	adds	r2, #48	; 0x30
 8009762:	b2d2      	uxtb	r2, r2
 8009764:	701a      	strb	r2, [r3, #0]
 8009766:	e00a      	b.n	800977e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	0f1b      	lsrs	r3, r3, #28
 800976c:	b2da      	uxtb	r2, r3
 800976e:	7dfb      	ldrb	r3, [r7, #23]
 8009770:	005b      	lsls	r3, r3, #1
 8009772:	4619      	mov	r1, r3
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	440b      	add	r3, r1
 8009778:	3237      	adds	r2, #55	; 0x37
 800977a:	b2d2      	uxtb	r2, r2
 800977c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	011b      	lsls	r3, r3, #4
 8009782:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	005b      	lsls	r3, r3, #1
 8009788:	3301      	adds	r3, #1
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	4413      	add	r3, r2
 800978e:	2200      	movs	r2, #0
 8009790:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009792:	7dfb      	ldrb	r3, [r7, #23]
 8009794:	3301      	adds	r3, #1
 8009796:	75fb      	strb	r3, [r7, #23]
 8009798:	7dfa      	ldrb	r2, [r7, #23]
 800979a:	79fb      	ldrb	r3, [r7, #7]
 800979c:	429a      	cmp	r2, r3
 800979e:	d3d3      	bcc.n	8009748 <IntToUnicode+0x18>
  }
}
 80097a0:	bf00      	nop
 80097a2:	bf00      	nop
 80097a4:	371c      	adds	r7, #28
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
	...

080097b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b0ae      	sub	sp, #184	; 0xb8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80097bc:	2200      	movs	r2, #0
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	605a      	str	r2, [r3, #4]
 80097c2:	609a      	str	r2, [r3, #8]
 80097c4:	60da      	str	r2, [r3, #12]
 80097c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80097c8:	f107 0314 	add.w	r3, r7, #20
 80097cc:	2290      	movs	r2, #144	; 0x90
 80097ce:	2100      	movs	r1, #0
 80097d0:	4618      	mov	r0, r3
 80097d2:	f003 fa64 	bl	800cc9e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097de:	d151      	bne.n	8009884 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80097e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80097e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80097ec:	f107 0314 	add.w	r3, r7, #20
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fb f9a7 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80097fc:	f7f7 fcac 	bl	8001158 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009800:	4b22      	ldr	r3, [pc, #136]	; (800988c <HAL_PCD_MspInit+0xdc>)
 8009802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009804:	4a21      	ldr	r2, [pc, #132]	; (800988c <HAL_PCD_MspInit+0xdc>)
 8009806:	f043 0301 	orr.w	r3, r3, #1
 800980a:	6313      	str	r3, [r2, #48]	; 0x30
 800980c:	4b1f      	ldr	r3, [pc, #124]	; (800988c <HAL_PCD_MspInit+0xdc>)
 800980e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	613b      	str	r3, [r7, #16]
 8009816:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009818:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800981c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009820:	2302      	movs	r3, #2
 8009822:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009826:	2300      	movs	r3, #0
 8009828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800982c:	2303      	movs	r3, #3
 800982e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009832:	230a      	movs	r3, #10
 8009834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009838:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800983c:	4619      	mov	r1, r3
 800983e:	4814      	ldr	r0, [pc, #80]	; (8009890 <HAL_PCD_MspInit+0xe0>)
 8009840:	f7f8 fcc8 	bl	80021d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009844:	4b11      	ldr	r3, [pc, #68]	; (800988c <HAL_PCD_MspInit+0xdc>)
 8009846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009848:	4a10      	ldr	r2, [pc, #64]	; (800988c <HAL_PCD_MspInit+0xdc>)
 800984a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800984e:	6353      	str	r3, [r2, #52]	; 0x34
 8009850:	4b0e      	ldr	r3, [pc, #56]	; (800988c <HAL_PCD_MspInit+0xdc>)
 8009852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009858:	60fb      	str	r3, [r7, #12]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	4b0b      	ldr	r3, [pc, #44]	; (800988c <HAL_PCD_MspInit+0xdc>)
 800985e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009860:	4a0a      	ldr	r2, [pc, #40]	; (800988c <HAL_PCD_MspInit+0xdc>)
 8009862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009866:	6453      	str	r3, [r2, #68]	; 0x44
 8009868:	4b08      	ldr	r3, [pc, #32]	; (800988c <HAL_PCD_MspInit+0xdc>)
 800986a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009870:	60bb      	str	r3, [r7, #8]
 8009872:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009874:	2200      	movs	r2, #0
 8009876:	2100      	movs	r1, #0
 8009878:	2043      	movs	r0, #67	; 0x43
 800987a:	f7f8 f8fc 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800987e:	2043      	movs	r0, #67	; 0x43
 8009880:	f7f8 f915 	bl	8001aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009884:	bf00      	nop
 8009886:	37b8      	adds	r7, #184	; 0xb8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	40023800 	.word	0x40023800
 8009890:	40020000 	.word	0x40020000

08009894 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80098a8:	4619      	mov	r1, r3
 80098aa:	4610      	mov	r0, r2
 80098ac:	f7fe faff 	bl	8007eae <USBD_LL_SetupStage>
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80098ca:	78fa      	ldrb	r2, [r7, #3]
 80098cc:	6879      	ldr	r1, [r7, #4]
 80098ce:	4613      	mov	r3, r2
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	4413      	add	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	440b      	add	r3, r1
 80098d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	78fb      	ldrb	r3, [r7, #3]
 80098e0:	4619      	mov	r1, r3
 80098e2:	f7fe fb39 	bl	8007f58 <USBD_LL_DataOutStage>
}
 80098e6:	bf00      	nop
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b082      	sub	sp, #8
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	460b      	mov	r3, r1
 80098f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8009900:	78fa      	ldrb	r2, [r7, #3]
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	4613      	mov	r3, r2
 8009906:	00db      	lsls	r3, r3, #3
 8009908:	4413      	add	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	440b      	add	r3, r1
 800990e:	334c      	adds	r3, #76	; 0x4c
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	78fb      	ldrb	r3, [r7, #3]
 8009914:	4619      	mov	r1, r3
 8009916:	f7fe fbd2 	bl	80080be <USBD_LL_DataInStage>
}
 800991a:	bf00      	nop
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b082      	sub	sp, #8
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009930:	4618      	mov	r0, r3
 8009932:	f7fe fd06 	bl	8008342 <USBD_LL_SOF>
}
 8009936:	bf00      	nop
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009946:	2301      	movs	r3, #1
 8009948:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d102      	bne.n	8009958 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009952:	2300      	movs	r3, #0
 8009954:	73fb      	strb	r3, [r7, #15]
 8009956:	e008      	b.n	800996a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	2b02      	cmp	r3, #2
 800995e:	d102      	bne.n	8009966 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009960:	2301      	movs	r3, #1
 8009962:	73fb      	strb	r3, [r7, #15]
 8009964:	e001      	b.n	800996a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009966:	f7f7 fbf7 	bl	8001158 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009970:	7bfa      	ldrb	r2, [r7, #15]
 8009972:	4611      	mov	r1, r2
 8009974:	4618      	mov	r0, r3
 8009976:	f7fe fca6 	bl	80082c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009980:	4618      	mov	r0, r3
 8009982:	f7fe fc4e 	bl	8008222 <USBD_LL_Reset>
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe fca1 	bl	80082e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	6812      	ldr	r2, [r2, #0]
 80099b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099b6:	f043 0301 	orr.w	r3, r3, #1
 80099ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d005      	beq.n	80099d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099c4:	4b04      	ldr	r3, [pc, #16]	; (80099d8 <HAL_PCD_SuspendCallback+0x48>)
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	4a03      	ldr	r2, [pc, #12]	; (80099d8 <HAL_PCD_SuspendCallback+0x48>)
 80099ca:	f043 0306 	orr.w	r3, r3, #6
 80099ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	e000ed00 	.word	0xe000ed00

080099dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fe fc91 	bl	8008312 <USBD_LL_Resume>
}
 80099f0:	bf00      	nop
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009a0a:	78fa      	ldrb	r2, [r7, #3]
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fce9 	bl	80083e6 <USBD_LL_IsoOUTIncomplete>
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009a2e:	78fa      	ldrb	r2, [r7, #3]
 8009a30:	4611      	mov	r1, r2
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe fca5 	bl	8008382 <USBD_LL_IsoINIncomplete>
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fe fcfb 	bl	800844a <USBD_LL_DevConnected>
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe fcf8 	bl	8008460 <USBD_LL_DevDisconnected>
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d13c      	bne.n	8009b02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a88:	4a20      	ldr	r2, [pc, #128]	; (8009b0c <USBD_LL_Init+0x94>)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a1e      	ldr	r2, [pc, #120]	; (8009b0c <USBD_LL_Init+0x94>)
 8009a94:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a98:	4b1c      	ldr	r3, [pc, #112]	; (8009b0c <USBD_LL_Init+0x94>)
 8009a9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009aa0:	4b1a      	ldr	r3, [pc, #104]	; (8009b0c <USBD_LL_Init+0x94>)
 8009aa2:	2206      	movs	r2, #6
 8009aa4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009aa6:	4b19      	ldr	r3, [pc, #100]	; (8009b0c <USBD_LL_Init+0x94>)
 8009aa8:	2202      	movs	r2, #2
 8009aaa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009aac:	4b17      	ldr	r3, [pc, #92]	; (8009b0c <USBD_LL_Init+0x94>)
 8009aae:	2200      	movs	r2, #0
 8009ab0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ab2:	4b16      	ldr	r3, [pc, #88]	; (8009b0c <USBD_LL_Init+0x94>)
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ab8:	4b14      	ldr	r3, [pc, #80]	; (8009b0c <USBD_LL_Init+0x94>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009abe:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <USBD_LL_Init+0x94>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ac4:	4b11      	ldr	r3, [pc, #68]	; (8009b0c <USBD_LL_Init+0x94>)
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009aca:	4b10      	ldr	r3, [pc, #64]	; (8009b0c <USBD_LL_Init+0x94>)
 8009acc:	2200      	movs	r2, #0
 8009ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009ad0:	4b0e      	ldr	r3, [pc, #56]	; (8009b0c <USBD_LL_Init+0x94>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009ad6:	480d      	ldr	r0, [pc, #52]	; (8009b0c <USBD_LL_Init+0x94>)
 8009ad8:	f7f9 f882 	bl	8002be0 <HAL_PCD_Init>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009ae2:	f7f7 fb39 	bl	8001158 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009ae6:	2180      	movs	r1, #128	; 0x80
 8009ae8:	4808      	ldr	r0, [pc, #32]	; (8009b0c <USBD_LL_Init+0x94>)
 8009aea:	f7fa fafc 	bl	80040e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009aee:	2240      	movs	r2, #64	; 0x40
 8009af0:	2100      	movs	r1, #0
 8009af2:	4806      	ldr	r0, [pc, #24]	; (8009b0c <USBD_LL_Init+0x94>)
 8009af4:	f7fa fab0 	bl	8004058 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009af8:	2280      	movs	r2, #128	; 0x80
 8009afa:	2101      	movs	r1, #1
 8009afc:	4803      	ldr	r0, [pc, #12]	; (8009b0c <USBD_LL_Init+0x94>)
 8009afe:	f7fa faab 	bl	8004058 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	2001befc 	.word	0x2001befc

08009b10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7f9 f97e 	bl	8002e28 <HAL_PCD_Start>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 f97e 	bl	8009e34 <USBD_Get_USB_Status>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b084      	sub	sp, #16
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	4608      	mov	r0, r1
 8009b50:	4611      	mov	r1, r2
 8009b52:	461a      	mov	r2, r3
 8009b54:	4603      	mov	r3, r0
 8009b56:	70fb      	strb	r3, [r7, #3]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	70bb      	strb	r3, [r7, #2]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009b6e:	78bb      	ldrb	r3, [r7, #2]
 8009b70:	883a      	ldrh	r2, [r7, #0]
 8009b72:	78f9      	ldrb	r1, [r7, #3]
 8009b74:	f7f9 fe6b 	bl	800384e <HAL_PCD_EP_Open>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 f958 	bl	8009e34 <USBD_Get_USB_Status>
 8009b84:	4603      	mov	r3, r0
 8009b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bac:	78fa      	ldrb	r2, [r7, #3]
 8009bae:	4611      	mov	r1, r2
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7f9 feb4 	bl	800391e <HAL_PCD_EP_Close>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 f939 	bl	8009e34 <USBD_Get_USB_Status>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	460b      	mov	r3, r1
 8009bda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bea:	78fa      	ldrb	r2, [r7, #3]
 8009bec:	4611      	mov	r1, r2
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7f9 ff8c 	bl	8003b0c <HAL_PCD_EP_SetStall>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 f91a 	bl	8009e34 <USBD_Get_USB_Status>
 8009c00:	4603      	mov	r3, r0
 8009c02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c04:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	460b      	mov	r3, r1
 8009c18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c28:	78fa      	ldrb	r2, [r7, #3]
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7f9 ffd1 	bl	8003bd4 <HAL_PCD_EP_ClrStall>
 8009c32:	4603      	mov	r3, r0
 8009c34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f000 f8fb 	bl	8009e34 <USBD_Get_USB_Status>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c42:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	da0b      	bge.n	8009c80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c68:	78fb      	ldrb	r3, [r7, #3]
 8009c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c6e:	68f9      	ldr	r1, [r7, #12]
 8009c70:	4613      	mov	r3, r2
 8009c72:	00db      	lsls	r3, r3, #3
 8009c74:	4413      	add	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	440b      	add	r3, r1
 8009c7a:	333e      	adds	r3, #62	; 0x3e
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	e00b      	b.n	8009c98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c80:	78fb      	ldrb	r3, [r7, #3]
 8009c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c86:	68f9      	ldr	r1, [r7, #12]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	440b      	add	r3, r1
 8009c92:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009c96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	460b      	mov	r3, r1
 8009cae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009cbe:	78fa      	ldrb	r2, [r7, #3]
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7f9 fd9e 	bl	8003804 <HAL_PCD_SetAddress>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 f8b0 	bl	8009e34 <USBD_Get_USB_Status>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b086      	sub	sp, #24
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	60f8      	str	r0, [r7, #12]
 8009cea:	607a      	str	r2, [r7, #4]
 8009cec:	603b      	str	r3, [r7, #0]
 8009cee:	460b      	mov	r3, r1
 8009cf0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009d00:	7af9      	ldrb	r1, [r7, #11]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	f7f9 feb7 	bl	8003a78 <HAL_PCD_EP_Transmit>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 f88f 	bl	8009e34 <USBD_Get_USB_Status>
 8009d16:	4603      	mov	r3, r0
 8009d18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	607a      	str	r2, [r7, #4]
 8009d2e:	603b      	str	r3, [r7, #0]
 8009d30:	460b      	mov	r3, r1
 8009d32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009d42:	7af9      	ldrb	r1, [r7, #11]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	f7f9 fe33 	bl	80039b2 <HAL_PCD_EP_Receive>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f000 f86e 	bl	8009e34 <USBD_Get_USB_Status>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3718      	adds	r7, #24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d78:	78fa      	ldrb	r2, [r7, #3]
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7f9 fe63 	bl	8003a48 <HAL_PCD_EP_GetRxCount>
 8009d82:	4603      	mov	r3, r0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3708      	adds	r7, #8
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009d98:	78fb      	ldrb	r3, [r7, #3]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d002      	beq.n	8009da4 <HAL_PCDEx_LPM_Callback+0x18>
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d01f      	beq.n	8009de2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009da2:	e03b      	b.n	8009e1c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a1b      	ldr	r3, [r3, #32]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d007      	beq.n	8009dbc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009dac:	f000 f83c 	bl	8009e28 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009db0:	4b1c      	ldr	r3, [pc, #112]	; (8009e24 <HAL_PCDEx_LPM_Callback+0x98>)
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	4a1b      	ldr	r2, [pc, #108]	; (8009e24 <HAL_PCDEx_LPM_Callback+0x98>)
 8009db6:	f023 0306 	bic.w	r3, r3, #6
 8009dba:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	6812      	ldr	r2, [r2, #0]
 8009dca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009dce:	f023 0301 	bic.w	r3, r3, #1
 8009dd2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fe fa99 	bl	8008312 <USBD_LL_Resume>
    break;
 8009de0:	e01c      	b.n	8009e1c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	6812      	ldr	r2, [r2, #0]
 8009df0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009df4:	f043 0301 	orr.w	r3, r3, #1
 8009df8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fe fa70 	bl	80082e6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d005      	beq.n	8009e1a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e0e:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <HAL_PCDEx_LPM_Callback+0x98>)
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	4a04      	ldr	r2, [pc, #16]	; (8009e24 <HAL_PCDEx_LPM_Callback+0x98>)
 8009e14:	f043 0306 	orr.w	r3, r3, #6
 8009e18:	6113      	str	r3, [r2, #16]
    break;
 8009e1a:	bf00      	nop
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	e000ed00 	.word	0xe000ed00

08009e28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009e2c:	f7f6 ffa0 	bl	8000d70 <SystemClock_Config>
}
 8009e30:	bf00      	nop
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e42:	79fb      	ldrb	r3, [r7, #7]
 8009e44:	2b03      	cmp	r3, #3
 8009e46:	d817      	bhi.n	8009e78 <USBD_Get_USB_Status+0x44>
 8009e48:	a201      	add	r2, pc, #4	; (adr r2, 8009e50 <USBD_Get_USB_Status+0x1c>)
 8009e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4e:	bf00      	nop
 8009e50:	08009e61 	.word	0x08009e61
 8009e54:	08009e67 	.word	0x08009e67
 8009e58:	08009e6d 	.word	0x08009e6d
 8009e5c:	08009e73 	.word	0x08009e73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e60:	2300      	movs	r3, #0
 8009e62:	73fb      	strb	r3, [r7, #15]
    break;
 8009e64:	e00b      	b.n	8009e7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e66:	2303      	movs	r3, #3
 8009e68:	73fb      	strb	r3, [r7, #15]
    break;
 8009e6a:	e008      	b.n	8009e7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e70:	e005      	b.n	8009e7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e72:	2303      	movs	r3, #3
 8009e74:	73fb      	strb	r3, [r7, #15]
    break;
 8009e76:	e002      	b.n	8009e7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e7c:	bf00      	nop
  }
  return usb_status;
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <arm_rfft_fast_init_f32>:
 8009e8c:	084b      	lsrs	r3, r1, #1
 8009e8e:	2b80      	cmp	r3, #128	; 0x80
 8009e90:	b430      	push	{r4, r5}
 8009e92:	8201      	strh	r1, [r0, #16]
 8009e94:	8003      	strh	r3, [r0, #0]
 8009e96:	d070      	beq.n	8009f7a <arm_rfft_fast_init_f32+0xee>
 8009e98:	d916      	bls.n	8009ec8 <arm_rfft_fast_init_f32+0x3c>
 8009e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e9e:	d05f      	beq.n	8009f60 <arm_rfft_fast_init_f32+0xd4>
 8009ea0:	d936      	bls.n	8009f10 <arm_rfft_fast_init_f32+0x84>
 8009ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ea6:	d026      	beq.n	8009ef6 <arm_rfft_fast_init_f32+0x6a>
 8009ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eac:	d112      	bne.n	8009ed4 <arm_rfft_fast_init_f32+0x48>
 8009eae:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8009eb2:	4c38      	ldr	r4, [pc, #224]	; (8009f94 <arm_rfft_fast_init_f32+0x108>)
 8009eb4:	4938      	ldr	r1, [pc, #224]	; (8009f98 <arm_rfft_fast_init_f32+0x10c>)
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	4a38      	ldr	r2, [pc, #224]	; (8009f9c <arm_rfft_fast_init_f32+0x110>)
 8009eba:	8185      	strh	r5, [r0, #12]
 8009ebc:	6084      	str	r4, [r0, #8]
 8009ebe:	6041      	str	r1, [r0, #4]
 8009ec0:	6142      	str	r2, [r0, #20]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	bc30      	pop	{r4, r5}
 8009ec6:	4770      	bx	lr
 8009ec8:	2b20      	cmp	r3, #32
 8009eca:	d031      	beq.n	8009f30 <arm_rfft_fast_init_f32+0xa4>
 8009ecc:	2b40      	cmp	r3, #64	; 0x40
 8009ece:	d006      	beq.n	8009ede <arm_rfft_fast_init_f32+0x52>
 8009ed0:	2b10      	cmp	r3, #16
 8009ed2:	d039      	beq.n	8009f48 <arm_rfft_fast_init_f32+0xbc>
 8009ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed8:	bc30      	pop	{r4, r5}
 8009eda:	4618      	mov	r0, r3
 8009edc:	4770      	bx	lr
 8009ede:	2538      	movs	r5, #56	; 0x38
 8009ee0:	4c2f      	ldr	r4, [pc, #188]	; (8009fa0 <arm_rfft_fast_init_f32+0x114>)
 8009ee2:	4930      	ldr	r1, [pc, #192]	; (8009fa4 <arm_rfft_fast_init_f32+0x118>)
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	4a30      	ldr	r2, [pc, #192]	; (8009fa8 <arm_rfft_fast_init_f32+0x11c>)
 8009ee8:	8185      	strh	r5, [r0, #12]
 8009eea:	6084      	str	r4, [r0, #8]
 8009eec:	6041      	str	r1, [r0, #4]
 8009eee:	6142      	str	r2, [r0, #20]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	bc30      	pop	{r4, r5}
 8009ef4:	4770      	bx	lr
 8009ef6:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8009efa:	4c2c      	ldr	r4, [pc, #176]	; (8009fac <arm_rfft_fast_init_f32+0x120>)
 8009efc:	492c      	ldr	r1, [pc, #176]	; (8009fb0 <arm_rfft_fast_init_f32+0x124>)
 8009efe:	2300      	movs	r3, #0
 8009f00:	4a2c      	ldr	r2, [pc, #176]	; (8009fb4 <arm_rfft_fast_init_f32+0x128>)
 8009f02:	8185      	strh	r5, [r0, #12]
 8009f04:	6084      	str	r4, [r0, #8]
 8009f06:	6041      	str	r1, [r0, #4]
 8009f08:	6142      	str	r2, [r0, #20]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	bc30      	pop	{r4, r5}
 8009f0e:	4770      	bx	lr
 8009f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f14:	d1de      	bne.n	8009ed4 <arm_rfft_fast_init_f32+0x48>
 8009f16:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8009f1a:	4c27      	ldr	r4, [pc, #156]	; (8009fb8 <arm_rfft_fast_init_f32+0x12c>)
 8009f1c:	4927      	ldr	r1, [pc, #156]	; (8009fbc <arm_rfft_fast_init_f32+0x130>)
 8009f1e:	2300      	movs	r3, #0
 8009f20:	4a27      	ldr	r2, [pc, #156]	; (8009fc0 <arm_rfft_fast_init_f32+0x134>)
 8009f22:	8185      	strh	r5, [r0, #12]
 8009f24:	6084      	str	r4, [r0, #8]
 8009f26:	6041      	str	r1, [r0, #4]
 8009f28:	6142      	str	r2, [r0, #20]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	bc30      	pop	{r4, r5}
 8009f2e:	4770      	bx	lr
 8009f30:	2530      	movs	r5, #48	; 0x30
 8009f32:	4c24      	ldr	r4, [pc, #144]	; (8009fc4 <arm_rfft_fast_init_f32+0x138>)
 8009f34:	4924      	ldr	r1, [pc, #144]	; (8009fc8 <arm_rfft_fast_init_f32+0x13c>)
 8009f36:	2300      	movs	r3, #0
 8009f38:	4a24      	ldr	r2, [pc, #144]	; (8009fcc <arm_rfft_fast_init_f32+0x140>)
 8009f3a:	8185      	strh	r5, [r0, #12]
 8009f3c:	6084      	str	r4, [r0, #8]
 8009f3e:	6041      	str	r1, [r0, #4]
 8009f40:	6142      	str	r2, [r0, #20]
 8009f42:	4618      	mov	r0, r3
 8009f44:	bc30      	pop	{r4, r5}
 8009f46:	4770      	bx	lr
 8009f48:	2514      	movs	r5, #20
 8009f4a:	4c21      	ldr	r4, [pc, #132]	; (8009fd0 <arm_rfft_fast_init_f32+0x144>)
 8009f4c:	4921      	ldr	r1, [pc, #132]	; (8009fd4 <arm_rfft_fast_init_f32+0x148>)
 8009f4e:	2300      	movs	r3, #0
 8009f50:	4a21      	ldr	r2, [pc, #132]	; (8009fd8 <arm_rfft_fast_init_f32+0x14c>)
 8009f52:	8185      	strh	r5, [r0, #12]
 8009f54:	6084      	str	r4, [r0, #8]
 8009f56:	6041      	str	r1, [r0, #4]
 8009f58:	6142      	str	r2, [r0, #20]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	bc30      	pop	{r4, r5}
 8009f5e:	4770      	bx	lr
 8009f60:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8009f64:	4c1d      	ldr	r4, [pc, #116]	; (8009fdc <arm_rfft_fast_init_f32+0x150>)
 8009f66:	491e      	ldr	r1, [pc, #120]	; (8009fe0 <arm_rfft_fast_init_f32+0x154>)
 8009f68:	2300      	movs	r3, #0
 8009f6a:	4a1e      	ldr	r2, [pc, #120]	; (8009fe4 <arm_rfft_fast_init_f32+0x158>)
 8009f6c:	8185      	strh	r5, [r0, #12]
 8009f6e:	6084      	str	r4, [r0, #8]
 8009f70:	6041      	str	r1, [r0, #4]
 8009f72:	6142      	str	r2, [r0, #20]
 8009f74:	4618      	mov	r0, r3
 8009f76:	bc30      	pop	{r4, r5}
 8009f78:	4770      	bx	lr
 8009f7a:	25d0      	movs	r5, #208	; 0xd0
 8009f7c:	4c1a      	ldr	r4, [pc, #104]	; (8009fe8 <arm_rfft_fast_init_f32+0x15c>)
 8009f7e:	491b      	ldr	r1, [pc, #108]	; (8009fec <arm_rfft_fast_init_f32+0x160>)
 8009f80:	2300      	movs	r3, #0
 8009f82:	4a1b      	ldr	r2, [pc, #108]	; (8009ff0 <arm_rfft_fast_init_f32+0x164>)
 8009f84:	8185      	strh	r5, [r0, #12]
 8009f86:	6084      	str	r4, [r0, #8]
 8009f88:	6041      	str	r1, [r0, #4]
 8009f8a:	6142      	str	r2, [r0, #20]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	bc30      	pop	{r4, r5}
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	0801d764 	.word	0x0801d764
 8009f98:	0800e95c 	.word	0x0800e95c
 8009f9c:	08014acc 	.word	0x08014acc
 8009fa0:	08012a5c 	.word	0x08012a5c
 8009fa4:	0801f524 	.word	0x0801f524
 8009fa8:	08021a14 	.word	0x08021a14
 8009fac:	0801b44c 	.word	0x0801b44c
 8009fb0:	0801934c 	.word	0x0801934c
 8009fb4:	08012acc 	.word	0x08012acc
 8009fb8:	080216a4 	.word	0x080216a4
 8009fbc:	08018acc 	.word	0x08018acc
 8009fc0:	0801f724 	.word	0x0801f724
 8009fc4:	0801c304 	.word	0x0801c304
 8009fc8:	0801b34c 	.word	0x0801b34c
 8009fcc:	0801295c 	.word	0x0801295c
 8009fd0:	0801c25c 	.word	0x0801c25c
 8009fd4:	080192cc 	.word	0x080192cc
 8009fd8:	0801c284 	.word	0x0801c284
 8009fdc:	0801ff24 	.word	0x0801ff24
 8009fe0:	0801c764 	.word	0x0801c764
 8009fe4:	080202a4 	.word	0x080202a4
 8009fe8:	08021c14 	.word	0x08021c14
 8009fec:	0801c364 	.word	0x0801c364
 8009ff0:	080212a4 	.word	0x080212a4

08009ff4 <arm_rfft_fast_f32>:
 8009ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff8:	8a05      	ldrh	r5, [r0, #16]
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	4617      	mov	r7, r2
 8009ffe:	460c      	mov	r4, r1
 800a000:	086d      	lsrs	r5, r5, #1
 800a002:	8005      	strh	r5, [r0, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d15e      	bne.n	800a0c6 <arm_rfft_fast_f32+0xd2>
 800a008:	461a      	mov	r2, r3
 800a00a:	2301      	movs	r3, #1
 800a00c:	f000 fbde 	bl	800a7cc <arm_cfft_f32>
 800a010:	edd4 7a00 	vldr	s15, [r4]
 800a014:	ed94 7a01 	vldr	s14, [r4, #4]
 800a018:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a01c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a020:	8832      	ldrh	r2, [r6, #0]
 800a022:	ee37 7a07 	vadd.f32	s14, s14, s14
 800a026:	6975      	ldr	r5, [r6, #20]
 800a028:	3a01      	subs	r2, #1
 800a02a:	eeb0 3a46 	vmov.f32	s6, s12
 800a02e:	3510      	adds	r5, #16
 800a030:	f107 0610 	add.w	r6, r7, #16
 800a034:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a038:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800a03c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a040:	f104 0310 	add.w	r3, r4, #16
 800a044:	3808      	subs	r0, #8
 800a046:	ee26 7a86 	vmul.f32	s14, s13, s12
 800a04a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a04e:	ed87 7a00 	vstr	s14, [r7]
 800a052:	edc7 7a01 	vstr	s15, [r7, #4]
 800a056:	ed90 7a02 	vldr	s14, [r0, #8]
 800a05a:	3a01      	subs	r2, #1
 800a05c:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a060:	f1a0 0008 	sub.w	r0, r0, #8
 800a064:	ed15 6a02 	vldr	s12, [r5, #-8]
 800a068:	f103 0308 	add.w	r3, r3, #8
 800a06c:	ee77 7a66 	vsub.f32	s15, s14, s13
 800a070:	edd0 3a05 	vldr	s7, [r0, #20]
 800a074:	ed13 5a03 	vldr	s10, [r3, #-12]
 800a078:	ee77 4a26 	vadd.f32	s9, s14, s13
 800a07c:	ed55 5a01 	vldr	s11, [r5, #-4]
 800a080:	f106 0608 	add.w	r6, r6, #8
 800a084:	ee66 6a27 	vmul.f32	s13, s12, s15
 800a088:	f105 0508 	add.w	r5, r5, #8
 800a08c:	ee33 4a85 	vadd.f32	s8, s7, s10
 800a090:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800a094:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a098:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a09c:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a0a0:	ee77 7a05 	vadd.f32	s15, s14, s10
 800a0a4:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a0a8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a0ac:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800a0b0:	ee67 7a83 	vmul.f32	s15, s15, s6
 800a0b4:	ee27 7a03 	vmul.f32	s14, s14, s6
 800a0b8:	ed46 7a03 	vstr	s15, [r6, #-12]
 800a0bc:	ed06 7a04 	vstr	s14, [r6, #-16]
 800a0c0:	d1c9      	bne.n	800a056 <arm_rfft_fast_f32+0x62>
 800a0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c6:	edd1 7a00 	vldr	s15, [r1]
 800a0ca:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800a0ce:	edd1 6a01 	vldr	s13, [r1, #4]
 800a0d2:	1e68      	subs	r0, r5, #1
 800a0d4:	6975      	ldr	r5, [r6, #20]
 800a0d6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a0da:	00c1      	lsls	r1, r0, #3
 800a0dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a0e0:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a0e4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800a0e8:	ed82 7a00 	vstr	s14, [r2]
 800a0ec:	edc2 7a01 	vstr	s15, [r2, #4]
 800a0f0:	b3e0      	cbz	r0, 800a16c <arm_rfft_fast_f32+0x178>
 800a0f2:	3908      	subs	r1, #8
 800a0f4:	f104 0210 	add.w	r2, r4, #16
 800a0f8:	3510      	adds	r5, #16
 800a0fa:	440c      	add	r4, r1
 800a0fc:	f107 0110 	add.w	r1, r7, #16
 800a100:	ed94 7a02 	vldr	s14, [r4, #8]
 800a104:	3801      	subs	r0, #1
 800a106:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a10a:	f1a4 0408 	sub.w	r4, r4, #8
 800a10e:	ed15 6a02 	vldr	s12, [r5, #-8]
 800a112:	f102 0208 	add.w	r2, r2, #8
 800a116:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800a11a:	ed94 4a05 	vldr	s8, [r4, #20]
 800a11e:	ed12 5a03 	vldr	s10, [r2, #-12]
 800a122:	ee77 6a26 	vadd.f32	s13, s14, s13
 800a126:	ed55 5a01 	vldr	s11, [r5, #-4]
 800a12a:	f101 0108 	add.w	r1, r1, #8
 800a12e:	ee26 3a27 	vmul.f32	s6, s12, s15
 800a132:	f105 0508 	add.w	r5, r5, #8
 800a136:	ee74 4a05 	vadd.f32	s9, s8, s10
 800a13a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800a13e:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a142:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a146:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a14a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800a14e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800a152:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a156:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800a15a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800a15e:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a162:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a166:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a16a:	d1c9      	bne.n	800a100 <arm_rfft_fast_f32+0x10c>
 800a16c:	461a      	mov	r2, r3
 800a16e:	4639      	mov	r1, r7
 800a170:	4630      	mov	r0, r6
 800a172:	2301      	movs	r3, #1
 800a174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a178:	f000 bb28 	b.w	800a7cc <arm_cfft_f32>

0800a17c <arm_cfft_radix8by2_f32>:
 800a17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a180:	4607      	mov	r7, r0
 800a182:	4608      	mov	r0, r1
 800a184:	ed2d 8b06 	vpush	{d8-d10}
 800a188:	f8b7 e000 	ldrh.w	lr, [r7]
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800a192:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800a196:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800a19a:	f000 80b0 	beq.w	800a2fe <arm_cfft_radix8by2_f32+0x182>
 800a19e:	008b      	lsls	r3, r1, #2
 800a1a0:	3210      	adds	r2, #16
 800a1a2:	f100 0610 	add.w	r6, r0, #16
 800a1a6:	f108 0510 	add.w	r5, r8, #16
 800a1aa:	3310      	adds	r3, #16
 800a1ac:	18c4      	adds	r4, r0, r3
 800a1ae:	4443      	add	r3, r8
 800a1b0:	ed55 6a04 	vldr	s13, [r5, #-16]
 800a1b4:	f1be 0e01 	subs.w	lr, lr, #1
 800a1b8:	ed56 4a04 	vldr	s9, [r6, #-16]
 800a1bc:	f104 0410 	add.w	r4, r4, #16
 800a1c0:	ed15 7a03 	vldr	s14, [r5, #-12]
 800a1c4:	f106 0610 	add.w	r6, r6, #16
 800a1c8:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800a1cc:	ed55 7a02 	vldr	s15, [r5, #-8]
 800a1d0:	ed55 2a01 	vldr	s5, [r5, #-4]
 800a1d4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800a1d8:	ed53 0a04 	vldr	s1, [r3, #-16]
 800a1dc:	f102 0210 	add.w	r2, r2, #16
 800a1e0:	ed13 5a03 	vldr	s10, [r3, #-12]
 800a1e4:	f105 0510 	add.w	r5, r5, #16
 800a1e8:	ed13 3a02 	vldr	s6, [r3, #-8]
 800a1ec:	f103 0310 	add.w	r3, r3, #16
 800a1f0:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800a1f4:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800a1f8:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800a1fc:	ee33 8a83 	vadd.f32	s16, s7, s6
 800a200:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800a204:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800a208:	ee34 0a06 	vadd.f32	s0, s8, s12
 800a20c:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 800a210:	ee76 aa87 	vadd.f32	s21, s13, s14
 800a214:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800a218:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a21c:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 800a220:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800a224:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 800a228:	ee71 8a05 	vadd.f32	s17, s2, s10
 800a22c:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800a230:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800a234:	ee72 9a22 	vadd.f32	s19, s4, s5
 800a238:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a23c:	ee35 5a41 	vsub.f32	s10, s10, s2
 800a240:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800a244:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 800a248:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a24c:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 800a250:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800a254:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 800a258:	ee72 7a62 	vsub.f32	s15, s4, s5
 800a25c:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800a260:	ee73 2a63 	vsub.f32	s5, s6, s7
 800a264:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 800a268:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800a26c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800a270:	ee24 3a84 	vmul.f32	s6, s9, s8
 800a274:	ee27 2a26 	vmul.f32	s4, s14, s13
 800a278:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800a27c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800a280:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a284:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a288:	ee65 6a26 	vmul.f32	s13, s10, s13
 800a28c:	ee25 5a04 	vmul.f32	s10, s10, s8
 800a290:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a294:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a298:	ee33 4a02 	vadd.f32	s8, s6, s4
 800a29c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800a2a0:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 800a2a4:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 800a2a8:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800a2ac:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800a2b0:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800a2b4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800a2b8:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800a2bc:	ee27 4a87 	vmul.f32	s8, s15, s14
 800a2c0:	ee61 5a87 	vmul.f32	s11, s3, s14
 800a2c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a2c8:	ee22 5a87 	vmul.f32	s10, s5, s14
 800a2cc:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a2d0:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a2d4:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800a2d8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a2dc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a2e0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a2e4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a2e8:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 800a2ec:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800a2f0:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800a2f4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800a2f8:	f47f af5a 	bne.w	800a1b0 <arm_cfft_radix8by2_f32+0x34>
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	b28c      	uxth	r4, r1
 800a300:	2302      	movs	r3, #2
 800a302:	4621      	mov	r1, r4
 800a304:	f000 fbc2 	bl	800aa8c <arm_radix8_butterfly_f32>
 800a308:	4621      	mov	r1, r4
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	4640      	mov	r0, r8
 800a30e:	2302      	movs	r3, #2
 800a310:	ecbd 8b06 	vpop	{d8-d10}
 800a314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a318:	f000 bbb8 	b.w	800aa8c <arm_radix8_butterfly_f32>

0800a31c <arm_cfft_radix8by4_f32>:
 800a31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a320:	ed2d 8b06 	vpush	{d8-d10}
 800a324:	8804      	ldrh	r4, [r0, #0]
 800a326:	b08f      	sub	sp, #60	; 0x3c
 800a328:	ed91 6a00 	vldr	s12, [r1]
 800a32c:	460a      	mov	r2, r1
 800a32e:	0864      	lsrs	r4, r4, #1
 800a330:	ed91 7a01 	vldr	s14, [r1, #4]
 800a334:	9101      	str	r1, [sp, #4]
 800a336:	00a3      	lsls	r3, r4, #2
 800a338:	6841      	ldr	r1, [r0, #4]
 800a33a:	0864      	lsrs	r4, r4, #1
 800a33c:	900c      	str	r0, [sp, #48]	; 0x30
 800a33e:	9205      	str	r2, [sp, #20]
 800a340:	f101 0610 	add.w	r6, r1, #16
 800a344:	4625      	mov	r5, r4
 800a346:	940b      	str	r4, [sp, #44]	; 0x2c
 800a348:	f101 0408 	add.w	r4, r1, #8
 800a34c:	9602      	str	r6, [sp, #8]
 800a34e:	9407      	str	r4, [sp, #28]
 800a350:	18d4      	adds	r4, r2, r3
 800a352:	1eaa      	subs	r2, r5, #2
 800a354:	f101 0518 	add.w	r5, r1, #24
 800a358:	18e0      	adds	r0, r4, r3
 800a35a:	edd4 4a00 	vldr	s9, [r4]
 800a35e:	ed94 4a01 	vldr	s8, [r4, #4]
 800a362:	46a6      	mov	lr, r4
 800a364:	edd0 6a00 	vldr	s13, [r0]
 800a368:	18c7      	adds	r7, r0, r3
 800a36a:	edd0 7a01 	vldr	s15, [r0, #4]
 800a36e:	46a0      	mov	r8, r4
 800a370:	ee76 5a26 	vadd.f32	s11, s12, s13
 800a374:	ed97 5a00 	vldr	s10, [r7]
 800a378:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a37c:	4604      	mov	r4, r0
 800a37e:	9506      	str	r5, [sp, #24]
 800a380:	4605      	mov	r5, r0
 800a382:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800a386:	900a      	str	r0, [sp, #40]	; 0x28
 800a388:	9801      	ldr	r0, [sp, #4]
 800a38a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a38e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a392:	ed97 3a01 	vldr	s6, [r7, #4]
 800a396:	ee72 2a85 	vadd.f32	s5, s5, s10
 800a39a:	46bc      	mov	ip, r7
 800a39c:	ee76 3a84 	vadd.f32	s7, s13, s8
 800a3a0:	9704      	str	r7, [sp, #16]
 800a3a2:	ee36 7a44 	vsub.f32	s14, s12, s8
 800a3a6:	f8cd e00c 	str.w	lr, [sp, #12]
 800a3aa:	ee12 9a90 	vmov	r9, s5
 800a3ae:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800a3b2:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800a3b6:	1f3e      	subs	r6, r7, #4
 800a3b8:	f840 9b08 	str.w	r9, [r0], #8
 800a3bc:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800a3c0:	edde 2a01 	vldr	s5, [lr, #4]
 800a3c4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800a3c8:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800a3cc:	eddc 4a01 	vldr	s9, [ip, #4]
 800a3d0:	ee36 6a22 	vadd.f32	s12, s12, s5
 800a3d4:	9001      	str	r0, [sp, #4]
 800a3d6:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800a3da:	9805      	ldr	r0, [sp, #20]
 800a3dc:	ee13 9a90 	vmov	r9, s7
 800a3e0:	ee37 7a43 	vsub.f32	s14, s14, s6
 800a3e4:	ee36 6a24 	vadd.f32	s12, s12, s9
 800a3e8:	f1ae 0704 	sub.w	r7, lr, #4
 800a3ec:	ee74 4a05 	vadd.f32	s9, s8, s10
 800a3f0:	ee76 6a83 	vadd.f32	s13, s13, s6
 800a3f4:	ed80 6a01 	vstr	s12, [r0, #4]
 800a3f8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a3fc:	f848 9b08 	str.w	r9, [r8], #8
 800a400:	edce 4a01 	vstr	s9, [lr, #4]
 800a404:	ee15 ea90 	vmov	lr, s11
 800a408:	f844 eb08 	str.w	lr, [r4], #8
 800a40c:	ee16 ea90 	vmov	lr, s13
 800a410:	9408      	str	r4, [sp, #32]
 800a412:	462c      	mov	r4, r5
 800a414:	ed85 7a01 	vstr	s14, [r5, #4]
 800a418:	9d04      	ldr	r5, [sp, #16]
 800a41a:	f84c eb08 	str.w	lr, [ip], #8
 800a41e:	edc5 7a01 	vstr	s15, [r5, #4]
 800a422:	0855      	lsrs	r5, r2, #1
 800a424:	9509      	str	r5, [sp, #36]	; 0x24
 800a426:	f000 8130 	beq.w	800a68a <arm_cfft_radix8by4_f32+0x36e>
 800a42a:	9805      	ldr	r0, [sp, #20]
 800a42c:	3b08      	subs	r3, #8
 800a42e:	46ab      	mov	fp, r5
 800a430:	f1a4 020c 	sub.w	r2, r4, #12
 800a434:	f100 0510 	add.w	r5, r0, #16
 800a438:	f101 0920 	add.w	r9, r1, #32
 800a43c:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800a440:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a444:	4433      	add	r3, r6
 800a446:	3410      	adds	r4, #16
 800a448:	4660      	mov	r0, ip
 800a44a:	4641      	mov	r1, r8
 800a44c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800a450:	ed54 6a02 	vldr	s13, [r4, #-8]
 800a454:	f1bb 0b01 	subs.w	fp, fp, #1
 800a458:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a45c:	f10a 0a08 	add.w	sl, sl, #8
 800a460:	edd1 7a00 	vldr	s15, [r1]
 800a464:	f105 0508 	add.w	r5, r5, #8
 800a468:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800a46c:	edd0 2a00 	vldr	s5, [r0]
 800a470:	ed14 7a01 	vldr	s14, [r4, #-4]
 800a474:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800a478:	ed55 6a03 	vldr	s13, [r5, #-12]
 800a47c:	f1a2 0208 	sub.w	r2, r2, #8
 800a480:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800a484:	ed90 2a01 	vldr	s4, [r0, #4]
 800a488:	ee36 5a87 	vadd.f32	s10, s13, s14
 800a48c:	ed91 6a01 	vldr	s12, [r1, #4]
 800a490:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a494:	f109 0910 	add.w	r9, r9, #16
 800a498:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800a49c:	f104 0408 	add.w	r4, r4, #8
 800a4a0:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800a4a4:	f10e 0e18 	add.w	lr, lr, #24
 800a4a8:	ee37 3a67 	vsub.f32	s6, s14, s15
 800a4ac:	f1a3 0308 	sub.w	r3, r3, #8
 800a4b0:	ed45 6a04 	vstr	s13, [r5, #-16]
 800a4b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4b8:	edd1 6a01 	vldr	s13, [r1, #4]
 800a4bc:	ee75 1a86 	vadd.f32	s3, s11, s12
 800a4c0:	edd0 4a01 	vldr	s9, [r0, #4]
 800a4c4:	ee33 3a22 	vadd.f32	s6, s6, s5
 800a4c8:	ee75 6a26 	vadd.f32	s13, s10, s13
 800a4cc:	ee35 5a46 	vsub.f32	s10, s10, s12
 800a4d0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a4d4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a4d8:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800a4dc:	ee35 5a42 	vsub.f32	s10, s10, s4
 800a4e0:	ed45 6a03 	vstr	s13, [r5, #-12]
 800a4e4:	ee36 2a02 	vadd.f32	s4, s12, s4
 800a4e8:	edd6 7a00 	vldr	s15, [r6]
 800a4ec:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800a4f0:	ed97 1a00 	vldr	s2, [r7]
 800a4f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 800a4f8:	ed92 8a04 	vldr	s16, [r2, #16]
 800a4fc:	ee71 8a27 	vadd.f32	s17, s2, s15
 800a500:	ed93 aa04 	vldr	s20, [r3, #16]
 800a504:	ed16 7a01 	vldr	s14, [r6, #-4]
 800a508:	ee71 7a67 	vsub.f32	s15, s2, s15
 800a50c:	ed57 0a01 	vldr	s1, [r7, #-4]
 800a510:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800a514:	ee38 6a88 	vadd.f32	s12, s17, s16
 800a518:	edd3 9a03 	vldr	s19, [r3, #12]
 800a51c:	ee30 0a87 	vadd.f32	s0, s1, s14
 800a520:	ed92 9a03 	vldr	s18, [r2, #12]
 800a524:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800a528:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800a52c:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800a530:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800a534:	ee16 ca10 	vmov	ip, s12
 800a538:	ee30 6a49 	vsub.f32	s12, s0, s18
 800a53c:	ee77 4a01 	vadd.f32	s9, s14, s2
 800a540:	f847 c908 	str.w	ip, [r7], #-8
 800a544:	ee34 4a29 	vadd.f32	s8, s8, s19
 800a548:	edd2 8a03 	vldr	s17, [r2, #12]
 800a54c:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800a550:	ed93 8a03 	vldr	s16, [r3, #12]
 800a554:	ee71 0a47 	vsub.f32	s1, s2, s14
 800a558:	ee30 0a28 	vadd.f32	s0, s0, s17
 800a55c:	ee39 1a67 	vsub.f32	s2, s18, s15
 800a560:	ee36 6a69 	vsub.f32	s12, s12, s19
 800a564:	ee30 0a08 	vadd.f32	s0, s0, s16
 800a568:	ee75 5aca 	vsub.f32	s11, s11, s20
 800a56c:	ed87 0a01 	vstr	s0, [r7, #4]
 800a570:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800a574:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800a578:	ee21 8a80 	vmul.f32	s16, s3, s0
 800a57c:	ee23 7a26 	vmul.f32	s14, s6, s13
 800a580:	ee64 7a26 	vmul.f32	s15, s8, s13
 800a584:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800a588:	ee24 4a00 	vmul.f32	s8, s8, s0
 800a58c:	ee23 3a00 	vmul.f32	s6, s6, s0
 800a590:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800a594:	ee24 0a80 	vmul.f32	s0, s9, s0
 800a598:	ee38 7a07 	vadd.f32	s14, s16, s14
 800a59c:	ee76 6a84 	vadd.f32	s13, s13, s8
 800a5a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a5a4:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a5a8:	ee17 ca10 	vmov	ip, s14
 800a5ac:	f841 cb08 	str.w	ip, [r1], #8
 800a5b0:	ed01 3a01 	vstr	s6, [r1, #-4]
 800a5b4:	ed82 0a04 	vstr	s0, [r2, #16]
 800a5b8:	edc2 6a03 	vstr	s13, [r2, #12]
 800a5bc:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800a5c0:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800a5c4:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800a5c8:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800a5cc:	ee65 4a27 	vmul.f32	s9, s10, s15
 800a5d0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800a5d4:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800a5d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a5dc:	ee25 5a26 	vmul.f32	s10, s10, s13
 800a5e0:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a5e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5e8:	ee34 6a24 	vadd.f32	s12, s8, s9
 800a5ec:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800a5f0:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a5f4:	ee17 ca90 	vmov	ip, s15
 800a5f8:	ed04 6a04 	vstr	s12, [r4, #-16]
 800a5fc:	ed04 5a03 	vstr	s10, [r4, #-12]
 800a600:	f846 c908 	str.w	ip, [r6], #-8
 800a604:	edc6 6a01 	vstr	s13, [r6, #4]
 800a608:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800a60c:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800a610:	ee62 5a27 	vmul.f32	s11, s4, s15
 800a614:	ee22 6a87 	vmul.f32	s12, s5, s14
 800a618:	ee22 2a07 	vmul.f32	s4, s4, s14
 800a61c:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800a620:	ee61 6a07 	vmul.f32	s13, s2, s14
 800a624:	ee20 7a87 	vmul.f32	s14, s1, s14
 800a628:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a62c:	ee61 7a27 	vmul.f32	s15, s2, s15
 800a630:	ee35 6a86 	vadd.f32	s12, s11, s12
 800a634:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800a638:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800a63c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a640:	ee16 ca10 	vmov	ip, s12
 800a644:	f840 cb08 	str.w	ip, [r0], #8
 800a648:	ed40 2a01 	vstr	s5, [r0, #-4]
 800a64c:	edc3 0a04 	vstr	s1, [r3, #16]
 800a650:	edc3 7a03 	vstr	s15, [r3, #12]
 800a654:	f47f aefc 	bne.w	800a450 <arm_cfft_radix8by4_f32+0x134>
 800a658:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a65a:	9802      	ldr	r0, [sp, #8]
 800a65c:	00cb      	lsls	r3, r1, #3
 800a65e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800a662:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a666:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a66a:	4498      	add	r8, r3
 800a66c:	449c      	add	ip, r3
 800a66e:	9102      	str	r1, [sp, #8]
 800a670:	9901      	ldr	r1, [sp, #4]
 800a672:	4419      	add	r1, r3
 800a674:	9101      	str	r1, [sp, #4]
 800a676:	9907      	ldr	r1, [sp, #28]
 800a678:	4419      	add	r1, r3
 800a67a:	9107      	str	r1, [sp, #28]
 800a67c:	9908      	ldr	r1, [sp, #32]
 800a67e:	4419      	add	r1, r3
 800a680:	9b06      	ldr	r3, [sp, #24]
 800a682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a686:	9108      	str	r1, [sp, #32]
 800a688:	9306      	str	r3, [sp, #24]
 800a68a:	9a01      	ldr	r2, [sp, #4]
 800a68c:	2304      	movs	r3, #4
 800a68e:	9e08      	ldr	r6, [sp, #32]
 800a690:	edd2 7a00 	vldr	s15, [r2]
 800a694:	ed96 7a00 	vldr	s14, [r6]
 800a698:	edd8 2a00 	vldr	s5, [r8]
 800a69c:	ee77 5a87 	vadd.f32	s11, s15, s14
 800a6a0:	ed9c 3a00 	vldr	s6, [ip]
 800a6a4:	ed92 6a01 	vldr	s12, [r2, #4]
 800a6a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a6ac:	edd6 6a01 	vldr	s13, [r6, #4]
 800a6b0:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800a6b4:	ed9c 2a01 	vldr	s4, [ip, #4]
 800a6b8:	ee36 5a26 	vadd.f32	s10, s12, s13
 800a6bc:	edd8 7a01 	vldr	s15, [r8, #4]
 800a6c0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a6c4:	9d02      	ldr	r5, [sp, #8]
 800a6c6:	ee34 6a83 	vadd.f32	s12, s9, s6
 800a6ca:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800a6ce:	ee37 4a27 	vadd.f32	s8, s14, s15
 800a6d2:	9805      	ldr	r0, [sp, #20]
 800a6d4:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800a6d8:	4621      	mov	r1, r4
 800a6da:	ed82 6a00 	vstr	s12, [r2]
 800a6de:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800a6e2:	edd8 3a01 	vldr	s7, [r8, #4]
 800a6e6:	ee75 5a67 	vsub.f32	s11, s10, s15
 800a6ea:	eddc 1a01 	vldr	s3, [ip, #4]
 800a6ee:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a6f2:	ee75 3a23 	vadd.f32	s7, s10, s7
 800a6f6:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a6fa:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800a6fe:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800a702:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a706:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a70a:	ed82 5a01 	vstr	s10, [r2, #4]
 800a70e:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800a712:	9a07      	ldr	r2, [sp, #28]
 800a714:	ee77 7a02 	vadd.f32	s15, s14, s4
 800a718:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800a71c:	edd2 2a00 	vldr	s5, [r2]
 800a720:	ed92 5a01 	vldr	s10, [r2, #4]
 800a724:	ee64 3a22 	vmul.f32	s7, s8, s5
 800a728:	ee24 4a05 	vmul.f32	s8, s8, s10
 800a72c:	ee24 5a85 	vmul.f32	s10, s9, s10
 800a730:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800a734:	ee33 5a85 	vadd.f32	s10, s7, s10
 800a738:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800a73c:	ed88 5a00 	vstr	s10, [r8]
 800a740:	edc8 4a01 	vstr	s9, [r8, #4]
 800a744:	edd5 4a01 	vldr	s9, [r5, #4]
 800a748:	edd5 6a00 	vldr	s13, [r5]
 800a74c:	9d06      	ldr	r5, [sp, #24]
 800a74e:	ee26 5a26 	vmul.f32	s10, s12, s13
 800a752:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a756:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800a75a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800a75e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800a762:	ee75 5a25 	vadd.f32	s11, s10, s11
 800a766:	ed86 6a01 	vstr	s12, [r6, #4]
 800a76a:	edc6 5a00 	vstr	s11, [r6]
 800a76e:	edd5 5a01 	vldr	s11, [r5, #4]
 800a772:	edd5 6a00 	vldr	s13, [r5]
 800a776:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a778:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800a77c:	ee67 6a26 	vmul.f32	s13, s14, s13
 800a780:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a784:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a788:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a78c:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a790:	edcc 7a01 	vstr	s15, [ip, #4]
 800a794:	ed8c 7a00 	vstr	s14, [ip]
 800a798:	6872      	ldr	r2, [r6, #4]
 800a79a:	f000 f977 	bl	800aa8c <arm_radix8_butterfly_f32>
 800a79e:	9803      	ldr	r0, [sp, #12]
 800a7a0:	4621      	mov	r1, r4
 800a7a2:	6872      	ldr	r2, [r6, #4]
 800a7a4:	2304      	movs	r3, #4
 800a7a6:	f000 f971 	bl	800aa8c <arm_radix8_butterfly_f32>
 800a7aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	6872      	ldr	r2, [r6, #4]
 800a7b0:	2304      	movs	r3, #4
 800a7b2:	f000 f96b 	bl	800aa8c <arm_radix8_butterfly_f32>
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	6872      	ldr	r2, [r6, #4]
 800a7ba:	2304      	movs	r3, #4
 800a7bc:	9804      	ldr	r0, [sp, #16]
 800a7be:	b00f      	add	sp, #60	; 0x3c
 800a7c0:	ecbd 8b06 	vpop	{d8-d10}
 800a7c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c8:	f000 b960 	b.w	800aa8c <arm_radix8_butterfly_f32>

0800a7cc <arm_cfft_f32>:
 800a7cc:	2a01      	cmp	r2, #1
 800a7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	4617      	mov	r7, r2
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	4698      	mov	r8, r3
 800a7da:	8805      	ldrh	r5, [r0, #0]
 800a7dc:	d053      	beq.n	800a886 <arm_cfft_f32+0xba>
 800a7de:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a7e2:	d04b      	beq.n	800a87c <arm_cfft_f32+0xb0>
 800a7e4:	d916      	bls.n	800a814 <arm_cfft_f32+0x48>
 800a7e6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800a7ea:	d01a      	beq.n	800a822 <arm_cfft_f32+0x56>
 800a7ec:	d95a      	bls.n	800a8a4 <arm_cfft_f32+0xd8>
 800a7ee:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a7f2:	d043      	beq.n	800a87c <arm_cfft_f32+0xb0>
 800a7f4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a7f8:	d105      	bne.n	800a806 <arm_cfft_f32+0x3a>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	6872      	ldr	r2, [r6, #4]
 800a7fe:	4629      	mov	r1, r5
 800a800:	4620      	mov	r0, r4
 800a802:	f000 f943 	bl	800aa8c <arm_radix8_butterfly_f32>
 800a806:	f1b8 0f00 	cmp.w	r8, #0
 800a80a:	d111      	bne.n	800a830 <arm_cfft_f32+0x64>
 800a80c:	2f01      	cmp	r7, #1
 800a80e:	d016      	beq.n	800a83e <arm_cfft_f32+0x72>
 800a810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a814:	2d20      	cmp	r5, #32
 800a816:	d031      	beq.n	800a87c <arm_cfft_f32+0xb0>
 800a818:	d948      	bls.n	800a8ac <arm_cfft_f32+0xe0>
 800a81a:	2d40      	cmp	r5, #64	; 0x40
 800a81c:	d0ed      	beq.n	800a7fa <arm_cfft_f32+0x2e>
 800a81e:	2d80      	cmp	r5, #128	; 0x80
 800a820:	d1f1      	bne.n	800a806 <arm_cfft_f32+0x3a>
 800a822:	4621      	mov	r1, r4
 800a824:	4630      	mov	r0, r6
 800a826:	f7ff fca9 	bl	800a17c <arm_cfft_radix8by2_f32>
 800a82a:	f1b8 0f00 	cmp.w	r8, #0
 800a82e:	d0ed      	beq.n	800a80c <arm_cfft_f32+0x40>
 800a830:	68b2      	ldr	r2, [r6, #8]
 800a832:	4620      	mov	r0, r4
 800a834:	89b1      	ldrh	r1, [r6, #12]
 800a836:	f7f5 fd03 	bl	8000240 <arm_bitreversal_32>
 800a83a:	2f01      	cmp	r7, #1
 800a83c:	d1e8      	bne.n	800a810 <arm_cfft_f32+0x44>
 800a83e:	ee07 5a90 	vmov	s15, r5
 800a842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a84a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a84e:	2d00      	cmp	r5, #0
 800a850:	d0de      	beq.n	800a810 <arm_cfft_f32+0x44>
 800a852:	f104 0108 	add.w	r1, r4, #8
 800a856:	2300      	movs	r3, #0
 800a858:	ed11 7a02 	vldr	s14, [r1, #-8]
 800a85c:	3301      	adds	r3, #1
 800a85e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a862:	3108      	adds	r1, #8
 800a864:	429d      	cmp	r5, r3
 800a866:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a86a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a86e:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a872:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a876:	d1ef      	bne.n	800a858 <arm_cfft_f32+0x8c>
 800a878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a87c:	4621      	mov	r1, r4
 800a87e:	4630      	mov	r0, r6
 800a880:	f7ff fd4c 	bl	800a31c <arm_cfft_radix8by4_f32>
 800a884:	e7bf      	b.n	800a806 <arm_cfft_f32+0x3a>
 800a886:	b1a5      	cbz	r5, 800a8b2 <arm_cfft_f32+0xe6>
 800a888:	f101 030c 	add.w	r3, r1, #12
 800a88c:	2200      	movs	r2, #0
 800a88e:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a892:	3201      	adds	r2, #1
 800a894:	3308      	adds	r3, #8
 800a896:	eef1 7a67 	vneg.f32	s15, s15
 800a89a:	4295      	cmp	r5, r2
 800a89c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a8a0:	d1f5      	bne.n	800a88e <arm_cfft_f32+0xc2>
 800a8a2:	e79c      	b.n	800a7de <arm_cfft_f32+0x12>
 800a8a4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a8a8:	d0a7      	beq.n	800a7fa <arm_cfft_f32+0x2e>
 800a8aa:	e7ac      	b.n	800a806 <arm_cfft_f32+0x3a>
 800a8ac:	2d10      	cmp	r5, #16
 800a8ae:	d0b8      	beq.n	800a822 <arm_cfft_f32+0x56>
 800a8b0:	e7a9      	b.n	800a806 <arm_cfft_f32+0x3a>
 800a8b2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a8b6:	d896      	bhi.n	800a7e6 <arm_cfft_f32+0x1a>
 800a8b8:	e7ac      	b.n	800a814 <arm_cfft_f32+0x48>
 800a8ba:	bf00      	nop

0800a8bc <arm_cmplx_mag_f32>:
 800a8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c0:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	d07f      	beq.n	800a9c8 <arm_cmplx_mag_f32+0x10c>
 800a8c8:	f100 0420 	add.w	r4, r0, #32
 800a8cc:	f101 0510 	add.w	r5, r1, #16
 800a8d0:	4646      	mov	r6, r8
 800a8d2:	2700      	movs	r7, #0
 800a8d4:	e05a      	b.n	800a98c <arm_cmplx_mag_f32+0xd0>
 800a8d6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a8da:	eeb4 0a40 	vcmp.f32	s0, s0
 800a8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8e2:	f040 80a4 	bne.w	800aa2e <arm_cmplx_mag_f32+0x172>
 800a8e6:	ed05 0a04 	vstr	s0, [r5, #-16]
 800a8ea:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800a8ee:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800a8f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a8f6:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a8fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a8fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a906:	f2c0 808f 	blt.w	800aa28 <arm_cmplx_mag_f32+0x16c>
 800a90a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a90e:	eeb4 0a40 	vcmp.f32	s0, s0
 800a912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a916:	f040 80af 	bne.w	800aa78 <arm_cmplx_mag_f32+0x1bc>
 800a91a:	ed05 0a03 	vstr	s0, [r5, #-12]
 800a91e:	ed54 7a04 	vldr	s15, [r4, #-16]
 800a922:	ed14 0a03 	vldr	s0, [r4, #-12]
 800a926:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a92a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a92e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a932:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a93a:	db72      	blt.n	800aa22 <arm_cmplx_mag_f32+0x166>
 800a93c:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a940:	eeb4 0a40 	vcmp.f32	s0, s0
 800a944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a948:	f040 808c 	bne.w	800aa64 <arm_cmplx_mag_f32+0x1a8>
 800a94c:	ed05 0a02 	vstr	s0, [r5, #-8]
 800a950:	ed54 7a02 	vldr	s15, [r4, #-8]
 800a954:	ed14 0a01 	vldr	s0, [r4, #-4]
 800a958:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a95c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a960:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a964:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a96c:	db20      	blt.n	800a9b0 <arm_cmplx_mag_f32+0xf4>
 800a96e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a972:	eeb4 0a40 	vcmp.f32	s0, s0
 800a976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a97a:	d169      	bne.n	800aa50 <arm_cmplx_mag_f32+0x194>
 800a97c:	3e01      	subs	r6, #1
 800a97e:	ed05 0a01 	vstr	s0, [r5, #-4]
 800a982:	f104 0420 	add.w	r4, r4, #32
 800a986:	f105 0510 	add.w	r5, r5, #16
 800a98a:	d019      	beq.n	800a9c0 <arm_cmplx_mag_f32+0x104>
 800a98c:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800a990:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800a994:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a998:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a99c:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a9a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9a8:	da95      	bge.n	800a8d6 <arm_cmplx_mag_f32+0x1a>
 800a9aa:	f845 7c10 	str.w	r7, [r5, #-16]
 800a9ae:	e79c      	b.n	800a8ea <arm_cmplx_mag_f32+0x2e>
 800a9b0:	3e01      	subs	r6, #1
 800a9b2:	f845 7c04 	str.w	r7, [r5, #-4]
 800a9b6:	f104 0420 	add.w	r4, r4, #32
 800a9ba:	f105 0510 	add.w	r5, r5, #16
 800a9be:	d1e5      	bne.n	800a98c <arm_cmplx_mag_f32+0xd0>
 800a9c0:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800a9c4:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800a9c8:	f012 0503 	ands.w	r5, r2, #3
 800a9cc:	d026      	beq.n	800aa1c <arm_cmplx_mag_f32+0x160>
 800a9ce:	f100 0408 	add.w	r4, r0, #8
 800a9d2:	2600      	movs	r6, #0
 800a9d4:	e00c      	b.n	800a9f0 <arm_cmplx_mag_f32+0x134>
 800a9d6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a9da:	eeb4 0a40 	vcmp.f32	s0, s0
 800a9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e2:	d12e      	bne.n	800aa42 <arm_cmplx_mag_f32+0x186>
 800a9e4:	3d01      	subs	r5, #1
 800a9e6:	ed01 0a01 	vstr	s0, [r1, #-4]
 800a9ea:	f104 0408 	add.w	r4, r4, #8
 800a9ee:	d015      	beq.n	800aa1c <arm_cmplx_mag_f32+0x160>
 800a9f0:	ed54 7a02 	vldr	s15, [r4, #-8]
 800a9f4:	3104      	adds	r1, #4
 800a9f6:	ed14 0a01 	vldr	s0, [r4, #-4]
 800a9fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a9fe:	ee20 0a00 	vmul.f32	s0, s0, s0
 800aa02:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa0e:	dae2      	bge.n	800a9d6 <arm_cmplx_mag_f32+0x11a>
 800aa10:	3d01      	subs	r5, #1
 800aa12:	f841 6c04 	str.w	r6, [r1, #-4]
 800aa16:	f104 0408 	add.w	r4, r4, #8
 800aa1a:	d1e9      	bne.n	800a9f0 <arm_cmplx_mag_f32+0x134>
 800aa1c:	b004      	add	sp, #16
 800aa1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa22:	f845 7c08 	str.w	r7, [r5, #-8]
 800aa26:	e793      	b.n	800a950 <arm_cmplx_mag_f32+0x94>
 800aa28:	f845 7c0c 	str.w	r7, [r5, #-12]
 800aa2c:	e777      	b.n	800a91e <arm_cmplx_mag_f32+0x62>
 800aa2e:	eeb0 0a67 	vmov.f32	s0, s15
 800aa32:	9203      	str	r2, [sp, #12]
 800aa34:	9102      	str	r1, [sp, #8]
 800aa36:	9001      	str	r0, [sp, #4]
 800aa38:	f000 fbb6 	bl	800b1a8 <sqrtf>
 800aa3c:	a801      	add	r0, sp, #4
 800aa3e:	c807      	ldmia	r0, {r0, r1, r2}
 800aa40:	e751      	b.n	800a8e6 <arm_cmplx_mag_f32+0x2a>
 800aa42:	eeb0 0a67 	vmov.f32	s0, s15
 800aa46:	9101      	str	r1, [sp, #4]
 800aa48:	f000 fbae 	bl	800b1a8 <sqrtf>
 800aa4c:	9901      	ldr	r1, [sp, #4]
 800aa4e:	e7c9      	b.n	800a9e4 <arm_cmplx_mag_f32+0x128>
 800aa50:	eeb0 0a67 	vmov.f32	s0, s15
 800aa54:	9203      	str	r2, [sp, #12]
 800aa56:	9102      	str	r1, [sp, #8]
 800aa58:	9001      	str	r0, [sp, #4]
 800aa5a:	f000 fba5 	bl	800b1a8 <sqrtf>
 800aa5e:	a801      	add	r0, sp, #4
 800aa60:	c807      	ldmia	r0, {r0, r1, r2}
 800aa62:	e78b      	b.n	800a97c <arm_cmplx_mag_f32+0xc0>
 800aa64:	eeb0 0a67 	vmov.f32	s0, s15
 800aa68:	9203      	str	r2, [sp, #12]
 800aa6a:	9102      	str	r1, [sp, #8]
 800aa6c:	9001      	str	r0, [sp, #4]
 800aa6e:	f000 fb9b 	bl	800b1a8 <sqrtf>
 800aa72:	a801      	add	r0, sp, #4
 800aa74:	c807      	ldmia	r0, {r0, r1, r2}
 800aa76:	e769      	b.n	800a94c <arm_cmplx_mag_f32+0x90>
 800aa78:	eeb0 0a67 	vmov.f32	s0, s15
 800aa7c:	9203      	str	r2, [sp, #12]
 800aa7e:	9102      	str	r1, [sp, #8]
 800aa80:	9001      	str	r0, [sp, #4]
 800aa82:	f000 fb91 	bl	800b1a8 <sqrtf>
 800aa86:	a801      	add	r0, sp, #4
 800aa88:	c807      	ldmia	r0, {r0, r1, r2}
 800aa8a:	e746      	b.n	800a91a <arm_cmplx_mag_f32+0x5e>

0800aa8c <arm_radix8_butterfly_f32>:
 800aa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa90:	469e      	mov	lr, r3
 800aa92:	4603      	mov	r3, r0
 800aa94:	468a      	mov	sl, r1
 800aa96:	468b      	mov	fp, r1
 800aa98:	3304      	adds	r3, #4
 800aa9a:	ed2d 8b10 	vpush	{d8-d15}
 800aa9e:	469c      	mov	ip, r3
 800aaa0:	b09d      	sub	sp, #116	; 0x74
 800aaa2:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 800adb0 <arm_radix8_butterfly_f32+0x324>
 800aaa6:	9019      	str	r0, [sp, #100]	; 0x64
 800aaa8:	921a      	str	r2, [sp, #104]	; 0x68
 800aaaa:	931b      	str	r3, [sp, #108]	; 0x6c
 800aaac:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800aab0:	f04f 0800 	mov.w	r8, #0
 800aab4:	461a      	mov	r2, r3
 800aab6:	9311      	str	r3, [sp, #68]	; 0x44
 800aab8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aabc:	4611      	mov	r1, r2
 800aabe:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	0053      	lsls	r3, r2, #1
 800aac6:	18d5      	adds	r5, r2, r3
 800aac8:	9301      	str	r3, [sp, #4]
 800aaca:	0113      	lsls	r3, r2, #4
 800aacc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aace:	194c      	adds	r4, r1, r5
 800aad0:	eb02 0609 	add.w	r6, r2, r9
 800aad4:	9302      	str	r3, [sp, #8]
 800aad6:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800aada:	4613      	mov	r3, r2
 800aadc:	190a      	adds	r2, r1, r4
 800aade:	eb06 0709 	add.w	r7, r6, r9
 800aae2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800aae6:	1888      	adds	r0, r1, r2
 800aae8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800aaec:	4401      	add	r1, r0
 800aaee:	3204      	adds	r2, #4
 800aaf0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800aaf4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800aaf8:	9b00      	ldr	r3, [sp, #0]
 800aafa:	3104      	adds	r1, #4
 800aafc:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800ab00:	44d8      	add	r8, fp
 800ab02:	ed90 7a00 	vldr	s14, [r0]
 800ab06:	ed94 5a00 	vldr	s10, [r4]
 800ab0a:	45c2      	cmp	sl, r8
 800ab0c:	edd7 3a00 	vldr	s7, [r7]
 800ab10:	ed96 6a00 	vldr	s12, [r6]
 800ab14:	ee37 1a85 	vadd.f32	s2, s15, s10
 800ab18:	ed52 6a01 	vldr	s13, [r2, #-4]
 800ab1c:	ee73 4a87 	vadd.f32	s9, s7, s14
 800ab20:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800ab24:	edd5 7a00 	vldr	s15, [r5]
 800ab28:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800ab2c:	ed11 7a01 	vldr	s14, [r1, #-4]
 800ab30:	ee36 2a26 	vadd.f32	s4, s12, s13
 800ab34:	ee37 4a87 	vadd.f32	s8, s15, s14
 800ab38:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ab3c:	ee71 5a24 	vadd.f32	s11, s2, s9
 800ab40:	ee32 6a04 	vadd.f32	s12, s4, s8
 800ab44:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ab48:	ee31 1a64 	vsub.f32	s2, s2, s9
 800ab4c:	ee75 4a86 	vadd.f32	s9, s11, s12
 800ab50:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800ab54:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800ab58:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800ab5c:	ee32 2a44 	vsub.f32	s4, s4, s8
 800ab60:	ee67 7a89 	vmul.f32	s15, s15, s18
 800ab64:	ed94 0a01 	vldr	s0, [r4, #4]
 800ab68:	edc4 5a00 	vstr	s11, [r4]
 800ab6c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ab70:	edd6 5a01 	vldr	s11, [r6, #4]
 800ab74:	edd5 2a01 	vldr	s5, [r5, #4]
 800ab78:	ee75 1a27 	vadd.f32	s3, s10, s15
 800ab7c:	ed92 4a00 	vldr	s8, [r2]
 800ab80:	ee75 7a67 	vsub.f32	s15, s10, s15
 800ab84:	edd1 4a00 	vldr	s9, [r1]
 800ab88:	ee27 7a09 	vmul.f32	s14, s14, s18
 800ab8c:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800ab90:	ed9c 6a00 	vldr	s12, [ip]
 800ab94:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800ab98:	edd0 0a01 	vldr	s1, [r0, #4]
 800ab9c:	ed97 5a01 	vldr	s10, [r7, #4]
 800aba0:	ee35 4a84 	vadd.f32	s8, s11, s8
 800aba4:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800aba8:	ee73 5a26 	vadd.f32	s11, s6, s13
 800abac:	ee76 2a00 	vadd.f32	s5, s12, s0
 800abb0:	ee73 6a66 	vsub.f32	s13, s6, s13
 800abb4:	ee36 6a40 	vsub.f32	s12, s12, s0
 800abb8:	ee35 0a20 	vadd.f32	s0, s10, s1
 800abbc:	ee65 5a89 	vmul.f32	s11, s11, s18
 800abc0:	ee35 5a60 	vsub.f32	s10, s10, s1
 800abc4:	ee32 3a80 	vadd.f32	s6, s5, s0
 800abc8:	ee74 0a24 	vadd.f32	s1, s8, s9
 800abcc:	ee66 6a89 	vmul.f32	s13, s13, s18
 800abd0:	ee74 4a64 	vsub.f32	s9, s8, s9
 800abd4:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800abd8:	ee75 2a25 	vadd.f32	s5, s10, s11
 800abdc:	ee33 0a20 	vadd.f32	s0, s6, s1
 800abe0:	ee75 5a65 	vsub.f32	s11, s10, s11
 800abe4:	ee33 3a60 	vsub.f32	s6, s6, s1
 800abe8:	ee36 5a26 	vadd.f32	s10, s12, s13
 800abec:	ed8c 0a00 	vstr	s0, [ip]
 800abf0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800abf4:	449c      	add	ip, r3
 800abf6:	ee33 6a87 	vadd.f32	s12, s7, s14
 800abfa:	ed84 3a01 	vstr	s6, [r4, #4]
 800abfe:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800ac02:	441c      	add	r4, r3
 800ac04:	ee71 3a24 	vadd.f32	s7, s2, s9
 800ac08:	ee71 4a64 	vsub.f32	s9, s2, s9
 800ac0c:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800ac10:	edc7 3a00 	vstr	s7, [r7]
 800ac14:	ee34 1a42 	vsub.f32	s2, s8, s4
 800ac18:	edc0 4a00 	vstr	s9, [r0]
 800ac1c:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800ac20:	ee75 4a46 	vsub.f32	s9, s10, s12
 800ac24:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ac28:	ed87 1a01 	vstr	s2, [r7, #4]
 800ac2c:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800ac30:	441f      	add	r7, r3
 800ac32:	ee32 4a04 	vadd.f32	s8, s4, s8
 800ac36:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800ac3a:	ee36 6a05 	vadd.f32	s12, s12, s10
 800ac3e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ac42:	ed80 4a01 	vstr	s8, [r0, #4]
 800ac46:	ed86 3a00 	vstr	s6, [r6]
 800ac4a:	4418      	add	r0, r3
 800ac4c:	ed41 1a01 	vstr	s3, [r1, #-4]
 800ac50:	ed42 3a01 	vstr	s7, [r2, #-4]
 800ac54:	edc5 7a00 	vstr	s15, [r5]
 800ac58:	edc6 4a01 	vstr	s9, [r6, #4]
 800ac5c:	441e      	add	r6, r3
 800ac5e:	ed81 6a00 	vstr	s12, [r1]
 800ac62:	4419      	add	r1, r3
 800ac64:	edc2 5a00 	vstr	s11, [r2]
 800ac68:	441a      	add	r2, r3
 800ac6a:	ed85 7a01 	vstr	s14, [r5, #4]
 800ac6e:	441d      	add	r5, r3
 800ac70:	f63f af44 	bhi.w	800aafc <arm_radix8_butterfly_f32+0x70>
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac78:	2b07      	cmp	r3, #7
 800ac7a:	f240 81f4 	bls.w	800b066 <arm_radix8_butterfly_f32+0x5da>
 800ac7e:	9901      	ldr	r1, [sp, #4]
 800ac80:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800ac84:	9d02      	ldr	r5, [sp, #8]
 800ac86:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800ac8a:	3101      	adds	r1, #1
 800ac8c:	eb04 000e 	add.w	r0, r4, lr
 800ac90:	00e4      	lsls	r4, r4, #3
 800ac92:	3508      	adds	r5, #8
 800ac94:	4419      	add	r1, r3
 800ac96:	eb00 0c0e 	add.w	ip, r0, lr
 800ac9a:	9413      	str	r4, [sp, #76]	; 0x4c
 800ac9c:	00c0      	lsls	r0, r0, #3
 800ac9e:	185e      	adds	r6, r3, r1
 800aca0:	4617      	mov	r7, r2
 800aca2:	9218      	str	r2, [sp, #96]	; 0x60
 800aca4:	f109 0908 	add.w	r9, r9, #8
 800aca8:	199c      	adds	r4, r3, r6
 800acaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800acae:	9012      	str	r0, [sp, #72]	; 0x48
 800acb0:	195d      	adds	r5, r3, r5
 800acb2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800acb4:	443a      	add	r2, r7
 800acb6:	950c      	str	r5, [sp, #48]	; 0x30
 800acb8:	4698      	mov	r8, r3
 800acba:	4420      	add	r0, r4
 800acbc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800acbe:	19d7      	adds	r7, r2, r7
 800acc0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800acc4:	4405      	add	r5, r0
 800acc6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800acca:	9710      	str	r7, [sp, #64]	; 0x40
 800accc:	eb0c 070e 	add.w	r7, ip, lr
 800acd0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800acd4:	3404      	adds	r4, #4
 800acd6:	3004      	adds	r0, #4
 800acd8:	44c8      	add	r8, r9
 800acda:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800acde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ace0:	940a      	str	r4, [sp, #40]	; 0x28
 800ace2:	9009      	str	r0, [sp, #36]	; 0x24
 800ace4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ace8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800acea:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800acee:	9815      	ldr	r0, [sp, #84]	; 0x54
 800acf0:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800acf4:	eb07 080e 	add.w	r8, r7, lr
 800acf8:	eb04 0900 	add.w	r9, r4, r0
 800acfc:	00f8      	lsls	r0, r7, #3
 800acfe:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800ad02:	3504      	adds	r5, #4
 800ad04:	4607      	mov	r7, r0
 800ad06:	9017      	str	r0, [sp, #92]	; 0x5c
 800ad08:	910b      	str	r1, [sp, #44]	; 0x2c
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800ad10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad12:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800ad16:	18e3      	adds	r3, r4, r3
 800ad18:	9508      	str	r5, [sp, #32]
 800ad1a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ad1c:	910e      	str	r1, [sp, #56]	; 0x38
 800ad1e:	4621      	mov	r1, r4
 800ad20:	eb04 0805 	add.w	r8, r4, r5
 800ad24:	9304      	str	r3, [sp, #16]
 800ad26:	19e5      	adds	r5, r4, r7
 800ad28:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800ad2c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ad2e:	9316      	str	r3, [sp, #88]	; 0x58
 800ad30:	190b      	adds	r3, r1, r4
 800ad32:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ad34:	9505      	str	r5, [sp, #20]
 800ad36:	9303      	str	r3, [sp, #12]
 800ad38:	f100 0308 	add.w	r3, r0, #8
 800ad3c:	9707      	str	r7, [sp, #28]
 800ad3e:	4638      	mov	r0, r7
 800ad40:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad42:	2301      	movs	r3, #1
 800ad44:	9306      	str	r3, [sp, #24]
 800ad46:	9b00      	ldr	r3, [sp, #0]
 800ad48:	ed90 fa00 	vldr	s30, [r0]
 800ad4c:	edd0 ba01 	vldr	s23, [r0, #4]
 800ad50:	9803      	ldr	r0, [sp, #12]
 800ad52:	9903      	ldr	r1, [sp, #12]
 800ad54:	ed90 ba01 	vldr	s22, [r0, #4]
 800ad58:	9804      	ldr	r0, [sp, #16]
 800ad5a:	edd1 ea00 	vldr	s29, [r1]
 800ad5e:	edd0 aa01 	vldr	s21, [r0, #4]
 800ad62:	9805      	ldr	r0, [sp, #20]
 800ad64:	9905      	ldr	r1, [sp, #20]
 800ad66:	edd0 7a01 	vldr	s15, [r0, #4]
 800ad6a:	ed91 da00 	vldr	s26, [r1]
 800ad6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ad70:	9c04      	ldr	r4, [sp, #16]
 800ad72:	edcd 7a01 	vstr	s15, [sp, #4]
 800ad76:	edd8 7a01 	vldr	s15, [r8, #4]
 800ad7a:	9100      	str	r1, [sp, #0]
 800ad7c:	edd2 fa00 	vldr	s31, [r2]
 800ad80:	ed94 ea00 	vldr	s28, [r4]
 800ad84:	ed92 ca01 	vldr	s24, [r2, #4]
 800ad88:	f8dd e020 	ldr.w	lr, [sp, #32]
 800ad8c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ad8e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ad90:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ad92:	edd9 da00 	vldr	s27, [r9]
 800ad96:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ad98:	edd8 ca00 	vldr	s25, [r8]
 800ad9c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ad9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ada0:	f8dd c018 	ldr.w	ip, [sp, #24]
 800ada4:	ed99 aa01 	vldr	s20, [r9, #4]
 800ada8:	edcd 7a02 	vstr	s15, [sp, #8]
 800adac:	9800      	ldr	r0, [sp, #0]
 800adae:	e001      	b.n	800adb4 <arm_radix8_butterfly_f32+0x328>
 800adb0:	3f3504f3 	.word	0x3f3504f3
 800adb4:	edd5 3a00 	vldr	s7, [r5]
 800adb8:	44dc      	add	ip, fp
 800adba:	ed91 7a00 	vldr	s14, [r1]
 800adbe:	edd4 8a00 	vldr	s17, [r4]
 800adc2:	45e2      	cmp	sl, ip
 800adc4:	ed57 7a01 	vldr	s15, [r7, #-4]
 800adc8:	ed90 5a00 	vldr	s10, [r0]
 800adcc:	ed56 5a01 	vldr	s11, [r6, #-4]
 800add0:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800add4:	ed92 1a00 	vldr	s2, [r2]
 800add8:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800addc:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800ade0:	ee75 9a25 	vadd.f32	s19, s10, s11
 800ade4:	ee31 3a07 	vadd.f32	s6, s2, s14
 800ade8:	ed92 8a01 	vldr	s16, [r2, #4]
 800adec:	ee73 6a84 	vadd.f32	s13, s7, s8
 800adf0:	ee75 5a65 	vsub.f32	s11, s10, s11
 800adf4:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800adf8:	ee73 1a06 	vadd.f32	s3, s6, s12
 800adfc:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800ae00:	ee75 7a84 	vadd.f32	s15, s11, s8
 800ae04:	ee31 1a47 	vsub.f32	s2, s2, s14
 800ae08:	ee31 7a85 	vadd.f32	s14, s3, s10
 800ae0c:	ee67 7a89 	vmul.f32	s15, s15, s18
 800ae10:	ee33 3a46 	vsub.f32	s6, s6, s12
 800ae14:	ed82 7a00 	vstr	s14, [r2]
 800ae18:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800ae1c:	ed96 6a00 	vldr	s12, [r6]
 800ae20:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800ae24:	edd5 3a01 	vldr	s7, [r5, #4]
 800ae28:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800ae2c:	ed90 7a01 	vldr	s14, [r0, #4]
 800ae30:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800ae34:	edde 4a00 	vldr	s9, [lr]
 800ae38:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800ae3c:	ee77 2a46 	vsub.f32	s5, s14, s12
 800ae40:	edd1 6a01 	vldr	s13, [r1, #4]
 800ae44:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800ae48:	edd7 0a00 	vldr	s1, [r7]
 800ae4c:	ee77 5a06 	vadd.f32	s11, s14, s12
 800ae50:	ed94 7a01 	vldr	s14, [r4, #4]
 800ae54:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800ae58:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800ae5c:	ee78 4a66 	vsub.f32	s9, s16, s13
 800ae60:	ee78 3a26 	vadd.f32	s7, s16, s13
 800ae64:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800ae68:	ee77 6a20 	vadd.f32	s13, s14, s1
 800ae6c:	ee24 4a09 	vmul.f32	s8, s8, s18
 800ae70:	ee37 7a60 	vsub.f32	s14, s14, s1
 800ae74:	ee20 8a09 	vmul.f32	s16, s0, s18
 800ae78:	ee75 0a86 	vadd.f32	s1, s11, s12
 800ae7c:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800ae80:	ee62 2a89 	vmul.f32	s5, s5, s18
 800ae84:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800ae88:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800ae8c:	ee77 7a62 	vsub.f32	s15, s14, s5
 800ae90:	ee74 5a88 	vadd.f32	s11, s9, s16
 800ae94:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800ae98:	ee77 4a22 	vadd.f32	s9, s14, s5
 800ae9c:	ee71 2a04 	vadd.f32	s5, s2, s8
 800aea0:	ee31 7a44 	vsub.f32	s14, s2, s8
 800aea4:	ee30 1a60 	vsub.f32	s2, s0, s1
 800aea8:	ee73 1a06 	vadd.f32	s3, s6, s12
 800aeac:	ee33 6a46 	vsub.f32	s12, s6, s12
 800aeb0:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800aeb4:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800aeb8:	ee38 4a68 	vsub.f32	s8, s16, s17
 800aebc:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800aec0:	ee72 5a25 	vadd.f32	s11, s4, s11
 800aec4:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800aec8:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800aecc:	ee77 2a27 	vadd.f32	s5, s14, s15
 800aed0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aed4:	ee78 7a88 	vadd.f32	s15, s17, s16
 800aed8:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800aedc:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800aee0:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800aee4:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800aee8:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800aeec:	ee70 0a20 	vadd.f32	s1, s0, s1
 800aef0:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800aef4:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800aef8:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800aefc:	edc2 0a01 	vstr	s1, [r2, #4]
 800af00:	ee38 8a88 	vadd.f32	s16, s17, s16
 800af04:	441a      	add	r2, r3
 800af06:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800af0a:	ee31 5a45 	vsub.f32	s10, s2, s10
 800af0e:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800af12:	ed81 8a00 	vstr	s16, [r1]
 800af16:	ee39 0a80 	vadd.f32	s0, s19, s0
 800af1a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800af1e:	ed81 5a01 	vstr	s10, [r1, #4]
 800af22:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800af26:	edcd 3a00 	vstr	s7, [sp]
 800af2a:	ed9d 5a02 	vldr	s10, [sp, #8]
 800af2e:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800af32:	eddd 3a01 	vldr	s7, [sp, #4]
 800af36:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800af3a:	ed84 0a00 	vstr	s0, [r4]
 800af3e:	ee65 4a24 	vmul.f32	s9, s10, s9
 800af42:	ed84 3a01 	vstr	s6, [r4, #4]
 800af46:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800af4a:	ee23 6a86 	vmul.f32	s12, s7, s12
 800af4e:	eddd 3a00 	vldr	s7, [sp]
 800af52:	ee25 5a25 	vmul.f32	s10, s10, s11
 800af56:	4419      	add	r1, r3
 800af58:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800af5c:	441c      	add	r4, r3
 800af5e:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800af62:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800af66:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800af6a:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800af6e:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800af72:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800af76:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800af7a:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800af7e:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800af82:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800af86:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800af8a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800af8e:	ee38 8a01 	vadd.f32	s16, s16, s2
 800af92:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800af96:	ee39 5a85 	vadd.f32	s10, s19, s10
 800af9a:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800af9e:	ed07 8a01 	vstr	s16, [r7, #-4]
 800afa2:	ee30 0a21 	vadd.f32	s0, s0, s3
 800afa6:	ed87 6a00 	vstr	s12, [r7]
 800afaa:	ee74 2a62 	vsub.f32	s5, s8, s5
 800afae:	edc0 0a00 	vstr	s1, [r0]
 800afb2:	ee33 3a28 	vadd.f32	s6, s6, s17
 800afb6:	edc0 3a01 	vstr	s7, [r0, #4]
 800afba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800afbe:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800afc2:	edce 4a00 	vstr	s9, [lr]
 800afc6:	4418      	add	r0, r3
 800afc8:	ed06 0a01 	vstr	s0, [r6, #-4]
 800afcc:	441f      	add	r7, r3
 800afce:	edc6 2a00 	vstr	s5, [r6]
 800afd2:	449e      	add	lr, r3
 800afd4:	ed85 3a00 	vstr	s6, [r5]
 800afd8:	441e      	add	r6, r3
 800afda:	ed85 7a01 	vstr	s14, [r5, #4]
 800afde:	441d      	add	r5, r3
 800afe0:	f63f aee8 	bhi.w	800adb4 <arm_radix8_butterfly_f32+0x328>
 800afe4:	9a06      	ldr	r2, [sp, #24]
 800afe6:	9816      	ldr	r0, [sp, #88]	; 0x58
 800afe8:	3201      	adds	r2, #1
 800afea:	4611      	mov	r1, r2
 800afec:	9206      	str	r2, [sp, #24]
 800afee:	9a07      	ldr	r2, [sp, #28]
 800aff0:	4402      	add	r2, r0
 800aff2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800aff4:	9207      	str	r2, [sp, #28]
 800aff6:	9a03      	ldr	r2, [sp, #12]
 800aff8:	4402      	add	r2, r0
 800affa:	9812      	ldr	r0, [sp, #72]	; 0x48
 800affc:	9203      	str	r2, [sp, #12]
 800affe:	9a04      	ldr	r2, [sp, #16]
 800b000:	4402      	add	r2, r0
 800b002:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b004:	9204      	str	r2, [sp, #16]
 800b006:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b008:	4491      	add	r9, r2
 800b00a:	9a05      	ldr	r2, [sp, #20]
 800b00c:	4402      	add	r2, r0
 800b00e:	9205      	str	r2, [sp, #20]
 800b010:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b012:	4490      	add	r8, r2
 800b014:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b016:	3208      	adds	r2, #8
 800b018:	920f      	str	r2, [sp, #60]	; 0x3c
 800b01a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b01c:	3208      	adds	r2, #8
 800b01e:	920e      	str	r2, [sp, #56]	; 0x38
 800b020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b022:	3208      	adds	r2, #8
 800b024:	920d      	str	r2, [sp, #52]	; 0x34
 800b026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b028:	3208      	adds	r2, #8
 800b02a:	920c      	str	r2, [sp, #48]	; 0x30
 800b02c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b02e:	3208      	adds	r2, #8
 800b030:	920b      	str	r2, [sp, #44]	; 0x2c
 800b032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b034:	3208      	adds	r2, #8
 800b036:	920a      	str	r2, [sp, #40]	; 0x28
 800b038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b03a:	3208      	adds	r2, #8
 800b03c:	9209      	str	r2, [sp, #36]	; 0x24
 800b03e:	9a08      	ldr	r2, [sp, #32]
 800b040:	3208      	adds	r2, #8
 800b042:	9208      	str	r2, [sp, #32]
 800b044:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800b046:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b048:	4622      	mov	r2, r4
 800b04a:	4288      	cmp	r0, r1
 800b04c:	d005      	beq.n	800b05a <arm_radix8_butterfly_f32+0x5ce>
 800b04e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b050:	4621      	mov	r1, r4
 800b052:	4401      	add	r1, r0
 800b054:	9807      	ldr	r0, [sp, #28]
 800b056:	9110      	str	r1, [sp, #64]	; 0x40
 800b058:	e676      	b.n	800ad48 <arm_radix8_butterfly_f32+0x2bc>
 800b05a:	4683      	mov	fp, r0
 800b05c:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800b060:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800b064:	e522      	b.n	800aaac <arm_radix8_butterfly_f32+0x20>
 800b066:	b01d      	add	sp, #116	; 0x74
 800b068:	ecbd 8b10 	vpop	{d8-d15}
 800b06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b070 <atan2>:
 800b070:	f000 b982 	b.w	800b378 <__ieee754_atan2>
 800b074:	0000      	movs	r0, r0
	...

0800b078 <cos>:
 800b078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b07a:	eeb0 7b40 	vmov.f64	d7, d0
 800b07e:	ee17 3a90 	vmov	r3, s15
 800b082:	4a21      	ldr	r2, [pc, #132]	; (800b108 <cos+0x90>)
 800b084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b088:	4293      	cmp	r3, r2
 800b08a:	dc06      	bgt.n	800b09a <cos+0x22>
 800b08c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800b100 <cos+0x88>
 800b090:	b005      	add	sp, #20
 800b092:	f85d eb04 	ldr.w	lr, [sp], #4
 800b096:	f000 b8ab 	b.w	800b1f0 <__kernel_cos>
 800b09a:	4a1c      	ldr	r2, [pc, #112]	; (800b10c <cos+0x94>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	dd04      	ble.n	800b0aa <cos+0x32>
 800b0a0:	ee30 0b40 	vsub.f64	d0, d0, d0
 800b0a4:	b005      	add	sp, #20
 800b0a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0aa:	4668      	mov	r0, sp
 800b0ac:	f000 fa28 	bl	800b500 <__ieee754_rem_pio2>
 800b0b0:	f000 0003 	and.w	r0, r0, #3
 800b0b4:	2801      	cmp	r0, #1
 800b0b6:	d009      	beq.n	800b0cc <cos+0x54>
 800b0b8:	2802      	cmp	r0, #2
 800b0ba:	d010      	beq.n	800b0de <cos+0x66>
 800b0bc:	b9b0      	cbnz	r0, 800b0ec <cos+0x74>
 800b0be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0c2:	ed9d 0b00 	vldr	d0, [sp]
 800b0c6:	f000 f893 	bl	800b1f0 <__kernel_cos>
 800b0ca:	e7eb      	b.n	800b0a4 <cos+0x2c>
 800b0cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0d0:	ed9d 0b00 	vldr	d0, [sp]
 800b0d4:	f000 f8f8 	bl	800b2c8 <__kernel_sin>
 800b0d8:	eeb1 0b40 	vneg.f64	d0, d0
 800b0dc:	e7e2      	b.n	800b0a4 <cos+0x2c>
 800b0de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0e2:	ed9d 0b00 	vldr	d0, [sp]
 800b0e6:	f000 f883 	bl	800b1f0 <__kernel_cos>
 800b0ea:	e7f5      	b.n	800b0d8 <cos+0x60>
 800b0ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0f0:	ed9d 0b00 	vldr	d0, [sp]
 800b0f4:	2001      	movs	r0, #1
 800b0f6:	f000 f8e7 	bl	800b2c8 <__kernel_sin>
 800b0fa:	e7d3      	b.n	800b0a4 <cos+0x2c>
 800b0fc:	f3af 8000 	nop.w
	...
 800b108:	3fe921fb 	.word	0x3fe921fb
 800b10c:	7fefffff 	.word	0x7fefffff

0800b110 <sin>:
 800b110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b112:	eeb0 7b40 	vmov.f64	d7, d0
 800b116:	ee17 3a90 	vmov	r3, s15
 800b11a:	4a21      	ldr	r2, [pc, #132]	; (800b1a0 <sin+0x90>)
 800b11c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b120:	4293      	cmp	r3, r2
 800b122:	dc07      	bgt.n	800b134 <sin+0x24>
 800b124:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800b198 <sin+0x88>
 800b128:	2000      	movs	r0, #0
 800b12a:	b005      	add	sp, #20
 800b12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b130:	f000 b8ca 	b.w	800b2c8 <__kernel_sin>
 800b134:	4a1b      	ldr	r2, [pc, #108]	; (800b1a4 <sin+0x94>)
 800b136:	4293      	cmp	r3, r2
 800b138:	dd04      	ble.n	800b144 <sin+0x34>
 800b13a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800b13e:	b005      	add	sp, #20
 800b140:	f85d fb04 	ldr.w	pc, [sp], #4
 800b144:	4668      	mov	r0, sp
 800b146:	f000 f9db 	bl	800b500 <__ieee754_rem_pio2>
 800b14a:	f000 0003 	and.w	r0, r0, #3
 800b14e:	2801      	cmp	r0, #1
 800b150:	d00a      	beq.n	800b168 <sin+0x58>
 800b152:	2802      	cmp	r0, #2
 800b154:	d00f      	beq.n	800b176 <sin+0x66>
 800b156:	b9c0      	cbnz	r0, 800b18a <sin+0x7a>
 800b158:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b15c:	ed9d 0b00 	vldr	d0, [sp]
 800b160:	2001      	movs	r0, #1
 800b162:	f000 f8b1 	bl	800b2c8 <__kernel_sin>
 800b166:	e7ea      	b.n	800b13e <sin+0x2e>
 800b168:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b16c:	ed9d 0b00 	vldr	d0, [sp]
 800b170:	f000 f83e 	bl	800b1f0 <__kernel_cos>
 800b174:	e7e3      	b.n	800b13e <sin+0x2e>
 800b176:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b17a:	ed9d 0b00 	vldr	d0, [sp]
 800b17e:	2001      	movs	r0, #1
 800b180:	f000 f8a2 	bl	800b2c8 <__kernel_sin>
 800b184:	eeb1 0b40 	vneg.f64	d0, d0
 800b188:	e7d9      	b.n	800b13e <sin+0x2e>
 800b18a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b18e:	ed9d 0b00 	vldr	d0, [sp]
 800b192:	f000 f82d 	bl	800b1f0 <__kernel_cos>
 800b196:	e7f5      	b.n	800b184 <sin+0x74>
	...
 800b1a0:	3fe921fb 	.word	0x3fe921fb
 800b1a4:	7fefffff 	.word	0x7fefffff

0800b1a8 <sqrtf>:
 800b1a8:	b508      	push	{r3, lr}
 800b1aa:	ed2d 8b02 	vpush	{d8}
 800b1ae:	eeb0 8a40 	vmov.f32	s16, s0
 800b1b2:	f000 f817 	bl	800b1e4 <__ieee754_sqrtf>
 800b1b6:	eeb4 8a48 	vcmp.f32	s16, s16
 800b1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1be:	d60c      	bvs.n	800b1da <sqrtf+0x32>
 800b1c0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800b1e0 <sqrtf+0x38>
 800b1c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1cc:	d505      	bpl.n	800b1da <sqrtf+0x32>
 800b1ce:	f001 fdc9 	bl	800cd64 <__errno>
 800b1d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b1d6:	2321      	movs	r3, #33	; 0x21
 800b1d8:	6003      	str	r3, [r0, #0]
 800b1da:	ecbd 8b02 	vpop	{d8}
 800b1de:	bd08      	pop	{r3, pc}
 800b1e0:	00000000 	.word	0x00000000

0800b1e4 <__ieee754_sqrtf>:
 800b1e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b1e8:	4770      	bx	lr
 800b1ea:	0000      	movs	r0, r0
 800b1ec:	0000      	movs	r0, r0
	...

0800b1f0 <__kernel_cos>:
 800b1f0:	ee10 1a90 	vmov	r1, s1
 800b1f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b1f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b1fc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800b200:	da05      	bge.n	800b20e <__kernel_cos+0x1e>
 800b202:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800b206:	ee17 3a90 	vmov	r3, s15
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d03d      	beq.n	800b28a <__kernel_cos+0x9a>
 800b20e:	ee20 5b00 	vmul.f64	d5, d0, d0
 800b212:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800b216:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 800b290 <__kernel_cos+0xa0>
 800b21a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800b298 <__kernel_cos+0xa8>
 800b21e:	eea5 4b07 	vfma.f64	d4, d5, d7
 800b222:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800b2a0 <__kernel_cos+0xb0>
 800b226:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b22a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800b2a8 <__kernel_cos+0xb8>
 800b22e:	eea7 4b05 	vfma.f64	d4, d7, d5
 800b232:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800b2b0 <__kernel_cos+0xc0>
 800b236:	4b22      	ldr	r3, [pc, #136]	; (800b2c0 <__kernel_cos+0xd0>)
 800b238:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b23c:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 800b2b8 <__kernel_cos+0xc8>
 800b240:	4299      	cmp	r1, r3
 800b242:	eea7 4b05 	vfma.f64	d4, d7, d5
 800b246:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b24a:	ee24 4b05 	vmul.f64	d4, d4, d5
 800b24e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b252:	eea5 1b04 	vfma.f64	d1, d5, d4
 800b256:	dc04      	bgt.n	800b262 <__kernel_cos+0x72>
 800b258:	ee37 7b41 	vsub.f64	d7, d7, d1
 800b25c:	ee36 0b47 	vsub.f64	d0, d6, d7
 800b260:	4770      	bx	lr
 800b262:	4b18      	ldr	r3, [pc, #96]	; (800b2c4 <__kernel_cos+0xd4>)
 800b264:	4299      	cmp	r1, r3
 800b266:	dc0d      	bgt.n	800b284 <__kernel_cos+0x94>
 800b268:	2200      	movs	r2, #0
 800b26a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800b26e:	ec43 2b15 	vmov	d5, r2, r3
 800b272:	ee36 0b45 	vsub.f64	d0, d6, d5
 800b276:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b27a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800b27e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b282:	4770      	bx	lr
 800b284:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800b288:	e7f3      	b.n	800b272 <__kernel_cos+0x82>
 800b28a:	eeb0 0b46 	vmov.f64	d0, d6
 800b28e:	4770      	bx	lr
 800b290:	be8838d4 	.word	0xbe8838d4
 800b294:	bda8fae9 	.word	0xbda8fae9
 800b298:	bdb4b1c4 	.word	0xbdb4b1c4
 800b29c:	3e21ee9e 	.word	0x3e21ee9e
 800b2a0:	809c52ad 	.word	0x809c52ad
 800b2a4:	be927e4f 	.word	0xbe927e4f
 800b2a8:	19cb1590 	.word	0x19cb1590
 800b2ac:	3efa01a0 	.word	0x3efa01a0
 800b2b0:	16c15177 	.word	0x16c15177
 800b2b4:	bf56c16c 	.word	0xbf56c16c
 800b2b8:	5555554c 	.word	0x5555554c
 800b2bc:	3fa55555 	.word	0x3fa55555
 800b2c0:	3fd33332 	.word	0x3fd33332
 800b2c4:	3fe90000 	.word	0x3fe90000

0800b2c8 <__kernel_sin>:
 800b2c8:	ee10 3a90 	vmov	r3, s1
 800b2cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2d0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b2d4:	da04      	bge.n	800b2e0 <__kernel_sin+0x18>
 800b2d6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800b2da:	ee17 3a90 	vmov	r3, s15
 800b2de:	b35b      	cbz	r3, 800b338 <__kernel_sin+0x70>
 800b2e0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800b2e4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800b2e8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800b340 <__kernel_sin+0x78>
 800b2ec:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b348 <__kernel_sin+0x80>
 800b2f0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b2f4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800b350 <__kernel_sin+0x88>
 800b2f8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b2fc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b358 <__kernel_sin+0x90>
 800b300:	eea7 4b06 	vfma.f64	d4, d7, d6
 800b304:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800b360 <__kernel_sin+0x98>
 800b308:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b30c:	b930      	cbnz	r0, 800b31c <__kernel_sin+0x54>
 800b30e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b368 <__kernel_sin+0xa0>
 800b312:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b316:	eea4 0b05 	vfma.f64	d0, d4, d5
 800b31a:	4770      	bx	lr
 800b31c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800b320:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b324:	eea1 7b04 	vfma.f64	d7, d1, d4
 800b328:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800b32c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800b370 <__kernel_sin+0xa8>
 800b330:	eea5 1b07 	vfma.f64	d1, d5, d7
 800b334:	ee30 0b41 	vsub.f64	d0, d0, d1
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	f3af 8000 	nop.w
 800b340:	5acfd57c 	.word	0x5acfd57c
 800b344:	3de5d93a 	.word	0x3de5d93a
 800b348:	8a2b9ceb 	.word	0x8a2b9ceb
 800b34c:	be5ae5e6 	.word	0xbe5ae5e6
 800b350:	57b1fe7d 	.word	0x57b1fe7d
 800b354:	3ec71de3 	.word	0x3ec71de3
 800b358:	19c161d5 	.word	0x19c161d5
 800b35c:	bf2a01a0 	.word	0xbf2a01a0
 800b360:	1110f8a6 	.word	0x1110f8a6
 800b364:	3f811111 	.word	0x3f811111
 800b368:	55555549 	.word	0x55555549
 800b36c:	bfc55555 	.word	0xbfc55555
 800b370:	55555549 	.word	0x55555549
 800b374:	3fc55555 	.word	0x3fc55555

0800b378 <__ieee754_atan2>:
 800b378:	ee11 1a10 	vmov	r1, s2
 800b37c:	eeb0 7b40 	vmov.f64	d7, d0
 800b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b382:	ee11 5a90 	vmov	r5, s3
 800b386:	424b      	negs	r3, r1
 800b388:	4f59      	ldr	r7, [pc, #356]	; (800b4f0 <__ieee754_atan2+0x178>)
 800b38a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800b38e:	430b      	orrs	r3, r1
 800b390:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b394:	42bb      	cmp	r3, r7
 800b396:	d80d      	bhi.n	800b3b4 <__ieee754_atan2+0x3c>
 800b398:	ee10 ca10 	vmov	ip, s0
 800b39c:	ee17 6a90 	vmov	r6, s15
 800b3a0:	f1cc 0000 	rsb	r0, ip, #0
 800b3a4:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b3a8:	ea40 000c 	orr.w	r0, r0, ip
 800b3ac:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 800b3b0:	42b8      	cmp	r0, r7
 800b3b2:	d904      	bls.n	800b3be <__ieee754_atan2+0x46>
 800b3b4:	ee37 7b01 	vadd.f64	d7, d7, d1
 800b3b8:	eeb0 0b47 	vmov.f64	d0, d7
 800b3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3be:	f105 4040 	add.w	r0, r5, #3221225472	; 0xc0000000
 800b3c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b3c6:	4308      	orrs	r0, r1
 800b3c8:	d103      	bne.n	800b3d2 <__ieee754_atan2+0x5a>
 800b3ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3ce:	f000 b9db 	b.w	800b788 <atan>
 800b3d2:	17ac      	asrs	r4, r5, #30
 800b3d4:	f004 0402 	and.w	r4, r4, #2
 800b3d8:	ea53 0c0c 	orrs.w	ip, r3, ip
 800b3dc:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 800b3e0:	d107      	bne.n	800b3f2 <__ieee754_atan2+0x7a>
 800b3e2:	2c02      	cmp	r4, #2
 800b3e4:	d05c      	beq.n	800b4a0 <__ieee754_atan2+0x128>
 800b3e6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800b4b8 <__ieee754_atan2+0x140>
 800b3ea:	2c03      	cmp	r4, #3
 800b3ec:	fe06 7b00 	vseleq.f64	d7, d6, d0
 800b3f0:	e7e2      	b.n	800b3b8 <__ieee754_atan2+0x40>
 800b3f2:	4311      	orrs	r1, r2
 800b3f4:	d107      	bne.n	800b406 <__ieee754_atan2+0x8e>
 800b3f6:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800b4c0 <__ieee754_atan2+0x148>
 800b3fa:	ed9f 6b33 	vldr	d6, [pc, #204]	; 800b4c8 <__ieee754_atan2+0x150>
 800b3fe:	2e00      	cmp	r6, #0
 800b400:	fe27 7b06 	vselge.f64	d7, d7, d6
 800b404:	e7d8      	b.n	800b3b8 <__ieee754_atan2+0x40>
 800b406:	42ba      	cmp	r2, r7
 800b408:	d10f      	bne.n	800b42a <__ieee754_atan2+0xb2>
 800b40a:	4293      	cmp	r3, r2
 800b40c:	f104 34ff 	add.w	r4, r4, #4294967295
 800b410:	d107      	bne.n	800b422 <__ieee754_atan2+0xaa>
 800b412:	2c02      	cmp	r4, #2
 800b414:	d847      	bhi.n	800b4a6 <__ieee754_atan2+0x12e>
 800b416:	4b37      	ldr	r3, [pc, #220]	; (800b4f4 <__ieee754_atan2+0x17c>)
 800b418:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b41c:	ed93 7b00 	vldr	d7, [r3]
 800b420:	e7ca      	b.n	800b3b8 <__ieee754_atan2+0x40>
 800b422:	2c02      	cmp	r4, #2
 800b424:	d842      	bhi.n	800b4ac <__ieee754_atan2+0x134>
 800b426:	4b34      	ldr	r3, [pc, #208]	; (800b4f8 <__ieee754_atan2+0x180>)
 800b428:	e7f6      	b.n	800b418 <__ieee754_atan2+0xa0>
 800b42a:	42bb      	cmp	r3, r7
 800b42c:	d0e3      	beq.n	800b3f6 <__ieee754_atan2+0x7e>
 800b42e:	1a9b      	subs	r3, r3, r2
 800b430:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b434:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b438:	da1a      	bge.n	800b470 <__ieee754_atan2+0xf8>
 800b43a:	2d00      	cmp	r5, #0
 800b43c:	da01      	bge.n	800b442 <__ieee754_atan2+0xca>
 800b43e:	323c      	adds	r2, #60	; 0x3c
 800b440:	db19      	blt.n	800b476 <__ieee754_atan2+0xfe>
 800b442:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800b446:	f000 fa99 	bl	800b97c <fabs>
 800b44a:	f000 f99d 	bl	800b788 <atan>
 800b44e:	eeb0 7b40 	vmov.f64	d7, d0
 800b452:	2c01      	cmp	r4, #1
 800b454:	d012      	beq.n	800b47c <__ieee754_atan2+0x104>
 800b456:	2c02      	cmp	r4, #2
 800b458:	d019      	beq.n	800b48e <__ieee754_atan2+0x116>
 800b45a:	2c00      	cmp	r4, #0
 800b45c:	d0ac      	beq.n	800b3b8 <__ieee754_atan2+0x40>
 800b45e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800b4d0 <__ieee754_atan2+0x158>
 800b462:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b466:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800b4d8 <__ieee754_atan2+0x160>
 800b46a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b46e:	e7a3      	b.n	800b3b8 <__ieee754_atan2+0x40>
 800b470:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b4c0 <__ieee754_atan2+0x148>
 800b474:	e7ed      	b.n	800b452 <__ieee754_atan2+0xda>
 800b476:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 800b4e0 <__ieee754_atan2+0x168>
 800b47a:	e7ea      	b.n	800b452 <__ieee754_atan2+0xda>
 800b47c:	ee17 1a90 	vmov	r1, s15
 800b480:	ec53 2b17 	vmov	r2, r3, d7
 800b484:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b488:	ec43 2b17 	vmov	d7, r2, r3
 800b48c:	e794      	b.n	800b3b8 <__ieee754_atan2+0x40>
 800b48e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800b4d0 <__ieee754_atan2+0x158>
 800b492:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b496:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800b4d8 <__ieee754_atan2+0x160>
 800b49a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b49e:	e78b      	b.n	800b3b8 <__ieee754_atan2+0x40>
 800b4a0:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800b4d8 <__ieee754_atan2+0x160>
 800b4a4:	e788      	b.n	800b3b8 <__ieee754_atan2+0x40>
 800b4a6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800b4e8 <__ieee754_atan2+0x170>
 800b4aa:	e785      	b.n	800b3b8 <__ieee754_atan2+0x40>
 800b4ac:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800b4e0 <__ieee754_atan2+0x168>
 800b4b0:	e782      	b.n	800b3b8 <__ieee754_atan2+0x40>
 800b4b2:	bf00      	nop
 800b4b4:	f3af 8000 	nop.w
 800b4b8:	54442d18 	.word	0x54442d18
 800b4bc:	c00921fb 	.word	0xc00921fb
 800b4c0:	54442d18 	.word	0x54442d18
 800b4c4:	3ff921fb 	.word	0x3ff921fb
 800b4c8:	54442d18 	.word	0x54442d18
 800b4cc:	bff921fb 	.word	0xbff921fb
 800b4d0:	33145c07 	.word	0x33145c07
 800b4d4:	3ca1a626 	.word	0x3ca1a626
 800b4d8:	54442d18 	.word	0x54442d18
 800b4dc:	400921fb 	.word	0x400921fb
	...
 800b4e8:	54442d18 	.word	0x54442d18
 800b4ec:	3fe921fb 	.word	0x3fe921fb
 800b4f0:	7ff00000 	.word	0x7ff00000
 800b4f4:	08021db8 	.word	0x08021db8
 800b4f8:	08021dd0 	.word	0x08021dd0
 800b4fc:	00000000 	.word	0x00000000

0800b500 <__ieee754_rem_pio2>:
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	eeb0 7b40 	vmov.f64	d7, d0
 800b506:	ee17 5a90 	vmov	r5, s15
 800b50a:	4b99      	ldr	r3, [pc, #612]	; (800b770 <__ieee754_rem_pio2+0x270>)
 800b50c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b510:	429e      	cmp	r6, r3
 800b512:	b088      	sub	sp, #32
 800b514:	4604      	mov	r4, r0
 800b516:	dc07      	bgt.n	800b528 <__ieee754_rem_pio2+0x28>
 800b518:	2200      	movs	r2, #0
 800b51a:	2300      	movs	r3, #0
 800b51c:	ed84 0b00 	vstr	d0, [r4]
 800b520:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b524:	2000      	movs	r0, #0
 800b526:	e01b      	b.n	800b560 <__ieee754_rem_pio2+0x60>
 800b528:	4b92      	ldr	r3, [pc, #584]	; (800b774 <__ieee754_rem_pio2+0x274>)
 800b52a:	429e      	cmp	r6, r3
 800b52c:	dc3b      	bgt.n	800b5a6 <__ieee754_rem_pio2+0xa6>
 800b52e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800b532:	2d00      	cmp	r5, #0
 800b534:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800b730 <__ieee754_rem_pio2+0x230>
 800b538:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800b53c:	dd19      	ble.n	800b572 <__ieee754_rem_pio2+0x72>
 800b53e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800b542:	429e      	cmp	r6, r3
 800b544:	d00e      	beq.n	800b564 <__ieee754_rem_pio2+0x64>
 800b546:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800b738 <__ieee754_rem_pio2+0x238>
 800b54a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800b54e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b552:	ed84 5b00 	vstr	d5, [r4]
 800b556:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b55a:	ed84 7b02 	vstr	d7, [r4, #8]
 800b55e:	2001      	movs	r0, #1
 800b560:	b008      	add	sp, #32
 800b562:	bd70      	pop	{r4, r5, r6, pc}
 800b564:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800b740 <__ieee754_rem_pio2+0x240>
 800b568:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b56c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800b748 <__ieee754_rem_pio2+0x248>
 800b570:	e7eb      	b.n	800b54a <__ieee754_rem_pio2+0x4a>
 800b572:	429e      	cmp	r6, r3
 800b574:	ee30 7b06 	vadd.f64	d7, d0, d6
 800b578:	d00e      	beq.n	800b598 <__ieee754_rem_pio2+0x98>
 800b57a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800b738 <__ieee754_rem_pio2+0x238>
 800b57e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800b582:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b586:	ed84 5b00 	vstr	d5, [r4]
 800b58a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b58e:	f04f 30ff 	mov.w	r0, #4294967295
 800b592:	ed84 7b02 	vstr	d7, [r4, #8]
 800b596:	e7e3      	b.n	800b560 <__ieee754_rem_pio2+0x60>
 800b598:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800b740 <__ieee754_rem_pio2+0x240>
 800b59c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b5a0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800b748 <__ieee754_rem_pio2+0x248>
 800b5a4:	e7eb      	b.n	800b57e <__ieee754_rem_pio2+0x7e>
 800b5a6:	4b74      	ldr	r3, [pc, #464]	; (800b778 <__ieee754_rem_pio2+0x278>)
 800b5a8:	429e      	cmp	r6, r3
 800b5aa:	dc70      	bgt.n	800b68e <__ieee754_rem_pio2+0x18e>
 800b5ac:	f000 f9e6 	bl	800b97c <fabs>
 800b5b0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b5b4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800b750 <__ieee754_rem_pio2+0x250>
 800b5b8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800b5bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b5c0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b5c4:	ee17 0a90 	vmov	r0, s15
 800b5c8:	eeb1 4b45 	vneg.f64	d4, d5
 800b5cc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800b730 <__ieee754_rem_pio2+0x230>
 800b5d0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800b5d4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800b738 <__ieee754_rem_pio2+0x238>
 800b5d8:	281f      	cmp	r0, #31
 800b5da:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b5de:	ee30 6b47 	vsub.f64	d6, d0, d7
 800b5e2:	dc08      	bgt.n	800b5f6 <__ieee754_rem_pio2+0xf6>
 800b5e4:	4b65      	ldr	r3, [pc, #404]	; (800b77c <__ieee754_rem_pio2+0x27c>)
 800b5e6:	1e42      	subs	r2, r0, #1
 800b5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ec:	42b3      	cmp	r3, r6
 800b5ee:	d002      	beq.n	800b5f6 <__ieee754_rem_pio2+0xf6>
 800b5f0:	ed84 6b00 	vstr	d6, [r4]
 800b5f4:	e024      	b.n	800b640 <__ieee754_rem_pio2+0x140>
 800b5f6:	ee16 3a90 	vmov	r3, s13
 800b5fa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800b5fe:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800b602:	2b10      	cmp	r3, #16
 800b604:	ea4f 5226 	mov.w	r2, r6, asr #20
 800b608:	ddf2      	ble.n	800b5f0 <__ieee754_rem_pio2+0xf0>
 800b60a:	eeb0 6b40 	vmov.f64	d6, d0
 800b60e:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 800b740 <__ieee754_rem_pio2+0x240>
 800b612:	eea4 6b03 	vfma.f64	d6, d4, d3
 800b616:	ee30 7b46 	vsub.f64	d7, d0, d6
 800b61a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800b61e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800b748 <__ieee754_rem_pio2+0x248>
 800b622:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800b626:	ee36 3b47 	vsub.f64	d3, d6, d7
 800b62a:	ee13 3a90 	vmov	r3, s7
 800b62e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	2b31      	cmp	r3, #49	; 0x31
 800b636:	dc17      	bgt.n	800b668 <__ieee754_rem_pio2+0x168>
 800b638:	eeb0 0b46 	vmov.f64	d0, d6
 800b63c:	ed84 3b00 	vstr	d3, [r4]
 800b640:	ed94 6b00 	vldr	d6, [r4]
 800b644:	2d00      	cmp	r5, #0
 800b646:	ee30 0b46 	vsub.f64	d0, d0, d6
 800b64a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b64e:	ed84 0b02 	vstr	d0, [r4, #8]
 800b652:	da85      	bge.n	800b560 <__ieee754_rem_pio2+0x60>
 800b654:	eeb1 6b46 	vneg.f64	d6, d6
 800b658:	eeb1 0b40 	vneg.f64	d0, d0
 800b65c:	ed84 6b00 	vstr	d6, [r4]
 800b660:	ed84 0b02 	vstr	d0, [r4, #8]
 800b664:	4240      	negs	r0, r0
 800b666:	e77b      	b.n	800b560 <__ieee754_rem_pio2+0x60>
 800b668:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800b758 <__ieee754_rem_pio2+0x258>
 800b66c:	eeb0 0b46 	vmov.f64	d0, d6
 800b670:	eea4 0b07 	vfma.f64	d0, d4, d7
 800b674:	ee36 6b40 	vsub.f64	d6, d6, d0
 800b678:	eea4 6b07 	vfma.f64	d6, d4, d7
 800b67c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 800b760 <__ieee754_rem_pio2+0x260>
 800b680:	eeb0 7b46 	vmov.f64	d7, d6
 800b684:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800b688:	ee30 6b47 	vsub.f64	d6, d0, d7
 800b68c:	e7b0      	b.n	800b5f0 <__ieee754_rem_pio2+0xf0>
 800b68e:	4b3c      	ldr	r3, [pc, #240]	; (800b780 <__ieee754_rem_pio2+0x280>)
 800b690:	429e      	cmp	r6, r3
 800b692:	dd06      	ble.n	800b6a2 <__ieee754_rem_pio2+0x1a2>
 800b694:	ee30 7b40 	vsub.f64	d7, d0, d0
 800b698:	ed80 7b02 	vstr	d7, [r0, #8]
 800b69c:	ed80 7b00 	vstr	d7, [r0]
 800b6a0:	e740      	b.n	800b524 <__ieee754_rem_pio2+0x24>
 800b6a2:	1532      	asrs	r2, r6, #20
 800b6a4:	ee10 0a10 	vmov	r0, s0
 800b6a8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800b6ac:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800b6b0:	ec41 0b17 	vmov	d7, r0, r1
 800b6b4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800b6b8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800b768 <__ieee754_rem_pio2+0x268>
 800b6bc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800b6c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b6c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b6c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b6cc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800b6d0:	a808      	add	r0, sp, #32
 800b6d2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800b6d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b6da:	ed8d 6b04 	vstr	d6, [sp, #16]
 800b6de:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b6e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6e6:	2103      	movs	r1, #3
 800b6e8:	ed30 7b02 	vldmdb	r0!, {d7}
 800b6ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	f101 31ff 	add.w	r1, r1, #4294967295
 800b6fa:	d0f5      	beq.n	800b6e8 <__ieee754_rem_pio2+0x1e8>
 800b6fc:	4921      	ldr	r1, [pc, #132]	; (800b784 <__ieee754_rem_pio2+0x284>)
 800b6fe:	9101      	str	r1, [sp, #4]
 800b700:	2102      	movs	r1, #2
 800b702:	9100      	str	r1, [sp, #0]
 800b704:	a802      	add	r0, sp, #8
 800b706:	4621      	mov	r1, r4
 800b708:	f000 f942 	bl	800b990 <__kernel_rem_pio2>
 800b70c:	2d00      	cmp	r5, #0
 800b70e:	f6bf af27 	bge.w	800b560 <__ieee754_rem_pio2+0x60>
 800b712:	ed94 7b00 	vldr	d7, [r4]
 800b716:	eeb1 7b47 	vneg.f64	d7, d7
 800b71a:	ed84 7b00 	vstr	d7, [r4]
 800b71e:	ed94 7b02 	vldr	d7, [r4, #8]
 800b722:	eeb1 7b47 	vneg.f64	d7, d7
 800b726:	ed84 7b02 	vstr	d7, [r4, #8]
 800b72a:	e79b      	b.n	800b664 <__ieee754_rem_pio2+0x164>
 800b72c:	f3af 8000 	nop.w
 800b730:	54400000 	.word	0x54400000
 800b734:	3ff921fb 	.word	0x3ff921fb
 800b738:	1a626331 	.word	0x1a626331
 800b73c:	3dd0b461 	.word	0x3dd0b461
 800b740:	1a600000 	.word	0x1a600000
 800b744:	3dd0b461 	.word	0x3dd0b461
 800b748:	2e037073 	.word	0x2e037073
 800b74c:	3ba3198a 	.word	0x3ba3198a
 800b750:	6dc9c883 	.word	0x6dc9c883
 800b754:	3fe45f30 	.word	0x3fe45f30
 800b758:	2e000000 	.word	0x2e000000
 800b75c:	3ba3198a 	.word	0x3ba3198a
 800b760:	252049c1 	.word	0x252049c1
 800b764:	397b839a 	.word	0x397b839a
 800b768:	00000000 	.word	0x00000000
 800b76c:	41700000 	.word	0x41700000
 800b770:	3fe921fb 	.word	0x3fe921fb
 800b774:	4002d97b 	.word	0x4002d97b
 800b778:	413921fb 	.word	0x413921fb
 800b77c:	08021de8 	.word	0x08021de8
 800b780:	7fefffff 	.word	0x7fefffff
 800b784:	08021e68 	.word	0x08021e68

0800b788 <atan>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	eeb0 7b40 	vmov.f64	d7, d0
 800b78e:	ee17 5a90 	vmov	r5, s15
 800b792:	4b73      	ldr	r3, [pc, #460]	; (800b960 <atan+0x1d8>)
 800b794:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800b798:	429c      	cmp	r4, r3
 800b79a:	dd13      	ble.n	800b7c4 <atan+0x3c>
 800b79c:	4b71      	ldr	r3, [pc, #452]	; (800b964 <atan+0x1dc>)
 800b79e:	429c      	cmp	r4, r3
 800b7a0:	dc03      	bgt.n	800b7aa <atan+0x22>
 800b7a2:	d107      	bne.n	800b7b4 <atan+0x2c>
 800b7a4:	ee10 3a10 	vmov	r3, s0
 800b7a8:	b123      	cbz	r3, 800b7b4 <atan+0x2c>
 800b7aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b7ae:	eeb0 0b47 	vmov.f64	d0, d7
 800b7b2:	bd38      	pop	{r3, r4, r5, pc}
 800b7b4:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 800b8f0 <atan+0x168>
 800b7b8:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 800b8f8 <atan+0x170>
 800b7bc:	2d00      	cmp	r5, #0
 800b7be:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800b7c2:	e7f4      	b.n	800b7ae <atan+0x26>
 800b7c4:	4b68      	ldr	r3, [pc, #416]	; (800b968 <atan+0x1e0>)
 800b7c6:	429c      	cmp	r4, r3
 800b7c8:	dc11      	bgt.n	800b7ee <atan+0x66>
 800b7ca:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b7ce:	429c      	cmp	r4, r3
 800b7d0:	dc0a      	bgt.n	800b7e8 <atan+0x60>
 800b7d2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800b7d6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800b900 <atan+0x178>
 800b7da:	ee30 6b06 	vadd.f64	d6, d0, d6
 800b7de:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e6:	dce2      	bgt.n	800b7ae <atan+0x26>
 800b7e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ec:	e013      	b.n	800b816 <atan+0x8e>
 800b7ee:	f000 f8c5 	bl	800b97c <fabs>
 800b7f2:	4b5e      	ldr	r3, [pc, #376]	; (800b96c <atan+0x1e4>)
 800b7f4:	429c      	cmp	r4, r3
 800b7f6:	dc4f      	bgt.n	800b898 <atan+0x110>
 800b7f8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b7fc:	429c      	cmp	r4, r3
 800b7fe:	dc41      	bgt.n	800b884 <atan+0xfc>
 800b800:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800b804:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800b808:	2300      	movs	r3, #0
 800b80a:	eea0 5b07 	vfma.f64	d5, d0, d7
 800b80e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b812:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800b816:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800b908 <atan+0x180>
 800b81a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800b81e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800b822:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800b910 <atan+0x188>
 800b826:	eea5 3b06 	vfma.f64	d3, d5, d6
 800b82a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800b918 <atan+0x190>
 800b82e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800b832:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800b920 <atan+0x198>
 800b836:	eea6 3b05 	vfma.f64	d3, d6, d5
 800b83a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800b928 <atan+0x1a0>
 800b83e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800b842:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800b930 <atan+0x1a8>
 800b846:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800b938 <atan+0x1b0>
 800b84a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800b84e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800b940 <atan+0x1b8>
 800b852:	eea5 2b06 	vfma.f64	d2, d5, d6
 800b856:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800b948 <atan+0x1c0>
 800b85a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800b85e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800b950 <atan+0x1c8>
 800b862:	eea6 2b05 	vfma.f64	d2, d6, d5
 800b866:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800b958 <atan+0x1d0>
 800b86a:	1c5a      	adds	r2, r3, #1
 800b86c:	eea2 6b05 	vfma.f64	d6, d2, d5
 800b870:	ee26 6b05 	vmul.f64	d6, d6, d5
 800b874:	eea3 6b04 	vfma.f64	d6, d3, d4
 800b878:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b87c:	d121      	bne.n	800b8c2 <atan+0x13a>
 800b87e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b882:	e794      	b.n	800b7ae <atan+0x26>
 800b884:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b888:	2301      	movs	r3, #1
 800b88a:	ee30 5b47 	vsub.f64	d5, d0, d7
 800b88e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b892:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800b896:	e7be      	b.n	800b816 <atan+0x8e>
 800b898:	4b35      	ldr	r3, [pc, #212]	; (800b970 <atan+0x1e8>)
 800b89a:	429c      	cmp	r4, r3
 800b89c:	da0b      	bge.n	800b8b6 <atan+0x12e>
 800b89e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b8a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b8a6:	ee30 5b47 	vsub.f64	d5, d0, d7
 800b8aa:	eea0 6b07 	vfma.f64	d6, d0, d7
 800b8ae:	2302      	movs	r3, #2
 800b8b0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b8b4:	e7af      	b.n	800b816 <atan+0x8e>
 800b8b6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800b8c0:	e7a9      	b.n	800b816 <atan+0x8e>
 800b8c2:	4a2c      	ldr	r2, [pc, #176]	; (800b974 <atan+0x1ec>)
 800b8c4:	492c      	ldr	r1, [pc, #176]	; (800b978 <atan+0x1f0>)
 800b8c6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b8ca:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800b8ce:	ed93 5b00 	vldr	d5, [r3]
 800b8d2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b8d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b8da:	ed92 7b00 	vldr	d7, [r2]
 800b8de:	2d00      	cmp	r5, #0
 800b8e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b8e4:	bfb8      	it	lt
 800b8e6:	eeb1 7b47 	vneglt.f64	d7, d7
 800b8ea:	e760      	b.n	800b7ae <atan+0x26>
 800b8ec:	f3af 8000 	nop.w
 800b8f0:	54442d18 	.word	0x54442d18
 800b8f4:	3ff921fb 	.word	0x3ff921fb
 800b8f8:	54442d18 	.word	0x54442d18
 800b8fc:	bff921fb 	.word	0xbff921fb
 800b900:	8800759c 	.word	0x8800759c
 800b904:	7e37e43c 	.word	0x7e37e43c
 800b908:	e322da11 	.word	0xe322da11
 800b90c:	3f90ad3a 	.word	0x3f90ad3a
 800b910:	24760deb 	.word	0x24760deb
 800b914:	3fa97b4b 	.word	0x3fa97b4b
 800b918:	a0d03d51 	.word	0xa0d03d51
 800b91c:	3fb10d66 	.word	0x3fb10d66
 800b920:	c54c206e 	.word	0xc54c206e
 800b924:	3fb745cd 	.word	0x3fb745cd
 800b928:	920083ff 	.word	0x920083ff
 800b92c:	3fc24924 	.word	0x3fc24924
 800b930:	5555550d 	.word	0x5555550d
 800b934:	3fd55555 	.word	0x3fd55555
 800b938:	52defd9a 	.word	0x52defd9a
 800b93c:	bfadde2d 	.word	0xbfadde2d
 800b940:	2c6a6c2f 	.word	0x2c6a6c2f
 800b944:	bfa2b444 	.word	0xbfa2b444
 800b948:	af749a6d 	.word	0xaf749a6d
 800b94c:	bfb3b0f2 	.word	0xbfb3b0f2
 800b950:	fe231671 	.word	0xfe231671
 800b954:	bfbc71c6 	.word	0xbfbc71c6
 800b958:	9998ebc4 	.word	0x9998ebc4
 800b95c:	bfc99999 	.word	0xbfc99999
 800b960:	440fffff 	.word	0x440fffff
 800b964:	7ff00000 	.word	0x7ff00000
 800b968:	3fdbffff 	.word	0x3fdbffff
 800b96c:	3ff2ffff 	.word	0x3ff2ffff
 800b970:	40038000 	.word	0x40038000
 800b974:	08021f70 	.word	0x08021f70
 800b978:	08021f90 	.word	0x08021f90

0800b97c <fabs>:
 800b97c:	ec51 0b10 	vmov	r0, r1, d0
 800b980:	ee10 2a10 	vmov	r2, s0
 800b984:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b988:	ec43 2b10 	vmov	d0, r2, r3
 800b98c:	4770      	bx	lr
	...

0800b990 <__kernel_rem_pio2>:
 800b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b994:	ed2d 8b06 	vpush	{d8-d10}
 800b998:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800b99c:	460f      	mov	r7, r1
 800b99e:	9002      	str	r0, [sp, #8]
 800b9a0:	49c3      	ldr	r1, [pc, #780]	; (800bcb0 <__kernel_rem_pio2+0x320>)
 800b9a2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800b9a4:	9301      	str	r3, [sp, #4]
 800b9a6:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800b9aa:	9901      	ldr	r1, [sp, #4]
 800b9ac:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b9ae:	f112 0f14 	cmn.w	r2, #20
 800b9b2:	bfa8      	it	ge
 800b9b4:	1ed0      	subge	r0, r2, #3
 800b9b6:	f101 3aff 	add.w	sl, r1, #4294967295
 800b9ba:	bfaa      	itet	ge
 800b9bc:	2418      	movge	r4, #24
 800b9be:	2000      	movlt	r0, #0
 800b9c0:	fb90 f0f4 	sdivge	r0, r0, r4
 800b9c4:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 800bc98 <__kernel_rem_pio2+0x308>
 800b9c8:	f06f 0417 	mvn.w	r4, #23
 800b9cc:	fb00 4404 	mla	r4, r0, r4, r4
 800b9d0:	eba0 060a 	sub.w	r6, r0, sl
 800b9d4:	4414      	add	r4, r2
 800b9d6:	eb09 0c0a 	add.w	ip, r9, sl
 800b9da:	ad1a      	add	r5, sp, #104	; 0x68
 800b9dc:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	4562      	cmp	r2, ip
 800b9e4:	dd10      	ble.n	800ba08 <__kernel_rem_pio2+0x78>
 800b9e6:	9a01      	ldr	r2, [sp, #4]
 800b9e8:	a91a      	add	r1, sp, #104	; 0x68
 800b9ea:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b9ee:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 800b9f2:	f04f 0c00 	mov.w	ip, #0
 800b9f6:	45cc      	cmp	ip, r9
 800b9f8:	dc26      	bgt.n	800ba48 <__kernel_rem_pio2+0xb8>
 800b9fa:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 800bc98 <__kernel_rem_pio2+0x308>
 800b9fe:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ba02:	4616      	mov	r6, r2
 800ba04:	2500      	movs	r5, #0
 800ba06:	e015      	b.n	800ba34 <__kernel_rem_pio2+0xa4>
 800ba08:	42d6      	cmn	r6, r2
 800ba0a:	d409      	bmi.n	800ba20 <__kernel_rem_pio2+0x90>
 800ba0c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800ba10:	ee07 1a90 	vmov	s15, r1
 800ba14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ba18:	eca5 7b02 	vstmia	r5!, {d7}
 800ba1c:	3201      	adds	r2, #1
 800ba1e:	e7e0      	b.n	800b9e2 <__kernel_rem_pio2+0x52>
 800ba20:	eeb0 7b46 	vmov.f64	d7, d6
 800ba24:	e7f8      	b.n	800ba18 <__kernel_rem_pio2+0x88>
 800ba26:	ecbe 5b02 	vldmia	lr!, {d5}
 800ba2a:	ed96 6b00 	vldr	d6, [r6]
 800ba2e:	3501      	adds	r5, #1
 800ba30:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ba34:	4555      	cmp	r5, sl
 800ba36:	f1a6 0608 	sub.w	r6, r6, #8
 800ba3a:	ddf4      	ble.n	800ba26 <__kernel_rem_pio2+0x96>
 800ba3c:	eca8 7b02 	vstmia	r8!, {d7}
 800ba40:	f10c 0c01 	add.w	ip, ip, #1
 800ba44:	3208      	adds	r2, #8
 800ba46:	e7d6      	b.n	800b9f6 <__kernel_rem_pio2+0x66>
 800ba48:	aa06      	add	r2, sp, #24
 800ba4a:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800bca0 <__kernel_rem_pio2+0x310>
 800ba4e:	ed9f ab96 	vldr	d10, [pc, #600]	; 800bca8 <__kernel_rem_pio2+0x318>
 800ba52:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ba56:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ba5a:	9204      	str	r2, [sp, #16]
 800ba5c:	9303      	str	r3, [sp, #12]
 800ba5e:	464d      	mov	r5, r9
 800ba60:	00eb      	lsls	r3, r5, #3
 800ba62:	9305      	str	r3, [sp, #20]
 800ba64:	ab92      	add	r3, sp, #584	; 0x248
 800ba66:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800ba6a:	f10d 0b18 	add.w	fp, sp, #24
 800ba6e:	ab6a      	add	r3, sp, #424	; 0x1a8
 800ba70:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800ba74:	465e      	mov	r6, fp
 800ba76:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	f1a2 0208 	sub.w	r2, r2, #8
 800ba82:	dc48      	bgt.n	800bb16 <__kernel_rem_pio2+0x186>
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 fa17 	bl	800beb8 <scalbn>
 800ba8a:	eeb0 8b40 	vmov.f64	d8, d0
 800ba8e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800ba92:	ee28 0b00 	vmul.f64	d0, d8, d0
 800ba96:	f000 fa8f 	bl	800bfb8 <floor>
 800ba9a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800ba9e:	eea0 8b47 	vfms.f64	d8, d0, d7
 800baa2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800baa6:	2c00      	cmp	r4, #0
 800baa8:	ee17 8a90 	vmov	r8, s15
 800baac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bab0:	ee38 8b47 	vsub.f64	d8, d8, d7
 800bab4:	dd41      	ble.n	800bb3a <__kernel_rem_pio2+0x1aa>
 800bab6:	1e68      	subs	r0, r5, #1
 800bab8:	ab06      	add	r3, sp, #24
 800baba:	f1c4 0c18 	rsb	ip, r4, #24
 800babe:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800bac2:	fa46 f20c 	asr.w	r2, r6, ip
 800bac6:	4490      	add	r8, r2
 800bac8:	fa02 f20c 	lsl.w	r2, r2, ip
 800bacc:	1ab6      	subs	r6, r6, r2
 800bace:	f1c4 0217 	rsb	r2, r4, #23
 800bad2:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800bad6:	4116      	asrs	r6, r2
 800bad8:	2e00      	cmp	r6, #0
 800bada:	dd3d      	ble.n	800bb58 <__kernel_rem_pio2+0x1c8>
 800badc:	f04f 0c00 	mov.w	ip, #0
 800bae0:	f108 0801 	add.w	r8, r8, #1
 800bae4:	4660      	mov	r0, ip
 800bae6:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800baea:	4565      	cmp	r5, ip
 800baec:	dc6a      	bgt.n	800bbc4 <__kernel_rem_pio2+0x234>
 800baee:	2c00      	cmp	r4, #0
 800baf0:	dd04      	ble.n	800bafc <__kernel_rem_pio2+0x16c>
 800baf2:	2c01      	cmp	r4, #1
 800baf4:	d07b      	beq.n	800bbee <__kernel_rem_pio2+0x25e>
 800baf6:	2c02      	cmp	r4, #2
 800baf8:	f000 8083 	beq.w	800bc02 <__kernel_rem_pio2+0x272>
 800bafc:	2e02      	cmp	r6, #2
 800bafe:	d12b      	bne.n	800bb58 <__kernel_rem_pio2+0x1c8>
 800bb00:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bb04:	ee30 8b48 	vsub.f64	d8, d0, d8
 800bb08:	b330      	cbz	r0, 800bb58 <__kernel_rem_pio2+0x1c8>
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f000 f9d4 	bl	800beb8 <scalbn>
 800bb10:	ee38 8b40 	vsub.f64	d8, d8, d0
 800bb14:	e020      	b.n	800bb58 <__kernel_rem_pio2+0x1c8>
 800bb16:	ee20 7b09 	vmul.f64	d7, d0, d9
 800bb1a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800bb1e:	3801      	subs	r0, #1
 800bb20:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800bb24:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800bb28:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800bb2c:	eca6 0a01 	vstmia	r6!, {s0}
 800bb30:	ed92 0b00 	vldr	d0, [r2]
 800bb34:	ee37 0b00 	vadd.f64	d0, d7, d0
 800bb38:	e7a0      	b.n	800ba7c <__kernel_rem_pio2+0xec>
 800bb3a:	d105      	bne.n	800bb48 <__kernel_rem_pio2+0x1b8>
 800bb3c:	1e6a      	subs	r2, r5, #1
 800bb3e:	ab06      	add	r3, sp, #24
 800bb40:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800bb44:	15f6      	asrs	r6, r6, #23
 800bb46:	e7c7      	b.n	800bad8 <__kernel_rem_pio2+0x148>
 800bb48:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800bb4c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb54:	da34      	bge.n	800bbc0 <__kernel_rem_pio2+0x230>
 800bb56:	2600      	movs	r6, #0
 800bb58:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb60:	f040 80aa 	bne.w	800bcb8 <__kernel_rem_pio2+0x328>
 800bb64:	f105 3bff 	add.w	fp, r5, #4294967295
 800bb68:	4658      	mov	r0, fp
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	4548      	cmp	r0, r9
 800bb6e:	da50      	bge.n	800bc12 <__kernel_rem_pio2+0x282>
 800bb70:	2a00      	cmp	r2, #0
 800bb72:	d06b      	beq.n	800bc4c <__kernel_rem_pio2+0x2bc>
 800bb74:	ab06      	add	r3, sp, #24
 800bb76:	3c18      	subs	r4, #24
 800bb78:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f000 8087 	beq.w	800bc90 <__kernel_rem_pio2+0x300>
 800bb82:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bb86:	4620      	mov	r0, r4
 800bb88:	f000 f996 	bl	800beb8 <scalbn>
 800bb8c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 800bca0 <__kernel_rem_pio2+0x310>
 800bb90:	f10b 0201 	add.w	r2, fp, #1
 800bb94:	a96a      	add	r1, sp, #424	; 0x1a8
 800bb96:	00d3      	lsls	r3, r2, #3
 800bb98:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bb9c:	465a      	mov	r2, fp
 800bb9e:	2a00      	cmp	r2, #0
 800bba0:	f280 80b8 	bge.w	800bd14 <__kernel_rem_pio2+0x384>
 800bba4:	465a      	mov	r2, fp
 800bba6:	2a00      	cmp	r2, #0
 800bba8:	f2c0 80d6 	blt.w	800bd58 <__kernel_rem_pio2+0x3c8>
 800bbac:	a96a      	add	r1, sp, #424	; 0x1a8
 800bbae:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800bbb2:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800bc98 <__kernel_rem_pio2+0x308>
 800bbb6:	4d3f      	ldr	r5, [pc, #252]	; (800bcb4 <__kernel_rem_pio2+0x324>)
 800bbb8:	2000      	movs	r0, #0
 800bbba:	ebab 0102 	sub.w	r1, fp, r2
 800bbbe:	e0c0      	b.n	800bd42 <__kernel_rem_pio2+0x3b2>
 800bbc0:	2602      	movs	r6, #2
 800bbc2:	e78b      	b.n	800badc <__kernel_rem_pio2+0x14c>
 800bbc4:	f8db 2000 	ldr.w	r2, [fp]
 800bbc8:	b958      	cbnz	r0, 800bbe2 <__kernel_rem_pio2+0x252>
 800bbca:	b122      	cbz	r2, 800bbd6 <__kernel_rem_pio2+0x246>
 800bbcc:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800bbd0:	f8cb 2000 	str.w	r2, [fp]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	f10c 0c01 	add.w	ip, ip, #1
 800bbda:	f10b 0b04 	add.w	fp, fp, #4
 800bbde:	4610      	mov	r0, r2
 800bbe0:	e783      	b.n	800baea <__kernel_rem_pio2+0x15a>
 800bbe2:	ebae 0202 	sub.w	r2, lr, r2
 800bbe6:	f8cb 2000 	str.w	r2, [fp]
 800bbea:	4602      	mov	r2, r0
 800bbec:	e7f3      	b.n	800bbd6 <__kernel_rem_pio2+0x246>
 800bbee:	f105 3cff 	add.w	ip, r5, #4294967295
 800bbf2:	ab06      	add	r3, sp, #24
 800bbf4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800bbf8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800bbfc:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800bc00:	e77c      	b.n	800bafc <__kernel_rem_pio2+0x16c>
 800bc02:	f105 3cff 	add.w	ip, r5, #4294967295
 800bc06:	ab06      	add	r3, sp, #24
 800bc08:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800bc0c:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800bc10:	e7f4      	b.n	800bbfc <__kernel_rem_pio2+0x26c>
 800bc12:	ab06      	add	r3, sp, #24
 800bc14:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bc18:	3801      	subs	r0, #1
 800bc1a:	431a      	orrs	r2, r3
 800bc1c:	e7a6      	b.n	800bb6c <__kernel_rem_pio2+0x1dc>
 800bc1e:	3201      	adds	r2, #1
 800bc20:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800bc24:	2e00      	cmp	r6, #0
 800bc26:	d0fa      	beq.n	800bc1e <__kernel_rem_pio2+0x28e>
 800bc28:	9b05      	ldr	r3, [sp, #20]
 800bc2a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800bc2e:	eb0d 0003 	add.w	r0, sp, r3
 800bc32:	9b01      	ldr	r3, [sp, #4]
 800bc34:	18ee      	adds	r6, r5, r3
 800bc36:	ab1a      	add	r3, sp, #104	; 0x68
 800bc38:	f105 0c01 	add.w	ip, r5, #1
 800bc3c:	3898      	subs	r0, #152	; 0x98
 800bc3e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bc42:	442a      	add	r2, r5
 800bc44:	4562      	cmp	r2, ip
 800bc46:	da04      	bge.n	800bc52 <__kernel_rem_pio2+0x2c2>
 800bc48:	4615      	mov	r5, r2
 800bc4a:	e709      	b.n	800ba60 <__kernel_rem_pio2+0xd0>
 800bc4c:	9804      	ldr	r0, [sp, #16]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	e7e6      	b.n	800bc20 <__kernel_rem_pio2+0x290>
 800bc52:	9b03      	ldr	r3, [sp, #12]
 800bc54:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bc58:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bc5c:	9305      	str	r3, [sp, #20]
 800bc5e:	ee07 3a90 	vmov	s15, r3
 800bc62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bc66:	2500      	movs	r5, #0
 800bc68:	eca6 7b02 	vstmia	r6!, {d7}
 800bc6c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 800bc98 <__kernel_rem_pio2+0x308>
 800bc70:	46b0      	mov	r8, r6
 800bc72:	4555      	cmp	r5, sl
 800bc74:	dd04      	ble.n	800bc80 <__kernel_rem_pio2+0x2f0>
 800bc76:	eca0 7b02 	vstmia	r0!, {d7}
 800bc7a:	f10c 0c01 	add.w	ip, ip, #1
 800bc7e:	e7e1      	b.n	800bc44 <__kernel_rem_pio2+0x2b4>
 800bc80:	ecbe 5b02 	vldmia	lr!, {d5}
 800bc84:	ed38 6b02 	vldmdb	r8!, {d6}
 800bc88:	3501      	adds	r5, #1
 800bc8a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bc8e:	e7f0      	b.n	800bc72 <__kernel_rem_pio2+0x2e2>
 800bc90:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc94:	e76e      	b.n	800bb74 <__kernel_rem_pio2+0x1e4>
 800bc96:	bf00      	nop
	...
 800bca4:	3e700000 	.word	0x3e700000
 800bca8:	00000000 	.word	0x00000000
 800bcac:	41700000 	.word	0x41700000
 800bcb0:	08021ff0 	.word	0x08021ff0
 800bcb4:	08021fb0 	.word	0x08021fb0
 800bcb8:	4260      	negs	r0, r4
 800bcba:	eeb0 0b48 	vmov.f64	d0, d8
 800bcbe:	f000 f8fb 	bl	800beb8 <scalbn>
 800bcc2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800bea0 <__kernel_rem_pio2+0x510>
 800bcc6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800bcca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcce:	db18      	blt.n	800bd02 <__kernel_rem_pio2+0x372>
 800bcd0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800bea8 <__kernel_rem_pio2+0x518>
 800bcd4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800bcd8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800bcdc:	aa06      	add	r2, sp, #24
 800bcde:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800bce2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800bce6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800bcea:	f105 0b01 	add.w	fp, r5, #1
 800bcee:	ee10 3a10 	vmov	r3, s0
 800bcf2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800bcf6:	ee17 3a10 	vmov	r3, s14
 800bcfa:	3418      	adds	r4, #24
 800bcfc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800bd00:	e73f      	b.n	800bb82 <__kernel_rem_pio2+0x1f2>
 800bd02:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800bd06:	aa06      	add	r2, sp, #24
 800bd08:	ee10 3a10 	vmov	r3, s0
 800bd0c:	46ab      	mov	fp, r5
 800bd0e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800bd12:	e736      	b.n	800bb82 <__kernel_rem_pio2+0x1f2>
 800bd14:	a806      	add	r0, sp, #24
 800bd16:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800bd1a:	9001      	str	r0, [sp, #4]
 800bd1c:	ee07 0a90 	vmov	s15, r0
 800bd20:	3a01      	subs	r2, #1
 800bd22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bd26:	ee27 7b00 	vmul.f64	d7, d7, d0
 800bd2a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800bd2e:	ed21 7b02 	vstmdb	r1!, {d7}
 800bd32:	e734      	b.n	800bb9e <__kernel_rem_pio2+0x20e>
 800bd34:	ecb5 5b02 	vldmia	r5!, {d5}
 800bd38:	ecb4 6b02 	vldmia	r4!, {d6}
 800bd3c:	3001      	adds	r0, #1
 800bd3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bd42:	4548      	cmp	r0, r9
 800bd44:	dc01      	bgt.n	800bd4a <__kernel_rem_pio2+0x3ba>
 800bd46:	4288      	cmp	r0, r1
 800bd48:	ddf4      	ble.n	800bd34 <__kernel_rem_pio2+0x3a4>
 800bd4a:	a842      	add	r0, sp, #264	; 0x108
 800bd4c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800bd50:	ed81 7b00 	vstr	d7, [r1]
 800bd54:	3a01      	subs	r2, #1
 800bd56:	e726      	b.n	800bba6 <__kernel_rem_pio2+0x216>
 800bd58:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800bd5a:	2a02      	cmp	r2, #2
 800bd5c:	dc0a      	bgt.n	800bd74 <__kernel_rem_pio2+0x3e4>
 800bd5e:	2a00      	cmp	r2, #0
 800bd60:	dc2e      	bgt.n	800bdc0 <__kernel_rem_pio2+0x430>
 800bd62:	d047      	beq.n	800bdf4 <__kernel_rem_pio2+0x464>
 800bd64:	f008 0007 	and.w	r0, r8, #7
 800bd68:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800bd6c:	ecbd 8b06 	vpop	{d8-d10}
 800bd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd74:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800bd76:	2a03      	cmp	r2, #3
 800bd78:	d1f4      	bne.n	800bd64 <__kernel_rem_pio2+0x3d4>
 800bd7a:	a942      	add	r1, sp, #264	; 0x108
 800bd7c:	f1a3 0208 	sub.w	r2, r3, #8
 800bd80:	440a      	add	r2, r1
 800bd82:	4611      	mov	r1, r2
 800bd84:	4658      	mov	r0, fp
 800bd86:	2800      	cmp	r0, #0
 800bd88:	f1a1 0108 	sub.w	r1, r1, #8
 800bd8c:	dc55      	bgt.n	800be3a <__kernel_rem_pio2+0x4aa>
 800bd8e:	4659      	mov	r1, fp
 800bd90:	2901      	cmp	r1, #1
 800bd92:	f1a2 0208 	sub.w	r2, r2, #8
 800bd96:	dc60      	bgt.n	800be5a <__kernel_rem_pio2+0x4ca>
 800bd98:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800beb0 <__kernel_rem_pio2+0x520>
 800bd9c:	aa42      	add	r2, sp, #264	; 0x108
 800bd9e:	4413      	add	r3, r2
 800bda0:	f1bb 0f01 	cmp.w	fp, #1
 800bda4:	dc69      	bgt.n	800be7a <__kernel_rem_pio2+0x4ea>
 800bda6:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800bdaa:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800bdae:	2e00      	cmp	r6, #0
 800bdb0:	d16a      	bne.n	800be88 <__kernel_rem_pio2+0x4f8>
 800bdb2:	ed87 5b00 	vstr	d5, [r7]
 800bdb6:	ed87 6b02 	vstr	d6, [r7, #8]
 800bdba:	ed87 7b04 	vstr	d7, [r7, #16]
 800bdbe:	e7d1      	b.n	800bd64 <__kernel_rem_pio2+0x3d4>
 800bdc0:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800beb0 <__kernel_rem_pio2+0x520>
 800bdc4:	aa42      	add	r2, sp, #264	; 0x108
 800bdc6:	4413      	add	r3, r2
 800bdc8:	465a      	mov	r2, fp
 800bdca:	2a00      	cmp	r2, #0
 800bdcc:	da26      	bge.n	800be1c <__kernel_rem_pio2+0x48c>
 800bdce:	b35e      	cbz	r6, 800be28 <__kernel_rem_pio2+0x498>
 800bdd0:	eeb1 7b46 	vneg.f64	d7, d6
 800bdd4:	ed87 7b00 	vstr	d7, [r7]
 800bdd8:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800bddc:	aa44      	add	r2, sp, #272	; 0x110
 800bdde:	2301      	movs	r3, #1
 800bde0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bde4:	459b      	cmp	fp, r3
 800bde6:	da22      	bge.n	800be2e <__kernel_rem_pio2+0x49e>
 800bde8:	b10e      	cbz	r6, 800bdee <__kernel_rem_pio2+0x45e>
 800bdea:	eeb1 7b47 	vneg.f64	d7, d7
 800bdee:	ed87 7b02 	vstr	d7, [r7, #8]
 800bdf2:	e7b7      	b.n	800bd64 <__kernel_rem_pio2+0x3d4>
 800bdf4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800beb0 <__kernel_rem_pio2+0x520>
 800bdf8:	aa42      	add	r2, sp, #264	; 0x108
 800bdfa:	4413      	add	r3, r2
 800bdfc:	f1bb 0f00 	cmp.w	fp, #0
 800be00:	da05      	bge.n	800be0e <__kernel_rem_pio2+0x47e>
 800be02:	b10e      	cbz	r6, 800be08 <__kernel_rem_pio2+0x478>
 800be04:	eeb1 7b47 	vneg.f64	d7, d7
 800be08:	ed87 7b00 	vstr	d7, [r7]
 800be0c:	e7aa      	b.n	800bd64 <__kernel_rem_pio2+0x3d4>
 800be0e:	ed33 6b02 	vldmdb	r3!, {d6}
 800be12:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be16:	ee37 7b06 	vadd.f64	d7, d7, d6
 800be1a:	e7ef      	b.n	800bdfc <__kernel_rem_pio2+0x46c>
 800be1c:	ed33 7b02 	vldmdb	r3!, {d7}
 800be20:	3a01      	subs	r2, #1
 800be22:	ee36 6b07 	vadd.f64	d6, d6, d7
 800be26:	e7d0      	b.n	800bdca <__kernel_rem_pio2+0x43a>
 800be28:	eeb0 7b46 	vmov.f64	d7, d6
 800be2c:	e7d2      	b.n	800bdd4 <__kernel_rem_pio2+0x444>
 800be2e:	ecb2 6b02 	vldmia	r2!, {d6}
 800be32:	3301      	adds	r3, #1
 800be34:	ee37 7b06 	vadd.f64	d7, d7, d6
 800be38:	e7d4      	b.n	800bde4 <__kernel_rem_pio2+0x454>
 800be3a:	ed91 7b00 	vldr	d7, [r1]
 800be3e:	ed91 5b02 	vldr	d5, [r1, #8]
 800be42:	3801      	subs	r0, #1
 800be44:	ee37 6b05 	vadd.f64	d6, d7, d5
 800be48:	ee37 7b46 	vsub.f64	d7, d7, d6
 800be4c:	ed81 6b00 	vstr	d6, [r1]
 800be50:	ee37 7b05 	vadd.f64	d7, d7, d5
 800be54:	ed81 7b02 	vstr	d7, [r1, #8]
 800be58:	e795      	b.n	800bd86 <__kernel_rem_pio2+0x3f6>
 800be5a:	ed92 7b00 	vldr	d7, [r2]
 800be5e:	ed92 5b02 	vldr	d5, [r2, #8]
 800be62:	3901      	subs	r1, #1
 800be64:	ee37 6b05 	vadd.f64	d6, d7, d5
 800be68:	ee37 7b46 	vsub.f64	d7, d7, d6
 800be6c:	ed82 6b00 	vstr	d6, [r2]
 800be70:	ee37 7b05 	vadd.f64	d7, d7, d5
 800be74:	ed82 7b02 	vstr	d7, [r2, #8]
 800be78:	e78a      	b.n	800bd90 <__kernel_rem_pio2+0x400>
 800be7a:	ed33 6b02 	vldmdb	r3!, {d6}
 800be7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be82:	ee37 7b06 	vadd.f64	d7, d7, d6
 800be86:	e78b      	b.n	800bda0 <__kernel_rem_pio2+0x410>
 800be88:	eeb1 5b45 	vneg.f64	d5, d5
 800be8c:	eeb1 6b46 	vneg.f64	d6, d6
 800be90:	ed87 5b00 	vstr	d5, [r7]
 800be94:	eeb1 7b47 	vneg.f64	d7, d7
 800be98:	ed87 6b02 	vstr	d6, [r7, #8]
 800be9c:	e78d      	b.n	800bdba <__kernel_rem_pio2+0x42a>
 800be9e:	bf00      	nop
 800bea0:	00000000 	.word	0x00000000
 800bea4:	41700000 	.word	0x41700000
 800bea8:	00000000 	.word	0x00000000
 800beac:	3e700000 	.word	0x3e700000
	...

0800beb8 <scalbn>:
 800beb8:	ee10 1a90 	vmov	r1, s1
 800bebc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bec0:	b98b      	cbnz	r3, 800bee6 <scalbn+0x2e>
 800bec2:	ee10 3a10 	vmov	r3, s0
 800bec6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800beca:	4319      	orrs	r1, r3
 800becc:	d00a      	beq.n	800bee4 <scalbn+0x2c>
 800bece:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800bf80 <scalbn+0xc8>
 800bed2:	4b37      	ldr	r3, [pc, #220]	; (800bfb0 <scalbn+0xf8>)
 800bed4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bed8:	4298      	cmp	r0, r3
 800beda:	da0b      	bge.n	800bef4 <scalbn+0x3c>
 800bedc:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800bf88 <scalbn+0xd0>
 800bee0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bee4:	4770      	bx	lr
 800bee6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800beea:	4293      	cmp	r3, r2
 800beec:	d107      	bne.n	800befe <scalbn+0x46>
 800beee:	ee30 0b00 	vadd.f64	d0, d0, d0
 800bef2:	4770      	bx	lr
 800bef4:	ee10 1a90 	vmov	r1, s1
 800bef8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800befc:	3b36      	subs	r3, #54	; 0x36
 800befe:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bf02:	4290      	cmp	r0, r2
 800bf04:	dd0d      	ble.n	800bf22 <scalbn+0x6a>
 800bf06:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800bf90 <scalbn+0xd8>
 800bf0a:	ee10 3a90 	vmov	r3, s1
 800bf0e:	eeb0 6b47 	vmov.f64	d6, d7
 800bf12:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800bf98 <scalbn+0xe0>
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	fe27 7b05 	vselge.f64	d7, d7, d5
 800bf1c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800bf20:	4770      	bx	lr
 800bf22:	4418      	add	r0, r3
 800bf24:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800bf28:	4298      	cmp	r0, r3
 800bf2a:	dcec      	bgt.n	800bf06 <scalbn+0x4e>
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	dd0a      	ble.n	800bf46 <scalbn+0x8e>
 800bf30:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800bf34:	ec53 2b10 	vmov	r2, r3, d0
 800bf38:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800bf3c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800bf40:	ec43 2b10 	vmov	d0, r2, r3
 800bf44:	4770      	bx	lr
 800bf46:	f110 0f35 	cmn.w	r0, #53	; 0x35
 800bf4a:	da09      	bge.n	800bf60 <scalbn+0xa8>
 800bf4c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800bf88 <scalbn+0xd0>
 800bf50:	ee10 3a90 	vmov	r3, s1
 800bf54:	eeb0 6b47 	vmov.f64	d6, d7
 800bf58:	ed9f 5b11 	vldr	d5, [pc, #68]	; 800bfa0 <scalbn+0xe8>
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	e7db      	b.n	800bf18 <scalbn+0x60>
 800bf60:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800bf64:	ec53 2b10 	vmov	r2, r3, d0
 800bf68:	3036      	adds	r0, #54	; 0x36
 800bf6a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800bf6e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800bf72:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800bfa8 <scalbn+0xf0>
 800bf76:	ec43 2b10 	vmov	d0, r2, r3
 800bf7a:	e7b1      	b.n	800bee0 <scalbn+0x28>
 800bf7c:	f3af 8000 	nop.w
 800bf80:	00000000 	.word	0x00000000
 800bf84:	43500000 	.word	0x43500000
 800bf88:	c2f8f359 	.word	0xc2f8f359
 800bf8c:	01a56e1f 	.word	0x01a56e1f
 800bf90:	8800759c 	.word	0x8800759c
 800bf94:	7e37e43c 	.word	0x7e37e43c
 800bf98:	8800759c 	.word	0x8800759c
 800bf9c:	fe37e43c 	.word	0xfe37e43c
 800bfa0:	c2f8f359 	.word	0xc2f8f359
 800bfa4:	81a56e1f 	.word	0x81a56e1f
 800bfa8:	00000000 	.word	0x00000000
 800bfac:	3c900000 	.word	0x3c900000
 800bfb0:	ffff3cb0 	.word	0xffff3cb0
 800bfb4:	00000000 	.word	0x00000000

0800bfb8 <floor>:
 800bfb8:	ee10 1a90 	vmov	r1, s1
 800bfbc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bfc0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800bfc4:	2b13      	cmp	r3, #19
 800bfc6:	b530      	push	{r4, r5, lr}
 800bfc8:	ee10 0a10 	vmov	r0, s0
 800bfcc:	ee10 5a10 	vmov	r5, s0
 800bfd0:	dc31      	bgt.n	800c036 <floor+0x7e>
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	da15      	bge.n	800c002 <floor+0x4a>
 800bfd6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800c098 <floor+0xe0>
 800bfda:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bfde:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe6:	dd07      	ble.n	800bff8 <floor+0x40>
 800bfe8:	2900      	cmp	r1, #0
 800bfea:	da4e      	bge.n	800c08a <floor+0xd2>
 800bfec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bff0:	4308      	orrs	r0, r1
 800bff2:	d04d      	beq.n	800c090 <floor+0xd8>
 800bff4:	492a      	ldr	r1, [pc, #168]	; (800c0a0 <floor+0xe8>)
 800bff6:	2000      	movs	r0, #0
 800bff8:	460b      	mov	r3, r1
 800bffa:	4602      	mov	r2, r0
 800bffc:	ec43 2b10 	vmov	d0, r2, r3
 800c000:	e020      	b.n	800c044 <floor+0x8c>
 800c002:	4a28      	ldr	r2, [pc, #160]	; (800c0a4 <floor+0xec>)
 800c004:	411a      	asrs	r2, r3
 800c006:	ea01 0402 	and.w	r4, r1, r2
 800c00a:	4304      	orrs	r4, r0
 800c00c:	d01a      	beq.n	800c044 <floor+0x8c>
 800c00e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800c098 <floor+0xe0>
 800c012:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c016:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c01e:	ddeb      	ble.n	800bff8 <floor+0x40>
 800c020:	2900      	cmp	r1, #0
 800c022:	bfbe      	ittt	lt
 800c024:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800c028:	fa40 f303 	asrlt.w	r3, r0, r3
 800c02c:	18c9      	addlt	r1, r1, r3
 800c02e:	ea21 0102 	bic.w	r1, r1, r2
 800c032:	2000      	movs	r0, #0
 800c034:	e7e0      	b.n	800bff8 <floor+0x40>
 800c036:	2b33      	cmp	r3, #51	; 0x33
 800c038:	dd05      	ble.n	800c046 <floor+0x8e>
 800c03a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c03e:	d101      	bne.n	800c044 <floor+0x8c>
 800c040:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c044:	bd30      	pop	{r4, r5, pc}
 800c046:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800c04a:	f04f 32ff 	mov.w	r2, #4294967295
 800c04e:	40e2      	lsrs	r2, r4
 800c050:	4210      	tst	r0, r2
 800c052:	d0f7      	beq.n	800c044 <floor+0x8c>
 800c054:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800c098 <floor+0xe0>
 800c058:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c05c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c064:	ddc8      	ble.n	800bff8 <floor+0x40>
 800c066:	2900      	cmp	r1, #0
 800c068:	da02      	bge.n	800c070 <floor+0xb8>
 800c06a:	2b14      	cmp	r3, #20
 800c06c:	d103      	bne.n	800c076 <floor+0xbe>
 800c06e:	3101      	adds	r1, #1
 800c070:	ea20 0002 	bic.w	r0, r0, r2
 800c074:	e7c0      	b.n	800bff8 <floor+0x40>
 800c076:	2401      	movs	r4, #1
 800c078:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c07c:	fa04 f303 	lsl.w	r3, r4, r3
 800c080:	4418      	add	r0, r3
 800c082:	4285      	cmp	r5, r0
 800c084:	bf88      	it	hi
 800c086:	1909      	addhi	r1, r1, r4
 800c088:	e7f2      	b.n	800c070 <floor+0xb8>
 800c08a:	2000      	movs	r0, #0
 800c08c:	4601      	mov	r1, r0
 800c08e:	e7b3      	b.n	800bff8 <floor+0x40>
 800c090:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c094:	e7b0      	b.n	800bff8 <floor+0x40>
 800c096:	bf00      	nop
 800c098:	8800759c 	.word	0x8800759c
 800c09c:	7e37e43c 	.word	0x7e37e43c
 800c0a0:	bff00000 	.word	0xbff00000
 800c0a4:	000fffff 	.word	0x000fffff

0800c0a8 <malloc>:
 800c0a8:	4b02      	ldr	r3, [pc, #8]	; (800c0b4 <malloc+0xc>)
 800c0aa:	4601      	mov	r1, r0
 800c0ac:	6818      	ldr	r0, [r3, #0]
 800c0ae:	f000 b82b 	b.w	800c108 <_malloc_r>
 800c0b2:	bf00      	nop
 800c0b4:	2000016c 	.word	0x2000016c

0800c0b8 <free>:
 800c0b8:	4b02      	ldr	r3, [pc, #8]	; (800c0c4 <free+0xc>)
 800c0ba:	4601      	mov	r1, r0
 800c0bc:	6818      	ldr	r0, [r3, #0]
 800c0be:	f001 bc73 	b.w	800d9a8 <_free_r>
 800c0c2:	bf00      	nop
 800c0c4:	2000016c 	.word	0x2000016c

0800c0c8 <sbrk_aligned>:
 800c0c8:	b570      	push	{r4, r5, r6, lr}
 800c0ca:	4e0e      	ldr	r6, [pc, #56]	; (800c104 <sbrk_aligned+0x3c>)
 800c0cc:	460c      	mov	r4, r1
 800c0ce:	6831      	ldr	r1, [r6, #0]
 800c0d0:	4605      	mov	r5, r0
 800c0d2:	b911      	cbnz	r1, 800c0da <sbrk_aligned+0x12>
 800c0d4:	f000 fe24 	bl	800cd20 <_sbrk_r>
 800c0d8:	6030      	str	r0, [r6, #0]
 800c0da:	4621      	mov	r1, r4
 800c0dc:	4628      	mov	r0, r5
 800c0de:	f000 fe1f 	bl	800cd20 <_sbrk_r>
 800c0e2:	1c43      	adds	r3, r0, #1
 800c0e4:	d00a      	beq.n	800c0fc <sbrk_aligned+0x34>
 800c0e6:	1cc4      	adds	r4, r0, #3
 800c0e8:	f024 0403 	bic.w	r4, r4, #3
 800c0ec:	42a0      	cmp	r0, r4
 800c0ee:	d007      	beq.n	800c100 <sbrk_aligned+0x38>
 800c0f0:	1a21      	subs	r1, r4, r0
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f000 fe14 	bl	800cd20 <_sbrk_r>
 800c0f8:	3001      	adds	r0, #1
 800c0fa:	d101      	bne.n	800c100 <sbrk_aligned+0x38>
 800c0fc:	f04f 34ff 	mov.w	r4, #4294967295
 800c100:	4620      	mov	r0, r4
 800c102:	bd70      	pop	{r4, r5, r6, pc}
 800c104:	2001c408 	.word	0x2001c408

0800c108 <_malloc_r>:
 800c108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c10c:	1ccd      	adds	r5, r1, #3
 800c10e:	f025 0503 	bic.w	r5, r5, #3
 800c112:	3508      	adds	r5, #8
 800c114:	2d0c      	cmp	r5, #12
 800c116:	bf38      	it	cc
 800c118:	250c      	movcc	r5, #12
 800c11a:	2d00      	cmp	r5, #0
 800c11c:	4607      	mov	r7, r0
 800c11e:	db01      	blt.n	800c124 <_malloc_r+0x1c>
 800c120:	42a9      	cmp	r1, r5
 800c122:	d905      	bls.n	800c130 <_malloc_r+0x28>
 800c124:	230c      	movs	r3, #12
 800c126:	603b      	str	r3, [r7, #0]
 800c128:	2600      	movs	r6, #0
 800c12a:	4630      	mov	r0, r6
 800c12c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c130:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c204 <_malloc_r+0xfc>
 800c134:	f000 f868 	bl	800c208 <__malloc_lock>
 800c138:	f8d8 3000 	ldr.w	r3, [r8]
 800c13c:	461c      	mov	r4, r3
 800c13e:	bb5c      	cbnz	r4, 800c198 <_malloc_r+0x90>
 800c140:	4629      	mov	r1, r5
 800c142:	4638      	mov	r0, r7
 800c144:	f7ff ffc0 	bl	800c0c8 <sbrk_aligned>
 800c148:	1c43      	adds	r3, r0, #1
 800c14a:	4604      	mov	r4, r0
 800c14c:	d155      	bne.n	800c1fa <_malloc_r+0xf2>
 800c14e:	f8d8 4000 	ldr.w	r4, [r8]
 800c152:	4626      	mov	r6, r4
 800c154:	2e00      	cmp	r6, #0
 800c156:	d145      	bne.n	800c1e4 <_malloc_r+0xdc>
 800c158:	2c00      	cmp	r4, #0
 800c15a:	d048      	beq.n	800c1ee <_malloc_r+0xe6>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	4631      	mov	r1, r6
 800c160:	4638      	mov	r0, r7
 800c162:	eb04 0903 	add.w	r9, r4, r3
 800c166:	f000 fddb 	bl	800cd20 <_sbrk_r>
 800c16a:	4581      	cmp	r9, r0
 800c16c:	d13f      	bne.n	800c1ee <_malloc_r+0xe6>
 800c16e:	6821      	ldr	r1, [r4, #0]
 800c170:	1a6d      	subs	r5, r5, r1
 800c172:	4629      	mov	r1, r5
 800c174:	4638      	mov	r0, r7
 800c176:	f7ff ffa7 	bl	800c0c8 <sbrk_aligned>
 800c17a:	3001      	adds	r0, #1
 800c17c:	d037      	beq.n	800c1ee <_malloc_r+0xe6>
 800c17e:	6823      	ldr	r3, [r4, #0]
 800c180:	442b      	add	r3, r5
 800c182:	6023      	str	r3, [r4, #0]
 800c184:	f8d8 3000 	ldr.w	r3, [r8]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d038      	beq.n	800c1fe <_malloc_r+0xf6>
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	42a2      	cmp	r2, r4
 800c190:	d12b      	bne.n	800c1ea <_malloc_r+0xe2>
 800c192:	2200      	movs	r2, #0
 800c194:	605a      	str	r2, [r3, #4]
 800c196:	e00f      	b.n	800c1b8 <_malloc_r+0xb0>
 800c198:	6822      	ldr	r2, [r4, #0]
 800c19a:	1b52      	subs	r2, r2, r5
 800c19c:	d41f      	bmi.n	800c1de <_malloc_r+0xd6>
 800c19e:	2a0b      	cmp	r2, #11
 800c1a0:	d917      	bls.n	800c1d2 <_malloc_r+0xca>
 800c1a2:	1961      	adds	r1, r4, r5
 800c1a4:	42a3      	cmp	r3, r4
 800c1a6:	6025      	str	r5, [r4, #0]
 800c1a8:	bf18      	it	ne
 800c1aa:	6059      	strne	r1, [r3, #4]
 800c1ac:	6863      	ldr	r3, [r4, #4]
 800c1ae:	bf08      	it	eq
 800c1b0:	f8c8 1000 	streq.w	r1, [r8]
 800c1b4:	5162      	str	r2, [r4, r5]
 800c1b6:	604b      	str	r3, [r1, #4]
 800c1b8:	4638      	mov	r0, r7
 800c1ba:	f104 060b 	add.w	r6, r4, #11
 800c1be:	f000 f829 	bl	800c214 <__malloc_unlock>
 800c1c2:	f026 0607 	bic.w	r6, r6, #7
 800c1c6:	1d23      	adds	r3, r4, #4
 800c1c8:	1af2      	subs	r2, r6, r3
 800c1ca:	d0ae      	beq.n	800c12a <_malloc_r+0x22>
 800c1cc:	1b9b      	subs	r3, r3, r6
 800c1ce:	50a3      	str	r3, [r4, r2]
 800c1d0:	e7ab      	b.n	800c12a <_malloc_r+0x22>
 800c1d2:	42a3      	cmp	r3, r4
 800c1d4:	6862      	ldr	r2, [r4, #4]
 800c1d6:	d1dd      	bne.n	800c194 <_malloc_r+0x8c>
 800c1d8:	f8c8 2000 	str.w	r2, [r8]
 800c1dc:	e7ec      	b.n	800c1b8 <_malloc_r+0xb0>
 800c1de:	4623      	mov	r3, r4
 800c1e0:	6864      	ldr	r4, [r4, #4]
 800c1e2:	e7ac      	b.n	800c13e <_malloc_r+0x36>
 800c1e4:	4634      	mov	r4, r6
 800c1e6:	6876      	ldr	r6, [r6, #4]
 800c1e8:	e7b4      	b.n	800c154 <_malloc_r+0x4c>
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	e7cc      	b.n	800c188 <_malloc_r+0x80>
 800c1ee:	230c      	movs	r3, #12
 800c1f0:	603b      	str	r3, [r7, #0]
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	f000 f80e 	bl	800c214 <__malloc_unlock>
 800c1f8:	e797      	b.n	800c12a <_malloc_r+0x22>
 800c1fa:	6025      	str	r5, [r4, #0]
 800c1fc:	e7dc      	b.n	800c1b8 <_malloc_r+0xb0>
 800c1fe:	605b      	str	r3, [r3, #4]
 800c200:	deff      	udf	#255	; 0xff
 800c202:	bf00      	nop
 800c204:	2001c404 	.word	0x2001c404

0800c208 <__malloc_lock>:
 800c208:	4801      	ldr	r0, [pc, #4]	; (800c210 <__malloc_lock+0x8>)
 800c20a:	f000 bdd6 	b.w	800cdba <__retarget_lock_acquire_recursive>
 800c20e:	bf00      	nop
 800c210:	2001c54c 	.word	0x2001c54c

0800c214 <__malloc_unlock>:
 800c214:	4801      	ldr	r0, [pc, #4]	; (800c21c <__malloc_unlock+0x8>)
 800c216:	f000 bdd1 	b.w	800cdbc <__retarget_lock_release_recursive>
 800c21a:	bf00      	nop
 800c21c:	2001c54c 	.word	0x2001c54c

0800c220 <__cvt>:
 800c220:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c222:	ed2d 8b02 	vpush	{d8}
 800c226:	eeb0 8b40 	vmov.f64	d8, d0
 800c22a:	b085      	sub	sp, #20
 800c22c:	4617      	mov	r7, r2
 800c22e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c230:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c232:	ee18 2a90 	vmov	r2, s17
 800c236:	f025 0520 	bic.w	r5, r5, #32
 800c23a:	2a00      	cmp	r2, #0
 800c23c:	bfb6      	itet	lt
 800c23e:	222d      	movlt	r2, #45	; 0x2d
 800c240:	2200      	movge	r2, #0
 800c242:	eeb1 8b40 	vneglt.f64	d8, d0
 800c246:	2d46      	cmp	r5, #70	; 0x46
 800c248:	460c      	mov	r4, r1
 800c24a:	701a      	strb	r2, [r3, #0]
 800c24c:	d004      	beq.n	800c258 <__cvt+0x38>
 800c24e:	2d45      	cmp	r5, #69	; 0x45
 800c250:	d100      	bne.n	800c254 <__cvt+0x34>
 800c252:	3401      	adds	r4, #1
 800c254:	2102      	movs	r1, #2
 800c256:	e000      	b.n	800c25a <__cvt+0x3a>
 800c258:	2103      	movs	r1, #3
 800c25a:	ab03      	add	r3, sp, #12
 800c25c:	9301      	str	r3, [sp, #4]
 800c25e:	ab02      	add	r3, sp, #8
 800c260:	9300      	str	r3, [sp, #0]
 800c262:	4622      	mov	r2, r4
 800c264:	4633      	mov	r3, r6
 800c266:	eeb0 0b48 	vmov.f64	d0, d8
 800c26a:	f000 fe31 	bl	800ced0 <_dtoa_r>
 800c26e:	2d47      	cmp	r5, #71	; 0x47
 800c270:	d101      	bne.n	800c276 <__cvt+0x56>
 800c272:	07fb      	lsls	r3, r7, #31
 800c274:	d51a      	bpl.n	800c2ac <__cvt+0x8c>
 800c276:	2d46      	cmp	r5, #70	; 0x46
 800c278:	eb00 0204 	add.w	r2, r0, r4
 800c27c:	d10c      	bne.n	800c298 <__cvt+0x78>
 800c27e:	7803      	ldrb	r3, [r0, #0]
 800c280:	2b30      	cmp	r3, #48	; 0x30
 800c282:	d107      	bne.n	800c294 <__cvt+0x74>
 800c284:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c28c:	bf1c      	itt	ne
 800c28e:	f1c4 0401 	rsbne	r4, r4, #1
 800c292:	6034      	strne	r4, [r6, #0]
 800c294:	6833      	ldr	r3, [r6, #0]
 800c296:	441a      	add	r2, r3
 800c298:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a0:	bf08      	it	eq
 800c2a2:	9203      	streq	r2, [sp, #12]
 800c2a4:	2130      	movs	r1, #48	; 0x30
 800c2a6:	9b03      	ldr	r3, [sp, #12]
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d307      	bcc.n	800c2bc <__cvt+0x9c>
 800c2ac:	9b03      	ldr	r3, [sp, #12]
 800c2ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2b0:	1a1b      	subs	r3, r3, r0
 800c2b2:	6013      	str	r3, [r2, #0]
 800c2b4:	b005      	add	sp, #20
 800c2b6:	ecbd 8b02 	vpop	{d8}
 800c2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2bc:	1c5c      	adds	r4, r3, #1
 800c2be:	9403      	str	r4, [sp, #12]
 800c2c0:	7019      	strb	r1, [r3, #0]
 800c2c2:	e7f0      	b.n	800c2a6 <__cvt+0x86>

0800c2c4 <__exponent>:
 800c2c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2900      	cmp	r1, #0
 800c2ca:	bfb8      	it	lt
 800c2cc:	4249      	neglt	r1, r1
 800c2ce:	f803 2b02 	strb.w	r2, [r3], #2
 800c2d2:	bfb4      	ite	lt
 800c2d4:	222d      	movlt	r2, #45	; 0x2d
 800c2d6:	222b      	movge	r2, #43	; 0x2b
 800c2d8:	2909      	cmp	r1, #9
 800c2da:	7042      	strb	r2, [r0, #1]
 800c2dc:	dd2a      	ble.n	800c334 <__exponent+0x70>
 800c2de:	f10d 0207 	add.w	r2, sp, #7
 800c2e2:	4617      	mov	r7, r2
 800c2e4:	260a      	movs	r6, #10
 800c2e6:	4694      	mov	ip, r2
 800c2e8:	fb91 f5f6 	sdiv	r5, r1, r6
 800c2ec:	fb06 1415 	mls	r4, r6, r5, r1
 800c2f0:	3430      	adds	r4, #48	; 0x30
 800c2f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	2c63      	cmp	r4, #99	; 0x63
 800c2fa:	f102 32ff 	add.w	r2, r2, #4294967295
 800c2fe:	4629      	mov	r1, r5
 800c300:	dcf1      	bgt.n	800c2e6 <__exponent+0x22>
 800c302:	3130      	adds	r1, #48	; 0x30
 800c304:	f1ac 0402 	sub.w	r4, ip, #2
 800c308:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c30c:	1c41      	adds	r1, r0, #1
 800c30e:	4622      	mov	r2, r4
 800c310:	42ba      	cmp	r2, r7
 800c312:	d30a      	bcc.n	800c32a <__exponent+0x66>
 800c314:	f10d 0209 	add.w	r2, sp, #9
 800c318:	eba2 020c 	sub.w	r2, r2, ip
 800c31c:	42bc      	cmp	r4, r7
 800c31e:	bf88      	it	hi
 800c320:	2200      	movhi	r2, #0
 800c322:	4413      	add	r3, r2
 800c324:	1a18      	subs	r0, r3, r0
 800c326:	b003      	add	sp, #12
 800c328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c32a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c32e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c332:	e7ed      	b.n	800c310 <__exponent+0x4c>
 800c334:	2330      	movs	r3, #48	; 0x30
 800c336:	3130      	adds	r1, #48	; 0x30
 800c338:	7083      	strb	r3, [r0, #2]
 800c33a:	70c1      	strb	r1, [r0, #3]
 800c33c:	1d03      	adds	r3, r0, #4
 800c33e:	e7f1      	b.n	800c324 <__exponent+0x60>

0800c340 <_printf_float>:
 800c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c344:	b08b      	sub	sp, #44	; 0x2c
 800c346:	460c      	mov	r4, r1
 800c348:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c34c:	4616      	mov	r6, r2
 800c34e:	461f      	mov	r7, r3
 800c350:	4605      	mov	r5, r0
 800c352:	f000 fcad 	bl	800ccb0 <_localeconv_r>
 800c356:	f8d0 b000 	ldr.w	fp, [r0]
 800c35a:	4658      	mov	r0, fp
 800c35c:	f7f4 f820 	bl	80003a0 <strlen>
 800c360:	2300      	movs	r3, #0
 800c362:	9308      	str	r3, [sp, #32]
 800c364:	f8d8 3000 	ldr.w	r3, [r8]
 800c368:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c36c:	6822      	ldr	r2, [r4, #0]
 800c36e:	3307      	adds	r3, #7
 800c370:	f023 0307 	bic.w	r3, r3, #7
 800c374:	f103 0108 	add.w	r1, r3, #8
 800c378:	f8c8 1000 	str.w	r1, [r8]
 800c37c:	ed93 0b00 	vldr	d0, [r3]
 800c380:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800c5e0 <_printf_float+0x2a0>
 800c384:	eeb0 7bc0 	vabs.f64	d7, d0
 800c388:	eeb4 7b46 	vcmp.f64	d7, d6
 800c38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c390:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800c394:	4682      	mov	sl, r0
 800c396:	dd24      	ble.n	800c3e2 <_printf_float+0xa2>
 800c398:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3a0:	d502      	bpl.n	800c3a8 <_printf_float+0x68>
 800c3a2:	232d      	movs	r3, #45	; 0x2d
 800c3a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3a8:	498f      	ldr	r1, [pc, #572]	; (800c5e8 <_printf_float+0x2a8>)
 800c3aa:	4b90      	ldr	r3, [pc, #576]	; (800c5ec <_printf_float+0x2ac>)
 800c3ac:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c3b0:	bf94      	ite	ls
 800c3b2:	4688      	movls	r8, r1
 800c3b4:	4698      	movhi	r8, r3
 800c3b6:	2303      	movs	r3, #3
 800c3b8:	6123      	str	r3, [r4, #16]
 800c3ba:	f022 0204 	bic.w	r2, r2, #4
 800c3be:	2300      	movs	r3, #0
 800c3c0:	6022      	str	r2, [r4, #0]
 800c3c2:	9304      	str	r3, [sp, #16]
 800c3c4:	9700      	str	r7, [sp, #0]
 800c3c6:	4633      	mov	r3, r6
 800c3c8:	aa09      	add	r2, sp, #36	; 0x24
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	f000 f9d1 	bl	800c774 <_printf_common>
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	f040 808a 	bne.w	800c4ec <_printf_float+0x1ac>
 800c3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3dc:	b00b      	add	sp, #44	; 0x2c
 800c3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e2:	eeb4 0b40 	vcmp.f64	d0, d0
 800c3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ea:	d709      	bvc.n	800c400 <_printf_float+0xc0>
 800c3ec:	ee10 3a90 	vmov	r3, s1
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	bfbc      	itt	lt
 800c3f4:	232d      	movlt	r3, #45	; 0x2d
 800c3f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c3fa:	497d      	ldr	r1, [pc, #500]	; (800c5f0 <_printf_float+0x2b0>)
 800c3fc:	4b7d      	ldr	r3, [pc, #500]	; (800c5f4 <_printf_float+0x2b4>)
 800c3fe:	e7d5      	b.n	800c3ac <_printf_float+0x6c>
 800c400:	6863      	ldr	r3, [r4, #4]
 800c402:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c406:	9104      	str	r1, [sp, #16]
 800c408:	1c59      	adds	r1, r3, #1
 800c40a:	d13c      	bne.n	800c486 <_printf_float+0x146>
 800c40c:	2306      	movs	r3, #6
 800c40e:	6063      	str	r3, [r4, #4]
 800c410:	2300      	movs	r3, #0
 800c412:	9303      	str	r3, [sp, #12]
 800c414:	ab08      	add	r3, sp, #32
 800c416:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c41a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c41e:	ab07      	add	r3, sp, #28
 800c420:	6861      	ldr	r1, [r4, #4]
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	6022      	str	r2, [r4, #0]
 800c426:	f10d 031b 	add.w	r3, sp, #27
 800c42a:	4628      	mov	r0, r5
 800c42c:	f7ff fef8 	bl	800c220 <__cvt>
 800c430:	9b04      	ldr	r3, [sp, #16]
 800c432:	9907      	ldr	r1, [sp, #28]
 800c434:	2b47      	cmp	r3, #71	; 0x47
 800c436:	4680      	mov	r8, r0
 800c438:	d108      	bne.n	800c44c <_printf_float+0x10c>
 800c43a:	1cc8      	adds	r0, r1, #3
 800c43c:	db02      	blt.n	800c444 <_printf_float+0x104>
 800c43e:	6863      	ldr	r3, [r4, #4]
 800c440:	4299      	cmp	r1, r3
 800c442:	dd41      	ble.n	800c4c8 <_printf_float+0x188>
 800c444:	f1a9 0902 	sub.w	r9, r9, #2
 800c448:	fa5f f989 	uxtb.w	r9, r9
 800c44c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c450:	d820      	bhi.n	800c494 <_printf_float+0x154>
 800c452:	3901      	subs	r1, #1
 800c454:	464a      	mov	r2, r9
 800c456:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c45a:	9107      	str	r1, [sp, #28]
 800c45c:	f7ff ff32 	bl	800c2c4 <__exponent>
 800c460:	9a08      	ldr	r2, [sp, #32]
 800c462:	9004      	str	r0, [sp, #16]
 800c464:	1813      	adds	r3, r2, r0
 800c466:	2a01      	cmp	r2, #1
 800c468:	6123      	str	r3, [r4, #16]
 800c46a:	dc02      	bgt.n	800c472 <_printf_float+0x132>
 800c46c:	6822      	ldr	r2, [r4, #0]
 800c46e:	07d2      	lsls	r2, r2, #31
 800c470:	d501      	bpl.n	800c476 <_printf_float+0x136>
 800c472:	3301      	adds	r3, #1
 800c474:	6123      	str	r3, [r4, #16]
 800c476:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d0a2      	beq.n	800c3c4 <_printf_float+0x84>
 800c47e:	232d      	movs	r3, #45	; 0x2d
 800c480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c484:	e79e      	b.n	800c3c4 <_printf_float+0x84>
 800c486:	9904      	ldr	r1, [sp, #16]
 800c488:	2947      	cmp	r1, #71	; 0x47
 800c48a:	d1c1      	bne.n	800c410 <_printf_float+0xd0>
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1bf      	bne.n	800c410 <_printf_float+0xd0>
 800c490:	2301      	movs	r3, #1
 800c492:	e7bc      	b.n	800c40e <_printf_float+0xce>
 800c494:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c498:	d118      	bne.n	800c4cc <_printf_float+0x18c>
 800c49a:	2900      	cmp	r1, #0
 800c49c:	6863      	ldr	r3, [r4, #4]
 800c49e:	dd0b      	ble.n	800c4b8 <_printf_float+0x178>
 800c4a0:	6121      	str	r1, [r4, #16]
 800c4a2:	b913      	cbnz	r3, 800c4aa <_printf_float+0x16a>
 800c4a4:	6822      	ldr	r2, [r4, #0]
 800c4a6:	07d0      	lsls	r0, r2, #31
 800c4a8:	d502      	bpl.n	800c4b0 <_printf_float+0x170>
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	440b      	add	r3, r1
 800c4ae:	6123      	str	r3, [r4, #16]
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c4b4:	9304      	str	r3, [sp, #16]
 800c4b6:	e7de      	b.n	800c476 <_printf_float+0x136>
 800c4b8:	b913      	cbnz	r3, 800c4c0 <_printf_float+0x180>
 800c4ba:	6822      	ldr	r2, [r4, #0]
 800c4bc:	07d2      	lsls	r2, r2, #31
 800c4be:	d501      	bpl.n	800c4c4 <_printf_float+0x184>
 800c4c0:	3302      	adds	r3, #2
 800c4c2:	e7f4      	b.n	800c4ae <_printf_float+0x16e>
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	e7f2      	b.n	800c4ae <_printf_float+0x16e>
 800c4c8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c4cc:	9b08      	ldr	r3, [sp, #32]
 800c4ce:	4299      	cmp	r1, r3
 800c4d0:	db05      	blt.n	800c4de <_printf_float+0x19e>
 800c4d2:	6823      	ldr	r3, [r4, #0]
 800c4d4:	6121      	str	r1, [r4, #16]
 800c4d6:	07d8      	lsls	r0, r3, #31
 800c4d8:	d5ea      	bpl.n	800c4b0 <_printf_float+0x170>
 800c4da:	1c4b      	adds	r3, r1, #1
 800c4dc:	e7e7      	b.n	800c4ae <_printf_float+0x16e>
 800c4de:	2900      	cmp	r1, #0
 800c4e0:	bfd4      	ite	le
 800c4e2:	f1c1 0202 	rsble	r2, r1, #2
 800c4e6:	2201      	movgt	r2, #1
 800c4e8:	4413      	add	r3, r2
 800c4ea:	e7e0      	b.n	800c4ae <_printf_float+0x16e>
 800c4ec:	6823      	ldr	r3, [r4, #0]
 800c4ee:	055a      	lsls	r2, r3, #21
 800c4f0:	d407      	bmi.n	800c502 <_printf_float+0x1c2>
 800c4f2:	6923      	ldr	r3, [r4, #16]
 800c4f4:	4642      	mov	r2, r8
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	47b8      	blx	r7
 800c4fc:	3001      	adds	r0, #1
 800c4fe:	d12a      	bne.n	800c556 <_printf_float+0x216>
 800c500:	e76a      	b.n	800c3d8 <_printf_float+0x98>
 800c502:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c506:	f240 80e0 	bls.w	800c6ca <_printf_float+0x38a>
 800c50a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c50e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c516:	d133      	bne.n	800c580 <_printf_float+0x240>
 800c518:	4a37      	ldr	r2, [pc, #220]	; (800c5f8 <_printf_float+0x2b8>)
 800c51a:	2301      	movs	r3, #1
 800c51c:	4631      	mov	r1, r6
 800c51e:	4628      	mov	r0, r5
 800c520:	47b8      	blx	r7
 800c522:	3001      	adds	r0, #1
 800c524:	f43f af58 	beq.w	800c3d8 <_printf_float+0x98>
 800c528:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	db02      	blt.n	800c536 <_printf_float+0x1f6>
 800c530:	6823      	ldr	r3, [r4, #0]
 800c532:	07d8      	lsls	r0, r3, #31
 800c534:	d50f      	bpl.n	800c556 <_printf_float+0x216>
 800c536:	4653      	mov	r3, sl
 800c538:	465a      	mov	r2, fp
 800c53a:	4631      	mov	r1, r6
 800c53c:	4628      	mov	r0, r5
 800c53e:	47b8      	blx	r7
 800c540:	3001      	adds	r0, #1
 800c542:	f43f af49 	beq.w	800c3d8 <_printf_float+0x98>
 800c546:	f04f 0800 	mov.w	r8, #0
 800c54a:	f104 091a 	add.w	r9, r4, #26
 800c54e:	9b08      	ldr	r3, [sp, #32]
 800c550:	3b01      	subs	r3, #1
 800c552:	4543      	cmp	r3, r8
 800c554:	dc09      	bgt.n	800c56a <_printf_float+0x22a>
 800c556:	6823      	ldr	r3, [r4, #0]
 800c558:	079b      	lsls	r3, r3, #30
 800c55a:	f100 8106 	bmi.w	800c76a <_printf_float+0x42a>
 800c55e:	68e0      	ldr	r0, [r4, #12]
 800c560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c562:	4298      	cmp	r0, r3
 800c564:	bfb8      	it	lt
 800c566:	4618      	movlt	r0, r3
 800c568:	e738      	b.n	800c3dc <_printf_float+0x9c>
 800c56a:	2301      	movs	r3, #1
 800c56c:	464a      	mov	r2, r9
 800c56e:	4631      	mov	r1, r6
 800c570:	4628      	mov	r0, r5
 800c572:	47b8      	blx	r7
 800c574:	3001      	adds	r0, #1
 800c576:	f43f af2f 	beq.w	800c3d8 <_printf_float+0x98>
 800c57a:	f108 0801 	add.w	r8, r8, #1
 800c57e:	e7e6      	b.n	800c54e <_printf_float+0x20e>
 800c580:	9b07      	ldr	r3, [sp, #28]
 800c582:	2b00      	cmp	r3, #0
 800c584:	dc3a      	bgt.n	800c5fc <_printf_float+0x2bc>
 800c586:	4a1c      	ldr	r2, [pc, #112]	; (800c5f8 <_printf_float+0x2b8>)
 800c588:	2301      	movs	r3, #1
 800c58a:	4631      	mov	r1, r6
 800c58c:	4628      	mov	r0, r5
 800c58e:	47b8      	blx	r7
 800c590:	3001      	adds	r0, #1
 800c592:	f43f af21 	beq.w	800c3d8 <_printf_float+0x98>
 800c596:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c59a:	4313      	orrs	r3, r2
 800c59c:	d102      	bne.n	800c5a4 <_printf_float+0x264>
 800c59e:	6823      	ldr	r3, [r4, #0]
 800c5a0:	07d9      	lsls	r1, r3, #31
 800c5a2:	d5d8      	bpl.n	800c556 <_printf_float+0x216>
 800c5a4:	4653      	mov	r3, sl
 800c5a6:	465a      	mov	r2, fp
 800c5a8:	4631      	mov	r1, r6
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	47b8      	blx	r7
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	f43f af12 	beq.w	800c3d8 <_printf_float+0x98>
 800c5b4:	f04f 0900 	mov.w	r9, #0
 800c5b8:	f104 0a1a 	add.w	sl, r4, #26
 800c5bc:	9b07      	ldr	r3, [sp, #28]
 800c5be:	425b      	negs	r3, r3
 800c5c0:	454b      	cmp	r3, r9
 800c5c2:	dc01      	bgt.n	800c5c8 <_printf_float+0x288>
 800c5c4:	9b08      	ldr	r3, [sp, #32]
 800c5c6:	e795      	b.n	800c4f4 <_printf_float+0x1b4>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	4652      	mov	r2, sl
 800c5cc:	4631      	mov	r1, r6
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	47b8      	blx	r7
 800c5d2:	3001      	adds	r0, #1
 800c5d4:	f43f af00 	beq.w	800c3d8 <_printf_float+0x98>
 800c5d8:	f109 0901 	add.w	r9, r9, #1
 800c5dc:	e7ee      	b.n	800c5bc <_printf_float+0x27c>
 800c5de:	bf00      	nop
 800c5e0:	ffffffff 	.word	0xffffffff
 800c5e4:	7fefffff 	.word	0x7fefffff
 800c5e8:	08022000 	.word	0x08022000
 800c5ec:	08022004 	.word	0x08022004
 800c5f0:	08022008 	.word	0x08022008
 800c5f4:	0802200c 	.word	0x0802200c
 800c5f8:	08022010 	.word	0x08022010
 800c5fc:	9a08      	ldr	r2, [sp, #32]
 800c5fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c600:	429a      	cmp	r2, r3
 800c602:	bfa8      	it	ge
 800c604:	461a      	movge	r2, r3
 800c606:	2a00      	cmp	r2, #0
 800c608:	4691      	mov	r9, r2
 800c60a:	dc38      	bgt.n	800c67e <_printf_float+0x33e>
 800c60c:	2300      	movs	r3, #0
 800c60e:	9305      	str	r3, [sp, #20]
 800c610:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c614:	f104 021a 	add.w	r2, r4, #26
 800c618:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c61a:	9905      	ldr	r1, [sp, #20]
 800c61c:	9304      	str	r3, [sp, #16]
 800c61e:	eba3 0309 	sub.w	r3, r3, r9
 800c622:	428b      	cmp	r3, r1
 800c624:	dc33      	bgt.n	800c68e <_printf_float+0x34e>
 800c626:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	db3c      	blt.n	800c6a8 <_printf_float+0x368>
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	07da      	lsls	r2, r3, #31
 800c632:	d439      	bmi.n	800c6a8 <_printf_float+0x368>
 800c634:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c638:	eba2 0903 	sub.w	r9, r2, r3
 800c63c:	9b04      	ldr	r3, [sp, #16]
 800c63e:	1ad2      	subs	r2, r2, r3
 800c640:	4591      	cmp	r9, r2
 800c642:	bfa8      	it	ge
 800c644:	4691      	movge	r9, r2
 800c646:	f1b9 0f00 	cmp.w	r9, #0
 800c64a:	dc35      	bgt.n	800c6b8 <_printf_float+0x378>
 800c64c:	f04f 0800 	mov.w	r8, #0
 800c650:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c654:	f104 0a1a 	add.w	sl, r4, #26
 800c658:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c65c:	1a9b      	subs	r3, r3, r2
 800c65e:	eba3 0309 	sub.w	r3, r3, r9
 800c662:	4543      	cmp	r3, r8
 800c664:	f77f af77 	ble.w	800c556 <_printf_float+0x216>
 800c668:	2301      	movs	r3, #1
 800c66a:	4652      	mov	r2, sl
 800c66c:	4631      	mov	r1, r6
 800c66e:	4628      	mov	r0, r5
 800c670:	47b8      	blx	r7
 800c672:	3001      	adds	r0, #1
 800c674:	f43f aeb0 	beq.w	800c3d8 <_printf_float+0x98>
 800c678:	f108 0801 	add.w	r8, r8, #1
 800c67c:	e7ec      	b.n	800c658 <_printf_float+0x318>
 800c67e:	4613      	mov	r3, r2
 800c680:	4631      	mov	r1, r6
 800c682:	4642      	mov	r2, r8
 800c684:	4628      	mov	r0, r5
 800c686:	47b8      	blx	r7
 800c688:	3001      	adds	r0, #1
 800c68a:	d1bf      	bne.n	800c60c <_printf_float+0x2cc>
 800c68c:	e6a4      	b.n	800c3d8 <_printf_float+0x98>
 800c68e:	2301      	movs	r3, #1
 800c690:	4631      	mov	r1, r6
 800c692:	4628      	mov	r0, r5
 800c694:	9204      	str	r2, [sp, #16]
 800c696:	47b8      	blx	r7
 800c698:	3001      	adds	r0, #1
 800c69a:	f43f ae9d 	beq.w	800c3d8 <_printf_float+0x98>
 800c69e:	9b05      	ldr	r3, [sp, #20]
 800c6a0:	9a04      	ldr	r2, [sp, #16]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	9305      	str	r3, [sp, #20]
 800c6a6:	e7b7      	b.n	800c618 <_printf_float+0x2d8>
 800c6a8:	4653      	mov	r3, sl
 800c6aa:	465a      	mov	r2, fp
 800c6ac:	4631      	mov	r1, r6
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	47b8      	blx	r7
 800c6b2:	3001      	adds	r0, #1
 800c6b4:	d1be      	bne.n	800c634 <_printf_float+0x2f4>
 800c6b6:	e68f      	b.n	800c3d8 <_printf_float+0x98>
 800c6b8:	9a04      	ldr	r2, [sp, #16]
 800c6ba:	464b      	mov	r3, r9
 800c6bc:	4442      	add	r2, r8
 800c6be:	4631      	mov	r1, r6
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	47b8      	blx	r7
 800c6c4:	3001      	adds	r0, #1
 800c6c6:	d1c1      	bne.n	800c64c <_printf_float+0x30c>
 800c6c8:	e686      	b.n	800c3d8 <_printf_float+0x98>
 800c6ca:	9a08      	ldr	r2, [sp, #32]
 800c6cc:	2a01      	cmp	r2, #1
 800c6ce:	dc01      	bgt.n	800c6d4 <_printf_float+0x394>
 800c6d0:	07db      	lsls	r3, r3, #31
 800c6d2:	d537      	bpl.n	800c744 <_printf_float+0x404>
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	4642      	mov	r2, r8
 800c6d8:	4631      	mov	r1, r6
 800c6da:	4628      	mov	r0, r5
 800c6dc:	47b8      	blx	r7
 800c6de:	3001      	adds	r0, #1
 800c6e0:	f43f ae7a 	beq.w	800c3d8 <_printf_float+0x98>
 800c6e4:	4653      	mov	r3, sl
 800c6e6:	465a      	mov	r2, fp
 800c6e8:	4631      	mov	r1, r6
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	47b8      	blx	r7
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	f43f ae72 	beq.w	800c3d8 <_printf_float+0x98>
 800c6f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c6f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c700:	9b08      	ldr	r3, [sp, #32]
 800c702:	d01a      	beq.n	800c73a <_printf_float+0x3fa>
 800c704:	3b01      	subs	r3, #1
 800c706:	f108 0201 	add.w	r2, r8, #1
 800c70a:	4631      	mov	r1, r6
 800c70c:	4628      	mov	r0, r5
 800c70e:	47b8      	blx	r7
 800c710:	3001      	adds	r0, #1
 800c712:	d10e      	bne.n	800c732 <_printf_float+0x3f2>
 800c714:	e660      	b.n	800c3d8 <_printf_float+0x98>
 800c716:	2301      	movs	r3, #1
 800c718:	464a      	mov	r2, r9
 800c71a:	4631      	mov	r1, r6
 800c71c:	4628      	mov	r0, r5
 800c71e:	47b8      	blx	r7
 800c720:	3001      	adds	r0, #1
 800c722:	f43f ae59 	beq.w	800c3d8 <_printf_float+0x98>
 800c726:	f108 0801 	add.w	r8, r8, #1
 800c72a:	9b08      	ldr	r3, [sp, #32]
 800c72c:	3b01      	subs	r3, #1
 800c72e:	4543      	cmp	r3, r8
 800c730:	dcf1      	bgt.n	800c716 <_printf_float+0x3d6>
 800c732:	9b04      	ldr	r3, [sp, #16]
 800c734:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c738:	e6dd      	b.n	800c4f6 <_printf_float+0x1b6>
 800c73a:	f04f 0800 	mov.w	r8, #0
 800c73e:	f104 091a 	add.w	r9, r4, #26
 800c742:	e7f2      	b.n	800c72a <_printf_float+0x3ea>
 800c744:	2301      	movs	r3, #1
 800c746:	4642      	mov	r2, r8
 800c748:	e7df      	b.n	800c70a <_printf_float+0x3ca>
 800c74a:	2301      	movs	r3, #1
 800c74c:	464a      	mov	r2, r9
 800c74e:	4631      	mov	r1, r6
 800c750:	4628      	mov	r0, r5
 800c752:	47b8      	blx	r7
 800c754:	3001      	adds	r0, #1
 800c756:	f43f ae3f 	beq.w	800c3d8 <_printf_float+0x98>
 800c75a:	f108 0801 	add.w	r8, r8, #1
 800c75e:	68e3      	ldr	r3, [r4, #12]
 800c760:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c762:	1a5b      	subs	r3, r3, r1
 800c764:	4543      	cmp	r3, r8
 800c766:	dcf0      	bgt.n	800c74a <_printf_float+0x40a>
 800c768:	e6f9      	b.n	800c55e <_printf_float+0x21e>
 800c76a:	f04f 0800 	mov.w	r8, #0
 800c76e:	f104 0919 	add.w	r9, r4, #25
 800c772:	e7f4      	b.n	800c75e <_printf_float+0x41e>

0800c774 <_printf_common>:
 800c774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c778:	4616      	mov	r6, r2
 800c77a:	4699      	mov	r9, r3
 800c77c:	688a      	ldr	r2, [r1, #8]
 800c77e:	690b      	ldr	r3, [r1, #16]
 800c780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c784:	4293      	cmp	r3, r2
 800c786:	bfb8      	it	lt
 800c788:	4613      	movlt	r3, r2
 800c78a:	6033      	str	r3, [r6, #0]
 800c78c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c790:	4607      	mov	r7, r0
 800c792:	460c      	mov	r4, r1
 800c794:	b10a      	cbz	r2, 800c79a <_printf_common+0x26>
 800c796:	3301      	adds	r3, #1
 800c798:	6033      	str	r3, [r6, #0]
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	0699      	lsls	r1, r3, #26
 800c79e:	bf42      	ittt	mi
 800c7a0:	6833      	ldrmi	r3, [r6, #0]
 800c7a2:	3302      	addmi	r3, #2
 800c7a4:	6033      	strmi	r3, [r6, #0]
 800c7a6:	6825      	ldr	r5, [r4, #0]
 800c7a8:	f015 0506 	ands.w	r5, r5, #6
 800c7ac:	d106      	bne.n	800c7bc <_printf_common+0x48>
 800c7ae:	f104 0a19 	add.w	sl, r4, #25
 800c7b2:	68e3      	ldr	r3, [r4, #12]
 800c7b4:	6832      	ldr	r2, [r6, #0]
 800c7b6:	1a9b      	subs	r3, r3, r2
 800c7b8:	42ab      	cmp	r3, r5
 800c7ba:	dc26      	bgt.n	800c80a <_printf_common+0x96>
 800c7bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7c0:	1e13      	subs	r3, r2, #0
 800c7c2:	6822      	ldr	r2, [r4, #0]
 800c7c4:	bf18      	it	ne
 800c7c6:	2301      	movne	r3, #1
 800c7c8:	0692      	lsls	r2, r2, #26
 800c7ca:	d42b      	bmi.n	800c824 <_printf_common+0xb0>
 800c7cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7d0:	4649      	mov	r1, r9
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	47c0      	blx	r8
 800c7d6:	3001      	adds	r0, #1
 800c7d8:	d01e      	beq.n	800c818 <_printf_common+0xa4>
 800c7da:	6823      	ldr	r3, [r4, #0]
 800c7dc:	6922      	ldr	r2, [r4, #16]
 800c7de:	f003 0306 	and.w	r3, r3, #6
 800c7e2:	2b04      	cmp	r3, #4
 800c7e4:	bf02      	ittt	eq
 800c7e6:	68e5      	ldreq	r5, [r4, #12]
 800c7e8:	6833      	ldreq	r3, [r6, #0]
 800c7ea:	1aed      	subeq	r5, r5, r3
 800c7ec:	68a3      	ldr	r3, [r4, #8]
 800c7ee:	bf0c      	ite	eq
 800c7f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7f4:	2500      	movne	r5, #0
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	bfc4      	itt	gt
 800c7fa:	1a9b      	subgt	r3, r3, r2
 800c7fc:	18ed      	addgt	r5, r5, r3
 800c7fe:	2600      	movs	r6, #0
 800c800:	341a      	adds	r4, #26
 800c802:	42b5      	cmp	r5, r6
 800c804:	d11a      	bne.n	800c83c <_printf_common+0xc8>
 800c806:	2000      	movs	r0, #0
 800c808:	e008      	b.n	800c81c <_printf_common+0xa8>
 800c80a:	2301      	movs	r3, #1
 800c80c:	4652      	mov	r2, sl
 800c80e:	4649      	mov	r1, r9
 800c810:	4638      	mov	r0, r7
 800c812:	47c0      	blx	r8
 800c814:	3001      	adds	r0, #1
 800c816:	d103      	bne.n	800c820 <_printf_common+0xac>
 800c818:	f04f 30ff 	mov.w	r0, #4294967295
 800c81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c820:	3501      	adds	r5, #1
 800c822:	e7c6      	b.n	800c7b2 <_printf_common+0x3e>
 800c824:	18e1      	adds	r1, r4, r3
 800c826:	1c5a      	adds	r2, r3, #1
 800c828:	2030      	movs	r0, #48	; 0x30
 800c82a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c82e:	4422      	add	r2, r4
 800c830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c838:	3302      	adds	r3, #2
 800c83a:	e7c7      	b.n	800c7cc <_printf_common+0x58>
 800c83c:	2301      	movs	r3, #1
 800c83e:	4622      	mov	r2, r4
 800c840:	4649      	mov	r1, r9
 800c842:	4638      	mov	r0, r7
 800c844:	47c0      	blx	r8
 800c846:	3001      	adds	r0, #1
 800c848:	d0e6      	beq.n	800c818 <_printf_common+0xa4>
 800c84a:	3601      	adds	r6, #1
 800c84c:	e7d9      	b.n	800c802 <_printf_common+0x8e>
	...

0800c850 <_printf_i>:
 800c850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c854:	7e0f      	ldrb	r7, [r1, #24]
 800c856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c858:	2f78      	cmp	r7, #120	; 0x78
 800c85a:	4691      	mov	r9, r2
 800c85c:	4680      	mov	r8, r0
 800c85e:	460c      	mov	r4, r1
 800c860:	469a      	mov	sl, r3
 800c862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c866:	d807      	bhi.n	800c878 <_printf_i+0x28>
 800c868:	2f62      	cmp	r7, #98	; 0x62
 800c86a:	d80a      	bhi.n	800c882 <_printf_i+0x32>
 800c86c:	2f00      	cmp	r7, #0
 800c86e:	f000 80d4 	beq.w	800ca1a <_printf_i+0x1ca>
 800c872:	2f58      	cmp	r7, #88	; 0x58
 800c874:	f000 80c0 	beq.w	800c9f8 <_printf_i+0x1a8>
 800c878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c87c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c880:	e03a      	b.n	800c8f8 <_printf_i+0xa8>
 800c882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c886:	2b15      	cmp	r3, #21
 800c888:	d8f6      	bhi.n	800c878 <_printf_i+0x28>
 800c88a:	a101      	add	r1, pc, #4	; (adr r1, 800c890 <_printf_i+0x40>)
 800c88c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c890:	0800c8e9 	.word	0x0800c8e9
 800c894:	0800c8fd 	.word	0x0800c8fd
 800c898:	0800c879 	.word	0x0800c879
 800c89c:	0800c879 	.word	0x0800c879
 800c8a0:	0800c879 	.word	0x0800c879
 800c8a4:	0800c879 	.word	0x0800c879
 800c8a8:	0800c8fd 	.word	0x0800c8fd
 800c8ac:	0800c879 	.word	0x0800c879
 800c8b0:	0800c879 	.word	0x0800c879
 800c8b4:	0800c879 	.word	0x0800c879
 800c8b8:	0800c879 	.word	0x0800c879
 800c8bc:	0800ca01 	.word	0x0800ca01
 800c8c0:	0800c929 	.word	0x0800c929
 800c8c4:	0800c9bb 	.word	0x0800c9bb
 800c8c8:	0800c879 	.word	0x0800c879
 800c8cc:	0800c879 	.word	0x0800c879
 800c8d0:	0800ca23 	.word	0x0800ca23
 800c8d4:	0800c879 	.word	0x0800c879
 800c8d8:	0800c929 	.word	0x0800c929
 800c8dc:	0800c879 	.word	0x0800c879
 800c8e0:	0800c879 	.word	0x0800c879
 800c8e4:	0800c9c3 	.word	0x0800c9c3
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	1d1a      	adds	r2, r3, #4
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	602a      	str	r2, [r5, #0]
 800c8f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	e09f      	b.n	800ca3c <_printf_i+0x1ec>
 800c8fc:	6820      	ldr	r0, [r4, #0]
 800c8fe:	682b      	ldr	r3, [r5, #0]
 800c900:	0607      	lsls	r7, r0, #24
 800c902:	f103 0104 	add.w	r1, r3, #4
 800c906:	6029      	str	r1, [r5, #0]
 800c908:	d501      	bpl.n	800c90e <_printf_i+0xbe>
 800c90a:	681e      	ldr	r6, [r3, #0]
 800c90c:	e003      	b.n	800c916 <_printf_i+0xc6>
 800c90e:	0646      	lsls	r6, r0, #25
 800c910:	d5fb      	bpl.n	800c90a <_printf_i+0xba>
 800c912:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c916:	2e00      	cmp	r6, #0
 800c918:	da03      	bge.n	800c922 <_printf_i+0xd2>
 800c91a:	232d      	movs	r3, #45	; 0x2d
 800c91c:	4276      	negs	r6, r6
 800c91e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c922:	485a      	ldr	r0, [pc, #360]	; (800ca8c <_printf_i+0x23c>)
 800c924:	230a      	movs	r3, #10
 800c926:	e012      	b.n	800c94e <_printf_i+0xfe>
 800c928:	682b      	ldr	r3, [r5, #0]
 800c92a:	6820      	ldr	r0, [r4, #0]
 800c92c:	1d19      	adds	r1, r3, #4
 800c92e:	6029      	str	r1, [r5, #0]
 800c930:	0605      	lsls	r5, r0, #24
 800c932:	d501      	bpl.n	800c938 <_printf_i+0xe8>
 800c934:	681e      	ldr	r6, [r3, #0]
 800c936:	e002      	b.n	800c93e <_printf_i+0xee>
 800c938:	0641      	lsls	r1, r0, #25
 800c93a:	d5fb      	bpl.n	800c934 <_printf_i+0xe4>
 800c93c:	881e      	ldrh	r6, [r3, #0]
 800c93e:	4853      	ldr	r0, [pc, #332]	; (800ca8c <_printf_i+0x23c>)
 800c940:	2f6f      	cmp	r7, #111	; 0x6f
 800c942:	bf0c      	ite	eq
 800c944:	2308      	moveq	r3, #8
 800c946:	230a      	movne	r3, #10
 800c948:	2100      	movs	r1, #0
 800c94a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c94e:	6865      	ldr	r5, [r4, #4]
 800c950:	60a5      	str	r5, [r4, #8]
 800c952:	2d00      	cmp	r5, #0
 800c954:	bfa2      	ittt	ge
 800c956:	6821      	ldrge	r1, [r4, #0]
 800c958:	f021 0104 	bicge.w	r1, r1, #4
 800c95c:	6021      	strge	r1, [r4, #0]
 800c95e:	b90e      	cbnz	r6, 800c964 <_printf_i+0x114>
 800c960:	2d00      	cmp	r5, #0
 800c962:	d04b      	beq.n	800c9fc <_printf_i+0x1ac>
 800c964:	4615      	mov	r5, r2
 800c966:	fbb6 f1f3 	udiv	r1, r6, r3
 800c96a:	fb03 6711 	mls	r7, r3, r1, r6
 800c96e:	5dc7      	ldrb	r7, [r0, r7]
 800c970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c974:	4637      	mov	r7, r6
 800c976:	42bb      	cmp	r3, r7
 800c978:	460e      	mov	r6, r1
 800c97a:	d9f4      	bls.n	800c966 <_printf_i+0x116>
 800c97c:	2b08      	cmp	r3, #8
 800c97e:	d10b      	bne.n	800c998 <_printf_i+0x148>
 800c980:	6823      	ldr	r3, [r4, #0]
 800c982:	07de      	lsls	r6, r3, #31
 800c984:	d508      	bpl.n	800c998 <_printf_i+0x148>
 800c986:	6923      	ldr	r3, [r4, #16]
 800c988:	6861      	ldr	r1, [r4, #4]
 800c98a:	4299      	cmp	r1, r3
 800c98c:	bfde      	ittt	le
 800c98e:	2330      	movle	r3, #48	; 0x30
 800c990:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c994:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c998:	1b52      	subs	r2, r2, r5
 800c99a:	6122      	str	r2, [r4, #16]
 800c99c:	f8cd a000 	str.w	sl, [sp]
 800c9a0:	464b      	mov	r3, r9
 800c9a2:	aa03      	add	r2, sp, #12
 800c9a4:	4621      	mov	r1, r4
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	f7ff fee4 	bl	800c774 <_printf_common>
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	d14a      	bne.n	800ca46 <_printf_i+0x1f6>
 800c9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b4:	b004      	add	sp, #16
 800c9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ba:	6823      	ldr	r3, [r4, #0]
 800c9bc:	f043 0320 	orr.w	r3, r3, #32
 800c9c0:	6023      	str	r3, [r4, #0]
 800c9c2:	4833      	ldr	r0, [pc, #204]	; (800ca90 <_printf_i+0x240>)
 800c9c4:	2778      	movs	r7, #120	; 0x78
 800c9c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	6829      	ldr	r1, [r5, #0]
 800c9ce:	061f      	lsls	r7, r3, #24
 800c9d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c9d4:	d402      	bmi.n	800c9dc <_printf_i+0x18c>
 800c9d6:	065f      	lsls	r7, r3, #25
 800c9d8:	bf48      	it	mi
 800c9da:	b2b6      	uxthmi	r6, r6
 800c9dc:	07df      	lsls	r7, r3, #31
 800c9de:	bf48      	it	mi
 800c9e0:	f043 0320 	orrmi.w	r3, r3, #32
 800c9e4:	6029      	str	r1, [r5, #0]
 800c9e6:	bf48      	it	mi
 800c9e8:	6023      	strmi	r3, [r4, #0]
 800c9ea:	b91e      	cbnz	r6, 800c9f4 <_printf_i+0x1a4>
 800c9ec:	6823      	ldr	r3, [r4, #0]
 800c9ee:	f023 0320 	bic.w	r3, r3, #32
 800c9f2:	6023      	str	r3, [r4, #0]
 800c9f4:	2310      	movs	r3, #16
 800c9f6:	e7a7      	b.n	800c948 <_printf_i+0xf8>
 800c9f8:	4824      	ldr	r0, [pc, #144]	; (800ca8c <_printf_i+0x23c>)
 800c9fa:	e7e4      	b.n	800c9c6 <_printf_i+0x176>
 800c9fc:	4615      	mov	r5, r2
 800c9fe:	e7bd      	b.n	800c97c <_printf_i+0x12c>
 800ca00:	682b      	ldr	r3, [r5, #0]
 800ca02:	6826      	ldr	r6, [r4, #0]
 800ca04:	6961      	ldr	r1, [r4, #20]
 800ca06:	1d18      	adds	r0, r3, #4
 800ca08:	6028      	str	r0, [r5, #0]
 800ca0a:	0635      	lsls	r5, r6, #24
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	d501      	bpl.n	800ca14 <_printf_i+0x1c4>
 800ca10:	6019      	str	r1, [r3, #0]
 800ca12:	e002      	b.n	800ca1a <_printf_i+0x1ca>
 800ca14:	0670      	lsls	r0, r6, #25
 800ca16:	d5fb      	bpl.n	800ca10 <_printf_i+0x1c0>
 800ca18:	8019      	strh	r1, [r3, #0]
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	6123      	str	r3, [r4, #16]
 800ca1e:	4615      	mov	r5, r2
 800ca20:	e7bc      	b.n	800c99c <_printf_i+0x14c>
 800ca22:	682b      	ldr	r3, [r5, #0]
 800ca24:	1d1a      	adds	r2, r3, #4
 800ca26:	602a      	str	r2, [r5, #0]
 800ca28:	681d      	ldr	r5, [r3, #0]
 800ca2a:	6862      	ldr	r2, [r4, #4]
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	4628      	mov	r0, r5
 800ca30:	f7f3 fc66 	bl	8000300 <memchr>
 800ca34:	b108      	cbz	r0, 800ca3a <_printf_i+0x1ea>
 800ca36:	1b40      	subs	r0, r0, r5
 800ca38:	6060      	str	r0, [r4, #4]
 800ca3a:	6863      	ldr	r3, [r4, #4]
 800ca3c:	6123      	str	r3, [r4, #16]
 800ca3e:	2300      	movs	r3, #0
 800ca40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca44:	e7aa      	b.n	800c99c <_printf_i+0x14c>
 800ca46:	6923      	ldr	r3, [r4, #16]
 800ca48:	462a      	mov	r2, r5
 800ca4a:	4649      	mov	r1, r9
 800ca4c:	4640      	mov	r0, r8
 800ca4e:	47d0      	blx	sl
 800ca50:	3001      	adds	r0, #1
 800ca52:	d0ad      	beq.n	800c9b0 <_printf_i+0x160>
 800ca54:	6823      	ldr	r3, [r4, #0]
 800ca56:	079b      	lsls	r3, r3, #30
 800ca58:	d413      	bmi.n	800ca82 <_printf_i+0x232>
 800ca5a:	68e0      	ldr	r0, [r4, #12]
 800ca5c:	9b03      	ldr	r3, [sp, #12]
 800ca5e:	4298      	cmp	r0, r3
 800ca60:	bfb8      	it	lt
 800ca62:	4618      	movlt	r0, r3
 800ca64:	e7a6      	b.n	800c9b4 <_printf_i+0x164>
 800ca66:	2301      	movs	r3, #1
 800ca68:	4632      	mov	r2, r6
 800ca6a:	4649      	mov	r1, r9
 800ca6c:	4640      	mov	r0, r8
 800ca6e:	47d0      	blx	sl
 800ca70:	3001      	adds	r0, #1
 800ca72:	d09d      	beq.n	800c9b0 <_printf_i+0x160>
 800ca74:	3501      	adds	r5, #1
 800ca76:	68e3      	ldr	r3, [r4, #12]
 800ca78:	9903      	ldr	r1, [sp, #12]
 800ca7a:	1a5b      	subs	r3, r3, r1
 800ca7c:	42ab      	cmp	r3, r5
 800ca7e:	dcf2      	bgt.n	800ca66 <_printf_i+0x216>
 800ca80:	e7eb      	b.n	800ca5a <_printf_i+0x20a>
 800ca82:	2500      	movs	r5, #0
 800ca84:	f104 0619 	add.w	r6, r4, #25
 800ca88:	e7f5      	b.n	800ca76 <_printf_i+0x226>
 800ca8a:	bf00      	nop
 800ca8c:	08022012 	.word	0x08022012
 800ca90:	08022023 	.word	0x08022023

0800ca94 <std>:
 800ca94:	2300      	movs	r3, #0
 800ca96:	b510      	push	{r4, lr}
 800ca98:	4604      	mov	r4, r0
 800ca9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ca9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800caa2:	6083      	str	r3, [r0, #8]
 800caa4:	8181      	strh	r1, [r0, #12]
 800caa6:	6643      	str	r3, [r0, #100]	; 0x64
 800caa8:	81c2      	strh	r2, [r0, #14]
 800caaa:	6183      	str	r3, [r0, #24]
 800caac:	4619      	mov	r1, r3
 800caae:	2208      	movs	r2, #8
 800cab0:	305c      	adds	r0, #92	; 0x5c
 800cab2:	f000 f8f4 	bl	800cc9e <memset>
 800cab6:	4b0d      	ldr	r3, [pc, #52]	; (800caec <std+0x58>)
 800cab8:	6263      	str	r3, [r4, #36]	; 0x24
 800caba:	4b0d      	ldr	r3, [pc, #52]	; (800caf0 <std+0x5c>)
 800cabc:	62a3      	str	r3, [r4, #40]	; 0x28
 800cabe:	4b0d      	ldr	r3, [pc, #52]	; (800caf4 <std+0x60>)
 800cac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cac2:	4b0d      	ldr	r3, [pc, #52]	; (800caf8 <std+0x64>)
 800cac4:	6323      	str	r3, [r4, #48]	; 0x30
 800cac6:	4b0d      	ldr	r3, [pc, #52]	; (800cafc <std+0x68>)
 800cac8:	6224      	str	r4, [r4, #32]
 800caca:	429c      	cmp	r4, r3
 800cacc:	d006      	beq.n	800cadc <std+0x48>
 800cace:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cad2:	4294      	cmp	r4, r2
 800cad4:	d002      	beq.n	800cadc <std+0x48>
 800cad6:	33d0      	adds	r3, #208	; 0xd0
 800cad8:	429c      	cmp	r4, r3
 800cada:	d105      	bne.n	800cae8 <std+0x54>
 800cadc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cae4:	f000 b968 	b.w	800cdb8 <__retarget_lock_init_recursive>
 800cae8:	bd10      	pop	{r4, pc}
 800caea:	bf00      	nop
 800caec:	0800cc19 	.word	0x0800cc19
 800caf0:	0800cc3b 	.word	0x0800cc3b
 800caf4:	0800cc73 	.word	0x0800cc73
 800caf8:	0800cc97 	.word	0x0800cc97
 800cafc:	2001c40c 	.word	0x2001c40c

0800cb00 <stdio_exit_handler>:
 800cb00:	4a02      	ldr	r2, [pc, #8]	; (800cb0c <stdio_exit_handler+0xc>)
 800cb02:	4903      	ldr	r1, [pc, #12]	; (800cb10 <stdio_exit_handler+0x10>)
 800cb04:	4803      	ldr	r0, [pc, #12]	; (800cb14 <stdio_exit_handler+0x14>)
 800cb06:	f000 b869 	b.w	800cbdc <_fwalk_sglue>
 800cb0a:	bf00      	nop
 800cb0c:	20000114 	.word	0x20000114
 800cb10:	0800e245 	.word	0x0800e245
 800cb14:	20000120 	.word	0x20000120

0800cb18 <cleanup_stdio>:
 800cb18:	6841      	ldr	r1, [r0, #4]
 800cb1a:	4b0c      	ldr	r3, [pc, #48]	; (800cb4c <cleanup_stdio+0x34>)
 800cb1c:	4299      	cmp	r1, r3
 800cb1e:	b510      	push	{r4, lr}
 800cb20:	4604      	mov	r4, r0
 800cb22:	d001      	beq.n	800cb28 <cleanup_stdio+0x10>
 800cb24:	f001 fb8e 	bl	800e244 <_fflush_r>
 800cb28:	68a1      	ldr	r1, [r4, #8]
 800cb2a:	4b09      	ldr	r3, [pc, #36]	; (800cb50 <cleanup_stdio+0x38>)
 800cb2c:	4299      	cmp	r1, r3
 800cb2e:	d002      	beq.n	800cb36 <cleanup_stdio+0x1e>
 800cb30:	4620      	mov	r0, r4
 800cb32:	f001 fb87 	bl	800e244 <_fflush_r>
 800cb36:	68e1      	ldr	r1, [r4, #12]
 800cb38:	4b06      	ldr	r3, [pc, #24]	; (800cb54 <cleanup_stdio+0x3c>)
 800cb3a:	4299      	cmp	r1, r3
 800cb3c:	d004      	beq.n	800cb48 <cleanup_stdio+0x30>
 800cb3e:	4620      	mov	r0, r4
 800cb40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb44:	f001 bb7e 	b.w	800e244 <_fflush_r>
 800cb48:	bd10      	pop	{r4, pc}
 800cb4a:	bf00      	nop
 800cb4c:	2001c40c 	.word	0x2001c40c
 800cb50:	2001c474 	.word	0x2001c474
 800cb54:	2001c4dc 	.word	0x2001c4dc

0800cb58 <global_stdio_init.part.0>:
 800cb58:	b510      	push	{r4, lr}
 800cb5a:	4b0b      	ldr	r3, [pc, #44]	; (800cb88 <global_stdio_init.part.0+0x30>)
 800cb5c:	4c0b      	ldr	r4, [pc, #44]	; (800cb8c <global_stdio_init.part.0+0x34>)
 800cb5e:	4a0c      	ldr	r2, [pc, #48]	; (800cb90 <global_stdio_init.part.0+0x38>)
 800cb60:	601a      	str	r2, [r3, #0]
 800cb62:	4620      	mov	r0, r4
 800cb64:	2200      	movs	r2, #0
 800cb66:	2104      	movs	r1, #4
 800cb68:	f7ff ff94 	bl	800ca94 <std>
 800cb6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cb70:	2201      	movs	r2, #1
 800cb72:	2109      	movs	r1, #9
 800cb74:	f7ff ff8e 	bl	800ca94 <std>
 800cb78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cb7c:	2202      	movs	r2, #2
 800cb7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb82:	2112      	movs	r1, #18
 800cb84:	f7ff bf86 	b.w	800ca94 <std>
 800cb88:	2001c544 	.word	0x2001c544
 800cb8c:	2001c40c 	.word	0x2001c40c
 800cb90:	0800cb01 	.word	0x0800cb01

0800cb94 <__sfp_lock_acquire>:
 800cb94:	4801      	ldr	r0, [pc, #4]	; (800cb9c <__sfp_lock_acquire+0x8>)
 800cb96:	f000 b910 	b.w	800cdba <__retarget_lock_acquire_recursive>
 800cb9a:	bf00      	nop
 800cb9c:	2001c54d 	.word	0x2001c54d

0800cba0 <__sfp_lock_release>:
 800cba0:	4801      	ldr	r0, [pc, #4]	; (800cba8 <__sfp_lock_release+0x8>)
 800cba2:	f000 b90b 	b.w	800cdbc <__retarget_lock_release_recursive>
 800cba6:	bf00      	nop
 800cba8:	2001c54d 	.word	0x2001c54d

0800cbac <__sinit>:
 800cbac:	b510      	push	{r4, lr}
 800cbae:	4604      	mov	r4, r0
 800cbb0:	f7ff fff0 	bl	800cb94 <__sfp_lock_acquire>
 800cbb4:	6a23      	ldr	r3, [r4, #32]
 800cbb6:	b11b      	cbz	r3, 800cbc0 <__sinit+0x14>
 800cbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbbc:	f7ff bff0 	b.w	800cba0 <__sfp_lock_release>
 800cbc0:	4b04      	ldr	r3, [pc, #16]	; (800cbd4 <__sinit+0x28>)
 800cbc2:	6223      	str	r3, [r4, #32]
 800cbc4:	4b04      	ldr	r3, [pc, #16]	; (800cbd8 <__sinit+0x2c>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1f5      	bne.n	800cbb8 <__sinit+0xc>
 800cbcc:	f7ff ffc4 	bl	800cb58 <global_stdio_init.part.0>
 800cbd0:	e7f2      	b.n	800cbb8 <__sinit+0xc>
 800cbd2:	bf00      	nop
 800cbd4:	0800cb19 	.word	0x0800cb19
 800cbd8:	2001c544 	.word	0x2001c544

0800cbdc <_fwalk_sglue>:
 800cbdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbe0:	4607      	mov	r7, r0
 800cbe2:	4688      	mov	r8, r1
 800cbe4:	4614      	mov	r4, r2
 800cbe6:	2600      	movs	r6, #0
 800cbe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbec:	f1b9 0901 	subs.w	r9, r9, #1
 800cbf0:	d505      	bpl.n	800cbfe <_fwalk_sglue+0x22>
 800cbf2:	6824      	ldr	r4, [r4, #0]
 800cbf4:	2c00      	cmp	r4, #0
 800cbf6:	d1f7      	bne.n	800cbe8 <_fwalk_sglue+0xc>
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbfe:	89ab      	ldrh	r3, [r5, #12]
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d907      	bls.n	800cc14 <_fwalk_sglue+0x38>
 800cc04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	d003      	beq.n	800cc14 <_fwalk_sglue+0x38>
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	4638      	mov	r0, r7
 800cc10:	47c0      	blx	r8
 800cc12:	4306      	orrs	r6, r0
 800cc14:	3568      	adds	r5, #104	; 0x68
 800cc16:	e7e9      	b.n	800cbec <_fwalk_sglue+0x10>

0800cc18 <__sread>:
 800cc18:	b510      	push	{r4, lr}
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc20:	f000 f86c 	bl	800ccfc <_read_r>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	bfab      	itete	ge
 800cc28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc2a:	89a3      	ldrhlt	r3, [r4, #12]
 800cc2c:	181b      	addge	r3, r3, r0
 800cc2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc32:	bfac      	ite	ge
 800cc34:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc36:	81a3      	strhlt	r3, [r4, #12]
 800cc38:	bd10      	pop	{r4, pc}

0800cc3a <__swrite>:
 800cc3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3e:	461f      	mov	r7, r3
 800cc40:	898b      	ldrh	r3, [r1, #12]
 800cc42:	05db      	lsls	r3, r3, #23
 800cc44:	4605      	mov	r5, r0
 800cc46:	460c      	mov	r4, r1
 800cc48:	4616      	mov	r6, r2
 800cc4a:	d505      	bpl.n	800cc58 <__swrite+0x1e>
 800cc4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc50:	2302      	movs	r3, #2
 800cc52:	2200      	movs	r2, #0
 800cc54:	f000 f840 	bl	800ccd8 <_lseek_r>
 800cc58:	89a3      	ldrh	r3, [r4, #12]
 800cc5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc62:	81a3      	strh	r3, [r4, #12]
 800cc64:	4632      	mov	r2, r6
 800cc66:	463b      	mov	r3, r7
 800cc68:	4628      	mov	r0, r5
 800cc6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc6e:	f000 b867 	b.w	800cd40 <_write_r>

0800cc72 <__sseek>:
 800cc72:	b510      	push	{r4, lr}
 800cc74:	460c      	mov	r4, r1
 800cc76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc7a:	f000 f82d 	bl	800ccd8 <_lseek_r>
 800cc7e:	1c43      	adds	r3, r0, #1
 800cc80:	89a3      	ldrh	r3, [r4, #12]
 800cc82:	bf15      	itete	ne
 800cc84:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc8e:	81a3      	strheq	r3, [r4, #12]
 800cc90:	bf18      	it	ne
 800cc92:	81a3      	strhne	r3, [r4, #12]
 800cc94:	bd10      	pop	{r4, pc}

0800cc96 <__sclose>:
 800cc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc9a:	f000 b80d 	b.w	800ccb8 <_close_r>

0800cc9e <memset>:
 800cc9e:	4402      	add	r2, r0
 800cca0:	4603      	mov	r3, r0
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d100      	bne.n	800cca8 <memset+0xa>
 800cca6:	4770      	bx	lr
 800cca8:	f803 1b01 	strb.w	r1, [r3], #1
 800ccac:	e7f9      	b.n	800cca2 <memset+0x4>
	...

0800ccb0 <_localeconv_r>:
 800ccb0:	4800      	ldr	r0, [pc, #0]	; (800ccb4 <_localeconv_r+0x4>)
 800ccb2:	4770      	bx	lr
 800ccb4:	20000260 	.word	0x20000260

0800ccb8 <_close_r>:
 800ccb8:	b538      	push	{r3, r4, r5, lr}
 800ccba:	4d06      	ldr	r5, [pc, #24]	; (800ccd4 <_close_r+0x1c>)
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	4608      	mov	r0, r1
 800ccc2:	602b      	str	r3, [r5, #0]
 800ccc4:	f7f4 fcd5 	bl	8001672 <_close>
 800ccc8:	1c43      	adds	r3, r0, #1
 800ccca:	d102      	bne.n	800ccd2 <_close_r+0x1a>
 800cccc:	682b      	ldr	r3, [r5, #0]
 800ccce:	b103      	cbz	r3, 800ccd2 <_close_r+0x1a>
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	bd38      	pop	{r3, r4, r5, pc}
 800ccd4:	2001c548 	.word	0x2001c548

0800ccd8 <_lseek_r>:
 800ccd8:	b538      	push	{r3, r4, r5, lr}
 800ccda:	4d07      	ldr	r5, [pc, #28]	; (800ccf8 <_lseek_r+0x20>)
 800ccdc:	4604      	mov	r4, r0
 800ccde:	4608      	mov	r0, r1
 800cce0:	4611      	mov	r1, r2
 800cce2:	2200      	movs	r2, #0
 800cce4:	602a      	str	r2, [r5, #0]
 800cce6:	461a      	mov	r2, r3
 800cce8:	f7f4 fcea 	bl	80016c0 <_lseek>
 800ccec:	1c43      	adds	r3, r0, #1
 800ccee:	d102      	bne.n	800ccf6 <_lseek_r+0x1e>
 800ccf0:	682b      	ldr	r3, [r5, #0]
 800ccf2:	b103      	cbz	r3, 800ccf6 <_lseek_r+0x1e>
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	bd38      	pop	{r3, r4, r5, pc}
 800ccf8:	2001c548 	.word	0x2001c548

0800ccfc <_read_r>:
 800ccfc:	b538      	push	{r3, r4, r5, lr}
 800ccfe:	4d07      	ldr	r5, [pc, #28]	; (800cd1c <_read_r+0x20>)
 800cd00:	4604      	mov	r4, r0
 800cd02:	4608      	mov	r0, r1
 800cd04:	4611      	mov	r1, r2
 800cd06:	2200      	movs	r2, #0
 800cd08:	602a      	str	r2, [r5, #0]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	f7f4 fc78 	bl	8001600 <_read>
 800cd10:	1c43      	adds	r3, r0, #1
 800cd12:	d102      	bne.n	800cd1a <_read_r+0x1e>
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	b103      	cbz	r3, 800cd1a <_read_r+0x1e>
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	bd38      	pop	{r3, r4, r5, pc}
 800cd1c:	2001c548 	.word	0x2001c548

0800cd20 <_sbrk_r>:
 800cd20:	b538      	push	{r3, r4, r5, lr}
 800cd22:	4d06      	ldr	r5, [pc, #24]	; (800cd3c <_sbrk_r+0x1c>)
 800cd24:	2300      	movs	r3, #0
 800cd26:	4604      	mov	r4, r0
 800cd28:	4608      	mov	r0, r1
 800cd2a:	602b      	str	r3, [r5, #0]
 800cd2c:	f7f4 fcd6 	bl	80016dc <_sbrk>
 800cd30:	1c43      	adds	r3, r0, #1
 800cd32:	d102      	bne.n	800cd3a <_sbrk_r+0x1a>
 800cd34:	682b      	ldr	r3, [r5, #0]
 800cd36:	b103      	cbz	r3, 800cd3a <_sbrk_r+0x1a>
 800cd38:	6023      	str	r3, [r4, #0]
 800cd3a:	bd38      	pop	{r3, r4, r5, pc}
 800cd3c:	2001c548 	.word	0x2001c548

0800cd40 <_write_r>:
 800cd40:	b538      	push	{r3, r4, r5, lr}
 800cd42:	4d07      	ldr	r5, [pc, #28]	; (800cd60 <_write_r+0x20>)
 800cd44:	4604      	mov	r4, r0
 800cd46:	4608      	mov	r0, r1
 800cd48:	4611      	mov	r1, r2
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	602a      	str	r2, [r5, #0]
 800cd4e:	461a      	mov	r2, r3
 800cd50:	f7f4 fc73 	bl	800163a <_write>
 800cd54:	1c43      	adds	r3, r0, #1
 800cd56:	d102      	bne.n	800cd5e <_write_r+0x1e>
 800cd58:	682b      	ldr	r3, [r5, #0]
 800cd5a:	b103      	cbz	r3, 800cd5e <_write_r+0x1e>
 800cd5c:	6023      	str	r3, [r4, #0]
 800cd5e:	bd38      	pop	{r3, r4, r5, pc}
 800cd60:	2001c548 	.word	0x2001c548

0800cd64 <__errno>:
 800cd64:	4b01      	ldr	r3, [pc, #4]	; (800cd6c <__errno+0x8>)
 800cd66:	6818      	ldr	r0, [r3, #0]
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	2000016c 	.word	0x2000016c

0800cd70 <__libc_init_array>:
 800cd70:	b570      	push	{r4, r5, r6, lr}
 800cd72:	4d0d      	ldr	r5, [pc, #52]	; (800cda8 <__libc_init_array+0x38>)
 800cd74:	4c0d      	ldr	r4, [pc, #52]	; (800cdac <__libc_init_array+0x3c>)
 800cd76:	1b64      	subs	r4, r4, r5
 800cd78:	10a4      	asrs	r4, r4, #2
 800cd7a:	2600      	movs	r6, #0
 800cd7c:	42a6      	cmp	r6, r4
 800cd7e:	d109      	bne.n	800cd94 <__libc_init_array+0x24>
 800cd80:	4d0b      	ldr	r5, [pc, #44]	; (800cdb0 <__libc_init_array+0x40>)
 800cd82:	4c0c      	ldr	r4, [pc, #48]	; (800cdb4 <__libc_init_array+0x44>)
 800cd84:	f001 fda2 	bl	800e8cc <_init>
 800cd88:	1b64      	subs	r4, r4, r5
 800cd8a:	10a4      	asrs	r4, r4, #2
 800cd8c:	2600      	movs	r6, #0
 800cd8e:	42a6      	cmp	r6, r4
 800cd90:	d105      	bne.n	800cd9e <__libc_init_array+0x2e>
 800cd92:	bd70      	pop	{r4, r5, r6, pc}
 800cd94:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd98:	4798      	blx	r3
 800cd9a:	3601      	adds	r6, #1
 800cd9c:	e7ee      	b.n	800cd7c <__libc_init_array+0xc>
 800cd9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cda2:	4798      	blx	r3
 800cda4:	3601      	adds	r6, #1
 800cda6:	e7f2      	b.n	800cd8e <__libc_init_array+0x1e>
 800cda8:	0802237c 	.word	0x0802237c
 800cdac:	0802237c 	.word	0x0802237c
 800cdb0:	0802237c 	.word	0x0802237c
 800cdb4:	08022380 	.word	0x08022380

0800cdb8 <__retarget_lock_init_recursive>:
 800cdb8:	4770      	bx	lr

0800cdba <__retarget_lock_acquire_recursive>:
 800cdba:	4770      	bx	lr

0800cdbc <__retarget_lock_release_recursive>:
 800cdbc:	4770      	bx	lr

0800cdbe <quorem>:
 800cdbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc2:	6903      	ldr	r3, [r0, #16]
 800cdc4:	690c      	ldr	r4, [r1, #16]
 800cdc6:	42a3      	cmp	r3, r4
 800cdc8:	4607      	mov	r7, r0
 800cdca:	db7e      	blt.n	800ceca <quorem+0x10c>
 800cdcc:	3c01      	subs	r4, #1
 800cdce:	f101 0814 	add.w	r8, r1, #20
 800cdd2:	f100 0514 	add.w	r5, r0, #20
 800cdd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cdda:	9301      	str	r3, [sp, #4]
 800cddc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cde0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cde4:	3301      	adds	r3, #1
 800cde6:	429a      	cmp	r2, r3
 800cde8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cdec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cdf0:	fbb2 f6f3 	udiv	r6, r2, r3
 800cdf4:	d331      	bcc.n	800ce5a <quorem+0x9c>
 800cdf6:	f04f 0e00 	mov.w	lr, #0
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	46ac      	mov	ip, r5
 800cdfe:	46f2      	mov	sl, lr
 800ce00:	f850 2b04 	ldr.w	r2, [r0], #4
 800ce04:	b293      	uxth	r3, r2
 800ce06:	fb06 e303 	mla	r3, r6, r3, lr
 800ce0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ce0e:	0c1a      	lsrs	r2, r3, #16
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	ebaa 0303 	sub.w	r3, sl, r3
 800ce16:	f8dc a000 	ldr.w	sl, [ip]
 800ce1a:	fa13 f38a 	uxtah	r3, r3, sl
 800ce1e:	fb06 220e 	mla	r2, r6, lr, r2
 800ce22:	9300      	str	r3, [sp, #0]
 800ce24:	9b00      	ldr	r3, [sp, #0]
 800ce26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ce2a:	b292      	uxth	r2, r2
 800ce2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ce30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce34:	f8bd 3000 	ldrh.w	r3, [sp]
 800ce38:	4581      	cmp	r9, r0
 800ce3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce3e:	f84c 3b04 	str.w	r3, [ip], #4
 800ce42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ce46:	d2db      	bcs.n	800ce00 <quorem+0x42>
 800ce48:	f855 300b 	ldr.w	r3, [r5, fp]
 800ce4c:	b92b      	cbnz	r3, 800ce5a <quorem+0x9c>
 800ce4e:	9b01      	ldr	r3, [sp, #4]
 800ce50:	3b04      	subs	r3, #4
 800ce52:	429d      	cmp	r5, r3
 800ce54:	461a      	mov	r2, r3
 800ce56:	d32c      	bcc.n	800ceb2 <quorem+0xf4>
 800ce58:	613c      	str	r4, [r7, #16]
 800ce5a:	4638      	mov	r0, r7
 800ce5c:	f001 f86c 	bl	800df38 <__mcmp>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	db22      	blt.n	800ceaa <quorem+0xec>
 800ce64:	3601      	adds	r6, #1
 800ce66:	4629      	mov	r1, r5
 800ce68:	2000      	movs	r0, #0
 800ce6a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ce6e:	f8d1 c000 	ldr.w	ip, [r1]
 800ce72:	b293      	uxth	r3, r2
 800ce74:	1ac3      	subs	r3, r0, r3
 800ce76:	0c12      	lsrs	r2, r2, #16
 800ce78:	fa13 f38c 	uxtah	r3, r3, ip
 800ce7c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ce80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce8a:	45c1      	cmp	r9, r8
 800ce8c:	f841 3b04 	str.w	r3, [r1], #4
 800ce90:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ce94:	d2e9      	bcs.n	800ce6a <quorem+0xac>
 800ce96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce9e:	b922      	cbnz	r2, 800ceaa <quorem+0xec>
 800cea0:	3b04      	subs	r3, #4
 800cea2:	429d      	cmp	r5, r3
 800cea4:	461a      	mov	r2, r3
 800cea6:	d30a      	bcc.n	800cebe <quorem+0x100>
 800cea8:	613c      	str	r4, [r7, #16]
 800ceaa:	4630      	mov	r0, r6
 800ceac:	b003      	add	sp, #12
 800ceae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb2:	6812      	ldr	r2, [r2, #0]
 800ceb4:	3b04      	subs	r3, #4
 800ceb6:	2a00      	cmp	r2, #0
 800ceb8:	d1ce      	bne.n	800ce58 <quorem+0x9a>
 800ceba:	3c01      	subs	r4, #1
 800cebc:	e7c9      	b.n	800ce52 <quorem+0x94>
 800cebe:	6812      	ldr	r2, [r2, #0]
 800cec0:	3b04      	subs	r3, #4
 800cec2:	2a00      	cmp	r2, #0
 800cec4:	d1f0      	bne.n	800cea8 <quorem+0xea>
 800cec6:	3c01      	subs	r4, #1
 800cec8:	e7eb      	b.n	800cea2 <quorem+0xe4>
 800ceca:	2000      	movs	r0, #0
 800cecc:	e7ee      	b.n	800ceac <quorem+0xee>
	...

0800ced0 <_dtoa_r>:
 800ced0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced4:	ed2d 8b02 	vpush	{d8}
 800ced8:	69c5      	ldr	r5, [r0, #28]
 800ceda:	b091      	sub	sp, #68	; 0x44
 800cedc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cee0:	ec59 8b10 	vmov	r8, r9, d0
 800cee4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800cee6:	9106      	str	r1, [sp, #24]
 800cee8:	4606      	mov	r6, r0
 800ceea:	9208      	str	r2, [sp, #32]
 800ceec:	930c      	str	r3, [sp, #48]	; 0x30
 800ceee:	b975      	cbnz	r5, 800cf0e <_dtoa_r+0x3e>
 800cef0:	2010      	movs	r0, #16
 800cef2:	f7ff f8d9 	bl	800c0a8 <malloc>
 800cef6:	4602      	mov	r2, r0
 800cef8:	61f0      	str	r0, [r6, #28]
 800cefa:	b920      	cbnz	r0, 800cf06 <_dtoa_r+0x36>
 800cefc:	4ba6      	ldr	r3, [pc, #664]	; (800d198 <_dtoa_r+0x2c8>)
 800cefe:	21ef      	movs	r1, #239	; 0xef
 800cf00:	48a6      	ldr	r0, [pc, #664]	; (800d19c <_dtoa_r+0x2cc>)
 800cf02:	f001 f9d5 	bl	800e2b0 <__assert_func>
 800cf06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cf0a:	6005      	str	r5, [r0, #0]
 800cf0c:	60c5      	str	r5, [r0, #12]
 800cf0e:	69f3      	ldr	r3, [r6, #28]
 800cf10:	6819      	ldr	r1, [r3, #0]
 800cf12:	b151      	cbz	r1, 800cf2a <_dtoa_r+0x5a>
 800cf14:	685a      	ldr	r2, [r3, #4]
 800cf16:	604a      	str	r2, [r1, #4]
 800cf18:	2301      	movs	r3, #1
 800cf1a:	4093      	lsls	r3, r2
 800cf1c:	608b      	str	r3, [r1, #8]
 800cf1e:	4630      	mov	r0, r6
 800cf20:	f000 fdce 	bl	800dac0 <_Bfree>
 800cf24:	69f3      	ldr	r3, [r6, #28]
 800cf26:	2200      	movs	r2, #0
 800cf28:	601a      	str	r2, [r3, #0]
 800cf2a:	f1b9 0300 	subs.w	r3, r9, #0
 800cf2e:	bfbb      	ittet	lt
 800cf30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cf34:	9303      	strlt	r3, [sp, #12]
 800cf36:	2300      	movge	r3, #0
 800cf38:	2201      	movlt	r2, #1
 800cf3a:	bfac      	ite	ge
 800cf3c:	6023      	strge	r3, [r4, #0]
 800cf3e:	6022      	strlt	r2, [r4, #0]
 800cf40:	4b97      	ldr	r3, [pc, #604]	; (800d1a0 <_dtoa_r+0x2d0>)
 800cf42:	9c03      	ldr	r4, [sp, #12]
 800cf44:	43a3      	bics	r3, r4
 800cf46:	d11c      	bne.n	800cf82 <_dtoa_r+0xb2>
 800cf48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf4a:	f242 730f 	movw	r3, #9999	; 0x270f
 800cf4e:	6013      	str	r3, [r2, #0]
 800cf50:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800cf54:	ea53 0308 	orrs.w	r3, r3, r8
 800cf58:	f000 84fb 	beq.w	800d952 <_dtoa_r+0xa82>
 800cf5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf5e:	b963      	cbnz	r3, 800cf7a <_dtoa_r+0xaa>
 800cf60:	4b90      	ldr	r3, [pc, #576]	; (800d1a4 <_dtoa_r+0x2d4>)
 800cf62:	e020      	b.n	800cfa6 <_dtoa_r+0xd6>
 800cf64:	4b90      	ldr	r3, [pc, #576]	; (800d1a8 <_dtoa_r+0x2d8>)
 800cf66:	9301      	str	r3, [sp, #4]
 800cf68:	3308      	adds	r3, #8
 800cf6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cf6c:	6013      	str	r3, [r2, #0]
 800cf6e:	9801      	ldr	r0, [sp, #4]
 800cf70:	b011      	add	sp, #68	; 0x44
 800cf72:	ecbd 8b02 	vpop	{d8}
 800cf76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7a:	4b8a      	ldr	r3, [pc, #552]	; (800d1a4 <_dtoa_r+0x2d4>)
 800cf7c:	9301      	str	r3, [sp, #4]
 800cf7e:	3303      	adds	r3, #3
 800cf80:	e7f3      	b.n	800cf6a <_dtoa_r+0x9a>
 800cf82:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cf86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cf8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf8e:	d10c      	bne.n	800cfaa <_dtoa_r+0xda>
 800cf90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf92:	2301      	movs	r3, #1
 800cf94:	6013      	str	r3, [r2, #0]
 800cf96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f000 84d7 	beq.w	800d94c <_dtoa_r+0xa7c>
 800cf9e:	4b83      	ldr	r3, [pc, #524]	; (800d1ac <_dtoa_r+0x2dc>)
 800cfa0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cfa2:	6013      	str	r3, [r2, #0]
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	9301      	str	r3, [sp, #4]
 800cfa8:	e7e1      	b.n	800cf6e <_dtoa_r+0x9e>
 800cfaa:	aa0e      	add	r2, sp, #56	; 0x38
 800cfac:	a90f      	add	r1, sp, #60	; 0x3c
 800cfae:	4630      	mov	r0, r6
 800cfb0:	eeb0 0b48 	vmov.f64	d0, d8
 800cfb4:	f001 f866 	bl	800e084 <__d2b>
 800cfb8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800cfbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfbe:	4605      	mov	r5, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d046      	beq.n	800d052 <_dtoa_r+0x182>
 800cfc4:	eeb0 7b48 	vmov.f64	d7, d8
 800cfc8:	ee18 1a90 	vmov	r1, s17
 800cfcc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cfd0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800cfd4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cfd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cfdc:	2000      	movs	r0, #0
 800cfde:	ee07 1a90 	vmov	s15, r1
 800cfe2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800cfe6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d180 <_dtoa_r+0x2b0>
 800cfea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cfee:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800d188 <_dtoa_r+0x2b8>
 800cff2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cff6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d190 <_dtoa_r+0x2c0>
 800cffa:	ee07 3a90 	vmov	s15, r3
 800cffe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d002:	eeb0 7b46 	vmov.f64	d7, d6
 800d006:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d00a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d00e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d016:	ee16 ba90 	vmov	fp, s13
 800d01a:	9009      	str	r0, [sp, #36]	; 0x24
 800d01c:	d508      	bpl.n	800d030 <_dtoa_r+0x160>
 800d01e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d022:	eeb4 6b47 	vcmp.f64	d6, d7
 800d026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d02a:	bf18      	it	ne
 800d02c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d030:	f1bb 0f16 	cmp.w	fp, #22
 800d034:	d82b      	bhi.n	800d08e <_dtoa_r+0x1be>
 800d036:	495e      	ldr	r1, [pc, #376]	; (800d1b0 <_dtoa_r+0x2e0>)
 800d038:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800d03c:	ed91 7b00 	vldr	d7, [r1]
 800d040:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d048:	d501      	bpl.n	800d04e <_dtoa_r+0x17e>
 800d04a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d04e:	2100      	movs	r1, #0
 800d050:	e01e      	b.n	800d090 <_dtoa_r+0x1c0>
 800d052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d054:	4413      	add	r3, r2
 800d056:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800d05a:	2920      	cmp	r1, #32
 800d05c:	bfc1      	itttt	gt
 800d05e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800d062:	408c      	lslgt	r4, r1
 800d064:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800d068:	fa28 f101 	lsrgt.w	r1, r8, r1
 800d06c:	bfd6      	itet	le
 800d06e:	f1c1 0120 	rsble	r1, r1, #32
 800d072:	4321      	orrgt	r1, r4
 800d074:	fa08 f101 	lslle.w	r1, r8, r1
 800d078:	ee07 1a90 	vmov	s15, r1
 800d07c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d080:	3b01      	subs	r3, #1
 800d082:	ee17 1a90 	vmov	r1, s15
 800d086:	2001      	movs	r0, #1
 800d088:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d08c:	e7a7      	b.n	800cfde <_dtoa_r+0x10e>
 800d08e:	2101      	movs	r1, #1
 800d090:	1ad2      	subs	r2, r2, r3
 800d092:	1e53      	subs	r3, r2, #1
 800d094:	9305      	str	r3, [sp, #20]
 800d096:	bf45      	ittet	mi
 800d098:	f1c2 0301 	rsbmi	r3, r2, #1
 800d09c:	9304      	strmi	r3, [sp, #16]
 800d09e:	2300      	movpl	r3, #0
 800d0a0:	2300      	movmi	r3, #0
 800d0a2:	bf4c      	ite	mi
 800d0a4:	9305      	strmi	r3, [sp, #20]
 800d0a6:	9304      	strpl	r3, [sp, #16]
 800d0a8:	f1bb 0f00 	cmp.w	fp, #0
 800d0ac:	910b      	str	r1, [sp, #44]	; 0x2c
 800d0ae:	db18      	blt.n	800d0e2 <_dtoa_r+0x212>
 800d0b0:	9b05      	ldr	r3, [sp, #20]
 800d0b2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d0b6:	445b      	add	r3, fp
 800d0b8:	9305      	str	r3, [sp, #20]
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	9a06      	ldr	r2, [sp, #24]
 800d0be:	2a09      	cmp	r2, #9
 800d0c0:	d848      	bhi.n	800d154 <_dtoa_r+0x284>
 800d0c2:	2a05      	cmp	r2, #5
 800d0c4:	bfc4      	itt	gt
 800d0c6:	3a04      	subgt	r2, #4
 800d0c8:	9206      	strgt	r2, [sp, #24]
 800d0ca:	9a06      	ldr	r2, [sp, #24]
 800d0cc:	f1a2 0202 	sub.w	r2, r2, #2
 800d0d0:	bfcc      	ite	gt
 800d0d2:	2400      	movgt	r4, #0
 800d0d4:	2401      	movle	r4, #1
 800d0d6:	2a03      	cmp	r2, #3
 800d0d8:	d847      	bhi.n	800d16a <_dtoa_r+0x29a>
 800d0da:	e8df f002 	tbb	[pc, r2]
 800d0de:	2d0b      	.short	0x2d0b
 800d0e0:	392b      	.short	0x392b
 800d0e2:	9b04      	ldr	r3, [sp, #16]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	eba3 030b 	sub.w	r3, r3, fp
 800d0ea:	9304      	str	r3, [sp, #16]
 800d0ec:	920a      	str	r2, [sp, #40]	; 0x28
 800d0ee:	f1cb 0300 	rsb	r3, fp, #0
 800d0f2:	e7e3      	b.n	800d0bc <_dtoa_r+0x1ec>
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	9207      	str	r2, [sp, #28]
 800d0f8:	9a08      	ldr	r2, [sp, #32]
 800d0fa:	2a00      	cmp	r2, #0
 800d0fc:	dc38      	bgt.n	800d170 <_dtoa_r+0x2a0>
 800d0fe:	f04f 0a01 	mov.w	sl, #1
 800d102:	46d1      	mov	r9, sl
 800d104:	4652      	mov	r2, sl
 800d106:	f8cd a020 	str.w	sl, [sp, #32]
 800d10a:	69f7      	ldr	r7, [r6, #28]
 800d10c:	2100      	movs	r1, #0
 800d10e:	2004      	movs	r0, #4
 800d110:	f100 0c14 	add.w	ip, r0, #20
 800d114:	4594      	cmp	ip, r2
 800d116:	d930      	bls.n	800d17a <_dtoa_r+0x2aa>
 800d118:	6079      	str	r1, [r7, #4]
 800d11a:	4630      	mov	r0, r6
 800d11c:	930d      	str	r3, [sp, #52]	; 0x34
 800d11e:	f000 fc8f 	bl	800da40 <_Balloc>
 800d122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d124:	9001      	str	r0, [sp, #4]
 800d126:	4602      	mov	r2, r0
 800d128:	2800      	cmp	r0, #0
 800d12a:	d145      	bne.n	800d1b8 <_dtoa_r+0x2e8>
 800d12c:	4b21      	ldr	r3, [pc, #132]	; (800d1b4 <_dtoa_r+0x2e4>)
 800d12e:	f240 11af 	movw	r1, #431	; 0x1af
 800d132:	e6e5      	b.n	800cf00 <_dtoa_r+0x30>
 800d134:	2201      	movs	r2, #1
 800d136:	e7de      	b.n	800d0f6 <_dtoa_r+0x226>
 800d138:	2200      	movs	r2, #0
 800d13a:	9207      	str	r2, [sp, #28]
 800d13c:	9a08      	ldr	r2, [sp, #32]
 800d13e:	eb0b 0a02 	add.w	sl, fp, r2
 800d142:	f10a 0901 	add.w	r9, sl, #1
 800d146:	464a      	mov	r2, r9
 800d148:	2a01      	cmp	r2, #1
 800d14a:	bfb8      	it	lt
 800d14c:	2201      	movlt	r2, #1
 800d14e:	e7dc      	b.n	800d10a <_dtoa_r+0x23a>
 800d150:	2201      	movs	r2, #1
 800d152:	e7f2      	b.n	800d13a <_dtoa_r+0x26a>
 800d154:	2401      	movs	r4, #1
 800d156:	2200      	movs	r2, #0
 800d158:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d15c:	f04f 3aff 	mov.w	sl, #4294967295
 800d160:	2100      	movs	r1, #0
 800d162:	46d1      	mov	r9, sl
 800d164:	2212      	movs	r2, #18
 800d166:	9108      	str	r1, [sp, #32]
 800d168:	e7cf      	b.n	800d10a <_dtoa_r+0x23a>
 800d16a:	2201      	movs	r2, #1
 800d16c:	9207      	str	r2, [sp, #28]
 800d16e:	e7f5      	b.n	800d15c <_dtoa_r+0x28c>
 800d170:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d174:	46d1      	mov	r9, sl
 800d176:	4652      	mov	r2, sl
 800d178:	e7c7      	b.n	800d10a <_dtoa_r+0x23a>
 800d17a:	3101      	adds	r1, #1
 800d17c:	0040      	lsls	r0, r0, #1
 800d17e:	e7c7      	b.n	800d110 <_dtoa_r+0x240>
 800d180:	636f4361 	.word	0x636f4361
 800d184:	3fd287a7 	.word	0x3fd287a7
 800d188:	8b60c8b3 	.word	0x8b60c8b3
 800d18c:	3fc68a28 	.word	0x3fc68a28
 800d190:	509f79fb 	.word	0x509f79fb
 800d194:	3fd34413 	.word	0x3fd34413
 800d198:	08022041 	.word	0x08022041
 800d19c:	08022058 	.word	0x08022058
 800d1a0:	7ff00000 	.word	0x7ff00000
 800d1a4:	0802203d 	.word	0x0802203d
 800d1a8:	08022034 	.word	0x08022034
 800d1ac:	08022011 	.word	0x08022011
 800d1b0:	08022148 	.word	0x08022148
 800d1b4:	080220b0 	.word	0x080220b0
 800d1b8:	69f2      	ldr	r2, [r6, #28]
 800d1ba:	9901      	ldr	r1, [sp, #4]
 800d1bc:	6011      	str	r1, [r2, #0]
 800d1be:	f1b9 0f0e 	cmp.w	r9, #14
 800d1c2:	d86c      	bhi.n	800d29e <_dtoa_r+0x3ce>
 800d1c4:	2c00      	cmp	r4, #0
 800d1c6:	d06a      	beq.n	800d29e <_dtoa_r+0x3ce>
 800d1c8:	f1bb 0f00 	cmp.w	fp, #0
 800d1cc:	f340 80a0 	ble.w	800d310 <_dtoa_r+0x440>
 800d1d0:	4ac1      	ldr	r2, [pc, #772]	; (800d4d8 <_dtoa_r+0x608>)
 800d1d2:	f00b 010f 	and.w	r1, fp, #15
 800d1d6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d1da:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d1de:	ed92 7b00 	vldr	d7, [r2]
 800d1e2:	ea4f 122b 	mov.w	r2, fp, asr #4
 800d1e6:	f000 8087 	beq.w	800d2f8 <_dtoa_r+0x428>
 800d1ea:	49bc      	ldr	r1, [pc, #752]	; (800d4dc <_dtoa_r+0x60c>)
 800d1ec:	ed91 6b08 	vldr	d6, [r1, #32]
 800d1f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d1f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d1f8:	f002 020f 	and.w	r2, r2, #15
 800d1fc:	2103      	movs	r1, #3
 800d1fe:	48b7      	ldr	r0, [pc, #732]	; (800d4dc <_dtoa_r+0x60c>)
 800d200:	2a00      	cmp	r2, #0
 800d202:	d17b      	bne.n	800d2fc <_dtoa_r+0x42c>
 800d204:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d208:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d20c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d210:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d212:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d216:	2a00      	cmp	r2, #0
 800d218:	f000 80a0 	beq.w	800d35c <_dtoa_r+0x48c>
 800d21c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d220:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d228:	f140 8098 	bpl.w	800d35c <_dtoa_r+0x48c>
 800d22c:	f1b9 0f00 	cmp.w	r9, #0
 800d230:	f000 8094 	beq.w	800d35c <_dtoa_r+0x48c>
 800d234:	f1ba 0f00 	cmp.w	sl, #0
 800d238:	dd2f      	ble.n	800d29a <_dtoa_r+0x3ca>
 800d23a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d23e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d242:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d246:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d24a:	3101      	adds	r1, #1
 800d24c:	4654      	mov	r4, sl
 800d24e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d252:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d256:	ee07 1a90 	vmov	s15, r1
 800d25a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d25e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d262:	ee15 7a90 	vmov	r7, s11
 800d266:	ec51 0b15 	vmov	r0, r1, d5
 800d26a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800d26e:	2c00      	cmp	r4, #0
 800d270:	d177      	bne.n	800d362 <_dtoa_r+0x492>
 800d272:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d276:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d27a:	ec41 0b17 	vmov	d7, r0, r1
 800d27e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d286:	f300 826a 	bgt.w	800d75e <_dtoa_r+0x88e>
 800d28a:	eeb1 7b47 	vneg.f64	d7, d7
 800d28e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d296:	f100 8260 	bmi.w	800d75a <_dtoa_r+0x88a>
 800d29a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d29e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d2a0:	2a00      	cmp	r2, #0
 800d2a2:	f2c0 811d 	blt.w	800d4e0 <_dtoa_r+0x610>
 800d2a6:	f1bb 0f0e 	cmp.w	fp, #14
 800d2aa:	f300 8119 	bgt.w	800d4e0 <_dtoa_r+0x610>
 800d2ae:	4b8a      	ldr	r3, [pc, #552]	; (800d4d8 <_dtoa_r+0x608>)
 800d2b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d2b4:	ed93 6b00 	vldr	d6, [r3]
 800d2b8:	9b08      	ldr	r3, [sp, #32]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f280 80b7 	bge.w	800d42e <_dtoa_r+0x55e>
 800d2c0:	f1b9 0f00 	cmp.w	r9, #0
 800d2c4:	f300 80b3 	bgt.w	800d42e <_dtoa_r+0x55e>
 800d2c8:	f040 8246 	bne.w	800d758 <_dtoa_r+0x888>
 800d2cc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d2d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d2d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2e0:	464c      	mov	r4, r9
 800d2e2:	464f      	mov	r7, r9
 800d2e4:	f280 821c 	bge.w	800d720 <_dtoa_r+0x850>
 800d2e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d2ec:	2331      	movs	r3, #49	; 0x31
 800d2ee:	f808 3b01 	strb.w	r3, [r8], #1
 800d2f2:	f10b 0b01 	add.w	fp, fp, #1
 800d2f6:	e218      	b.n	800d72a <_dtoa_r+0x85a>
 800d2f8:	2102      	movs	r1, #2
 800d2fa:	e780      	b.n	800d1fe <_dtoa_r+0x32e>
 800d2fc:	07d4      	lsls	r4, r2, #31
 800d2fe:	d504      	bpl.n	800d30a <_dtoa_r+0x43a>
 800d300:	ed90 6b00 	vldr	d6, [r0]
 800d304:	3101      	adds	r1, #1
 800d306:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d30a:	1052      	asrs	r2, r2, #1
 800d30c:	3008      	adds	r0, #8
 800d30e:	e777      	b.n	800d200 <_dtoa_r+0x330>
 800d310:	d022      	beq.n	800d358 <_dtoa_r+0x488>
 800d312:	f1cb 0200 	rsb	r2, fp, #0
 800d316:	4970      	ldr	r1, [pc, #448]	; (800d4d8 <_dtoa_r+0x608>)
 800d318:	f002 000f 	and.w	r0, r2, #15
 800d31c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d320:	ed91 7b00 	vldr	d7, [r1]
 800d324:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d328:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d32c:	486b      	ldr	r0, [pc, #428]	; (800d4dc <_dtoa_r+0x60c>)
 800d32e:	1112      	asrs	r2, r2, #4
 800d330:	2400      	movs	r4, #0
 800d332:	2102      	movs	r1, #2
 800d334:	b92a      	cbnz	r2, 800d342 <_dtoa_r+0x472>
 800d336:	2c00      	cmp	r4, #0
 800d338:	f43f af6a 	beq.w	800d210 <_dtoa_r+0x340>
 800d33c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d340:	e766      	b.n	800d210 <_dtoa_r+0x340>
 800d342:	07d7      	lsls	r7, r2, #31
 800d344:	d505      	bpl.n	800d352 <_dtoa_r+0x482>
 800d346:	ed90 6b00 	vldr	d6, [r0]
 800d34a:	3101      	adds	r1, #1
 800d34c:	2401      	movs	r4, #1
 800d34e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d352:	1052      	asrs	r2, r2, #1
 800d354:	3008      	adds	r0, #8
 800d356:	e7ed      	b.n	800d334 <_dtoa_r+0x464>
 800d358:	2102      	movs	r1, #2
 800d35a:	e759      	b.n	800d210 <_dtoa_r+0x340>
 800d35c:	465a      	mov	r2, fp
 800d35e:	464c      	mov	r4, r9
 800d360:	e775      	b.n	800d24e <_dtoa_r+0x37e>
 800d362:	ec41 0b17 	vmov	d7, r0, r1
 800d366:	495c      	ldr	r1, [pc, #368]	; (800d4d8 <_dtoa_r+0x608>)
 800d368:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800d36c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800d370:	9901      	ldr	r1, [sp, #4]
 800d372:	440c      	add	r4, r1
 800d374:	9907      	ldr	r1, [sp, #28]
 800d376:	b351      	cbz	r1, 800d3ce <_dtoa_r+0x4fe>
 800d378:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d37c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d380:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d384:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d388:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d38c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d390:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d394:	ee14 1a90 	vmov	r1, s9
 800d398:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d39c:	3130      	adds	r1, #48	; 0x30
 800d39e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d3a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3aa:	f808 1b01 	strb.w	r1, [r8], #1
 800d3ae:	d439      	bmi.n	800d424 <_dtoa_r+0x554>
 800d3b0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d3b4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3bc:	d472      	bmi.n	800d4a4 <_dtoa_r+0x5d4>
 800d3be:	45a0      	cmp	r8, r4
 800d3c0:	f43f af6b 	beq.w	800d29a <_dtoa_r+0x3ca>
 800d3c4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d3c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d3cc:	e7e0      	b.n	800d390 <_dtoa_r+0x4c0>
 800d3ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d3d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d3dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d3e0:	ee14 1a90 	vmov	r1, s9
 800d3e4:	3130      	adds	r1, #48	; 0x30
 800d3e6:	f808 1b01 	strb.w	r1, [r8], #1
 800d3ea:	45a0      	cmp	r8, r4
 800d3ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d3f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d3f4:	d118      	bne.n	800d428 <_dtoa_r+0x558>
 800d3f6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d3fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d3fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d406:	dc4d      	bgt.n	800d4a4 <_dtoa_r+0x5d4>
 800d408:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d40c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d414:	f57f af41 	bpl.w	800d29a <_dtoa_r+0x3ca>
 800d418:	4680      	mov	r8, r0
 800d41a:	3801      	subs	r0, #1
 800d41c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d420:	2b30      	cmp	r3, #48	; 0x30
 800d422:	d0f9      	beq.n	800d418 <_dtoa_r+0x548>
 800d424:	4693      	mov	fp, r2
 800d426:	e02a      	b.n	800d47e <_dtoa_r+0x5ae>
 800d428:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d42c:	e7d6      	b.n	800d3dc <_dtoa_r+0x50c>
 800d42e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d432:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d436:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d43a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d43e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d442:	ee15 3a10 	vmov	r3, s10
 800d446:	3330      	adds	r3, #48	; 0x30
 800d448:	f808 3b01 	strb.w	r3, [r8], #1
 800d44c:	9b01      	ldr	r3, [sp, #4]
 800d44e:	eba8 0303 	sub.w	r3, r8, r3
 800d452:	4599      	cmp	r9, r3
 800d454:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d458:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d45c:	d133      	bne.n	800d4c6 <_dtoa_r+0x5f6>
 800d45e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d462:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d46a:	dc1a      	bgt.n	800d4a2 <_dtoa_r+0x5d2>
 800d46c:	eeb4 7b46 	vcmp.f64	d7, d6
 800d470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d474:	d103      	bne.n	800d47e <_dtoa_r+0x5ae>
 800d476:	ee15 3a10 	vmov	r3, s10
 800d47a:	07d9      	lsls	r1, r3, #31
 800d47c:	d411      	bmi.n	800d4a2 <_dtoa_r+0x5d2>
 800d47e:	4629      	mov	r1, r5
 800d480:	4630      	mov	r0, r6
 800d482:	f000 fb1d 	bl	800dac0 <_Bfree>
 800d486:	2300      	movs	r3, #0
 800d488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d48a:	f888 3000 	strb.w	r3, [r8]
 800d48e:	f10b 0301 	add.w	r3, fp, #1
 800d492:	6013      	str	r3, [r2, #0]
 800d494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d496:	2b00      	cmp	r3, #0
 800d498:	f43f ad69 	beq.w	800cf6e <_dtoa_r+0x9e>
 800d49c:	f8c3 8000 	str.w	r8, [r3]
 800d4a0:	e565      	b.n	800cf6e <_dtoa_r+0x9e>
 800d4a2:	465a      	mov	r2, fp
 800d4a4:	4643      	mov	r3, r8
 800d4a6:	4698      	mov	r8, r3
 800d4a8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800d4ac:	2939      	cmp	r1, #57	; 0x39
 800d4ae:	d106      	bne.n	800d4be <_dtoa_r+0x5ee>
 800d4b0:	9901      	ldr	r1, [sp, #4]
 800d4b2:	4299      	cmp	r1, r3
 800d4b4:	d1f7      	bne.n	800d4a6 <_dtoa_r+0x5d6>
 800d4b6:	9801      	ldr	r0, [sp, #4]
 800d4b8:	2130      	movs	r1, #48	; 0x30
 800d4ba:	3201      	adds	r2, #1
 800d4bc:	7001      	strb	r1, [r0, #0]
 800d4be:	7819      	ldrb	r1, [r3, #0]
 800d4c0:	3101      	adds	r1, #1
 800d4c2:	7019      	strb	r1, [r3, #0]
 800d4c4:	e7ae      	b.n	800d424 <_dtoa_r+0x554>
 800d4c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d4ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d2:	d1b2      	bne.n	800d43a <_dtoa_r+0x56a>
 800d4d4:	e7d3      	b.n	800d47e <_dtoa_r+0x5ae>
 800d4d6:	bf00      	nop
 800d4d8:	08022148 	.word	0x08022148
 800d4dc:	08022120 	.word	0x08022120
 800d4e0:	9907      	ldr	r1, [sp, #28]
 800d4e2:	2900      	cmp	r1, #0
 800d4e4:	f000 80d0 	beq.w	800d688 <_dtoa_r+0x7b8>
 800d4e8:	9906      	ldr	r1, [sp, #24]
 800d4ea:	2901      	cmp	r1, #1
 800d4ec:	f300 80b4 	bgt.w	800d658 <_dtoa_r+0x788>
 800d4f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4f2:	2900      	cmp	r1, #0
 800d4f4:	f000 80ac 	beq.w	800d650 <_dtoa_r+0x780>
 800d4f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d4fc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d500:	461c      	mov	r4, r3
 800d502:	9309      	str	r3, [sp, #36]	; 0x24
 800d504:	9b04      	ldr	r3, [sp, #16]
 800d506:	4413      	add	r3, r2
 800d508:	9304      	str	r3, [sp, #16]
 800d50a:	9b05      	ldr	r3, [sp, #20]
 800d50c:	2101      	movs	r1, #1
 800d50e:	4413      	add	r3, r2
 800d510:	4630      	mov	r0, r6
 800d512:	9305      	str	r3, [sp, #20]
 800d514:	f000 fb8a 	bl	800dc2c <__i2b>
 800d518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d51a:	4607      	mov	r7, r0
 800d51c:	f1b8 0f00 	cmp.w	r8, #0
 800d520:	d00d      	beq.n	800d53e <_dtoa_r+0x66e>
 800d522:	9a05      	ldr	r2, [sp, #20]
 800d524:	2a00      	cmp	r2, #0
 800d526:	dd0a      	ble.n	800d53e <_dtoa_r+0x66e>
 800d528:	4542      	cmp	r2, r8
 800d52a:	9904      	ldr	r1, [sp, #16]
 800d52c:	bfa8      	it	ge
 800d52e:	4642      	movge	r2, r8
 800d530:	1a89      	subs	r1, r1, r2
 800d532:	9104      	str	r1, [sp, #16]
 800d534:	9905      	ldr	r1, [sp, #20]
 800d536:	eba8 0802 	sub.w	r8, r8, r2
 800d53a:	1a8a      	subs	r2, r1, r2
 800d53c:	9205      	str	r2, [sp, #20]
 800d53e:	b303      	cbz	r3, 800d582 <_dtoa_r+0x6b2>
 800d540:	9a07      	ldr	r2, [sp, #28]
 800d542:	2a00      	cmp	r2, #0
 800d544:	f000 80a5 	beq.w	800d692 <_dtoa_r+0x7c2>
 800d548:	2c00      	cmp	r4, #0
 800d54a:	dd13      	ble.n	800d574 <_dtoa_r+0x6a4>
 800d54c:	4639      	mov	r1, r7
 800d54e:	4622      	mov	r2, r4
 800d550:	4630      	mov	r0, r6
 800d552:	930d      	str	r3, [sp, #52]	; 0x34
 800d554:	f000 fc2a 	bl	800ddac <__pow5mult>
 800d558:	462a      	mov	r2, r5
 800d55a:	4601      	mov	r1, r0
 800d55c:	4607      	mov	r7, r0
 800d55e:	4630      	mov	r0, r6
 800d560:	f000 fb7a 	bl	800dc58 <__multiply>
 800d564:	4629      	mov	r1, r5
 800d566:	9009      	str	r0, [sp, #36]	; 0x24
 800d568:	4630      	mov	r0, r6
 800d56a:	f000 faa9 	bl	800dac0 <_Bfree>
 800d56e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d572:	4615      	mov	r5, r2
 800d574:	1b1a      	subs	r2, r3, r4
 800d576:	d004      	beq.n	800d582 <_dtoa_r+0x6b2>
 800d578:	4629      	mov	r1, r5
 800d57a:	4630      	mov	r0, r6
 800d57c:	f000 fc16 	bl	800ddac <__pow5mult>
 800d580:	4605      	mov	r5, r0
 800d582:	2101      	movs	r1, #1
 800d584:	4630      	mov	r0, r6
 800d586:	f000 fb51 	bl	800dc2c <__i2b>
 800d58a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	4604      	mov	r4, r0
 800d590:	f340 8081 	ble.w	800d696 <_dtoa_r+0x7c6>
 800d594:	461a      	mov	r2, r3
 800d596:	4601      	mov	r1, r0
 800d598:	4630      	mov	r0, r6
 800d59a:	f000 fc07 	bl	800ddac <__pow5mult>
 800d59e:	9b06      	ldr	r3, [sp, #24]
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	dd7a      	ble.n	800d69c <_dtoa_r+0x7cc>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d5aa:	6922      	ldr	r2, [r4, #16]
 800d5ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d5b0:	6910      	ldr	r0, [r2, #16]
 800d5b2:	f000 faed 	bl	800db90 <__hi0bits>
 800d5b6:	f1c0 0020 	rsb	r0, r0, #32
 800d5ba:	9b05      	ldr	r3, [sp, #20]
 800d5bc:	4418      	add	r0, r3
 800d5be:	f010 001f 	ands.w	r0, r0, #31
 800d5c2:	f000 8093 	beq.w	800d6ec <_dtoa_r+0x81c>
 800d5c6:	f1c0 0220 	rsb	r2, r0, #32
 800d5ca:	2a04      	cmp	r2, #4
 800d5cc:	f340 8085 	ble.w	800d6da <_dtoa_r+0x80a>
 800d5d0:	9b04      	ldr	r3, [sp, #16]
 800d5d2:	f1c0 001c 	rsb	r0, r0, #28
 800d5d6:	4403      	add	r3, r0
 800d5d8:	9304      	str	r3, [sp, #16]
 800d5da:	9b05      	ldr	r3, [sp, #20]
 800d5dc:	4480      	add	r8, r0
 800d5de:	4403      	add	r3, r0
 800d5e0:	9305      	str	r3, [sp, #20]
 800d5e2:	9b04      	ldr	r3, [sp, #16]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	dd05      	ble.n	800d5f4 <_dtoa_r+0x724>
 800d5e8:	4629      	mov	r1, r5
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	f000 fc37 	bl	800de60 <__lshift>
 800d5f2:	4605      	mov	r5, r0
 800d5f4:	9b05      	ldr	r3, [sp, #20]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	dd05      	ble.n	800d606 <_dtoa_r+0x736>
 800d5fa:	4621      	mov	r1, r4
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	4630      	mov	r0, r6
 800d600:	f000 fc2e 	bl	800de60 <__lshift>
 800d604:	4604      	mov	r4, r0
 800d606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d071      	beq.n	800d6f0 <_dtoa_r+0x820>
 800d60c:	4621      	mov	r1, r4
 800d60e:	4628      	mov	r0, r5
 800d610:	f000 fc92 	bl	800df38 <__mcmp>
 800d614:	2800      	cmp	r0, #0
 800d616:	da6b      	bge.n	800d6f0 <_dtoa_r+0x820>
 800d618:	2300      	movs	r3, #0
 800d61a:	4629      	mov	r1, r5
 800d61c:	220a      	movs	r2, #10
 800d61e:	4630      	mov	r0, r6
 800d620:	f000 fa70 	bl	800db04 <__multadd>
 800d624:	9b07      	ldr	r3, [sp, #28]
 800d626:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d62a:	4605      	mov	r5, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f000 8197 	beq.w	800d960 <_dtoa_r+0xa90>
 800d632:	4639      	mov	r1, r7
 800d634:	2300      	movs	r3, #0
 800d636:	220a      	movs	r2, #10
 800d638:	4630      	mov	r0, r6
 800d63a:	f000 fa63 	bl	800db04 <__multadd>
 800d63e:	f1ba 0f00 	cmp.w	sl, #0
 800d642:	4607      	mov	r7, r0
 800d644:	f300 8093 	bgt.w	800d76e <_dtoa_r+0x89e>
 800d648:	9b06      	ldr	r3, [sp, #24]
 800d64a:	2b02      	cmp	r3, #2
 800d64c:	dc57      	bgt.n	800d6fe <_dtoa_r+0x82e>
 800d64e:	e08e      	b.n	800d76e <_dtoa_r+0x89e>
 800d650:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d652:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d656:	e751      	b.n	800d4fc <_dtoa_r+0x62c>
 800d658:	f109 34ff 	add.w	r4, r9, #4294967295
 800d65c:	42a3      	cmp	r3, r4
 800d65e:	bfbf      	itttt	lt
 800d660:	1ae2      	sublt	r2, r4, r3
 800d662:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d664:	189b      	addlt	r3, r3, r2
 800d666:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d668:	bfae      	itee	ge
 800d66a:	1b1c      	subge	r4, r3, r4
 800d66c:	4623      	movlt	r3, r4
 800d66e:	2400      	movlt	r4, #0
 800d670:	f1b9 0f00 	cmp.w	r9, #0
 800d674:	bfb5      	itete	lt
 800d676:	9a04      	ldrlt	r2, [sp, #16]
 800d678:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800d67c:	eba2 0809 	sublt.w	r8, r2, r9
 800d680:	464a      	movge	r2, r9
 800d682:	bfb8      	it	lt
 800d684:	2200      	movlt	r2, #0
 800d686:	e73c      	b.n	800d502 <_dtoa_r+0x632>
 800d688:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d68c:	9f07      	ldr	r7, [sp, #28]
 800d68e:	461c      	mov	r4, r3
 800d690:	e744      	b.n	800d51c <_dtoa_r+0x64c>
 800d692:	461a      	mov	r2, r3
 800d694:	e770      	b.n	800d578 <_dtoa_r+0x6a8>
 800d696:	9b06      	ldr	r3, [sp, #24]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	dc18      	bgt.n	800d6ce <_dtoa_r+0x7fe>
 800d69c:	9b02      	ldr	r3, [sp, #8]
 800d69e:	b9b3      	cbnz	r3, 800d6ce <_dtoa_r+0x7fe>
 800d6a0:	9b03      	ldr	r3, [sp, #12]
 800d6a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d6a6:	b9a2      	cbnz	r2, 800d6d2 <_dtoa_r+0x802>
 800d6a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d6ac:	0d12      	lsrs	r2, r2, #20
 800d6ae:	0512      	lsls	r2, r2, #20
 800d6b0:	b18a      	cbz	r2, 800d6d6 <_dtoa_r+0x806>
 800d6b2:	9b04      	ldr	r3, [sp, #16]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	9304      	str	r3, [sp, #16]
 800d6b8:	9b05      	ldr	r3, [sp, #20]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	9305      	str	r3, [sp, #20]
 800d6be:	2301      	movs	r3, #1
 800d6c0:	9309      	str	r3, [sp, #36]	; 0x24
 800d6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	f47f af70 	bne.w	800d5aa <_dtoa_r+0x6da>
 800d6ca:	2001      	movs	r0, #1
 800d6cc:	e775      	b.n	800d5ba <_dtoa_r+0x6ea>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	e7f6      	b.n	800d6c0 <_dtoa_r+0x7f0>
 800d6d2:	9b02      	ldr	r3, [sp, #8]
 800d6d4:	e7f4      	b.n	800d6c0 <_dtoa_r+0x7f0>
 800d6d6:	9209      	str	r2, [sp, #36]	; 0x24
 800d6d8:	e7f3      	b.n	800d6c2 <_dtoa_r+0x7f2>
 800d6da:	d082      	beq.n	800d5e2 <_dtoa_r+0x712>
 800d6dc:	9b04      	ldr	r3, [sp, #16]
 800d6de:	321c      	adds	r2, #28
 800d6e0:	4413      	add	r3, r2
 800d6e2:	9304      	str	r3, [sp, #16]
 800d6e4:	9b05      	ldr	r3, [sp, #20]
 800d6e6:	4490      	add	r8, r2
 800d6e8:	4413      	add	r3, r2
 800d6ea:	e779      	b.n	800d5e0 <_dtoa_r+0x710>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	e7f5      	b.n	800d6dc <_dtoa_r+0x80c>
 800d6f0:	f1b9 0f00 	cmp.w	r9, #0
 800d6f4:	dc36      	bgt.n	800d764 <_dtoa_r+0x894>
 800d6f6:	9b06      	ldr	r3, [sp, #24]
 800d6f8:	2b02      	cmp	r3, #2
 800d6fa:	dd33      	ble.n	800d764 <_dtoa_r+0x894>
 800d6fc:	46ca      	mov	sl, r9
 800d6fe:	f1ba 0f00 	cmp.w	sl, #0
 800d702:	d10d      	bne.n	800d720 <_dtoa_r+0x850>
 800d704:	4621      	mov	r1, r4
 800d706:	4653      	mov	r3, sl
 800d708:	2205      	movs	r2, #5
 800d70a:	4630      	mov	r0, r6
 800d70c:	f000 f9fa 	bl	800db04 <__multadd>
 800d710:	4601      	mov	r1, r0
 800d712:	4604      	mov	r4, r0
 800d714:	4628      	mov	r0, r5
 800d716:	f000 fc0f 	bl	800df38 <__mcmp>
 800d71a:	2800      	cmp	r0, #0
 800d71c:	f73f ade4 	bgt.w	800d2e8 <_dtoa_r+0x418>
 800d720:	9b08      	ldr	r3, [sp, #32]
 800d722:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d726:	ea6f 0b03 	mvn.w	fp, r3
 800d72a:	f04f 0900 	mov.w	r9, #0
 800d72e:	4621      	mov	r1, r4
 800d730:	4630      	mov	r0, r6
 800d732:	f000 f9c5 	bl	800dac0 <_Bfree>
 800d736:	2f00      	cmp	r7, #0
 800d738:	f43f aea1 	beq.w	800d47e <_dtoa_r+0x5ae>
 800d73c:	f1b9 0f00 	cmp.w	r9, #0
 800d740:	d005      	beq.n	800d74e <_dtoa_r+0x87e>
 800d742:	45b9      	cmp	r9, r7
 800d744:	d003      	beq.n	800d74e <_dtoa_r+0x87e>
 800d746:	4649      	mov	r1, r9
 800d748:	4630      	mov	r0, r6
 800d74a:	f000 f9b9 	bl	800dac0 <_Bfree>
 800d74e:	4639      	mov	r1, r7
 800d750:	4630      	mov	r0, r6
 800d752:	f000 f9b5 	bl	800dac0 <_Bfree>
 800d756:	e692      	b.n	800d47e <_dtoa_r+0x5ae>
 800d758:	2400      	movs	r4, #0
 800d75a:	4627      	mov	r7, r4
 800d75c:	e7e0      	b.n	800d720 <_dtoa_r+0x850>
 800d75e:	4693      	mov	fp, r2
 800d760:	4627      	mov	r7, r4
 800d762:	e5c1      	b.n	800d2e8 <_dtoa_r+0x418>
 800d764:	9b07      	ldr	r3, [sp, #28]
 800d766:	46ca      	mov	sl, r9
 800d768:	2b00      	cmp	r3, #0
 800d76a:	f000 8100 	beq.w	800d96e <_dtoa_r+0xa9e>
 800d76e:	f1b8 0f00 	cmp.w	r8, #0
 800d772:	dd05      	ble.n	800d780 <_dtoa_r+0x8b0>
 800d774:	4639      	mov	r1, r7
 800d776:	4642      	mov	r2, r8
 800d778:	4630      	mov	r0, r6
 800d77a:	f000 fb71 	bl	800de60 <__lshift>
 800d77e:	4607      	mov	r7, r0
 800d780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d782:	2b00      	cmp	r3, #0
 800d784:	d05d      	beq.n	800d842 <_dtoa_r+0x972>
 800d786:	6879      	ldr	r1, [r7, #4]
 800d788:	4630      	mov	r0, r6
 800d78a:	f000 f959 	bl	800da40 <_Balloc>
 800d78e:	4680      	mov	r8, r0
 800d790:	b928      	cbnz	r0, 800d79e <_dtoa_r+0x8ce>
 800d792:	4b82      	ldr	r3, [pc, #520]	; (800d99c <_dtoa_r+0xacc>)
 800d794:	4602      	mov	r2, r0
 800d796:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d79a:	f7ff bbb1 	b.w	800cf00 <_dtoa_r+0x30>
 800d79e:	693a      	ldr	r2, [r7, #16]
 800d7a0:	3202      	adds	r2, #2
 800d7a2:	0092      	lsls	r2, r2, #2
 800d7a4:	f107 010c 	add.w	r1, r7, #12
 800d7a8:	300c      	adds	r0, #12
 800d7aa:	f000 fd73 	bl	800e294 <memcpy>
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	4641      	mov	r1, r8
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	f000 fb54 	bl	800de60 <__lshift>
 800d7b8:	9b01      	ldr	r3, [sp, #4]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	9304      	str	r3, [sp, #16]
 800d7be:	9b01      	ldr	r3, [sp, #4]
 800d7c0:	4453      	add	r3, sl
 800d7c2:	9308      	str	r3, [sp, #32]
 800d7c4:	9b02      	ldr	r3, [sp, #8]
 800d7c6:	f003 0301 	and.w	r3, r3, #1
 800d7ca:	46b9      	mov	r9, r7
 800d7cc:	9307      	str	r3, [sp, #28]
 800d7ce:	4607      	mov	r7, r0
 800d7d0:	9b04      	ldr	r3, [sp, #16]
 800d7d2:	4621      	mov	r1, r4
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	9302      	str	r3, [sp, #8]
 800d7da:	f7ff faf0 	bl	800cdbe <quorem>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	3330      	adds	r3, #48	; 0x30
 800d7e2:	9005      	str	r0, [sp, #20]
 800d7e4:	4649      	mov	r1, r9
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d7ea:	f000 fba5 	bl	800df38 <__mcmp>
 800d7ee:	463a      	mov	r2, r7
 800d7f0:	4682      	mov	sl, r0
 800d7f2:	4621      	mov	r1, r4
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	f000 fbbb 	bl	800df70 <__mdiff>
 800d7fa:	68c2      	ldr	r2, [r0, #12]
 800d7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7fe:	4680      	mov	r8, r0
 800d800:	bb0a      	cbnz	r2, 800d846 <_dtoa_r+0x976>
 800d802:	4601      	mov	r1, r0
 800d804:	4628      	mov	r0, r5
 800d806:	f000 fb97 	bl	800df38 <__mcmp>
 800d80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d80c:	4602      	mov	r2, r0
 800d80e:	4641      	mov	r1, r8
 800d810:	4630      	mov	r0, r6
 800d812:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800d816:	f000 f953 	bl	800dac0 <_Bfree>
 800d81a:	9b06      	ldr	r3, [sp, #24]
 800d81c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d81e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d822:	ea43 0102 	orr.w	r1, r3, r2
 800d826:	9b07      	ldr	r3, [sp, #28]
 800d828:	4319      	orrs	r1, r3
 800d82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d82c:	d10d      	bne.n	800d84a <_dtoa_r+0x97a>
 800d82e:	2b39      	cmp	r3, #57	; 0x39
 800d830:	d029      	beq.n	800d886 <_dtoa_r+0x9b6>
 800d832:	f1ba 0f00 	cmp.w	sl, #0
 800d836:	dd01      	ble.n	800d83c <_dtoa_r+0x96c>
 800d838:	9b05      	ldr	r3, [sp, #20]
 800d83a:	3331      	adds	r3, #49	; 0x31
 800d83c:	9a02      	ldr	r2, [sp, #8]
 800d83e:	7013      	strb	r3, [r2, #0]
 800d840:	e775      	b.n	800d72e <_dtoa_r+0x85e>
 800d842:	4638      	mov	r0, r7
 800d844:	e7b8      	b.n	800d7b8 <_dtoa_r+0x8e8>
 800d846:	2201      	movs	r2, #1
 800d848:	e7e1      	b.n	800d80e <_dtoa_r+0x93e>
 800d84a:	f1ba 0f00 	cmp.w	sl, #0
 800d84e:	db06      	blt.n	800d85e <_dtoa_r+0x98e>
 800d850:	9906      	ldr	r1, [sp, #24]
 800d852:	ea41 0a0a 	orr.w	sl, r1, sl
 800d856:	9907      	ldr	r1, [sp, #28]
 800d858:	ea5a 0a01 	orrs.w	sl, sl, r1
 800d85c:	d120      	bne.n	800d8a0 <_dtoa_r+0x9d0>
 800d85e:	2a00      	cmp	r2, #0
 800d860:	ddec      	ble.n	800d83c <_dtoa_r+0x96c>
 800d862:	4629      	mov	r1, r5
 800d864:	2201      	movs	r2, #1
 800d866:	4630      	mov	r0, r6
 800d868:	9304      	str	r3, [sp, #16]
 800d86a:	f000 faf9 	bl	800de60 <__lshift>
 800d86e:	4621      	mov	r1, r4
 800d870:	4605      	mov	r5, r0
 800d872:	f000 fb61 	bl	800df38 <__mcmp>
 800d876:	2800      	cmp	r0, #0
 800d878:	9b04      	ldr	r3, [sp, #16]
 800d87a:	dc02      	bgt.n	800d882 <_dtoa_r+0x9b2>
 800d87c:	d1de      	bne.n	800d83c <_dtoa_r+0x96c>
 800d87e:	07da      	lsls	r2, r3, #31
 800d880:	d5dc      	bpl.n	800d83c <_dtoa_r+0x96c>
 800d882:	2b39      	cmp	r3, #57	; 0x39
 800d884:	d1d8      	bne.n	800d838 <_dtoa_r+0x968>
 800d886:	9a02      	ldr	r2, [sp, #8]
 800d888:	2339      	movs	r3, #57	; 0x39
 800d88a:	7013      	strb	r3, [r2, #0]
 800d88c:	4643      	mov	r3, r8
 800d88e:	4698      	mov	r8, r3
 800d890:	3b01      	subs	r3, #1
 800d892:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d896:	2a39      	cmp	r2, #57	; 0x39
 800d898:	d051      	beq.n	800d93e <_dtoa_r+0xa6e>
 800d89a:	3201      	adds	r2, #1
 800d89c:	701a      	strb	r2, [r3, #0]
 800d89e:	e746      	b.n	800d72e <_dtoa_r+0x85e>
 800d8a0:	2a00      	cmp	r2, #0
 800d8a2:	dd03      	ble.n	800d8ac <_dtoa_r+0x9dc>
 800d8a4:	2b39      	cmp	r3, #57	; 0x39
 800d8a6:	d0ee      	beq.n	800d886 <_dtoa_r+0x9b6>
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	e7c7      	b.n	800d83c <_dtoa_r+0x96c>
 800d8ac:	9a04      	ldr	r2, [sp, #16]
 800d8ae:	9908      	ldr	r1, [sp, #32]
 800d8b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d8b4:	428a      	cmp	r2, r1
 800d8b6:	d02b      	beq.n	800d910 <_dtoa_r+0xa40>
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	220a      	movs	r2, #10
 800d8be:	4630      	mov	r0, r6
 800d8c0:	f000 f920 	bl	800db04 <__multadd>
 800d8c4:	45b9      	cmp	r9, r7
 800d8c6:	4605      	mov	r5, r0
 800d8c8:	f04f 0300 	mov.w	r3, #0
 800d8cc:	f04f 020a 	mov.w	r2, #10
 800d8d0:	4649      	mov	r1, r9
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	d107      	bne.n	800d8e6 <_dtoa_r+0xa16>
 800d8d6:	f000 f915 	bl	800db04 <__multadd>
 800d8da:	4681      	mov	r9, r0
 800d8dc:	4607      	mov	r7, r0
 800d8de:	9b04      	ldr	r3, [sp, #16]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	9304      	str	r3, [sp, #16]
 800d8e4:	e774      	b.n	800d7d0 <_dtoa_r+0x900>
 800d8e6:	f000 f90d 	bl	800db04 <__multadd>
 800d8ea:	4639      	mov	r1, r7
 800d8ec:	4681      	mov	r9, r0
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	220a      	movs	r2, #10
 800d8f2:	4630      	mov	r0, r6
 800d8f4:	f000 f906 	bl	800db04 <__multadd>
 800d8f8:	4607      	mov	r7, r0
 800d8fa:	e7f0      	b.n	800d8de <_dtoa_r+0xa0e>
 800d8fc:	f1ba 0f00 	cmp.w	sl, #0
 800d900:	9a01      	ldr	r2, [sp, #4]
 800d902:	bfcc      	ite	gt
 800d904:	46d0      	movgt	r8, sl
 800d906:	f04f 0801 	movle.w	r8, #1
 800d90a:	4490      	add	r8, r2
 800d90c:	f04f 0900 	mov.w	r9, #0
 800d910:	4629      	mov	r1, r5
 800d912:	2201      	movs	r2, #1
 800d914:	4630      	mov	r0, r6
 800d916:	9302      	str	r3, [sp, #8]
 800d918:	f000 faa2 	bl	800de60 <__lshift>
 800d91c:	4621      	mov	r1, r4
 800d91e:	4605      	mov	r5, r0
 800d920:	f000 fb0a 	bl	800df38 <__mcmp>
 800d924:	2800      	cmp	r0, #0
 800d926:	dcb1      	bgt.n	800d88c <_dtoa_r+0x9bc>
 800d928:	d102      	bne.n	800d930 <_dtoa_r+0xa60>
 800d92a:	9b02      	ldr	r3, [sp, #8]
 800d92c:	07db      	lsls	r3, r3, #31
 800d92e:	d4ad      	bmi.n	800d88c <_dtoa_r+0x9bc>
 800d930:	4643      	mov	r3, r8
 800d932:	4698      	mov	r8, r3
 800d934:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d938:	2a30      	cmp	r2, #48	; 0x30
 800d93a:	d0fa      	beq.n	800d932 <_dtoa_r+0xa62>
 800d93c:	e6f7      	b.n	800d72e <_dtoa_r+0x85e>
 800d93e:	9a01      	ldr	r2, [sp, #4]
 800d940:	429a      	cmp	r2, r3
 800d942:	d1a4      	bne.n	800d88e <_dtoa_r+0x9be>
 800d944:	f10b 0b01 	add.w	fp, fp, #1
 800d948:	2331      	movs	r3, #49	; 0x31
 800d94a:	e778      	b.n	800d83e <_dtoa_r+0x96e>
 800d94c:	4b14      	ldr	r3, [pc, #80]	; (800d9a0 <_dtoa_r+0xad0>)
 800d94e:	f7ff bb2a 	b.w	800cfa6 <_dtoa_r+0xd6>
 800d952:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d954:	2b00      	cmp	r3, #0
 800d956:	f47f ab05 	bne.w	800cf64 <_dtoa_r+0x94>
 800d95a:	4b12      	ldr	r3, [pc, #72]	; (800d9a4 <_dtoa_r+0xad4>)
 800d95c:	f7ff bb23 	b.w	800cfa6 <_dtoa_r+0xd6>
 800d960:	f1ba 0f00 	cmp.w	sl, #0
 800d964:	dc03      	bgt.n	800d96e <_dtoa_r+0xa9e>
 800d966:	9b06      	ldr	r3, [sp, #24]
 800d968:	2b02      	cmp	r3, #2
 800d96a:	f73f aec8 	bgt.w	800d6fe <_dtoa_r+0x82e>
 800d96e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d972:	4621      	mov	r1, r4
 800d974:	4628      	mov	r0, r5
 800d976:	f7ff fa22 	bl	800cdbe <quorem>
 800d97a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d97e:	f808 3b01 	strb.w	r3, [r8], #1
 800d982:	9a01      	ldr	r2, [sp, #4]
 800d984:	eba8 0202 	sub.w	r2, r8, r2
 800d988:	4592      	cmp	sl, r2
 800d98a:	ddb7      	ble.n	800d8fc <_dtoa_r+0xa2c>
 800d98c:	4629      	mov	r1, r5
 800d98e:	2300      	movs	r3, #0
 800d990:	220a      	movs	r2, #10
 800d992:	4630      	mov	r0, r6
 800d994:	f000 f8b6 	bl	800db04 <__multadd>
 800d998:	4605      	mov	r5, r0
 800d99a:	e7ea      	b.n	800d972 <_dtoa_r+0xaa2>
 800d99c:	080220b0 	.word	0x080220b0
 800d9a0:	08022010 	.word	0x08022010
 800d9a4:	08022034 	.word	0x08022034

0800d9a8 <_free_r>:
 800d9a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9aa:	2900      	cmp	r1, #0
 800d9ac:	d044      	beq.n	800da38 <_free_r+0x90>
 800d9ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9b2:	9001      	str	r0, [sp, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f1a1 0404 	sub.w	r4, r1, #4
 800d9ba:	bfb8      	it	lt
 800d9bc:	18e4      	addlt	r4, r4, r3
 800d9be:	f7fe fc23 	bl	800c208 <__malloc_lock>
 800d9c2:	4a1e      	ldr	r2, [pc, #120]	; (800da3c <_free_r+0x94>)
 800d9c4:	9801      	ldr	r0, [sp, #4]
 800d9c6:	6813      	ldr	r3, [r2, #0]
 800d9c8:	b933      	cbnz	r3, 800d9d8 <_free_r+0x30>
 800d9ca:	6063      	str	r3, [r4, #4]
 800d9cc:	6014      	str	r4, [r2, #0]
 800d9ce:	b003      	add	sp, #12
 800d9d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9d4:	f7fe bc1e 	b.w	800c214 <__malloc_unlock>
 800d9d8:	42a3      	cmp	r3, r4
 800d9da:	d908      	bls.n	800d9ee <_free_r+0x46>
 800d9dc:	6825      	ldr	r5, [r4, #0]
 800d9de:	1961      	adds	r1, r4, r5
 800d9e0:	428b      	cmp	r3, r1
 800d9e2:	bf01      	itttt	eq
 800d9e4:	6819      	ldreq	r1, [r3, #0]
 800d9e6:	685b      	ldreq	r3, [r3, #4]
 800d9e8:	1949      	addeq	r1, r1, r5
 800d9ea:	6021      	streq	r1, [r4, #0]
 800d9ec:	e7ed      	b.n	800d9ca <_free_r+0x22>
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	b10b      	cbz	r3, 800d9f8 <_free_r+0x50>
 800d9f4:	42a3      	cmp	r3, r4
 800d9f6:	d9fa      	bls.n	800d9ee <_free_r+0x46>
 800d9f8:	6811      	ldr	r1, [r2, #0]
 800d9fa:	1855      	adds	r5, r2, r1
 800d9fc:	42a5      	cmp	r5, r4
 800d9fe:	d10b      	bne.n	800da18 <_free_r+0x70>
 800da00:	6824      	ldr	r4, [r4, #0]
 800da02:	4421      	add	r1, r4
 800da04:	1854      	adds	r4, r2, r1
 800da06:	42a3      	cmp	r3, r4
 800da08:	6011      	str	r1, [r2, #0]
 800da0a:	d1e0      	bne.n	800d9ce <_free_r+0x26>
 800da0c:	681c      	ldr	r4, [r3, #0]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	6053      	str	r3, [r2, #4]
 800da12:	440c      	add	r4, r1
 800da14:	6014      	str	r4, [r2, #0]
 800da16:	e7da      	b.n	800d9ce <_free_r+0x26>
 800da18:	d902      	bls.n	800da20 <_free_r+0x78>
 800da1a:	230c      	movs	r3, #12
 800da1c:	6003      	str	r3, [r0, #0]
 800da1e:	e7d6      	b.n	800d9ce <_free_r+0x26>
 800da20:	6825      	ldr	r5, [r4, #0]
 800da22:	1961      	adds	r1, r4, r5
 800da24:	428b      	cmp	r3, r1
 800da26:	bf04      	itt	eq
 800da28:	6819      	ldreq	r1, [r3, #0]
 800da2a:	685b      	ldreq	r3, [r3, #4]
 800da2c:	6063      	str	r3, [r4, #4]
 800da2e:	bf04      	itt	eq
 800da30:	1949      	addeq	r1, r1, r5
 800da32:	6021      	streq	r1, [r4, #0]
 800da34:	6054      	str	r4, [r2, #4]
 800da36:	e7ca      	b.n	800d9ce <_free_r+0x26>
 800da38:	b003      	add	sp, #12
 800da3a:	bd30      	pop	{r4, r5, pc}
 800da3c:	2001c404 	.word	0x2001c404

0800da40 <_Balloc>:
 800da40:	b570      	push	{r4, r5, r6, lr}
 800da42:	69c6      	ldr	r6, [r0, #28]
 800da44:	4604      	mov	r4, r0
 800da46:	460d      	mov	r5, r1
 800da48:	b976      	cbnz	r6, 800da68 <_Balloc+0x28>
 800da4a:	2010      	movs	r0, #16
 800da4c:	f7fe fb2c 	bl	800c0a8 <malloc>
 800da50:	4602      	mov	r2, r0
 800da52:	61e0      	str	r0, [r4, #28]
 800da54:	b920      	cbnz	r0, 800da60 <_Balloc+0x20>
 800da56:	4b18      	ldr	r3, [pc, #96]	; (800dab8 <_Balloc+0x78>)
 800da58:	4818      	ldr	r0, [pc, #96]	; (800dabc <_Balloc+0x7c>)
 800da5a:	216b      	movs	r1, #107	; 0x6b
 800da5c:	f000 fc28 	bl	800e2b0 <__assert_func>
 800da60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da64:	6006      	str	r6, [r0, #0]
 800da66:	60c6      	str	r6, [r0, #12]
 800da68:	69e6      	ldr	r6, [r4, #28]
 800da6a:	68f3      	ldr	r3, [r6, #12]
 800da6c:	b183      	cbz	r3, 800da90 <_Balloc+0x50>
 800da6e:	69e3      	ldr	r3, [r4, #28]
 800da70:	68db      	ldr	r3, [r3, #12]
 800da72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da76:	b9b8      	cbnz	r0, 800daa8 <_Balloc+0x68>
 800da78:	2101      	movs	r1, #1
 800da7a:	fa01 f605 	lsl.w	r6, r1, r5
 800da7e:	1d72      	adds	r2, r6, #5
 800da80:	0092      	lsls	r2, r2, #2
 800da82:	4620      	mov	r0, r4
 800da84:	f000 fc32 	bl	800e2ec <_calloc_r>
 800da88:	b160      	cbz	r0, 800daa4 <_Balloc+0x64>
 800da8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da8e:	e00e      	b.n	800daae <_Balloc+0x6e>
 800da90:	2221      	movs	r2, #33	; 0x21
 800da92:	2104      	movs	r1, #4
 800da94:	4620      	mov	r0, r4
 800da96:	f000 fc29 	bl	800e2ec <_calloc_r>
 800da9a:	69e3      	ldr	r3, [r4, #28]
 800da9c:	60f0      	str	r0, [r6, #12]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1e4      	bne.n	800da6e <_Balloc+0x2e>
 800daa4:	2000      	movs	r0, #0
 800daa6:	bd70      	pop	{r4, r5, r6, pc}
 800daa8:	6802      	ldr	r2, [r0, #0]
 800daaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800daae:	2300      	movs	r3, #0
 800dab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dab4:	e7f7      	b.n	800daa6 <_Balloc+0x66>
 800dab6:	bf00      	nop
 800dab8:	08022041 	.word	0x08022041
 800dabc:	080220c1 	.word	0x080220c1

0800dac0 <_Bfree>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	69c6      	ldr	r6, [r0, #28]
 800dac4:	4605      	mov	r5, r0
 800dac6:	460c      	mov	r4, r1
 800dac8:	b976      	cbnz	r6, 800dae8 <_Bfree+0x28>
 800daca:	2010      	movs	r0, #16
 800dacc:	f7fe faec 	bl	800c0a8 <malloc>
 800dad0:	4602      	mov	r2, r0
 800dad2:	61e8      	str	r0, [r5, #28]
 800dad4:	b920      	cbnz	r0, 800dae0 <_Bfree+0x20>
 800dad6:	4b09      	ldr	r3, [pc, #36]	; (800dafc <_Bfree+0x3c>)
 800dad8:	4809      	ldr	r0, [pc, #36]	; (800db00 <_Bfree+0x40>)
 800dada:	218f      	movs	r1, #143	; 0x8f
 800dadc:	f000 fbe8 	bl	800e2b0 <__assert_func>
 800dae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dae4:	6006      	str	r6, [r0, #0]
 800dae6:	60c6      	str	r6, [r0, #12]
 800dae8:	b13c      	cbz	r4, 800dafa <_Bfree+0x3a>
 800daea:	69eb      	ldr	r3, [r5, #28]
 800daec:	6862      	ldr	r2, [r4, #4]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800daf4:	6021      	str	r1, [r4, #0]
 800daf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dafa:	bd70      	pop	{r4, r5, r6, pc}
 800dafc:	08022041 	.word	0x08022041
 800db00:	080220c1 	.word	0x080220c1

0800db04 <__multadd>:
 800db04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db08:	690d      	ldr	r5, [r1, #16]
 800db0a:	4607      	mov	r7, r0
 800db0c:	460c      	mov	r4, r1
 800db0e:	461e      	mov	r6, r3
 800db10:	f101 0c14 	add.w	ip, r1, #20
 800db14:	2000      	movs	r0, #0
 800db16:	f8dc 3000 	ldr.w	r3, [ip]
 800db1a:	b299      	uxth	r1, r3
 800db1c:	fb02 6101 	mla	r1, r2, r1, r6
 800db20:	0c1e      	lsrs	r6, r3, #16
 800db22:	0c0b      	lsrs	r3, r1, #16
 800db24:	fb02 3306 	mla	r3, r2, r6, r3
 800db28:	b289      	uxth	r1, r1
 800db2a:	3001      	adds	r0, #1
 800db2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db30:	4285      	cmp	r5, r0
 800db32:	f84c 1b04 	str.w	r1, [ip], #4
 800db36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db3a:	dcec      	bgt.n	800db16 <__multadd+0x12>
 800db3c:	b30e      	cbz	r6, 800db82 <__multadd+0x7e>
 800db3e:	68a3      	ldr	r3, [r4, #8]
 800db40:	42ab      	cmp	r3, r5
 800db42:	dc19      	bgt.n	800db78 <__multadd+0x74>
 800db44:	6861      	ldr	r1, [r4, #4]
 800db46:	4638      	mov	r0, r7
 800db48:	3101      	adds	r1, #1
 800db4a:	f7ff ff79 	bl	800da40 <_Balloc>
 800db4e:	4680      	mov	r8, r0
 800db50:	b928      	cbnz	r0, 800db5e <__multadd+0x5a>
 800db52:	4602      	mov	r2, r0
 800db54:	4b0c      	ldr	r3, [pc, #48]	; (800db88 <__multadd+0x84>)
 800db56:	480d      	ldr	r0, [pc, #52]	; (800db8c <__multadd+0x88>)
 800db58:	21ba      	movs	r1, #186	; 0xba
 800db5a:	f000 fba9 	bl	800e2b0 <__assert_func>
 800db5e:	6922      	ldr	r2, [r4, #16]
 800db60:	3202      	adds	r2, #2
 800db62:	f104 010c 	add.w	r1, r4, #12
 800db66:	0092      	lsls	r2, r2, #2
 800db68:	300c      	adds	r0, #12
 800db6a:	f000 fb93 	bl	800e294 <memcpy>
 800db6e:	4621      	mov	r1, r4
 800db70:	4638      	mov	r0, r7
 800db72:	f7ff ffa5 	bl	800dac0 <_Bfree>
 800db76:	4644      	mov	r4, r8
 800db78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db7c:	3501      	adds	r5, #1
 800db7e:	615e      	str	r6, [r3, #20]
 800db80:	6125      	str	r5, [r4, #16]
 800db82:	4620      	mov	r0, r4
 800db84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db88:	080220b0 	.word	0x080220b0
 800db8c:	080220c1 	.word	0x080220c1

0800db90 <__hi0bits>:
 800db90:	0c03      	lsrs	r3, r0, #16
 800db92:	041b      	lsls	r3, r3, #16
 800db94:	b9d3      	cbnz	r3, 800dbcc <__hi0bits+0x3c>
 800db96:	0400      	lsls	r0, r0, #16
 800db98:	2310      	movs	r3, #16
 800db9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800db9e:	bf04      	itt	eq
 800dba0:	0200      	lsleq	r0, r0, #8
 800dba2:	3308      	addeq	r3, #8
 800dba4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dba8:	bf04      	itt	eq
 800dbaa:	0100      	lsleq	r0, r0, #4
 800dbac:	3304      	addeq	r3, #4
 800dbae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dbb2:	bf04      	itt	eq
 800dbb4:	0080      	lsleq	r0, r0, #2
 800dbb6:	3302      	addeq	r3, #2
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	db05      	blt.n	800dbc8 <__hi0bits+0x38>
 800dbbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dbc0:	f103 0301 	add.w	r3, r3, #1
 800dbc4:	bf08      	it	eq
 800dbc6:	2320      	moveq	r3, #32
 800dbc8:	4618      	mov	r0, r3
 800dbca:	4770      	bx	lr
 800dbcc:	2300      	movs	r3, #0
 800dbce:	e7e4      	b.n	800db9a <__hi0bits+0xa>

0800dbd0 <__lo0bits>:
 800dbd0:	6803      	ldr	r3, [r0, #0]
 800dbd2:	f013 0207 	ands.w	r2, r3, #7
 800dbd6:	d00c      	beq.n	800dbf2 <__lo0bits+0x22>
 800dbd8:	07d9      	lsls	r1, r3, #31
 800dbda:	d422      	bmi.n	800dc22 <__lo0bits+0x52>
 800dbdc:	079a      	lsls	r2, r3, #30
 800dbde:	bf49      	itett	mi
 800dbe0:	085b      	lsrmi	r3, r3, #1
 800dbe2:	089b      	lsrpl	r3, r3, #2
 800dbe4:	6003      	strmi	r3, [r0, #0]
 800dbe6:	2201      	movmi	r2, #1
 800dbe8:	bf5c      	itt	pl
 800dbea:	6003      	strpl	r3, [r0, #0]
 800dbec:	2202      	movpl	r2, #2
 800dbee:	4610      	mov	r0, r2
 800dbf0:	4770      	bx	lr
 800dbf2:	b299      	uxth	r1, r3
 800dbf4:	b909      	cbnz	r1, 800dbfa <__lo0bits+0x2a>
 800dbf6:	0c1b      	lsrs	r3, r3, #16
 800dbf8:	2210      	movs	r2, #16
 800dbfa:	b2d9      	uxtb	r1, r3
 800dbfc:	b909      	cbnz	r1, 800dc02 <__lo0bits+0x32>
 800dbfe:	3208      	adds	r2, #8
 800dc00:	0a1b      	lsrs	r3, r3, #8
 800dc02:	0719      	lsls	r1, r3, #28
 800dc04:	bf04      	itt	eq
 800dc06:	091b      	lsreq	r3, r3, #4
 800dc08:	3204      	addeq	r2, #4
 800dc0a:	0799      	lsls	r1, r3, #30
 800dc0c:	bf04      	itt	eq
 800dc0e:	089b      	lsreq	r3, r3, #2
 800dc10:	3202      	addeq	r2, #2
 800dc12:	07d9      	lsls	r1, r3, #31
 800dc14:	d403      	bmi.n	800dc1e <__lo0bits+0x4e>
 800dc16:	085b      	lsrs	r3, r3, #1
 800dc18:	f102 0201 	add.w	r2, r2, #1
 800dc1c:	d003      	beq.n	800dc26 <__lo0bits+0x56>
 800dc1e:	6003      	str	r3, [r0, #0]
 800dc20:	e7e5      	b.n	800dbee <__lo0bits+0x1e>
 800dc22:	2200      	movs	r2, #0
 800dc24:	e7e3      	b.n	800dbee <__lo0bits+0x1e>
 800dc26:	2220      	movs	r2, #32
 800dc28:	e7e1      	b.n	800dbee <__lo0bits+0x1e>
	...

0800dc2c <__i2b>:
 800dc2c:	b510      	push	{r4, lr}
 800dc2e:	460c      	mov	r4, r1
 800dc30:	2101      	movs	r1, #1
 800dc32:	f7ff ff05 	bl	800da40 <_Balloc>
 800dc36:	4602      	mov	r2, r0
 800dc38:	b928      	cbnz	r0, 800dc46 <__i2b+0x1a>
 800dc3a:	4b05      	ldr	r3, [pc, #20]	; (800dc50 <__i2b+0x24>)
 800dc3c:	4805      	ldr	r0, [pc, #20]	; (800dc54 <__i2b+0x28>)
 800dc3e:	f240 1145 	movw	r1, #325	; 0x145
 800dc42:	f000 fb35 	bl	800e2b0 <__assert_func>
 800dc46:	2301      	movs	r3, #1
 800dc48:	6144      	str	r4, [r0, #20]
 800dc4a:	6103      	str	r3, [r0, #16]
 800dc4c:	bd10      	pop	{r4, pc}
 800dc4e:	bf00      	nop
 800dc50:	080220b0 	.word	0x080220b0
 800dc54:	080220c1 	.word	0x080220c1

0800dc58 <__multiply>:
 800dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc5c:	4691      	mov	r9, r2
 800dc5e:	690a      	ldr	r2, [r1, #16]
 800dc60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	bfb8      	it	lt
 800dc68:	460b      	movlt	r3, r1
 800dc6a:	460c      	mov	r4, r1
 800dc6c:	bfbc      	itt	lt
 800dc6e:	464c      	movlt	r4, r9
 800dc70:	4699      	movlt	r9, r3
 800dc72:	6927      	ldr	r7, [r4, #16]
 800dc74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc78:	68a3      	ldr	r3, [r4, #8]
 800dc7a:	6861      	ldr	r1, [r4, #4]
 800dc7c:	eb07 060a 	add.w	r6, r7, sl
 800dc80:	42b3      	cmp	r3, r6
 800dc82:	b085      	sub	sp, #20
 800dc84:	bfb8      	it	lt
 800dc86:	3101      	addlt	r1, #1
 800dc88:	f7ff feda 	bl	800da40 <_Balloc>
 800dc8c:	b930      	cbnz	r0, 800dc9c <__multiply+0x44>
 800dc8e:	4602      	mov	r2, r0
 800dc90:	4b44      	ldr	r3, [pc, #272]	; (800dda4 <__multiply+0x14c>)
 800dc92:	4845      	ldr	r0, [pc, #276]	; (800dda8 <__multiply+0x150>)
 800dc94:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800dc98:	f000 fb0a 	bl	800e2b0 <__assert_func>
 800dc9c:	f100 0514 	add.w	r5, r0, #20
 800dca0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dca4:	462b      	mov	r3, r5
 800dca6:	2200      	movs	r2, #0
 800dca8:	4543      	cmp	r3, r8
 800dcaa:	d321      	bcc.n	800dcf0 <__multiply+0x98>
 800dcac:	f104 0314 	add.w	r3, r4, #20
 800dcb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dcb4:	f109 0314 	add.w	r3, r9, #20
 800dcb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dcbc:	9202      	str	r2, [sp, #8]
 800dcbe:	1b3a      	subs	r2, r7, r4
 800dcc0:	3a15      	subs	r2, #21
 800dcc2:	f022 0203 	bic.w	r2, r2, #3
 800dcc6:	3204      	adds	r2, #4
 800dcc8:	f104 0115 	add.w	r1, r4, #21
 800dccc:	428f      	cmp	r7, r1
 800dcce:	bf38      	it	cc
 800dcd0:	2204      	movcc	r2, #4
 800dcd2:	9201      	str	r2, [sp, #4]
 800dcd4:	9a02      	ldr	r2, [sp, #8]
 800dcd6:	9303      	str	r3, [sp, #12]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d80c      	bhi.n	800dcf6 <__multiply+0x9e>
 800dcdc:	2e00      	cmp	r6, #0
 800dcde:	dd03      	ble.n	800dce8 <__multiply+0x90>
 800dce0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d05b      	beq.n	800dda0 <__multiply+0x148>
 800dce8:	6106      	str	r6, [r0, #16]
 800dcea:	b005      	add	sp, #20
 800dcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf0:	f843 2b04 	str.w	r2, [r3], #4
 800dcf4:	e7d8      	b.n	800dca8 <__multiply+0x50>
 800dcf6:	f8b3 a000 	ldrh.w	sl, [r3]
 800dcfa:	f1ba 0f00 	cmp.w	sl, #0
 800dcfe:	d024      	beq.n	800dd4a <__multiply+0xf2>
 800dd00:	f104 0e14 	add.w	lr, r4, #20
 800dd04:	46a9      	mov	r9, r5
 800dd06:	f04f 0c00 	mov.w	ip, #0
 800dd0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dd0e:	f8d9 1000 	ldr.w	r1, [r9]
 800dd12:	fa1f fb82 	uxth.w	fp, r2
 800dd16:	b289      	uxth	r1, r1
 800dd18:	fb0a 110b 	mla	r1, sl, fp, r1
 800dd1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dd20:	f8d9 2000 	ldr.w	r2, [r9]
 800dd24:	4461      	add	r1, ip
 800dd26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd2a:	fb0a c20b 	mla	r2, sl, fp, ip
 800dd2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dd32:	b289      	uxth	r1, r1
 800dd34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd38:	4577      	cmp	r7, lr
 800dd3a:	f849 1b04 	str.w	r1, [r9], #4
 800dd3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd42:	d8e2      	bhi.n	800dd0a <__multiply+0xb2>
 800dd44:	9a01      	ldr	r2, [sp, #4]
 800dd46:	f845 c002 	str.w	ip, [r5, r2]
 800dd4a:	9a03      	ldr	r2, [sp, #12]
 800dd4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd50:	3304      	adds	r3, #4
 800dd52:	f1b9 0f00 	cmp.w	r9, #0
 800dd56:	d021      	beq.n	800dd9c <__multiply+0x144>
 800dd58:	6829      	ldr	r1, [r5, #0]
 800dd5a:	f104 0c14 	add.w	ip, r4, #20
 800dd5e:	46ae      	mov	lr, r5
 800dd60:	f04f 0a00 	mov.w	sl, #0
 800dd64:	f8bc b000 	ldrh.w	fp, [ip]
 800dd68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd6c:	fb09 220b 	mla	r2, r9, fp, r2
 800dd70:	4452      	add	r2, sl
 800dd72:	b289      	uxth	r1, r1
 800dd74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd78:	f84e 1b04 	str.w	r1, [lr], #4
 800dd7c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dd80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd84:	f8be 1000 	ldrh.w	r1, [lr]
 800dd88:	fb09 110a 	mla	r1, r9, sl, r1
 800dd8c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dd90:	4567      	cmp	r7, ip
 800dd92:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd96:	d8e5      	bhi.n	800dd64 <__multiply+0x10c>
 800dd98:	9a01      	ldr	r2, [sp, #4]
 800dd9a:	50a9      	str	r1, [r5, r2]
 800dd9c:	3504      	adds	r5, #4
 800dd9e:	e799      	b.n	800dcd4 <__multiply+0x7c>
 800dda0:	3e01      	subs	r6, #1
 800dda2:	e79b      	b.n	800dcdc <__multiply+0x84>
 800dda4:	080220b0 	.word	0x080220b0
 800dda8:	080220c1 	.word	0x080220c1

0800ddac <__pow5mult>:
 800ddac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddb0:	4615      	mov	r5, r2
 800ddb2:	f012 0203 	ands.w	r2, r2, #3
 800ddb6:	4606      	mov	r6, r0
 800ddb8:	460f      	mov	r7, r1
 800ddba:	d007      	beq.n	800ddcc <__pow5mult+0x20>
 800ddbc:	4c25      	ldr	r4, [pc, #148]	; (800de54 <__pow5mult+0xa8>)
 800ddbe:	3a01      	subs	r2, #1
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddc6:	f7ff fe9d 	bl	800db04 <__multadd>
 800ddca:	4607      	mov	r7, r0
 800ddcc:	10ad      	asrs	r5, r5, #2
 800ddce:	d03d      	beq.n	800de4c <__pow5mult+0xa0>
 800ddd0:	69f4      	ldr	r4, [r6, #28]
 800ddd2:	b97c      	cbnz	r4, 800ddf4 <__pow5mult+0x48>
 800ddd4:	2010      	movs	r0, #16
 800ddd6:	f7fe f967 	bl	800c0a8 <malloc>
 800ddda:	4602      	mov	r2, r0
 800dddc:	61f0      	str	r0, [r6, #28]
 800ddde:	b928      	cbnz	r0, 800ddec <__pow5mult+0x40>
 800dde0:	4b1d      	ldr	r3, [pc, #116]	; (800de58 <__pow5mult+0xac>)
 800dde2:	481e      	ldr	r0, [pc, #120]	; (800de5c <__pow5mult+0xb0>)
 800dde4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dde8:	f000 fa62 	bl	800e2b0 <__assert_func>
 800ddec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddf0:	6004      	str	r4, [r0, #0]
 800ddf2:	60c4      	str	r4, [r0, #12]
 800ddf4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ddf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddfc:	b94c      	cbnz	r4, 800de12 <__pow5mult+0x66>
 800ddfe:	f240 2171 	movw	r1, #625	; 0x271
 800de02:	4630      	mov	r0, r6
 800de04:	f7ff ff12 	bl	800dc2c <__i2b>
 800de08:	2300      	movs	r3, #0
 800de0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800de0e:	4604      	mov	r4, r0
 800de10:	6003      	str	r3, [r0, #0]
 800de12:	f04f 0900 	mov.w	r9, #0
 800de16:	07eb      	lsls	r3, r5, #31
 800de18:	d50a      	bpl.n	800de30 <__pow5mult+0x84>
 800de1a:	4639      	mov	r1, r7
 800de1c:	4622      	mov	r2, r4
 800de1e:	4630      	mov	r0, r6
 800de20:	f7ff ff1a 	bl	800dc58 <__multiply>
 800de24:	4639      	mov	r1, r7
 800de26:	4680      	mov	r8, r0
 800de28:	4630      	mov	r0, r6
 800de2a:	f7ff fe49 	bl	800dac0 <_Bfree>
 800de2e:	4647      	mov	r7, r8
 800de30:	106d      	asrs	r5, r5, #1
 800de32:	d00b      	beq.n	800de4c <__pow5mult+0xa0>
 800de34:	6820      	ldr	r0, [r4, #0]
 800de36:	b938      	cbnz	r0, 800de48 <__pow5mult+0x9c>
 800de38:	4622      	mov	r2, r4
 800de3a:	4621      	mov	r1, r4
 800de3c:	4630      	mov	r0, r6
 800de3e:	f7ff ff0b 	bl	800dc58 <__multiply>
 800de42:	6020      	str	r0, [r4, #0]
 800de44:	f8c0 9000 	str.w	r9, [r0]
 800de48:	4604      	mov	r4, r0
 800de4a:	e7e4      	b.n	800de16 <__pow5mult+0x6a>
 800de4c:	4638      	mov	r0, r7
 800de4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de52:	bf00      	nop
 800de54:	08022210 	.word	0x08022210
 800de58:	08022041 	.word	0x08022041
 800de5c:	080220c1 	.word	0x080220c1

0800de60 <__lshift>:
 800de60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de64:	460c      	mov	r4, r1
 800de66:	6849      	ldr	r1, [r1, #4]
 800de68:	6923      	ldr	r3, [r4, #16]
 800de6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de6e:	68a3      	ldr	r3, [r4, #8]
 800de70:	4607      	mov	r7, r0
 800de72:	4691      	mov	r9, r2
 800de74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de78:	f108 0601 	add.w	r6, r8, #1
 800de7c:	42b3      	cmp	r3, r6
 800de7e:	db0b      	blt.n	800de98 <__lshift+0x38>
 800de80:	4638      	mov	r0, r7
 800de82:	f7ff fddd 	bl	800da40 <_Balloc>
 800de86:	4605      	mov	r5, r0
 800de88:	b948      	cbnz	r0, 800de9e <__lshift+0x3e>
 800de8a:	4602      	mov	r2, r0
 800de8c:	4b28      	ldr	r3, [pc, #160]	; (800df30 <__lshift+0xd0>)
 800de8e:	4829      	ldr	r0, [pc, #164]	; (800df34 <__lshift+0xd4>)
 800de90:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800de94:	f000 fa0c 	bl	800e2b0 <__assert_func>
 800de98:	3101      	adds	r1, #1
 800de9a:	005b      	lsls	r3, r3, #1
 800de9c:	e7ee      	b.n	800de7c <__lshift+0x1c>
 800de9e:	2300      	movs	r3, #0
 800dea0:	f100 0114 	add.w	r1, r0, #20
 800dea4:	f100 0210 	add.w	r2, r0, #16
 800dea8:	4618      	mov	r0, r3
 800deaa:	4553      	cmp	r3, sl
 800deac:	db33      	blt.n	800df16 <__lshift+0xb6>
 800deae:	6920      	ldr	r0, [r4, #16]
 800deb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800deb4:	f104 0314 	add.w	r3, r4, #20
 800deb8:	f019 091f 	ands.w	r9, r9, #31
 800debc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dec0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dec4:	d02b      	beq.n	800df1e <__lshift+0xbe>
 800dec6:	f1c9 0e20 	rsb	lr, r9, #32
 800deca:	468a      	mov	sl, r1
 800decc:	2200      	movs	r2, #0
 800dece:	6818      	ldr	r0, [r3, #0]
 800ded0:	fa00 f009 	lsl.w	r0, r0, r9
 800ded4:	4310      	orrs	r0, r2
 800ded6:	f84a 0b04 	str.w	r0, [sl], #4
 800deda:	f853 2b04 	ldr.w	r2, [r3], #4
 800dede:	459c      	cmp	ip, r3
 800dee0:	fa22 f20e 	lsr.w	r2, r2, lr
 800dee4:	d8f3      	bhi.n	800dece <__lshift+0x6e>
 800dee6:	ebac 0304 	sub.w	r3, ip, r4
 800deea:	3b15      	subs	r3, #21
 800deec:	f023 0303 	bic.w	r3, r3, #3
 800def0:	3304      	adds	r3, #4
 800def2:	f104 0015 	add.w	r0, r4, #21
 800def6:	4584      	cmp	ip, r0
 800def8:	bf38      	it	cc
 800defa:	2304      	movcc	r3, #4
 800defc:	50ca      	str	r2, [r1, r3]
 800defe:	b10a      	cbz	r2, 800df04 <__lshift+0xa4>
 800df00:	f108 0602 	add.w	r6, r8, #2
 800df04:	3e01      	subs	r6, #1
 800df06:	4638      	mov	r0, r7
 800df08:	612e      	str	r6, [r5, #16]
 800df0a:	4621      	mov	r1, r4
 800df0c:	f7ff fdd8 	bl	800dac0 <_Bfree>
 800df10:	4628      	mov	r0, r5
 800df12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df16:	f842 0f04 	str.w	r0, [r2, #4]!
 800df1a:	3301      	adds	r3, #1
 800df1c:	e7c5      	b.n	800deaa <__lshift+0x4a>
 800df1e:	3904      	subs	r1, #4
 800df20:	f853 2b04 	ldr.w	r2, [r3], #4
 800df24:	f841 2f04 	str.w	r2, [r1, #4]!
 800df28:	459c      	cmp	ip, r3
 800df2a:	d8f9      	bhi.n	800df20 <__lshift+0xc0>
 800df2c:	e7ea      	b.n	800df04 <__lshift+0xa4>
 800df2e:	bf00      	nop
 800df30:	080220b0 	.word	0x080220b0
 800df34:	080220c1 	.word	0x080220c1

0800df38 <__mcmp>:
 800df38:	b530      	push	{r4, r5, lr}
 800df3a:	6902      	ldr	r2, [r0, #16]
 800df3c:	690c      	ldr	r4, [r1, #16]
 800df3e:	1b12      	subs	r2, r2, r4
 800df40:	d10e      	bne.n	800df60 <__mcmp+0x28>
 800df42:	f100 0314 	add.w	r3, r0, #20
 800df46:	3114      	adds	r1, #20
 800df48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800df4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800df50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800df54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800df58:	42a5      	cmp	r5, r4
 800df5a:	d003      	beq.n	800df64 <__mcmp+0x2c>
 800df5c:	d305      	bcc.n	800df6a <__mcmp+0x32>
 800df5e:	2201      	movs	r2, #1
 800df60:	4610      	mov	r0, r2
 800df62:	bd30      	pop	{r4, r5, pc}
 800df64:	4283      	cmp	r3, r0
 800df66:	d3f3      	bcc.n	800df50 <__mcmp+0x18>
 800df68:	e7fa      	b.n	800df60 <__mcmp+0x28>
 800df6a:	f04f 32ff 	mov.w	r2, #4294967295
 800df6e:	e7f7      	b.n	800df60 <__mcmp+0x28>

0800df70 <__mdiff>:
 800df70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df74:	460c      	mov	r4, r1
 800df76:	4606      	mov	r6, r0
 800df78:	4611      	mov	r1, r2
 800df7a:	4620      	mov	r0, r4
 800df7c:	4690      	mov	r8, r2
 800df7e:	f7ff ffdb 	bl	800df38 <__mcmp>
 800df82:	1e05      	subs	r5, r0, #0
 800df84:	d110      	bne.n	800dfa8 <__mdiff+0x38>
 800df86:	4629      	mov	r1, r5
 800df88:	4630      	mov	r0, r6
 800df8a:	f7ff fd59 	bl	800da40 <_Balloc>
 800df8e:	b930      	cbnz	r0, 800df9e <__mdiff+0x2e>
 800df90:	4b3a      	ldr	r3, [pc, #232]	; (800e07c <__mdiff+0x10c>)
 800df92:	4602      	mov	r2, r0
 800df94:	f240 2137 	movw	r1, #567	; 0x237
 800df98:	4839      	ldr	r0, [pc, #228]	; (800e080 <__mdiff+0x110>)
 800df9a:	f000 f989 	bl	800e2b0 <__assert_func>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dfa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfa8:	bfa4      	itt	ge
 800dfaa:	4643      	movge	r3, r8
 800dfac:	46a0      	movge	r8, r4
 800dfae:	4630      	mov	r0, r6
 800dfb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dfb4:	bfa6      	itte	ge
 800dfb6:	461c      	movge	r4, r3
 800dfb8:	2500      	movge	r5, #0
 800dfba:	2501      	movlt	r5, #1
 800dfbc:	f7ff fd40 	bl	800da40 <_Balloc>
 800dfc0:	b920      	cbnz	r0, 800dfcc <__mdiff+0x5c>
 800dfc2:	4b2e      	ldr	r3, [pc, #184]	; (800e07c <__mdiff+0x10c>)
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	f240 2145 	movw	r1, #581	; 0x245
 800dfca:	e7e5      	b.n	800df98 <__mdiff+0x28>
 800dfcc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dfd0:	6926      	ldr	r6, [r4, #16]
 800dfd2:	60c5      	str	r5, [r0, #12]
 800dfd4:	f104 0914 	add.w	r9, r4, #20
 800dfd8:	f108 0514 	add.w	r5, r8, #20
 800dfdc:	f100 0e14 	add.w	lr, r0, #20
 800dfe0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dfe4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dfe8:	f108 0210 	add.w	r2, r8, #16
 800dfec:	46f2      	mov	sl, lr
 800dfee:	2100      	movs	r1, #0
 800dff0:	f859 3b04 	ldr.w	r3, [r9], #4
 800dff4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dff8:	fa11 f88b 	uxtah	r8, r1, fp
 800dffc:	b299      	uxth	r1, r3
 800dffe:	0c1b      	lsrs	r3, r3, #16
 800e000:	eba8 0801 	sub.w	r8, r8, r1
 800e004:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e008:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e00c:	fa1f f888 	uxth.w	r8, r8
 800e010:	1419      	asrs	r1, r3, #16
 800e012:	454e      	cmp	r6, r9
 800e014:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e018:	f84a 3b04 	str.w	r3, [sl], #4
 800e01c:	d8e8      	bhi.n	800dff0 <__mdiff+0x80>
 800e01e:	1b33      	subs	r3, r6, r4
 800e020:	3b15      	subs	r3, #21
 800e022:	f023 0303 	bic.w	r3, r3, #3
 800e026:	3304      	adds	r3, #4
 800e028:	3415      	adds	r4, #21
 800e02a:	42a6      	cmp	r6, r4
 800e02c:	bf38      	it	cc
 800e02e:	2304      	movcc	r3, #4
 800e030:	441d      	add	r5, r3
 800e032:	4473      	add	r3, lr
 800e034:	469e      	mov	lr, r3
 800e036:	462e      	mov	r6, r5
 800e038:	4566      	cmp	r6, ip
 800e03a:	d30e      	bcc.n	800e05a <__mdiff+0xea>
 800e03c:	f10c 0203 	add.w	r2, ip, #3
 800e040:	1b52      	subs	r2, r2, r5
 800e042:	f022 0203 	bic.w	r2, r2, #3
 800e046:	3d03      	subs	r5, #3
 800e048:	45ac      	cmp	ip, r5
 800e04a:	bf38      	it	cc
 800e04c:	2200      	movcc	r2, #0
 800e04e:	4413      	add	r3, r2
 800e050:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e054:	b17a      	cbz	r2, 800e076 <__mdiff+0x106>
 800e056:	6107      	str	r7, [r0, #16]
 800e058:	e7a4      	b.n	800dfa4 <__mdiff+0x34>
 800e05a:	f856 8b04 	ldr.w	r8, [r6], #4
 800e05e:	fa11 f288 	uxtah	r2, r1, r8
 800e062:	1414      	asrs	r4, r2, #16
 800e064:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e068:	b292      	uxth	r2, r2
 800e06a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e06e:	f84e 2b04 	str.w	r2, [lr], #4
 800e072:	1421      	asrs	r1, r4, #16
 800e074:	e7e0      	b.n	800e038 <__mdiff+0xc8>
 800e076:	3f01      	subs	r7, #1
 800e078:	e7ea      	b.n	800e050 <__mdiff+0xe0>
 800e07a:	bf00      	nop
 800e07c:	080220b0 	.word	0x080220b0
 800e080:	080220c1 	.word	0x080220c1

0800e084 <__d2b>:
 800e084:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e088:	460f      	mov	r7, r1
 800e08a:	2101      	movs	r1, #1
 800e08c:	ec59 8b10 	vmov	r8, r9, d0
 800e090:	4616      	mov	r6, r2
 800e092:	f7ff fcd5 	bl	800da40 <_Balloc>
 800e096:	4604      	mov	r4, r0
 800e098:	b930      	cbnz	r0, 800e0a8 <__d2b+0x24>
 800e09a:	4602      	mov	r2, r0
 800e09c:	4b24      	ldr	r3, [pc, #144]	; (800e130 <__d2b+0xac>)
 800e09e:	4825      	ldr	r0, [pc, #148]	; (800e134 <__d2b+0xb0>)
 800e0a0:	f240 310f 	movw	r1, #783	; 0x30f
 800e0a4:	f000 f904 	bl	800e2b0 <__assert_func>
 800e0a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e0ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0b0:	bb2d      	cbnz	r5, 800e0fe <__d2b+0x7a>
 800e0b2:	9301      	str	r3, [sp, #4]
 800e0b4:	f1b8 0300 	subs.w	r3, r8, #0
 800e0b8:	d026      	beq.n	800e108 <__d2b+0x84>
 800e0ba:	4668      	mov	r0, sp
 800e0bc:	9300      	str	r3, [sp, #0]
 800e0be:	f7ff fd87 	bl	800dbd0 <__lo0bits>
 800e0c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e0c6:	b1e8      	cbz	r0, 800e104 <__d2b+0x80>
 800e0c8:	f1c0 0320 	rsb	r3, r0, #32
 800e0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e0d0:	430b      	orrs	r3, r1
 800e0d2:	40c2      	lsrs	r2, r0
 800e0d4:	6163      	str	r3, [r4, #20]
 800e0d6:	9201      	str	r2, [sp, #4]
 800e0d8:	9b01      	ldr	r3, [sp, #4]
 800e0da:	61a3      	str	r3, [r4, #24]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	bf14      	ite	ne
 800e0e0:	2202      	movne	r2, #2
 800e0e2:	2201      	moveq	r2, #1
 800e0e4:	6122      	str	r2, [r4, #16]
 800e0e6:	b1bd      	cbz	r5, 800e118 <__d2b+0x94>
 800e0e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e0ec:	4405      	add	r5, r0
 800e0ee:	603d      	str	r5, [r7, #0]
 800e0f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e0f4:	6030      	str	r0, [r6, #0]
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	b003      	add	sp, #12
 800e0fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e102:	e7d6      	b.n	800e0b2 <__d2b+0x2e>
 800e104:	6161      	str	r1, [r4, #20]
 800e106:	e7e7      	b.n	800e0d8 <__d2b+0x54>
 800e108:	a801      	add	r0, sp, #4
 800e10a:	f7ff fd61 	bl	800dbd0 <__lo0bits>
 800e10e:	9b01      	ldr	r3, [sp, #4]
 800e110:	6163      	str	r3, [r4, #20]
 800e112:	3020      	adds	r0, #32
 800e114:	2201      	movs	r2, #1
 800e116:	e7e5      	b.n	800e0e4 <__d2b+0x60>
 800e118:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e11c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e120:	6038      	str	r0, [r7, #0]
 800e122:	6918      	ldr	r0, [r3, #16]
 800e124:	f7ff fd34 	bl	800db90 <__hi0bits>
 800e128:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e12c:	e7e2      	b.n	800e0f4 <__d2b+0x70>
 800e12e:	bf00      	nop
 800e130:	080220b0 	.word	0x080220b0
 800e134:	080220c1 	.word	0x080220c1

0800e138 <__sflush_r>:
 800e138:	898a      	ldrh	r2, [r1, #12]
 800e13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e13e:	4605      	mov	r5, r0
 800e140:	0710      	lsls	r0, r2, #28
 800e142:	460c      	mov	r4, r1
 800e144:	d458      	bmi.n	800e1f8 <__sflush_r+0xc0>
 800e146:	684b      	ldr	r3, [r1, #4]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	dc05      	bgt.n	800e158 <__sflush_r+0x20>
 800e14c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e14e:	2b00      	cmp	r3, #0
 800e150:	dc02      	bgt.n	800e158 <__sflush_r+0x20>
 800e152:	2000      	movs	r0, #0
 800e154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e15a:	2e00      	cmp	r6, #0
 800e15c:	d0f9      	beq.n	800e152 <__sflush_r+0x1a>
 800e15e:	2300      	movs	r3, #0
 800e160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e164:	682f      	ldr	r7, [r5, #0]
 800e166:	6a21      	ldr	r1, [r4, #32]
 800e168:	602b      	str	r3, [r5, #0]
 800e16a:	d032      	beq.n	800e1d2 <__sflush_r+0x9a>
 800e16c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e16e:	89a3      	ldrh	r3, [r4, #12]
 800e170:	075a      	lsls	r2, r3, #29
 800e172:	d505      	bpl.n	800e180 <__sflush_r+0x48>
 800e174:	6863      	ldr	r3, [r4, #4]
 800e176:	1ac0      	subs	r0, r0, r3
 800e178:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e17a:	b10b      	cbz	r3, 800e180 <__sflush_r+0x48>
 800e17c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e17e:	1ac0      	subs	r0, r0, r3
 800e180:	2300      	movs	r3, #0
 800e182:	4602      	mov	r2, r0
 800e184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e186:	6a21      	ldr	r1, [r4, #32]
 800e188:	4628      	mov	r0, r5
 800e18a:	47b0      	blx	r6
 800e18c:	1c43      	adds	r3, r0, #1
 800e18e:	89a3      	ldrh	r3, [r4, #12]
 800e190:	d106      	bne.n	800e1a0 <__sflush_r+0x68>
 800e192:	6829      	ldr	r1, [r5, #0]
 800e194:	291d      	cmp	r1, #29
 800e196:	d82b      	bhi.n	800e1f0 <__sflush_r+0xb8>
 800e198:	4a29      	ldr	r2, [pc, #164]	; (800e240 <__sflush_r+0x108>)
 800e19a:	410a      	asrs	r2, r1
 800e19c:	07d6      	lsls	r6, r2, #31
 800e19e:	d427      	bmi.n	800e1f0 <__sflush_r+0xb8>
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	6062      	str	r2, [r4, #4]
 800e1a4:	04d9      	lsls	r1, r3, #19
 800e1a6:	6922      	ldr	r2, [r4, #16]
 800e1a8:	6022      	str	r2, [r4, #0]
 800e1aa:	d504      	bpl.n	800e1b6 <__sflush_r+0x7e>
 800e1ac:	1c42      	adds	r2, r0, #1
 800e1ae:	d101      	bne.n	800e1b4 <__sflush_r+0x7c>
 800e1b0:	682b      	ldr	r3, [r5, #0]
 800e1b2:	b903      	cbnz	r3, 800e1b6 <__sflush_r+0x7e>
 800e1b4:	6560      	str	r0, [r4, #84]	; 0x54
 800e1b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1b8:	602f      	str	r7, [r5, #0]
 800e1ba:	2900      	cmp	r1, #0
 800e1bc:	d0c9      	beq.n	800e152 <__sflush_r+0x1a>
 800e1be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1c2:	4299      	cmp	r1, r3
 800e1c4:	d002      	beq.n	800e1cc <__sflush_r+0x94>
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	f7ff fbee 	bl	800d9a8 <_free_r>
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	6360      	str	r0, [r4, #52]	; 0x34
 800e1d0:	e7c0      	b.n	800e154 <__sflush_r+0x1c>
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	4628      	mov	r0, r5
 800e1d6:	47b0      	blx	r6
 800e1d8:	1c41      	adds	r1, r0, #1
 800e1da:	d1c8      	bne.n	800e16e <__sflush_r+0x36>
 800e1dc:	682b      	ldr	r3, [r5, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d0c5      	beq.n	800e16e <__sflush_r+0x36>
 800e1e2:	2b1d      	cmp	r3, #29
 800e1e4:	d001      	beq.n	800e1ea <__sflush_r+0xb2>
 800e1e6:	2b16      	cmp	r3, #22
 800e1e8:	d101      	bne.n	800e1ee <__sflush_r+0xb6>
 800e1ea:	602f      	str	r7, [r5, #0]
 800e1ec:	e7b1      	b.n	800e152 <__sflush_r+0x1a>
 800e1ee:	89a3      	ldrh	r3, [r4, #12]
 800e1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1f4:	81a3      	strh	r3, [r4, #12]
 800e1f6:	e7ad      	b.n	800e154 <__sflush_r+0x1c>
 800e1f8:	690f      	ldr	r7, [r1, #16]
 800e1fa:	2f00      	cmp	r7, #0
 800e1fc:	d0a9      	beq.n	800e152 <__sflush_r+0x1a>
 800e1fe:	0793      	lsls	r3, r2, #30
 800e200:	680e      	ldr	r6, [r1, #0]
 800e202:	bf08      	it	eq
 800e204:	694b      	ldreq	r3, [r1, #20]
 800e206:	600f      	str	r7, [r1, #0]
 800e208:	bf18      	it	ne
 800e20a:	2300      	movne	r3, #0
 800e20c:	eba6 0807 	sub.w	r8, r6, r7
 800e210:	608b      	str	r3, [r1, #8]
 800e212:	f1b8 0f00 	cmp.w	r8, #0
 800e216:	dd9c      	ble.n	800e152 <__sflush_r+0x1a>
 800e218:	6a21      	ldr	r1, [r4, #32]
 800e21a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e21c:	4643      	mov	r3, r8
 800e21e:	463a      	mov	r2, r7
 800e220:	4628      	mov	r0, r5
 800e222:	47b0      	blx	r6
 800e224:	2800      	cmp	r0, #0
 800e226:	dc06      	bgt.n	800e236 <__sflush_r+0xfe>
 800e228:	89a3      	ldrh	r3, [r4, #12]
 800e22a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e22e:	81a3      	strh	r3, [r4, #12]
 800e230:	f04f 30ff 	mov.w	r0, #4294967295
 800e234:	e78e      	b.n	800e154 <__sflush_r+0x1c>
 800e236:	4407      	add	r7, r0
 800e238:	eba8 0800 	sub.w	r8, r8, r0
 800e23c:	e7e9      	b.n	800e212 <__sflush_r+0xda>
 800e23e:	bf00      	nop
 800e240:	dfbffffe 	.word	0xdfbffffe

0800e244 <_fflush_r>:
 800e244:	b538      	push	{r3, r4, r5, lr}
 800e246:	690b      	ldr	r3, [r1, #16]
 800e248:	4605      	mov	r5, r0
 800e24a:	460c      	mov	r4, r1
 800e24c:	b913      	cbnz	r3, 800e254 <_fflush_r+0x10>
 800e24e:	2500      	movs	r5, #0
 800e250:	4628      	mov	r0, r5
 800e252:	bd38      	pop	{r3, r4, r5, pc}
 800e254:	b118      	cbz	r0, 800e25e <_fflush_r+0x1a>
 800e256:	6a03      	ldr	r3, [r0, #32]
 800e258:	b90b      	cbnz	r3, 800e25e <_fflush_r+0x1a>
 800e25a:	f7fe fca7 	bl	800cbac <__sinit>
 800e25e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d0f3      	beq.n	800e24e <_fflush_r+0xa>
 800e266:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e268:	07d0      	lsls	r0, r2, #31
 800e26a:	d404      	bmi.n	800e276 <_fflush_r+0x32>
 800e26c:	0599      	lsls	r1, r3, #22
 800e26e:	d402      	bmi.n	800e276 <_fflush_r+0x32>
 800e270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e272:	f7fe fda2 	bl	800cdba <__retarget_lock_acquire_recursive>
 800e276:	4628      	mov	r0, r5
 800e278:	4621      	mov	r1, r4
 800e27a:	f7ff ff5d 	bl	800e138 <__sflush_r>
 800e27e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e280:	07da      	lsls	r2, r3, #31
 800e282:	4605      	mov	r5, r0
 800e284:	d4e4      	bmi.n	800e250 <_fflush_r+0xc>
 800e286:	89a3      	ldrh	r3, [r4, #12]
 800e288:	059b      	lsls	r3, r3, #22
 800e28a:	d4e1      	bmi.n	800e250 <_fflush_r+0xc>
 800e28c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e28e:	f7fe fd95 	bl	800cdbc <__retarget_lock_release_recursive>
 800e292:	e7dd      	b.n	800e250 <_fflush_r+0xc>

0800e294 <memcpy>:
 800e294:	440a      	add	r2, r1
 800e296:	4291      	cmp	r1, r2
 800e298:	f100 33ff 	add.w	r3, r0, #4294967295
 800e29c:	d100      	bne.n	800e2a0 <memcpy+0xc>
 800e29e:	4770      	bx	lr
 800e2a0:	b510      	push	{r4, lr}
 800e2a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2aa:	4291      	cmp	r1, r2
 800e2ac:	d1f9      	bne.n	800e2a2 <memcpy+0xe>
 800e2ae:	bd10      	pop	{r4, pc}

0800e2b0 <__assert_func>:
 800e2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e2b2:	4614      	mov	r4, r2
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	4b09      	ldr	r3, [pc, #36]	; (800e2dc <__assert_func+0x2c>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4605      	mov	r5, r0
 800e2bc:	68d8      	ldr	r0, [r3, #12]
 800e2be:	b14c      	cbz	r4, 800e2d4 <__assert_func+0x24>
 800e2c0:	4b07      	ldr	r3, [pc, #28]	; (800e2e0 <__assert_func+0x30>)
 800e2c2:	9100      	str	r1, [sp, #0]
 800e2c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2c8:	4906      	ldr	r1, [pc, #24]	; (800e2e4 <__assert_func+0x34>)
 800e2ca:	462b      	mov	r3, r5
 800e2cc:	f000 f844 	bl	800e358 <fiprintf>
 800e2d0:	f000 f854 	bl	800e37c <abort>
 800e2d4:	4b04      	ldr	r3, [pc, #16]	; (800e2e8 <__assert_func+0x38>)
 800e2d6:	461c      	mov	r4, r3
 800e2d8:	e7f3      	b.n	800e2c2 <__assert_func+0x12>
 800e2da:	bf00      	nop
 800e2dc:	2000016c 	.word	0x2000016c
 800e2e0:	08022226 	.word	0x08022226
 800e2e4:	08022233 	.word	0x08022233
 800e2e8:	08022261 	.word	0x08022261

0800e2ec <_calloc_r>:
 800e2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2ee:	fba1 2402 	umull	r2, r4, r1, r2
 800e2f2:	b94c      	cbnz	r4, 800e308 <_calloc_r+0x1c>
 800e2f4:	4611      	mov	r1, r2
 800e2f6:	9201      	str	r2, [sp, #4]
 800e2f8:	f7fd ff06 	bl	800c108 <_malloc_r>
 800e2fc:	9a01      	ldr	r2, [sp, #4]
 800e2fe:	4605      	mov	r5, r0
 800e300:	b930      	cbnz	r0, 800e310 <_calloc_r+0x24>
 800e302:	4628      	mov	r0, r5
 800e304:	b003      	add	sp, #12
 800e306:	bd30      	pop	{r4, r5, pc}
 800e308:	220c      	movs	r2, #12
 800e30a:	6002      	str	r2, [r0, #0]
 800e30c:	2500      	movs	r5, #0
 800e30e:	e7f8      	b.n	800e302 <_calloc_r+0x16>
 800e310:	4621      	mov	r1, r4
 800e312:	f7fe fcc4 	bl	800cc9e <memset>
 800e316:	e7f4      	b.n	800e302 <_calloc_r+0x16>

0800e318 <__ascii_mbtowc>:
 800e318:	b082      	sub	sp, #8
 800e31a:	b901      	cbnz	r1, 800e31e <__ascii_mbtowc+0x6>
 800e31c:	a901      	add	r1, sp, #4
 800e31e:	b142      	cbz	r2, 800e332 <__ascii_mbtowc+0x1a>
 800e320:	b14b      	cbz	r3, 800e336 <__ascii_mbtowc+0x1e>
 800e322:	7813      	ldrb	r3, [r2, #0]
 800e324:	600b      	str	r3, [r1, #0]
 800e326:	7812      	ldrb	r2, [r2, #0]
 800e328:	1e10      	subs	r0, r2, #0
 800e32a:	bf18      	it	ne
 800e32c:	2001      	movne	r0, #1
 800e32e:	b002      	add	sp, #8
 800e330:	4770      	bx	lr
 800e332:	4610      	mov	r0, r2
 800e334:	e7fb      	b.n	800e32e <__ascii_mbtowc+0x16>
 800e336:	f06f 0001 	mvn.w	r0, #1
 800e33a:	e7f8      	b.n	800e32e <__ascii_mbtowc+0x16>

0800e33c <__ascii_wctomb>:
 800e33c:	b149      	cbz	r1, 800e352 <__ascii_wctomb+0x16>
 800e33e:	2aff      	cmp	r2, #255	; 0xff
 800e340:	bf85      	ittet	hi
 800e342:	238a      	movhi	r3, #138	; 0x8a
 800e344:	6003      	strhi	r3, [r0, #0]
 800e346:	700a      	strbls	r2, [r1, #0]
 800e348:	f04f 30ff 	movhi.w	r0, #4294967295
 800e34c:	bf98      	it	ls
 800e34e:	2001      	movls	r0, #1
 800e350:	4770      	bx	lr
 800e352:	4608      	mov	r0, r1
 800e354:	4770      	bx	lr
	...

0800e358 <fiprintf>:
 800e358:	b40e      	push	{r1, r2, r3}
 800e35a:	b503      	push	{r0, r1, lr}
 800e35c:	4601      	mov	r1, r0
 800e35e:	ab03      	add	r3, sp, #12
 800e360:	4805      	ldr	r0, [pc, #20]	; (800e378 <fiprintf+0x20>)
 800e362:	f853 2b04 	ldr.w	r2, [r3], #4
 800e366:	6800      	ldr	r0, [r0, #0]
 800e368:	9301      	str	r3, [sp, #4]
 800e36a:	f000 f837 	bl	800e3dc <_vfiprintf_r>
 800e36e:	b002      	add	sp, #8
 800e370:	f85d eb04 	ldr.w	lr, [sp], #4
 800e374:	b003      	add	sp, #12
 800e376:	4770      	bx	lr
 800e378:	2000016c 	.word	0x2000016c

0800e37c <abort>:
 800e37c:	b508      	push	{r3, lr}
 800e37e:	2006      	movs	r0, #6
 800e380:	f000 fa04 	bl	800e78c <raise>
 800e384:	2001      	movs	r0, #1
 800e386:	f7f3 f931 	bl	80015ec <_exit>

0800e38a <__sfputc_r>:
 800e38a:	6893      	ldr	r3, [r2, #8]
 800e38c:	3b01      	subs	r3, #1
 800e38e:	2b00      	cmp	r3, #0
 800e390:	b410      	push	{r4}
 800e392:	6093      	str	r3, [r2, #8]
 800e394:	da08      	bge.n	800e3a8 <__sfputc_r+0x1e>
 800e396:	6994      	ldr	r4, [r2, #24]
 800e398:	42a3      	cmp	r3, r4
 800e39a:	db01      	blt.n	800e3a0 <__sfputc_r+0x16>
 800e39c:	290a      	cmp	r1, #10
 800e39e:	d103      	bne.n	800e3a8 <__sfputc_r+0x1e>
 800e3a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3a4:	f000 b934 	b.w	800e610 <__swbuf_r>
 800e3a8:	6813      	ldr	r3, [r2, #0]
 800e3aa:	1c58      	adds	r0, r3, #1
 800e3ac:	6010      	str	r0, [r2, #0]
 800e3ae:	7019      	strb	r1, [r3, #0]
 800e3b0:	4608      	mov	r0, r1
 800e3b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <__sfputs_r>:
 800e3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	460f      	mov	r7, r1
 800e3be:	4614      	mov	r4, r2
 800e3c0:	18d5      	adds	r5, r2, r3
 800e3c2:	42ac      	cmp	r4, r5
 800e3c4:	d101      	bne.n	800e3ca <__sfputs_r+0x12>
 800e3c6:	2000      	movs	r0, #0
 800e3c8:	e007      	b.n	800e3da <__sfputs_r+0x22>
 800e3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ce:	463a      	mov	r2, r7
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	f7ff ffda 	bl	800e38a <__sfputc_r>
 800e3d6:	1c43      	adds	r3, r0, #1
 800e3d8:	d1f3      	bne.n	800e3c2 <__sfputs_r+0xa>
 800e3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3dc <_vfiprintf_r>:
 800e3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e0:	460d      	mov	r5, r1
 800e3e2:	b09d      	sub	sp, #116	; 0x74
 800e3e4:	4614      	mov	r4, r2
 800e3e6:	4698      	mov	r8, r3
 800e3e8:	4606      	mov	r6, r0
 800e3ea:	b118      	cbz	r0, 800e3f4 <_vfiprintf_r+0x18>
 800e3ec:	6a03      	ldr	r3, [r0, #32]
 800e3ee:	b90b      	cbnz	r3, 800e3f4 <_vfiprintf_r+0x18>
 800e3f0:	f7fe fbdc 	bl	800cbac <__sinit>
 800e3f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3f6:	07d9      	lsls	r1, r3, #31
 800e3f8:	d405      	bmi.n	800e406 <_vfiprintf_r+0x2a>
 800e3fa:	89ab      	ldrh	r3, [r5, #12]
 800e3fc:	059a      	lsls	r2, r3, #22
 800e3fe:	d402      	bmi.n	800e406 <_vfiprintf_r+0x2a>
 800e400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e402:	f7fe fcda 	bl	800cdba <__retarget_lock_acquire_recursive>
 800e406:	89ab      	ldrh	r3, [r5, #12]
 800e408:	071b      	lsls	r3, r3, #28
 800e40a:	d501      	bpl.n	800e410 <_vfiprintf_r+0x34>
 800e40c:	692b      	ldr	r3, [r5, #16]
 800e40e:	b99b      	cbnz	r3, 800e438 <_vfiprintf_r+0x5c>
 800e410:	4629      	mov	r1, r5
 800e412:	4630      	mov	r0, r6
 800e414:	f000 f93a 	bl	800e68c <__swsetup_r>
 800e418:	b170      	cbz	r0, 800e438 <_vfiprintf_r+0x5c>
 800e41a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e41c:	07dc      	lsls	r4, r3, #31
 800e41e:	d504      	bpl.n	800e42a <_vfiprintf_r+0x4e>
 800e420:	f04f 30ff 	mov.w	r0, #4294967295
 800e424:	b01d      	add	sp, #116	; 0x74
 800e426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e42a:	89ab      	ldrh	r3, [r5, #12]
 800e42c:	0598      	lsls	r0, r3, #22
 800e42e:	d4f7      	bmi.n	800e420 <_vfiprintf_r+0x44>
 800e430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e432:	f7fe fcc3 	bl	800cdbc <__retarget_lock_release_recursive>
 800e436:	e7f3      	b.n	800e420 <_vfiprintf_r+0x44>
 800e438:	2300      	movs	r3, #0
 800e43a:	9309      	str	r3, [sp, #36]	; 0x24
 800e43c:	2320      	movs	r3, #32
 800e43e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e442:	f8cd 800c 	str.w	r8, [sp, #12]
 800e446:	2330      	movs	r3, #48	; 0x30
 800e448:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e5fc <_vfiprintf_r+0x220>
 800e44c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e450:	f04f 0901 	mov.w	r9, #1
 800e454:	4623      	mov	r3, r4
 800e456:	469a      	mov	sl, r3
 800e458:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e45c:	b10a      	cbz	r2, 800e462 <_vfiprintf_r+0x86>
 800e45e:	2a25      	cmp	r2, #37	; 0x25
 800e460:	d1f9      	bne.n	800e456 <_vfiprintf_r+0x7a>
 800e462:	ebba 0b04 	subs.w	fp, sl, r4
 800e466:	d00b      	beq.n	800e480 <_vfiprintf_r+0xa4>
 800e468:	465b      	mov	r3, fp
 800e46a:	4622      	mov	r2, r4
 800e46c:	4629      	mov	r1, r5
 800e46e:	4630      	mov	r0, r6
 800e470:	f7ff ffa2 	bl	800e3b8 <__sfputs_r>
 800e474:	3001      	adds	r0, #1
 800e476:	f000 80a9 	beq.w	800e5cc <_vfiprintf_r+0x1f0>
 800e47a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e47c:	445a      	add	r2, fp
 800e47e:	9209      	str	r2, [sp, #36]	; 0x24
 800e480:	f89a 3000 	ldrb.w	r3, [sl]
 800e484:	2b00      	cmp	r3, #0
 800e486:	f000 80a1 	beq.w	800e5cc <_vfiprintf_r+0x1f0>
 800e48a:	2300      	movs	r3, #0
 800e48c:	f04f 32ff 	mov.w	r2, #4294967295
 800e490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e494:	f10a 0a01 	add.w	sl, sl, #1
 800e498:	9304      	str	r3, [sp, #16]
 800e49a:	9307      	str	r3, [sp, #28]
 800e49c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4a0:	931a      	str	r3, [sp, #104]	; 0x68
 800e4a2:	4654      	mov	r4, sl
 800e4a4:	2205      	movs	r2, #5
 800e4a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4aa:	4854      	ldr	r0, [pc, #336]	; (800e5fc <_vfiprintf_r+0x220>)
 800e4ac:	f7f1 ff28 	bl	8000300 <memchr>
 800e4b0:	9a04      	ldr	r2, [sp, #16]
 800e4b2:	b9d8      	cbnz	r0, 800e4ec <_vfiprintf_r+0x110>
 800e4b4:	06d1      	lsls	r1, r2, #27
 800e4b6:	bf44      	itt	mi
 800e4b8:	2320      	movmi	r3, #32
 800e4ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4be:	0713      	lsls	r3, r2, #28
 800e4c0:	bf44      	itt	mi
 800e4c2:	232b      	movmi	r3, #43	; 0x2b
 800e4c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4c8:	f89a 3000 	ldrb.w	r3, [sl]
 800e4cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ce:	d015      	beq.n	800e4fc <_vfiprintf_r+0x120>
 800e4d0:	9a07      	ldr	r2, [sp, #28]
 800e4d2:	4654      	mov	r4, sl
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	f04f 0c0a 	mov.w	ip, #10
 800e4da:	4621      	mov	r1, r4
 800e4dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4e0:	3b30      	subs	r3, #48	; 0x30
 800e4e2:	2b09      	cmp	r3, #9
 800e4e4:	d94d      	bls.n	800e582 <_vfiprintf_r+0x1a6>
 800e4e6:	b1b0      	cbz	r0, 800e516 <_vfiprintf_r+0x13a>
 800e4e8:	9207      	str	r2, [sp, #28]
 800e4ea:	e014      	b.n	800e516 <_vfiprintf_r+0x13a>
 800e4ec:	eba0 0308 	sub.w	r3, r0, r8
 800e4f0:	fa09 f303 	lsl.w	r3, r9, r3
 800e4f4:	4313      	orrs	r3, r2
 800e4f6:	9304      	str	r3, [sp, #16]
 800e4f8:	46a2      	mov	sl, r4
 800e4fa:	e7d2      	b.n	800e4a2 <_vfiprintf_r+0xc6>
 800e4fc:	9b03      	ldr	r3, [sp, #12]
 800e4fe:	1d19      	adds	r1, r3, #4
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	9103      	str	r1, [sp, #12]
 800e504:	2b00      	cmp	r3, #0
 800e506:	bfbb      	ittet	lt
 800e508:	425b      	neglt	r3, r3
 800e50a:	f042 0202 	orrlt.w	r2, r2, #2
 800e50e:	9307      	strge	r3, [sp, #28]
 800e510:	9307      	strlt	r3, [sp, #28]
 800e512:	bfb8      	it	lt
 800e514:	9204      	strlt	r2, [sp, #16]
 800e516:	7823      	ldrb	r3, [r4, #0]
 800e518:	2b2e      	cmp	r3, #46	; 0x2e
 800e51a:	d10c      	bne.n	800e536 <_vfiprintf_r+0x15a>
 800e51c:	7863      	ldrb	r3, [r4, #1]
 800e51e:	2b2a      	cmp	r3, #42	; 0x2a
 800e520:	d134      	bne.n	800e58c <_vfiprintf_r+0x1b0>
 800e522:	9b03      	ldr	r3, [sp, #12]
 800e524:	1d1a      	adds	r2, r3, #4
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	9203      	str	r2, [sp, #12]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	bfb8      	it	lt
 800e52e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e532:	3402      	adds	r4, #2
 800e534:	9305      	str	r3, [sp, #20]
 800e536:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e60c <_vfiprintf_r+0x230>
 800e53a:	7821      	ldrb	r1, [r4, #0]
 800e53c:	2203      	movs	r2, #3
 800e53e:	4650      	mov	r0, sl
 800e540:	f7f1 fede 	bl	8000300 <memchr>
 800e544:	b138      	cbz	r0, 800e556 <_vfiprintf_r+0x17a>
 800e546:	9b04      	ldr	r3, [sp, #16]
 800e548:	eba0 000a 	sub.w	r0, r0, sl
 800e54c:	2240      	movs	r2, #64	; 0x40
 800e54e:	4082      	lsls	r2, r0
 800e550:	4313      	orrs	r3, r2
 800e552:	3401      	adds	r4, #1
 800e554:	9304      	str	r3, [sp, #16]
 800e556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e55a:	4829      	ldr	r0, [pc, #164]	; (800e600 <_vfiprintf_r+0x224>)
 800e55c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e560:	2206      	movs	r2, #6
 800e562:	f7f1 fecd 	bl	8000300 <memchr>
 800e566:	2800      	cmp	r0, #0
 800e568:	d03f      	beq.n	800e5ea <_vfiprintf_r+0x20e>
 800e56a:	4b26      	ldr	r3, [pc, #152]	; (800e604 <_vfiprintf_r+0x228>)
 800e56c:	bb1b      	cbnz	r3, 800e5b6 <_vfiprintf_r+0x1da>
 800e56e:	9b03      	ldr	r3, [sp, #12]
 800e570:	3307      	adds	r3, #7
 800e572:	f023 0307 	bic.w	r3, r3, #7
 800e576:	3308      	adds	r3, #8
 800e578:	9303      	str	r3, [sp, #12]
 800e57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e57c:	443b      	add	r3, r7
 800e57e:	9309      	str	r3, [sp, #36]	; 0x24
 800e580:	e768      	b.n	800e454 <_vfiprintf_r+0x78>
 800e582:	fb0c 3202 	mla	r2, ip, r2, r3
 800e586:	460c      	mov	r4, r1
 800e588:	2001      	movs	r0, #1
 800e58a:	e7a6      	b.n	800e4da <_vfiprintf_r+0xfe>
 800e58c:	2300      	movs	r3, #0
 800e58e:	3401      	adds	r4, #1
 800e590:	9305      	str	r3, [sp, #20]
 800e592:	4619      	mov	r1, r3
 800e594:	f04f 0c0a 	mov.w	ip, #10
 800e598:	4620      	mov	r0, r4
 800e59a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e59e:	3a30      	subs	r2, #48	; 0x30
 800e5a0:	2a09      	cmp	r2, #9
 800e5a2:	d903      	bls.n	800e5ac <_vfiprintf_r+0x1d0>
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d0c6      	beq.n	800e536 <_vfiprintf_r+0x15a>
 800e5a8:	9105      	str	r1, [sp, #20]
 800e5aa:	e7c4      	b.n	800e536 <_vfiprintf_r+0x15a>
 800e5ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5b0:	4604      	mov	r4, r0
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e7f0      	b.n	800e598 <_vfiprintf_r+0x1bc>
 800e5b6:	ab03      	add	r3, sp, #12
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	462a      	mov	r2, r5
 800e5bc:	4b12      	ldr	r3, [pc, #72]	; (800e608 <_vfiprintf_r+0x22c>)
 800e5be:	a904      	add	r1, sp, #16
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	f7fd febd 	bl	800c340 <_printf_float>
 800e5c6:	4607      	mov	r7, r0
 800e5c8:	1c78      	adds	r0, r7, #1
 800e5ca:	d1d6      	bne.n	800e57a <_vfiprintf_r+0x19e>
 800e5cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5ce:	07d9      	lsls	r1, r3, #31
 800e5d0:	d405      	bmi.n	800e5de <_vfiprintf_r+0x202>
 800e5d2:	89ab      	ldrh	r3, [r5, #12]
 800e5d4:	059a      	lsls	r2, r3, #22
 800e5d6:	d402      	bmi.n	800e5de <_vfiprintf_r+0x202>
 800e5d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5da:	f7fe fbef 	bl	800cdbc <__retarget_lock_release_recursive>
 800e5de:	89ab      	ldrh	r3, [r5, #12]
 800e5e0:	065b      	lsls	r3, r3, #25
 800e5e2:	f53f af1d 	bmi.w	800e420 <_vfiprintf_r+0x44>
 800e5e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5e8:	e71c      	b.n	800e424 <_vfiprintf_r+0x48>
 800e5ea:	ab03      	add	r3, sp, #12
 800e5ec:	9300      	str	r3, [sp, #0]
 800e5ee:	462a      	mov	r2, r5
 800e5f0:	4b05      	ldr	r3, [pc, #20]	; (800e608 <_vfiprintf_r+0x22c>)
 800e5f2:	a904      	add	r1, sp, #16
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	f7fe f92b 	bl	800c850 <_printf_i>
 800e5fa:	e7e4      	b.n	800e5c6 <_vfiprintf_r+0x1ea>
 800e5fc:	08022363 	.word	0x08022363
 800e600:	0802236d 	.word	0x0802236d
 800e604:	0800c341 	.word	0x0800c341
 800e608:	0800e3b9 	.word	0x0800e3b9
 800e60c:	08022369 	.word	0x08022369

0800e610 <__swbuf_r>:
 800e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e612:	460e      	mov	r6, r1
 800e614:	4614      	mov	r4, r2
 800e616:	4605      	mov	r5, r0
 800e618:	b118      	cbz	r0, 800e622 <__swbuf_r+0x12>
 800e61a:	6a03      	ldr	r3, [r0, #32]
 800e61c:	b90b      	cbnz	r3, 800e622 <__swbuf_r+0x12>
 800e61e:	f7fe fac5 	bl	800cbac <__sinit>
 800e622:	69a3      	ldr	r3, [r4, #24]
 800e624:	60a3      	str	r3, [r4, #8]
 800e626:	89a3      	ldrh	r3, [r4, #12]
 800e628:	071a      	lsls	r2, r3, #28
 800e62a:	d525      	bpl.n	800e678 <__swbuf_r+0x68>
 800e62c:	6923      	ldr	r3, [r4, #16]
 800e62e:	b31b      	cbz	r3, 800e678 <__swbuf_r+0x68>
 800e630:	6823      	ldr	r3, [r4, #0]
 800e632:	6922      	ldr	r2, [r4, #16]
 800e634:	1a98      	subs	r0, r3, r2
 800e636:	6963      	ldr	r3, [r4, #20]
 800e638:	b2f6      	uxtb	r6, r6
 800e63a:	4283      	cmp	r3, r0
 800e63c:	4637      	mov	r7, r6
 800e63e:	dc04      	bgt.n	800e64a <__swbuf_r+0x3a>
 800e640:	4621      	mov	r1, r4
 800e642:	4628      	mov	r0, r5
 800e644:	f7ff fdfe 	bl	800e244 <_fflush_r>
 800e648:	b9e0      	cbnz	r0, 800e684 <__swbuf_r+0x74>
 800e64a:	68a3      	ldr	r3, [r4, #8]
 800e64c:	3b01      	subs	r3, #1
 800e64e:	60a3      	str	r3, [r4, #8]
 800e650:	6823      	ldr	r3, [r4, #0]
 800e652:	1c5a      	adds	r2, r3, #1
 800e654:	6022      	str	r2, [r4, #0]
 800e656:	701e      	strb	r6, [r3, #0]
 800e658:	6962      	ldr	r2, [r4, #20]
 800e65a:	1c43      	adds	r3, r0, #1
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d004      	beq.n	800e66a <__swbuf_r+0x5a>
 800e660:	89a3      	ldrh	r3, [r4, #12]
 800e662:	07db      	lsls	r3, r3, #31
 800e664:	d506      	bpl.n	800e674 <__swbuf_r+0x64>
 800e666:	2e0a      	cmp	r6, #10
 800e668:	d104      	bne.n	800e674 <__swbuf_r+0x64>
 800e66a:	4621      	mov	r1, r4
 800e66c:	4628      	mov	r0, r5
 800e66e:	f7ff fde9 	bl	800e244 <_fflush_r>
 800e672:	b938      	cbnz	r0, 800e684 <__swbuf_r+0x74>
 800e674:	4638      	mov	r0, r7
 800e676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e678:	4621      	mov	r1, r4
 800e67a:	4628      	mov	r0, r5
 800e67c:	f000 f806 	bl	800e68c <__swsetup_r>
 800e680:	2800      	cmp	r0, #0
 800e682:	d0d5      	beq.n	800e630 <__swbuf_r+0x20>
 800e684:	f04f 37ff 	mov.w	r7, #4294967295
 800e688:	e7f4      	b.n	800e674 <__swbuf_r+0x64>
	...

0800e68c <__swsetup_r>:
 800e68c:	b538      	push	{r3, r4, r5, lr}
 800e68e:	4b2a      	ldr	r3, [pc, #168]	; (800e738 <__swsetup_r+0xac>)
 800e690:	4605      	mov	r5, r0
 800e692:	6818      	ldr	r0, [r3, #0]
 800e694:	460c      	mov	r4, r1
 800e696:	b118      	cbz	r0, 800e6a0 <__swsetup_r+0x14>
 800e698:	6a03      	ldr	r3, [r0, #32]
 800e69a:	b90b      	cbnz	r3, 800e6a0 <__swsetup_r+0x14>
 800e69c:	f7fe fa86 	bl	800cbac <__sinit>
 800e6a0:	89a3      	ldrh	r3, [r4, #12]
 800e6a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6a6:	0718      	lsls	r0, r3, #28
 800e6a8:	d422      	bmi.n	800e6f0 <__swsetup_r+0x64>
 800e6aa:	06d9      	lsls	r1, r3, #27
 800e6ac:	d407      	bmi.n	800e6be <__swsetup_r+0x32>
 800e6ae:	2309      	movs	r3, #9
 800e6b0:	602b      	str	r3, [r5, #0]
 800e6b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e6b6:	81a3      	strh	r3, [r4, #12]
 800e6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6bc:	e034      	b.n	800e728 <__swsetup_r+0x9c>
 800e6be:	0758      	lsls	r0, r3, #29
 800e6c0:	d512      	bpl.n	800e6e8 <__swsetup_r+0x5c>
 800e6c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6c4:	b141      	cbz	r1, 800e6d8 <__swsetup_r+0x4c>
 800e6c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6ca:	4299      	cmp	r1, r3
 800e6cc:	d002      	beq.n	800e6d4 <__swsetup_r+0x48>
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	f7ff f96a 	bl	800d9a8 <_free_r>
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	6363      	str	r3, [r4, #52]	; 0x34
 800e6d8:	89a3      	ldrh	r3, [r4, #12]
 800e6da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e6de:	81a3      	strh	r3, [r4, #12]
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	6063      	str	r3, [r4, #4]
 800e6e4:	6923      	ldr	r3, [r4, #16]
 800e6e6:	6023      	str	r3, [r4, #0]
 800e6e8:	89a3      	ldrh	r3, [r4, #12]
 800e6ea:	f043 0308 	orr.w	r3, r3, #8
 800e6ee:	81a3      	strh	r3, [r4, #12]
 800e6f0:	6923      	ldr	r3, [r4, #16]
 800e6f2:	b94b      	cbnz	r3, 800e708 <__swsetup_r+0x7c>
 800e6f4:	89a3      	ldrh	r3, [r4, #12]
 800e6f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e6fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6fe:	d003      	beq.n	800e708 <__swsetup_r+0x7c>
 800e700:	4621      	mov	r1, r4
 800e702:	4628      	mov	r0, r5
 800e704:	f000 f884 	bl	800e810 <__smakebuf_r>
 800e708:	89a0      	ldrh	r0, [r4, #12]
 800e70a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e70e:	f010 0301 	ands.w	r3, r0, #1
 800e712:	d00a      	beq.n	800e72a <__swsetup_r+0x9e>
 800e714:	2300      	movs	r3, #0
 800e716:	60a3      	str	r3, [r4, #8]
 800e718:	6963      	ldr	r3, [r4, #20]
 800e71a:	425b      	negs	r3, r3
 800e71c:	61a3      	str	r3, [r4, #24]
 800e71e:	6923      	ldr	r3, [r4, #16]
 800e720:	b943      	cbnz	r3, 800e734 <__swsetup_r+0xa8>
 800e722:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e726:	d1c4      	bne.n	800e6b2 <__swsetup_r+0x26>
 800e728:	bd38      	pop	{r3, r4, r5, pc}
 800e72a:	0781      	lsls	r1, r0, #30
 800e72c:	bf58      	it	pl
 800e72e:	6963      	ldrpl	r3, [r4, #20]
 800e730:	60a3      	str	r3, [r4, #8]
 800e732:	e7f4      	b.n	800e71e <__swsetup_r+0x92>
 800e734:	2000      	movs	r0, #0
 800e736:	e7f7      	b.n	800e728 <__swsetup_r+0x9c>
 800e738:	2000016c 	.word	0x2000016c

0800e73c <_raise_r>:
 800e73c:	291f      	cmp	r1, #31
 800e73e:	b538      	push	{r3, r4, r5, lr}
 800e740:	4604      	mov	r4, r0
 800e742:	460d      	mov	r5, r1
 800e744:	d904      	bls.n	800e750 <_raise_r+0x14>
 800e746:	2316      	movs	r3, #22
 800e748:	6003      	str	r3, [r0, #0]
 800e74a:	f04f 30ff 	mov.w	r0, #4294967295
 800e74e:	bd38      	pop	{r3, r4, r5, pc}
 800e750:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e752:	b112      	cbz	r2, 800e75a <_raise_r+0x1e>
 800e754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e758:	b94b      	cbnz	r3, 800e76e <_raise_r+0x32>
 800e75a:	4620      	mov	r0, r4
 800e75c:	f000 f830 	bl	800e7c0 <_getpid_r>
 800e760:	462a      	mov	r2, r5
 800e762:	4601      	mov	r1, r0
 800e764:	4620      	mov	r0, r4
 800e766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e76a:	f000 b817 	b.w	800e79c <_kill_r>
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d00a      	beq.n	800e788 <_raise_r+0x4c>
 800e772:	1c59      	adds	r1, r3, #1
 800e774:	d103      	bne.n	800e77e <_raise_r+0x42>
 800e776:	2316      	movs	r3, #22
 800e778:	6003      	str	r3, [r0, #0]
 800e77a:	2001      	movs	r0, #1
 800e77c:	e7e7      	b.n	800e74e <_raise_r+0x12>
 800e77e:	2400      	movs	r4, #0
 800e780:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e784:	4628      	mov	r0, r5
 800e786:	4798      	blx	r3
 800e788:	2000      	movs	r0, #0
 800e78a:	e7e0      	b.n	800e74e <_raise_r+0x12>

0800e78c <raise>:
 800e78c:	4b02      	ldr	r3, [pc, #8]	; (800e798 <raise+0xc>)
 800e78e:	4601      	mov	r1, r0
 800e790:	6818      	ldr	r0, [r3, #0]
 800e792:	f7ff bfd3 	b.w	800e73c <_raise_r>
 800e796:	bf00      	nop
 800e798:	2000016c 	.word	0x2000016c

0800e79c <_kill_r>:
 800e79c:	b538      	push	{r3, r4, r5, lr}
 800e79e:	4d07      	ldr	r5, [pc, #28]	; (800e7bc <_kill_r+0x20>)
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	4608      	mov	r0, r1
 800e7a6:	4611      	mov	r1, r2
 800e7a8:	602b      	str	r3, [r5, #0]
 800e7aa:	f7f2 ff0f 	bl	80015cc <_kill>
 800e7ae:	1c43      	adds	r3, r0, #1
 800e7b0:	d102      	bne.n	800e7b8 <_kill_r+0x1c>
 800e7b2:	682b      	ldr	r3, [r5, #0]
 800e7b4:	b103      	cbz	r3, 800e7b8 <_kill_r+0x1c>
 800e7b6:	6023      	str	r3, [r4, #0]
 800e7b8:	bd38      	pop	{r3, r4, r5, pc}
 800e7ba:	bf00      	nop
 800e7bc:	2001c548 	.word	0x2001c548

0800e7c0 <_getpid_r>:
 800e7c0:	f7f2 befc 	b.w	80015bc <_getpid>

0800e7c4 <__swhatbuf_r>:
 800e7c4:	b570      	push	{r4, r5, r6, lr}
 800e7c6:	460c      	mov	r4, r1
 800e7c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7cc:	2900      	cmp	r1, #0
 800e7ce:	b096      	sub	sp, #88	; 0x58
 800e7d0:	4615      	mov	r5, r2
 800e7d2:	461e      	mov	r6, r3
 800e7d4:	da0d      	bge.n	800e7f2 <__swhatbuf_r+0x2e>
 800e7d6:	89a3      	ldrh	r3, [r4, #12]
 800e7d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e7dc:	f04f 0100 	mov.w	r1, #0
 800e7e0:	bf0c      	ite	eq
 800e7e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e7e6:	2340      	movne	r3, #64	; 0x40
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	6031      	str	r1, [r6, #0]
 800e7ec:	602b      	str	r3, [r5, #0]
 800e7ee:	b016      	add	sp, #88	; 0x58
 800e7f0:	bd70      	pop	{r4, r5, r6, pc}
 800e7f2:	466a      	mov	r2, sp
 800e7f4:	f000 f848 	bl	800e888 <_fstat_r>
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	dbec      	blt.n	800e7d6 <__swhatbuf_r+0x12>
 800e7fc:	9901      	ldr	r1, [sp, #4]
 800e7fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e802:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e806:	4259      	negs	r1, r3
 800e808:	4159      	adcs	r1, r3
 800e80a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e80e:	e7eb      	b.n	800e7e8 <__swhatbuf_r+0x24>

0800e810 <__smakebuf_r>:
 800e810:	898b      	ldrh	r3, [r1, #12]
 800e812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e814:	079d      	lsls	r5, r3, #30
 800e816:	4606      	mov	r6, r0
 800e818:	460c      	mov	r4, r1
 800e81a:	d507      	bpl.n	800e82c <__smakebuf_r+0x1c>
 800e81c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e820:	6023      	str	r3, [r4, #0]
 800e822:	6123      	str	r3, [r4, #16]
 800e824:	2301      	movs	r3, #1
 800e826:	6163      	str	r3, [r4, #20]
 800e828:	b002      	add	sp, #8
 800e82a:	bd70      	pop	{r4, r5, r6, pc}
 800e82c:	ab01      	add	r3, sp, #4
 800e82e:	466a      	mov	r2, sp
 800e830:	f7ff ffc8 	bl	800e7c4 <__swhatbuf_r>
 800e834:	9900      	ldr	r1, [sp, #0]
 800e836:	4605      	mov	r5, r0
 800e838:	4630      	mov	r0, r6
 800e83a:	f7fd fc65 	bl	800c108 <_malloc_r>
 800e83e:	b948      	cbnz	r0, 800e854 <__smakebuf_r+0x44>
 800e840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e844:	059a      	lsls	r2, r3, #22
 800e846:	d4ef      	bmi.n	800e828 <__smakebuf_r+0x18>
 800e848:	f023 0303 	bic.w	r3, r3, #3
 800e84c:	f043 0302 	orr.w	r3, r3, #2
 800e850:	81a3      	strh	r3, [r4, #12]
 800e852:	e7e3      	b.n	800e81c <__smakebuf_r+0xc>
 800e854:	89a3      	ldrh	r3, [r4, #12]
 800e856:	6020      	str	r0, [r4, #0]
 800e858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e85c:	81a3      	strh	r3, [r4, #12]
 800e85e:	9b00      	ldr	r3, [sp, #0]
 800e860:	6163      	str	r3, [r4, #20]
 800e862:	9b01      	ldr	r3, [sp, #4]
 800e864:	6120      	str	r0, [r4, #16]
 800e866:	b15b      	cbz	r3, 800e880 <__smakebuf_r+0x70>
 800e868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e86c:	4630      	mov	r0, r6
 800e86e:	f000 f81d 	bl	800e8ac <_isatty_r>
 800e872:	b128      	cbz	r0, 800e880 <__smakebuf_r+0x70>
 800e874:	89a3      	ldrh	r3, [r4, #12]
 800e876:	f023 0303 	bic.w	r3, r3, #3
 800e87a:	f043 0301 	orr.w	r3, r3, #1
 800e87e:	81a3      	strh	r3, [r4, #12]
 800e880:	89a3      	ldrh	r3, [r4, #12]
 800e882:	431d      	orrs	r5, r3
 800e884:	81a5      	strh	r5, [r4, #12]
 800e886:	e7cf      	b.n	800e828 <__smakebuf_r+0x18>

0800e888 <_fstat_r>:
 800e888:	b538      	push	{r3, r4, r5, lr}
 800e88a:	4d07      	ldr	r5, [pc, #28]	; (800e8a8 <_fstat_r+0x20>)
 800e88c:	2300      	movs	r3, #0
 800e88e:	4604      	mov	r4, r0
 800e890:	4608      	mov	r0, r1
 800e892:	4611      	mov	r1, r2
 800e894:	602b      	str	r3, [r5, #0]
 800e896:	f7f2 fef8 	bl	800168a <_fstat>
 800e89a:	1c43      	adds	r3, r0, #1
 800e89c:	d102      	bne.n	800e8a4 <_fstat_r+0x1c>
 800e89e:	682b      	ldr	r3, [r5, #0]
 800e8a0:	b103      	cbz	r3, 800e8a4 <_fstat_r+0x1c>
 800e8a2:	6023      	str	r3, [r4, #0]
 800e8a4:	bd38      	pop	{r3, r4, r5, pc}
 800e8a6:	bf00      	nop
 800e8a8:	2001c548 	.word	0x2001c548

0800e8ac <_isatty_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	4d06      	ldr	r5, [pc, #24]	; (800e8c8 <_isatty_r+0x1c>)
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	4608      	mov	r0, r1
 800e8b6:	602b      	str	r3, [r5, #0]
 800e8b8:	f7f2 fef7 	bl	80016aa <_isatty>
 800e8bc:	1c43      	adds	r3, r0, #1
 800e8be:	d102      	bne.n	800e8c6 <_isatty_r+0x1a>
 800e8c0:	682b      	ldr	r3, [r5, #0]
 800e8c2:	b103      	cbz	r3, 800e8c6 <_isatty_r+0x1a>
 800e8c4:	6023      	str	r3, [r4, #0]
 800e8c6:	bd38      	pop	{r3, r4, r5, pc}
 800e8c8:	2001c548 	.word	0x2001c548

0800e8cc <_init>:
 800e8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ce:	bf00      	nop
 800e8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8d2:	bc08      	pop	{r3}
 800e8d4:	469e      	mov	lr, r3
 800e8d6:	4770      	bx	lr

0800e8d8 <_fini>:
 800e8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8da:	bf00      	nop
 800e8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8de:	bc08      	pop	{r3}
 800e8e0:	469e      	mov	lr, r3
 800e8e2:	4770      	bx	lr
