
Digital_Noise_Reduction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009964  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009b5c  08009b5c  00019b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bc4  08009bc4  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08009bc4  08009bc4  00019bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bcc  08009bcc  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bcc  08009bcc  00019bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bd0  08009bd0  00019bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d68  20000184  08009d58  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eec  08009d58  00021eec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .comment      000000b1  00000000  00000000  000201b2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018880  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ce4  00000000  00000000  00038ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  0003c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e78  00000000  00000000  0003daf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b4dd  00000000  00000000  0003e968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a387  00000000  00000000  00069e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fae9d  00000000  00000000  000841cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005158  00000000  00000000  0017f06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  001841c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000ef1  00000000  00000000  0018424a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0018513b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000184 	.word	0x20000184
 8000214:	00000000 	.word	0x00000000
 8000218:	08009b44 	.word	0x08009b44

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000188 	.word	0x20000188
 8000234:	08009b44 	.word	0x08009b44

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fd40 	bl	8000fbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f81d 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f97d 	bl	8000840 <MX_GPIO_Init>
  MX_DMA_Init();
 8000546:	f000 f95d 	bl	8000804 <MX_DMA_Init>
  MX_SPI3_Init();
 800054a:	f000 f8b3 	bl	80006b4 <MX_SPI3_Init>
  MX_SPI4_Init();
 800054e:	f000 f8eb 	bl	8000728 <MX_SPI4_Init>
  MX_USB_DEVICE_Init();
 8000552:	f008 f9c9 	bl	80088e8 <MX_USB_DEVICE_Init>
  MX_I2S2_Init();
 8000556:	f000 f881 	bl	800065c <MX_I2S2_Init>
  MX_USART3_UART_Init();
 800055a:	f000 f923 	bl	80007a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  arm_conv_f32(a,5,b,5,c);
 800055e:	4b04      	ldr	r3, [pc, #16]	; (8000570 <main+0x3c>)
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2305      	movs	r3, #5
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <main+0x40>)
 8000566:	2105      	movs	r1, #5
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <main+0x44>)
 800056a:	f008 ff2d 	bl	80093c8 <arm_conv_f32>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056e:	e7fe      	b.n	800056e <main+0x3a>
 8000570:	20000390 	.word	0x20000390
 8000574:	20000014 	.word	0x20000014
 8000578:	20000000 	.word	0x20000000

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2234      	movs	r2, #52	; 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f009 fa4a 	bl	8009a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a0:	f002 ff3a 	bl	8003418 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <SystemClock_Config+0xd8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a2a      	ldr	r2, [pc, #168]	; (8000654 <SystemClock_Config+0xd8>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b28      	ldr	r3, [pc, #160]	; (8000654 <SystemClock_Config+0xd8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <SystemClock_Config+0xdc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a25      	ldr	r2, [pc, #148]	; (8000658 <SystemClock_Config+0xdc>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <SystemClock_Config+0xdc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d4:	2301      	movs	r3, #1
 80005d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005ec:	23d8      	movs	r3, #216	; 0xd8
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005f4:	2309      	movs	r3, #9
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4618      	mov	r0, r3
 8000602:	f002 ff69 	bl	80034d8 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800060c:	f000 fa4a 	bl	8000aa4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000610:	f002 ff12 	bl	8003438 <HAL_PWREx_EnableOverDrive>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800061a:	f000 fa43 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2302      	movs	r3, #2
 8000624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2107      	movs	r1, #7
 800063c:	4618      	mov	r0, r3
 800063e:	f003 f9f9 	bl	8003a34 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000648:	f000 fa2c 	bl	8000aa4 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_I2S2_Init+0x50>)
 8000662:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <MX_I2S2_Init+0x54>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_I2S2_Init+0x50>)
 8000668:	f44f 7240 	mov.w	r2, #768	; 0x300
 800066c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_I2S2_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_I2S2_Init+0x50>)
 8000676:	2203      	movs	r2, #3
 8000678:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_I2S2_Init+0x50>)
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_22K;
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_I2S2_Init+0x50>)
 8000684:	f245 6222 	movw	r2, #22050	; 0x5622
 8000688:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_I2S2_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_I2S2_Init+0x50>)
 8000692:	2202      	movs	r2, #2
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_I2S2_Init+0x50>)
 8000698:	f001 fad4 	bl	8001c44 <HAL_I2S_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_I2S2_Init+0x4a>
  {
    Error_Handler();
 80006a2:	f000 f9ff 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200001a0 	.word	0x200001a0
 80006b0:	40003800 	.word	0x40003800

080006b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_SPI3_Init+0x6c>)
 80006ba:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <MX_SPI3_Init+0x70>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_SPI3_Init+0x6c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_SPI3_Init+0x6c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_SPI3_Init+0x6c>)
 80006cc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006d0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_SPI3_Init+0x6c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI3_Init+0x6c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_SPI3_Init+0x6c>)
 80006e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e4:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI3_Init+0x6c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI3_Init+0x6c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_SPI3_Init+0x6c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI3_Init+0x6c>)
 80006fa:	2207      	movs	r2, #7
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_SPI3_Init+0x6c>)
 8000700:	2200      	movs	r2, #0
 8000702:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI3_Init+0x6c>)
 8000706:	2200      	movs	r2, #0
 8000708:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_SPI3_Init+0x6c>)
 800070c:	f003 ffe0 	bl	80046d0 <HAL_SPI_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8000716:	f000 f9c5 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000240 	.word	0x20000240
 8000724:	40003c00 	.word	0x40003c00

08000728 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_SPI4_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_SPI4_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_SPI4_Init+0x74>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_SPI4_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_SPI4_Init+0x74>)
 8000742:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000746:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_SPI4_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_SPI4_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_SPI4_Init+0x74>)
 8000756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_SPI4_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_SPI4_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_SPI4_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_SPI4_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_SPI4_Init+0x74>)
 8000776:	2207      	movs	r2, #7
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_SPI4_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_SPI4_Init+0x74>)
 8000782:	2208      	movs	r2, #8
 8000784:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_SPI4_Init+0x74>)
 8000788:	f003 ffa2 	bl	80046d0 <HAL_SPI_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000792:	f000 f987 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200002a4 	.word	0x200002a4
 80007a0:	40013400 	.word	0x40013400

080007a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_USART3_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART3_UART_Init+0x58>)
 80007e8:	f004 f81d 	bl	8004826 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f957 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000308 	.word	0x20000308
 8000800:	40004800 	.word	0x40004800

08000804 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_DMA_Init+0x38>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <MX_DMA_Init+0x38>)
 8000810:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_DMA_Init+0x38>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	200c      	movs	r0, #12
 8000828:	f000 fd25 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800082c:	200c      	movs	r0, #12
 800082e:	f000 fd3e 	bl	80012ae <HAL_NVIC_EnableIRQ>

}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	; 0x38
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000856:	4b8d      	ldr	r3, [pc, #564]	; (8000a8c <MX_GPIO_Init+0x24c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a8c      	ldr	r2, [pc, #560]	; (8000a8c <MX_GPIO_Init+0x24c>)
 800085c:	f043 0310 	orr.w	r3, r3, #16
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b8a      	ldr	r3, [pc, #552]	; (8000a8c <MX_GPIO_Init+0x24c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	623b      	str	r3, [r7, #32]
 800086c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b87      	ldr	r3, [pc, #540]	; (8000a8c <MX_GPIO_Init+0x24c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a86      	ldr	r2, [pc, #536]	; (8000a8c <MX_GPIO_Init+0x24c>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b84      	ldr	r3, [pc, #528]	; (8000a8c <MX_GPIO_Init+0x24c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	61fb      	str	r3, [r7, #28]
 8000884:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	4b81      	ldr	r3, [pc, #516]	; (8000a8c <MX_GPIO_Init+0x24c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a80      	ldr	r2, [pc, #512]	; (8000a8c <MX_GPIO_Init+0x24c>)
 800088c:	f043 0320 	orr.w	r3, r3, #32
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b7e      	ldr	r3, [pc, #504]	; (8000a8c <MX_GPIO_Init+0x24c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0320 	and.w	r3, r3, #32
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	4b7b      	ldr	r3, [pc, #492]	; (8000a8c <MX_GPIO_Init+0x24c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a7a      	ldr	r2, [pc, #488]	; (8000a8c <MX_GPIO_Init+0x24c>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b78      	ldr	r3, [pc, #480]	; (8000a8c <MX_GPIO_Init+0x24c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b75      	ldr	r3, [pc, #468]	; (8000a8c <MX_GPIO_Init+0x24c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a74      	ldr	r2, [pc, #464]	; (8000a8c <MX_GPIO_Init+0x24c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b72      	ldr	r3, [pc, #456]	; (8000a8c <MX_GPIO_Init+0x24c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b6f      	ldr	r3, [pc, #444]	; (8000a8c <MX_GPIO_Init+0x24c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a6e      	ldr	r2, [pc, #440]	; (8000a8c <MX_GPIO_Init+0x24c>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b6c      	ldr	r3, [pc, #432]	; (8000a8c <MX_GPIO_Init+0x24c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e6:	4b69      	ldr	r3, [pc, #420]	; (8000a8c <MX_GPIO_Init+0x24c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a68      	ldr	r2, [pc, #416]	; (8000a8c <MX_GPIO_Init+0x24c>)
 80008ec:	f043 0308 	orr.w	r3, r3, #8
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b66      	ldr	r3, [pc, #408]	; (8000a8c <MX_GPIO_Init+0x24c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0308 	and.w	r3, r3, #8
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fe:	4b63      	ldr	r3, [pc, #396]	; (8000a8c <MX_GPIO_Init+0x24c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a62      	ldr	r2, [pc, #392]	; (8000a8c <MX_GPIO_Init+0x24c>)
 8000904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b60      	ldr	r3, [pc, #384]	; (8000a8c <MX_GPIO_Init+0x24c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_1_Pin|LED_STATUS_3_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2184      	movs	r1, #132	; 0x84
 800091a:	485d      	ldr	r0, [pc, #372]	; (8000a90 <MX_GPIO_Init+0x250>)
 800091c:	f001 f978 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_2_GPIO_Port, LED_STATUS_2_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2110      	movs	r1, #16
 8000924:	485b      	ldr	r0, [pc, #364]	; (8000a94 <MX_GPIO_Init+0x254>)
 8000926:	f001 f973 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000930:	4859      	ldr	r0, [pc, #356]	; (8000a98 <MX_GPIO_Init+0x258>)
 8000932:	f001 f96d 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2140      	movs	r1, #64	; 0x40
 800093a:	4858      	ldr	r0, [pc, #352]	; (8000a9c <MX_GPIO_Init+0x25c>)
 800093c:	f001 f968 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000946:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	484f      	ldr	r0, [pc, #316]	; (8000a94 <MX_GPIO_Init+0x254>)
 8000958:	f000 ffae 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800095c:	2302      	movs	r3, #2
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	484c      	ldr	r0, [pc, #304]	; (8000aa0 <MX_GPIO_Init+0x260>)
 8000970:	f000 ffa2 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin;
 8000974:	2322      	movs	r3, #34	; 0x22
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000984:	230b      	movs	r3, #11
 8000986:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098c:	4619      	mov	r1, r3
 800098e:	4841      	ldr	r0, [pc, #260]	; (8000a94 <MX_GPIO_Init+0x254>)
 8000990:	f000 ff92 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_REF_CLK_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin;
 8000994:	2302      	movs	r3, #2
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a4:	230b      	movs	r3, #11
 80009a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_REF_CLK_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ac:	4619      	mov	r1, r3
 80009ae:	4838      	ldr	r0, [pc, #224]	; (8000a90 <MX_GPIO_Init+0x250>)
 80009b0:	f000 ff82 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATUS_1_Pin LED_STATUS_3_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_1_Pin|LED_STATUS_3_Pin;
 80009b4:	2384      	movs	r3, #132	; 0x84
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	4619      	mov	r1, r3
 80009ca:	4831      	ldr	r0, [pc, #196]	; (8000a90 <MX_GPIO_Init+0x250>)
 80009cc:	f000 ff74 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUS_2_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_2_Pin;
 80009d0:	2310      	movs	r3, #16
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_STATUS_2_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e4:	4619      	mov	r1, r3
 80009e6:	482b      	ldr	r0, [pc, #172]	; (8000a94 <MX_GPIO_Init+0x254>)
 80009e8:	f000 ff66 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009ec:	f244 0381 	movw	r3, #16513	; 0x4081
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	4619      	mov	r1, r3
 8000a04:	4824      	ldr	r0, [pc, #144]	; (8000a98 <MX_GPIO_Init+0x258>)
 8000a06:	f000 ff57 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1c:	230b      	movs	r3, #11
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	481c      	ldr	r0, [pc, #112]	; (8000a98 <MX_GPIO_Init+0x258>)
 8000a28:	f000 ff46 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a2c:	2340      	movs	r3, #64	; 0x40
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	4816      	ldr	r0, [pc, #88]	; (8000a9c <MX_GPIO_Init+0x25c>)
 8000a44:	f000 ff38 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4810      	ldr	r0, [pc, #64]	; (8000a9c <MX_GPIO_Init+0x25c>)
 8000a5c:	f000 ff2c 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a60:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a72:	230b      	movs	r3, #11
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4807      	ldr	r0, [pc, #28]	; (8000a9c <MX_GPIO_Init+0x25c>)
 8000a7e:	f000 ff1b 	bl	80018b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	bf00      	nop
 8000a84:	3738      	adds	r7, #56	; 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40020800 	.word	0x40020800
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40021800 	.word	0x40021800
 8000aa0:	40021400 	.word	0x40021400

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x44>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_MspInit+0x44>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x44>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x44>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0ae      	sub	sp, #184	; 0xb8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2290      	movs	r2, #144	; 0x90
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f008 ff83 	bl	8009a24 <memset>
  if(hi2s->Instance==SPI2)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a4f      	ldr	r2, [pc, #316]	; (8000c60 <HAL_I2S_MspInit+0x168>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	f040 8097 	bne.w	8000c58 <HAL_I2S_MspInit+0x160>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 197;
 8000b2a:	23c5      	movs	r3, #197	; 0xc5
 8000b2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 f99a 	bl	8003e80 <HAL_RCCEx_PeriphCLKConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_I2S_MspInit+0x5e>
    {
      Error_Handler();
 8000b52:	f7ff ffa7 	bl	8000aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b56:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <HAL_I2S_MspInit+0x16c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a42      	ldr	r2, [pc, #264]	; (8000c64 <HAL_I2S_MspInit+0x16c>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b40      	ldr	r3, [pc, #256]	; (8000c64 <HAL_I2S_MspInit+0x16c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b3d      	ldr	r3, [pc, #244]	; (8000c64 <HAL_I2S_MspInit+0x16c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a3c      	ldr	r2, [pc, #240]	; (8000c64 <HAL_I2S_MspInit+0x16c>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <HAL_I2S_MspInit+0x16c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <HAL_I2S_MspInit+0x16c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a36      	ldr	r2, [pc, #216]	; (8000c64 <HAL_I2S_MspInit+0x16c>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <HAL_I2S_MspInit+0x16c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000b9e:	2348      	movs	r3, #72	; 0x48
 8000ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4829      	ldr	r0, [pc, #164]	; (8000c68 <HAL_I2S_MspInit+0x170>)
 8000bc4:	f000 fe78 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000bc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be2:	2305      	movs	r3, #5
 8000be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bec:	4619      	mov	r1, r3
 8000bee:	481f      	ldr	r0, [pc, #124]	; (8000c6c <HAL_I2S_MspInit+0x174>)
 8000bf0:	f000 fe62 	bl	80018b8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <HAL_I2S_MspInit+0x178>)
 8000bf6:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <HAL_I2S_MspInit+0x17c>)
 8000bf8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <HAL_I2S_MspInit+0x178>)
 8000bfc:	f04f 5290 	mov.w	r2, #301989888	; 0x12000000
 8000c00:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <HAL_I2S_MspInit+0x178>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <HAL_I2S_MspInit+0x178>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_I2S_MspInit+0x178>)
 8000c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c14:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <HAL_I2S_MspInit+0x178>)
 8000c18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c1c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_I2S_MspInit+0x178>)
 8000c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c24:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_I2S_MspInit+0x178>)
 8000c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <HAL_I2S_MspInit+0x178>)
 8000c30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c34:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_I2S_MspInit+0x178>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <HAL_I2S_MspInit+0x178>)
 8000c3e:	f000 fb51 	bl	80012e4 <HAL_DMA_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_I2S_MspInit+0x154>
    {
      Error_Handler();
 8000c48:	f7ff ff2c 	bl	8000aa4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <HAL_I2S_MspInit+0x178>)
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
 8000c52:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_I2S_MspInit+0x178>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	37b8      	adds	r7, #184	; 0xb8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40003800 	.word	0x40003800
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	200001e0 	.word	0x200001e0
 8000c74:	40026028 	.word	0x40026028

08000c78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a3c      	ldr	r2, [pc, #240]	; (8000d88 <HAL_SPI_MspInit+0x110>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d145      	bne.n	8000d26 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c9a:	4b3c      	ldr	r3, [pc, #240]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a3b      	ldr	r2, [pc, #236]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b39      	ldr	r3, [pc, #228]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b36      	ldr	r3, [pc, #216]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a35      	ldr	r2, [pc, #212]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	4b30      	ldr	r3, [pc, #192]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a2f      	ldr	r2, [pc, #188]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4824      	ldr	r0, [pc, #144]	; (8000d90 <HAL_SPI_MspInit+0x118>)
 8000cfe:	f000 fddb 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d14:	2306      	movs	r3, #6
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	481d      	ldr	r0, [pc, #116]	; (8000d94 <HAL_SPI_MspInit+0x11c>)
 8000d20:	f000 fdca 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000d24:	e02c      	b.n	8000d80 <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI4)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <HAL_SPI_MspInit+0x120>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d127      	bne.n	8000d80 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000d36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000d4e:	f043 0310 	orr.w	r3, r3, #16
 8000d52:	6313      	str	r3, [r2, #48]	; 0x30
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <HAL_SPI_MspInit+0x114>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	f003 0310 	and.w	r3, r3, #16
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000d60:	2364      	movs	r3, #100	; 0x64
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000d70:	2305      	movs	r3, #5
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4808      	ldr	r0, [pc, #32]	; (8000d9c <HAL_SPI_MspInit+0x124>)
 8000d7c:	f000 fd9c 	bl	80018b8 <HAL_GPIO_Init>
}
 8000d80:	bf00      	nop
 8000d82:	3730      	adds	r7, #48	; 0x30
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40003c00 	.word	0x40003c00
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400
 8000d94:	40020800 	.word	0x40020800
 8000d98:	40013400 	.word	0x40013400
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0ae      	sub	sp, #184	; 0xb8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2290      	movs	r2, #144	; 0x90
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f008 fe2f 	bl	8009a24 <memset>
  if(huart->Instance==USART3)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <HAL_UART_MspInit+0xb4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d13c      	bne.n	8000e4a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4618      	mov	r0, r3
 8000de0:	f003 f84e 	bl	8003e80 <HAL_RCCEx_PeriphCLKConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dea:	f7ff fe5b 	bl	8000aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_UART_MspInit+0xb8>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <HAL_UART_MspInit+0xb8>)
 8000df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_UART_MspInit+0xb8>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0xb8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <HAL_UART_MspInit+0xb8>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_UART_MspInit+0xb8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e38:	2307      	movs	r3, #7
 8000e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <HAL_UART_MspInit+0xbc>)
 8000e46:	f000 fd37 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	37b8      	adds	r7, #184	; 0xb8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40004800 	.word	0x40004800
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020c00 	.word	0x40020c00

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 f8c4 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <DMA1_Stream1_IRQHandler+0x10>)
 8000eba:	f000 fac1 	bl	8001440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200001e0 	.word	0x200001e0

08000ec8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <OTG_FS_IRQHandler+0x10>)
 8000ece:	f001 f931 	bl	8002134 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000189c 	.word	0x2000189c

08000edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee4:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <_sbrk+0x5c>)
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <_sbrk+0x60>)
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <_sbrk+0x64>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <_sbrk+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f0c:	f008 fda2 	bl	8009a54 <__errno>
 8000f10:	4603      	mov	r3, r0
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <_sbrk+0x64>)
 8000f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20080000 	.word	0x20080000
 8000f3c:	00000400 	.word	0x00000400
 8000f40:	200003b4 	.word	0x200003b4
 8000f44:	20001ef0 	.word	0x20001ef0

08000f48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f72:	490e      	ldr	r1, [pc, #56]	; (8000fac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f88:	4c0b      	ldr	r4, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f96:	f7ff ffd7 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f008 fd61 	bl	8009a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9e:	f7ff fac9 	bl	8000534 <main>
  bx  lr    
 8000fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000fb0:	08009bd4 	.word	0x08009bd4
  ldr r2, =_sbss
 8000fb4:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000fb8:	20001eec 	.word	0x20001eec

08000fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC_IRQHandler>

08000fbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f000 f94c 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 f805 	bl	8000fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fce:	f7ff fd6f 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x54>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x58>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f967 	bl	80012ca <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e00e      	b.n	8001024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d80a      	bhi.n	8001022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f000 f92f 	bl	8001276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <HAL_InitTick+0x5c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000028 	.word	0x20000028
 8001030:	20000030 	.word	0x20000030
 8001034:	2000002c 	.word	0x2000002c

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000030 	.word	0x20000030
 800105c:	200003b8 	.word	0x200003b8

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200003b8 	.word	0x200003b8

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffde 	bl	8001060 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000030 	.word	0x20000030

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <__NVIC_SetPriorityGrouping+0x40>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x40>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00
 8001104:	05fa0000 	.word	0x05fa0000

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff3e 	bl	8001108 <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ff8e 	bl	80011b4 <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff5d 	bl	8001160 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff31 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa2 	bl	800121c <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff feb6 	bl	8001060 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e099      	b.n	8001434 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2202      	movs	r2, #2
 8001304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001320:	e00f      	b.n	8001342 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001322:	f7ff fe9d 	bl	8001060 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b05      	cmp	r3, #5
 800132e:	d908      	bls.n	8001342 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2220      	movs	r2, #32
 8001334:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2203      	movs	r2, #3
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e078      	b.n	8001434 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1e8      	bne.n	8001322 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	4b38      	ldr	r3, [pc, #224]	; (800143c <HAL_DMA_Init+0x158>)
 800135c:	4013      	ands	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800136e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4313      	orrs	r3, r2
 8001392:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	2b04      	cmp	r3, #4
 800139a:	d107      	bne.n	80013ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4313      	orrs	r3, r2
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f023 0307 	bic.w	r3, r3, #7
 80013c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d117      	bne.n	8001406 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	4313      	orrs	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00e      	beq.n	8001406 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f9e9 	bl	80017c0 <DMA_CheckFifoParam>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2240      	movs	r2, #64	; 0x40
 80013f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001402:	2301      	movs	r3, #1
 8001404:	e016      	b.n	8001434 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f9a0 	bl	8001754 <DMA_CalcBaseAndBitshift>
 8001414:	4603      	mov	r3, r0
 8001416:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141c:	223f      	movs	r2, #63	; 0x3f
 800141e:	409a      	lsls	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	e010803f 	.word	0xe010803f

08001440 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800144c:	4b8e      	ldr	r3, [pc, #568]	; (8001688 <HAL_DMA_IRQHandler+0x248>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a8e      	ldr	r2, [pc, #568]	; (800168c <HAL_DMA_IRQHandler+0x24c>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0a9b      	lsrs	r3, r3, #10
 8001458:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146a:	2208      	movs	r2, #8
 800146c:	409a      	lsls	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d01a      	beq.n	80014ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0204 	bic.w	r2, r2, #4
 8001492:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001498:	2208      	movs	r2, #8
 800149a:	409a      	lsls	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a4:	f043 0201 	orr.w	r2, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b0:	2201      	movs	r2, #1
 80014b2:	409a      	lsls	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d012      	beq.n	80014e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ce:	2201      	movs	r2, #1
 80014d0:	409a      	lsls	r2, r3
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014da:	f043 0202 	orr.w	r2, r3, #2
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e6:	2204      	movs	r2, #4
 80014e8:	409a      	lsls	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d012      	beq.n	8001518 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00b      	beq.n	8001518 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001504:	2204      	movs	r2, #4
 8001506:	409a      	lsls	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001510:	f043 0204 	orr.w	r2, r3, #4
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151c:	2210      	movs	r2, #16
 800151e:	409a      	lsls	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d043      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d03c      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153a:	2210      	movs	r2, #16
 800153c:	409a      	lsls	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d018      	beq.n	8001582 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d108      	bne.n	8001570 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	2b00      	cmp	r3, #0
 8001564:	d024      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	4798      	blx	r3
 800156e:	e01f      	b.n	80015b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001574:	2b00      	cmp	r3, #0
 8001576:	d01b      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	4798      	blx	r3
 8001580:	e016      	b.n	80015b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d107      	bne.n	80015a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0208 	bic.w	r2, r2, #8
 800159e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	2220      	movs	r2, #32
 80015b6:	409a      	lsls	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 808f 	beq.w	80016e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 8087 	beq.w	80016e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d6:	2220      	movs	r2, #32
 80015d8:	409a      	lsls	r2, r3
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d136      	bne.n	8001658 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0216 	bic.w	r2, r2, #22
 80015f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	695a      	ldr	r2, [r3, #20]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001608:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	2b00      	cmp	r3, #0
 8001610:	d103      	bne.n	800161a <HAL_DMA_IRQHandler+0x1da>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0208 	bic.w	r2, r2, #8
 8001628:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162e:	223f      	movs	r2, #63	; 0x3f
 8001630:	409a      	lsls	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164a:	2b00      	cmp	r3, #0
 800164c:	d07e      	beq.n	800174c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	4798      	blx	r3
        }
        return;
 8001656:	e079      	b.n	800174c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d01d      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10d      	bne.n	8001690 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	2b00      	cmp	r3, #0
 800167a:	d031      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	4798      	blx	r3
 8001684:	e02c      	b.n	80016e0 <HAL_DMA_IRQHandler+0x2a0>
 8001686:	bf00      	nop
 8001688:	20000028 	.word	0x20000028
 800168c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001694:	2b00      	cmp	r3, #0
 8001696:	d023      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	4798      	blx	r3
 80016a0:	e01e      	b.n	80016e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10f      	bne.n	80016d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0210 	bic.w	r2, r2, #16
 80016be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d032      	beq.n	800174e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d022      	beq.n	800173a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2205      	movs	r2, #5
 80016f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0201 	bic.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	3301      	adds	r3, #1
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	429a      	cmp	r2, r3
 8001716:	d307      	bcc.n	8001728 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f2      	bne.n	800170c <HAL_DMA_IRQHandler+0x2cc>
 8001726:	e000      	b.n	800172a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001728:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	2b00      	cmp	r3, #0
 8001740:	d005      	beq.n	800174e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
 800174a:	e000      	b.n	800174e <HAL_DMA_IRQHandler+0x30e>
        return;
 800174c:	bf00      	nop
    }
  }
}
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	3b10      	subs	r3, #16
 8001764:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <DMA_CalcBaseAndBitshift+0x60>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <DMA_CalcBaseAndBitshift+0x64>)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d908      	bls.n	8001794 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <DMA_CalcBaseAndBitshift+0x68>)
 800178a:	4013      	ands	r3, r2
 800178c:	1d1a      	adds	r2, r3, #4
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	659a      	str	r2, [r3, #88]	; 0x58
 8001792:	e006      	b.n	80017a2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <DMA_CalcBaseAndBitshift+0x68>)
 800179c:	4013      	ands	r3, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	aaaaaaab 	.word	0xaaaaaaab
 80017b8:	08009bbc 	.word	0x08009bbc
 80017bc:	fffffc00 	.word	0xfffffc00

080017c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d11f      	bne.n	800181a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d856      	bhi.n	800188e <DMA_CheckFifoParam+0xce>
 80017e0:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <DMA_CheckFifoParam+0x28>)
 80017e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e6:	bf00      	nop
 80017e8:	080017f9 	.word	0x080017f9
 80017ec:	0800180b 	.word	0x0800180b
 80017f0:	080017f9 	.word	0x080017f9
 80017f4:	0800188f 	.word	0x0800188f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d046      	beq.n	8001892 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001808:	e043      	b.n	8001892 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001812:	d140      	bne.n	8001896 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001818:	e03d      	b.n	8001896 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001822:	d121      	bne.n	8001868 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d837      	bhi.n	800189a <DMA_CheckFifoParam+0xda>
 800182a:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <DMA_CheckFifoParam+0x70>)
 800182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001830:	08001841 	.word	0x08001841
 8001834:	08001847 	.word	0x08001847
 8001838:	08001841 	.word	0x08001841
 800183c:	08001859 	.word	0x08001859
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
      break;
 8001844:	e030      	b.n	80018a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d025      	beq.n	800189e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001856:	e022      	b.n	800189e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001860:	d11f      	bne.n	80018a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001866:	e01c      	b.n	80018a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d903      	bls.n	8001876 <DMA_CheckFifoParam+0xb6>
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d003      	beq.n	800187c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001874:	e018      	b.n	80018a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	73fb      	strb	r3, [r7, #15]
      break;
 800187a:	e015      	b.n	80018a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00e      	beq.n	80018a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
      break;
 800188c:	e00b      	b.n	80018a6 <DMA_CheckFifoParam+0xe6>
      break;
 800188e:	bf00      	nop
 8001890:	e00a      	b.n	80018a8 <DMA_CheckFifoParam+0xe8>
      break;
 8001892:	bf00      	nop
 8001894:	e008      	b.n	80018a8 <DMA_CheckFifoParam+0xe8>
      break;
 8001896:	bf00      	nop
 8001898:	e006      	b.n	80018a8 <DMA_CheckFifoParam+0xe8>
      break;
 800189a:	bf00      	nop
 800189c:	e004      	b.n	80018a8 <DMA_CheckFifoParam+0xe8>
      break;
 800189e:	bf00      	nop
 80018a0:	e002      	b.n	80018a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80018a2:	bf00      	nop
 80018a4:	e000      	b.n	80018a8 <DMA_CheckFifoParam+0xe8>
      break;
 80018a6:	bf00      	nop
    }
  } 
  
  return status; 
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop

080018b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	e175      	b.n	8001bc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018d8:	2201      	movs	r2, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	f040 8164 	bne.w	8001bbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d005      	beq.n	800190e <HAL_GPIO_Init+0x56>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d130      	bne.n	8001970 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	2203      	movs	r2, #3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001944:	2201      	movs	r2, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 0201 	and.w	r2, r3, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b03      	cmp	r3, #3
 800197a:	d017      	beq.n	80019ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d123      	bne.n	8001a00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	08da      	lsrs	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3208      	adds	r2, #8
 80019fa:	69b9      	ldr	r1, [r7, #24]
 80019fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80be 	beq.w	8001bbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	4b66      	ldr	r3, [pc, #408]	; (8001bdc <HAL_GPIO_Init+0x324>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a65      	ldr	r2, [pc, #404]	; (8001bdc <HAL_GPIO_Init+0x324>)
 8001a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b63      	ldr	r3, [pc, #396]	; (8001bdc <HAL_GPIO_Init+0x324>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a5a:	4a61      	ldr	r2, [pc, #388]	; (8001be0 <HAL_GPIO_Init+0x328>)
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a58      	ldr	r2, [pc, #352]	; (8001be4 <HAL_GPIO_Init+0x32c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d037      	beq.n	8001af6 <HAL_GPIO_Init+0x23e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a57      	ldr	r2, [pc, #348]	; (8001be8 <HAL_GPIO_Init+0x330>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d031      	beq.n	8001af2 <HAL_GPIO_Init+0x23a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a56      	ldr	r2, [pc, #344]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d02b      	beq.n	8001aee <HAL_GPIO_Init+0x236>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a55      	ldr	r2, [pc, #340]	; (8001bf0 <HAL_GPIO_Init+0x338>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d025      	beq.n	8001aea <HAL_GPIO_Init+0x232>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a54      	ldr	r2, [pc, #336]	; (8001bf4 <HAL_GPIO_Init+0x33c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d01f      	beq.n	8001ae6 <HAL_GPIO_Init+0x22e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a53      	ldr	r2, [pc, #332]	; (8001bf8 <HAL_GPIO_Init+0x340>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d019      	beq.n	8001ae2 <HAL_GPIO_Init+0x22a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a52      	ldr	r2, [pc, #328]	; (8001bfc <HAL_GPIO_Init+0x344>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_GPIO_Init+0x226>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a51      	ldr	r2, [pc, #324]	; (8001c00 <HAL_GPIO_Init+0x348>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00d      	beq.n	8001ada <HAL_GPIO_Init+0x222>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a50      	ldr	r2, [pc, #320]	; (8001c04 <HAL_GPIO_Init+0x34c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d007      	beq.n	8001ad6 <HAL_GPIO_Init+0x21e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4f      	ldr	r2, [pc, #316]	; (8001c08 <HAL_GPIO_Init+0x350>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_GPIO_Init+0x21a>
 8001ace:	2309      	movs	r3, #9
 8001ad0:	e012      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	e010      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001ad6:	2308      	movs	r3, #8
 8001ad8:	e00e      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001ada:	2307      	movs	r3, #7
 8001adc:	e00c      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001ade:	2306      	movs	r3, #6
 8001ae0:	e00a      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	e008      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001aea:	2303      	movs	r3, #3
 8001aec:	e004      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x240>
 8001af6:	2300      	movs	r3, #0
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	f002 0203 	and.w	r2, r2, #3
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4093      	lsls	r3, r2
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b08:	4935      	ldr	r1, [pc, #212]	; (8001be0 <HAL_GPIO_Init+0x328>)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b16:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b3a:	4a34      	ldr	r2, [pc, #208]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b40:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b64:	4a29      	ldr	r2, [pc, #164]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <HAL_GPIO_Init+0x354>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	2b0f      	cmp	r3, #15
 8001bc8:	f67f ae86 	bls.w	80018d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40013800 	.word	0x40013800
 8001be4:	40020000 	.word	0x40020000
 8001be8:	40020400 	.word	0x40020400
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	40020c00 	.word	0x40020c00
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40021400 	.word	0x40021400
 8001bfc:	40021800 	.word	0x40021800
 8001c00:	40021c00 	.word	0x40021c00
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40022400 	.word	0x40022400
 8001c0c:	40013c00 	.word	0x40013c00

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c2c:	e003      	b.n	8001c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c2e:	887b      	ldrh	r3, [r7, #2]
 8001c30:	041a      	lsls	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	619a      	str	r2, [r3, #24]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0d2      	b.n	8001dfc <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7fe ff44 	bl	8000af8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69d9      	ldr	r1, [r3, #28]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4b60      	ldr	r3, [pc, #384]	; (8001e04 <HAL_I2S_Init+0x1c0>)
 8001c84:	400b      	ands	r3, r1
 8001c86:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d067      	beq.n	8001d68 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001ca0:	2310      	movs	r3, #16
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	e001      	b.n	8001caa <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	d802      	bhi.n	8001cb8 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d102      	bne.n	8001cc6 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8001cc0:	4b51      	ldr	r3, [pc, #324]	; (8001e08 <HAL_I2S_Init+0x1c4>)
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e003      	b.n	8001cce <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f8a2 	bl	8001e10 <I2S_GetClockFreq>
 8001ccc:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd6:	d125      	bne.n	8001d24 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d010      	beq.n	8001d02 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	3305      	adds	r3, #5
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	e01f      	b.n	8001d42 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	461a      	mov	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	3305      	adds	r3, #5
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	e00e      	b.n	8001d42 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	461a      	mov	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	3305      	adds	r3, #5
 8001d40:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4a31      	ldr	r2, [pc, #196]	; (8001e0c <HAL_I2S_Init+0x1c8>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	08db      	lsrs	r3, r3, #3
 8001d4c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	e003      	b.n	8001d70 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d902      	bls.n	8001d7c <HAL_I2S_Init+0x138>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	2bff      	cmp	r3, #255	; 0xff
 8001d7a:	d907      	bls.n	8001d8c <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d80:	f043 0210 	orr.w	r2, r3, #16
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e037      	b.n	8001dfc <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	ea42 0103 	orr.w	r1, r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_I2S_Init+0x1c0>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6851      	ldr	r1, [r2, #4]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6892      	ldr	r2, [r2, #8]
 8001db2:	4311      	orrs	r1, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	68d2      	ldr	r2, [r2, #12]
 8001db8:	4311      	orrs	r1, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6992      	ldr	r2, [r2, #24]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dca:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b30      	cmp	r3, #48	; 0x30
 8001dd2:	d003      	beq.n	8001ddc <HAL_I2S_Init+0x198>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2bb0      	cmp	r3, #176	; 0xb0
 8001dda:	d107      	bne.n	8001dec <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001dea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	fffff040 	.word	0xfffff040
 8001e08:	00bb8000 	.word	0x00bb8000
 8001e0c:	cccccccd 	.word	0xcccccccd

08001e10 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d02d      	beq.n	8001e7c <I2S_GetClockFreq+0x6c>
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d12e      	bne.n	8001e82 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001e24:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <I2S_GetClockFreq+0x88>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d108      	bne.n	8001e42 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <I2S_GetClockFreq+0x88>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e38:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <I2S_GetClockFreq+0x8c>)
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	e007      	b.n	8001e52 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <I2S_GetClockFreq+0x88>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e4a:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <I2S_GetClockFreq+0x90>)
 8001e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <I2S_GetClockFreq+0x88>)
 8001e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e58:	0f1b      	lsrs	r3, r3, #28
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8001e60:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <I2S_GetClockFreq+0x88>)
 8001e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e66:	099b      	lsrs	r3, r3, #6
 8001e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	fb03 f202 	mul.w	r2, r3, r2
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	613b      	str	r3, [r7, #16]

      break;
 8001e7a:	e005      	b.n	8001e88 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <I2S_GetClockFreq+0x94>)
 8001e7e:	613b      	str	r3, [r7, #16]
      break;
 8001e80:	e002      	b.n	8001e88 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
      break;
 8001e86:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8001e88:	693b      	ldr	r3, [r7, #16]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	00f42400 	.word	0x00f42400
 8001ea0:	007a1200 	.word	0x007a1200
 8001ea4:	00bb8000 	.word	0x00bb8000

08001ea8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eaa:	b08f      	sub	sp, #60	; 0x3c
 8001eac:	af0a      	add	r7, sp, #40	; 0x28
 8001eae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e116      	b.n	80020e8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d106      	bne.n	8001eda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f006 fef9 	bl	8008ccc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2203      	movs	r2, #3
 8001ede:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 fa08 	bl	800530e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	687e      	ldr	r6, [r7, #4]
 8001f06:	466d      	mov	r5, sp
 8001f08:	f106 0410 	add.w	r4, r6, #16
 8001f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f18:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f1c:	1d33      	adds	r3, r6, #4
 8001f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f20:	6838      	ldr	r0, [r7, #0]
 8001f22:	f003 f8e9 	bl	80050f8 <USB_CoreInit>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0d7      	b.n	80020e8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 f9f6 	bl	8005330 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e04a      	b.n	8001fe0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	333d      	adds	r3, #61	; 0x3d
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	333c      	adds	r3, #60	; 0x3c
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f72:	7bfa      	ldrb	r2, [r7, #15]
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	b298      	uxth	r0, r3
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	3344      	adds	r3, #68	; 0x44
 8001f86:	4602      	mov	r2, r0
 8001f88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	3340      	adds	r3, #64	; 0x40
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	3348      	adds	r3, #72	; 0x48
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	334c      	adds	r3, #76	; 0x4c
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3354      	adds	r3, #84	; 0x54
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d3af      	bcc.n	8001f4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	e044      	b.n	800207a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	3301      	adds	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	d3b5      	bcc.n	8001ff0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	687e      	ldr	r6, [r7, #4]
 800208c:	466d      	mov	r5, sp
 800208e:	f106 0410 	add.w	r4, r6, #16
 8002092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800209e:	e885 0003 	stmia.w	r5, {r0, r1}
 80020a2:	1d33      	adds	r3, r6, #4
 80020a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a6:	6838      	ldr	r0, [r7, #0]
 80020a8:	f003 f98e 	bl	80053c8 <USB_DevInit>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2202      	movs	r2, #2
 80020b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e014      	b.n	80020e8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d102      	bne.n	80020dc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f001 f97a 	bl	80033d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f004 fadc 	bl	800669e <USB_DevDisconnect>

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_PCD_Start+0x16>
 8002102:	2302      	movs	r3, #2
 8002104:	e012      	b.n	800212c <HAL_PCD_Start+0x3c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f003 f8ea 	bl	80052ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f004 fa9d 	bl	800665c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b08d      	sub	sp, #52	; 0x34
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f004 fb5b 	bl	8006806 <USB_GetMode>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 84b7 	bne.w	8002ac6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f004 fabf 	bl	80066e0 <USB_ReadInterrupts>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 84ad 	beq.w	8002ac4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f004 faac 	bl	80066e0 <USB_ReadInterrupts>
 8002188:	4603      	mov	r3, r0
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b02      	cmp	r3, #2
 8002190:	d107      	bne.n	80021a2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f002 0202 	and.w	r2, r2, #2
 80021a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 fa9a 	bl	80066e0 <USB_ReadInterrupts>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d161      	bne.n	800227a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699a      	ldr	r2, [r3, #24]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0210 	bic.w	r2, r2, #16
 80021c4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	f003 020f 	and.w	r2, r3, #15
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	3304      	adds	r3, #4
 80021e4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	0c5b      	lsrs	r3, r3, #17
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d124      	bne.n	800223c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d035      	beq.n	800226a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800220c:	b29b      	uxth	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	6a38      	ldr	r0, [r7, #32]
 8002212:	f004 f8d1 	bl	80063b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002222:	441a      	add	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	6a1a      	ldr	r2, [r3, #32]
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002234:	441a      	add	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	621a      	str	r2, [r3, #32]
 800223a:	e016      	b.n	800226a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	0c5b      	lsrs	r3, r3, #17
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	2b06      	cmp	r3, #6
 8002246:	d110      	bne.n	800226a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800224e:	2208      	movs	r2, #8
 8002250:	4619      	mov	r1, r3
 8002252:	6a38      	ldr	r0, [r7, #32]
 8002254:	f004 f8b0 	bl	80063b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002264:	441a      	add	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0210 	orr.w	r2, r2, #16
 8002278:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f004 fa2e 	bl	80066e0 <USB_ReadInterrupts>
 8002284:	4603      	mov	r3, r0
 8002286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800228a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800228e:	f040 80a7 	bne.w	80023e0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f004 fa33 	bl	8006706 <USB_ReadDevAllOutEpInterrupt>
 80022a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022a2:	e099      	b.n	80023d8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 808e 	beq.w	80023cc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 fa57 	bl	800676e <USB_ReadDevOutEPInterrupt>
 80022c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00c      	beq.n	80022e6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d8:	461a      	mov	r2, r3
 80022da:	2301      	movs	r3, #1
 80022dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 feef 	bl	80030c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00c      	beq.n	800230a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fc:	461a      	mov	r2, r3
 80022fe:	2308      	movs	r3, #8
 8002300:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 ffc5 	bl	8003294 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002320:	461a      	mov	r2, r3
 8002322:	2310      	movs	r3, #16
 8002324:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d030      	beq.n	8002392 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002338:	2b80      	cmp	r3, #128	; 0x80
 800233a:	d109      	bne.n	8002350 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800234a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800234e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	3304      	adds	r3, #4
 8002364:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	78db      	ldrb	r3, [r3, #3]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d108      	bne.n	8002380 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2200      	movs	r2, #0
 8002372:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	b2db      	uxtb	r3, r3
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f006 fdda 	bl	8008f34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	4413      	add	r3, r2
 8002388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238c:	461a      	mov	r2, r3
 800238e:	2302      	movs	r3, #2
 8002390:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a8:	461a      	mov	r2, r3
 80023aa:	2320      	movs	r3, #32
 80023ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c4:	461a      	mov	r2, r3
 80023c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	3301      	adds	r3, #1
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	085b      	lsrs	r3, r3, #1
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f47f af62 	bne.w	80022a4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f004 f97b 	bl	80066e0 <USB_ReadInterrupts>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023f4:	f040 80db 	bne.w	80025ae <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f004 f99c 	bl	800673a <USB_ReadDevAllInEpInterrupt>
 8002402:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002408:	e0cd      	b.n	80025a6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80c2 	beq.w	800259a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f004 f9c2 	bl	80067aa <USB_ReadDevInEPInterrupt>
 8002426:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d057      	beq.n	80024e2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	2201      	movs	r2, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	43db      	mvns	r3, r3
 800244c:	69f9      	ldr	r1, [r7, #28]
 800244e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002452:	4013      	ands	r3, r2
 8002454:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	4413      	add	r3, r2
 800245e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002462:	461a      	mov	r2, r3
 8002464:	2301      	movs	r3, #1
 8002466:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d132      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	334c      	adds	r3, #76	; 0x4c
 8002480:	6819      	ldr	r1, [r3, #0]
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4403      	add	r3, r0
 8002490:	3348      	adds	r3, #72	; 0x48
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4419      	add	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4403      	add	r3, r0
 80024a4:	334c      	adds	r3, #76	; 0x4c
 80024a6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d113      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x3a2>
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b2:	4613      	mov	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	3354      	adds	r3, #84	; 0x54
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d108      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024ce:	461a      	mov	r2, r3
 80024d0:	2101      	movs	r1, #1
 80024d2:	f004 f9cb 	bl	800686c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	4619      	mov	r1, r3
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f006 fca4 	bl	8008e2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024f8:	461a      	mov	r2, r3
 80024fa:	2308      	movs	r3, #8
 80024fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002514:	461a      	mov	r2, r3
 8002516:	2310      	movs	r3, #16
 8002518:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	4413      	add	r3, r2
 800252c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002530:	461a      	mov	r2, r3
 8002532:	2340      	movs	r3, #64	; 0x40
 8002534:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d023      	beq.n	8002588 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002542:	6a38      	ldr	r0, [r7, #32]
 8002544:	f003 f89e 	bl	8005684 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	3338      	adds	r3, #56	; 0x38
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	3304      	adds	r3, #4
 800255a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	78db      	ldrb	r3, [r3, #3]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d108      	bne.n	8002576 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2200      	movs	r2, #0
 8002568:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4619      	mov	r1, r3
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f006 fcf1 	bl	8008f58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002582:	461a      	mov	r2, r3
 8002584:	2302      	movs	r3, #2
 8002586:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 fd08 	bl	8002faa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	3301      	adds	r3, #1
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f47f af2e 	bne.w	800240a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f004 f894 	bl	80066e0 <USB_ReadInterrupts>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025c2:	d122      	bne.n	800260a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d108      	bne.n	80025f4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025ea:	2100      	movs	r1, #0
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f006 fe6b 	bl	80092c8 <HAL_PCDEx_LPM_Callback>
 80025f2:	e002      	b.n	80025fa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f006 fc8f 	bl	8008f18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f004 f866 	bl	80066e0 <USB_ReadInterrupts>
 8002614:	4603      	mov	r3, r0
 8002616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800261e:	d112      	bne.n	8002646 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d102      	bne.n	8002636 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f006 fc4b 	bl	8008ecc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002644:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f004 f848 	bl	80066e0 <USB_ReadInterrupts>
 8002650:	4603      	mov	r3, r0
 8002652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800265a:	d121      	bne.n	80026a0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800266a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002672:	2b00      	cmp	r3, #0
 8002674:	d111      	bne.n	800269a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	f003 020f 	and.w	r2, r3, #15
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002690:	2101      	movs	r1, #1
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f006 fe18 	bl	80092c8 <HAL_PCDEx_LPM_Callback>
 8002698:	e002      	b.n	80026a0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f006 fc16 	bl	8008ecc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f004 f81b 	bl	80066e0 <USB_ReadInterrupts>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b4:	f040 80b7 	bne.w	8002826 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2110      	movs	r1, #16
 80026d2:	4618      	mov	r0, r3
 80026d4:	f002 ffd6 	bl	8005684 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d8:	2300      	movs	r3, #0
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026dc:	e046      	b.n	800276c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ea:	461a      	mov	r2, r3
 80026ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002702:	0151      	lsls	r1, r2, #5
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	440a      	add	r2, r1
 8002708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800270c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002710:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271e:	461a      	mov	r2, r3
 8002720:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002724:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	4413      	add	r3, r2
 800272e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002736:	0151      	lsls	r1, r2, #5
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	440a      	add	r2, r1
 800273c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002740:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002744:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002756:	0151      	lsls	r1, r2, #5
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	440a      	add	r2, r1
 800275c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002760:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002764:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	3301      	adds	r3, #1
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002772:	429a      	cmp	r2, r3
 8002774:	d3b3      	bcc.n	80026de <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002784:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002788:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	2b00      	cmp	r3, #0
 8002790:	d016      	beq.n	80027c0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027a2:	f043 030b 	orr.w	r3, r3, #11
 80027a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027b8:	f043 030b 	orr.w	r3, r3, #11
 80027bc:	6453      	str	r3, [r2, #68]	; 0x44
 80027be:	e015      	b.n	80027ec <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ce:	4619      	mov	r1, r3
 80027d0:	f242 032b 	movw	r3, #8235	; 0x202b
 80027d4:	4313      	orrs	r3, r2
 80027d6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e6:	f043 030b 	orr.w	r3, r3, #11
 80027ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002810:	461a      	mov	r2, r3
 8002812:	f004 f82b 	bl	800686c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f003 ff58 	bl	80066e0 <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283a:	d124      	bne.n	8002886 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f003 ffef 	bl	8006824 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f002 ff97 	bl	800577e <USB_GetDevSpeed>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681c      	ldr	r4, [r3, #0]
 800285c:	f001 fadc 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8002860:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	4620      	mov	r0, r4
 800286c:	f002 fc9c 	bl	80051a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f006 fb02 	bl	8008e7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002884:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f003 ff28 	bl	80066e0 <USB_ReadInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b08      	cmp	r3, #8
 8002898:	d10a      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f006 fadf 	bl	8008e5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f002 0208 	and.w	r2, r2, #8
 80028ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 ff13 	bl	80066e0 <USB_ReadInterrupts>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c0:	2b80      	cmp	r3, #128	; 0x80
 80028c2:	d122      	bne.n	800290a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028d0:	2301      	movs	r3, #1
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
 80028d4:	e014      	b.n	8002900 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d105      	bne.n	80028fa <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fb27 	bl	8002f48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	3301      	adds	r3, #1
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002906:	429a      	cmp	r2, r3
 8002908:	d3e5      	bcc.n	80028d6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fee6 	bl	80066e0 <USB_ReadInterrupts>
 8002914:	4603      	mov	r3, r0
 8002916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800291e:	d13b      	bne.n	8002998 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002920:	2301      	movs	r3, #1
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
 8002924:	e02b      	b.n	800297e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	4413      	add	r3, r2
 800292e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	3340      	adds	r3, #64	; 0x40
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d115      	bne.n	8002978 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800294c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800294e:	2b00      	cmp	r3, #0
 8002950:	da12      	bge.n	8002978 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002956:	4613      	mov	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	333f      	adds	r3, #63	; 0x3f
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800296e:	b2db      	uxtb	r3, r3
 8002970:	4619      	mov	r1, r3
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fae8 	bl	8002f48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	3301      	adds	r3, #1
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002984:	429a      	cmp	r2, r3
 8002986:	d3ce      	bcc.n	8002926 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f003 fe9f 	bl	80066e0 <USB_ReadInterrupts>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029ac:	d155      	bne.n	8002a5a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ae:	2301      	movs	r3, #1
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
 80029b2:	e045      	b.n	8002a40 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d12e      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029de:	2b00      	cmp	r3, #0
 80029e0:	da2b      	bge.n	8002a3a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80029ee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d121      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a36:	6053      	str	r3, [r2, #4]
            break;
 8002a38:	e007      	b.n	8002a4a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d3b4      	bcc.n	80029b4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f003 fe3e 	bl	80066e0 <USB_ReadInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d10a      	bne.n	8002a86 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f006 fa83 	bl	8008f7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f003 fe28 	bl	80066e0 <USB_ReadInterrupts>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d115      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f006 fa73 	bl	8008f98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	e000      	b.n	8002ac6 <HAL_PCD_IRQHandler+0x992>
      return;
 8002ac4:	bf00      	nop
    }
  }
}
 8002ac6:	3734      	adds	r7, #52	; 0x34
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd90      	pop	{r4, r7, pc}

08002acc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_PCD_SetAddress+0x1a>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e013      	b.n	8002b0e <HAL_PCD_SetAddress+0x42>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 fd86 	bl	8006610 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	4608      	mov	r0, r1
 8002b20:	4611      	mov	r1, r2
 8002b22:	461a      	mov	r2, r3
 8002b24:	4603      	mov	r3, r0
 8002b26:	70fb      	strb	r3, [r7, #3]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	803b      	strh	r3, [r7, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	da0f      	bge.n	8002b5c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	3338      	adds	r3, #56	; 0x38
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	705a      	strb	r2, [r3, #1]
 8002b5a:	e00f      	b.n	8002b7c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	3304      	adds	r3, #4
 8002b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b88:	883a      	ldrh	r2, [r7, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	78ba      	ldrb	r2, [r7, #2]
 8002b92:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	785b      	ldrb	r3, [r3, #1]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d004      	beq.n	8002ba6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ba6:	78bb      	ldrb	r3, [r7, #2]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d102      	bne.n	8002bb2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_PCD_EP_Open+0xaa>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e00e      	b.n	8002bde <HAL_PCD_EP_Open+0xc8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68f9      	ldr	r1, [r7, #12]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f002 fdfa 	bl	80057c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002bdc:	7afb      	ldrb	r3, [r7, #11]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	da0f      	bge.n	8002c1a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	f003 020f 	and.w	r2, r3, #15
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	3338      	adds	r3, #56	; 0x38
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3304      	adds	r3, #4
 8002c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	705a      	strb	r2, [r3, #1]
 8002c18:	e00f      	b.n	8002c3a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	f003 020f 	and.w	r2, r3, #15
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4413      	add	r3, r2
 8002c30:	3304      	adds	r3, #4
 8002c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_PCD_EP_Close+0x6e>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e00e      	b.n	8002c72 <HAL_PCD_EP_Close+0x8c>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68f9      	ldr	r1, [r7, #12]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f002 fe38 	bl	80058d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	460b      	mov	r3, r1
 8002c88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	7afb      	ldrb	r3, [r7, #11]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cbc:	7afb      	ldrb	r3, [r7, #11]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d102      	bne.n	8002cd6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cd6:	7afb      	ldrb	r3, [r7, #11]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	6979      	ldr	r1, [r7, #20]
 8002cee:	f003 f91f 	bl	8005f30 <USB_EP0StartXfer>
 8002cf2:	e008      	b.n	8002d06 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6979      	ldr	r1, [r7, #20]
 8002d02:	f002 fec5 	bl	8005a90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	f003 020f 	and.w	r2, r3, #15
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d50:	7afb      	ldrb	r3, [r7, #11]
 8002d52:	f003 020f 	and.w	r2, r3, #15
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	3338      	adds	r3, #56	; 0x38
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4413      	add	r3, r2
 8002d64:	3304      	adds	r3, #4
 8002d66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2200      	movs	r2, #0
 8002d78:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d80:	7afb      	ldrb	r3, [r7, #11]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d102      	bne.n	8002d9a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	6979      	ldr	r1, [r7, #20]
 8002db2:	f003 f8bd 	bl	8005f30 <USB_EP0StartXfer>
 8002db6:	e008      	b.n	8002dca <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	6979      	ldr	r1, [r7, #20]
 8002dc6:	f002 fe63 	bl	8005a90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	f003 020f 	and.w	r2, r3, #15
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d901      	bls.n	8002df2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e050      	b.n	8002e94 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	da0f      	bge.n	8002e1a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	f003 020f 	and.w	r2, r3, #15
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	3338      	adds	r3, #56	; 0x38
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3304      	adds	r3, #4
 8002e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	705a      	strb	r2, [r3, #1]
 8002e18:	e00d      	b.n	8002e36 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_PCD_EP_SetStall+0x82>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e01e      	b.n	8002e94 <HAL_PCD_EP_SetStall+0xc0>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68f9      	ldr	r1, [r7, #12]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f003 faff 	bl	8006468 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10a      	bne.n	8002e8a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	b2d9      	uxtb	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e84:	461a      	mov	r2, r3
 8002e86:	f003 fcf1 	bl	800686c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	f003 020f 	and.w	r2, r3, #15
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d901      	bls.n	8002eba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e042      	b.n	8002f40 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	da0f      	bge.n	8002ee2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 020f 	and.w	r2, r3, #15
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	3338      	adds	r3, #56	; 0x38
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	705a      	strb	r2, [r3, #1]
 8002ee0:	e00f      	b.n	8002f02 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	f003 020f 	and.w	r2, r3, #15
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3304      	adds	r3, #4
 8002efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_PCD_EP_ClrStall+0x86>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e00e      	b.n	8002f40 <HAL_PCD_EP_ClrStall+0xa4>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68f9      	ldr	r1, [r7, #12]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f003 fb07 	bl	8006544 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	da0c      	bge.n	8002f76 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f003 020f 	and.w	r2, r3, #15
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	3338      	adds	r3, #56	; 0x38
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	3304      	adds	r3, #4
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	e00c      	b.n	8002f90 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	f003 020f 	and.w	r2, r3, #15
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68f9      	ldr	r1, [r7, #12]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 f926 	bl	80061e8 <USB_EPStopXfer>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002fa0:	7afb      	ldrb	r3, [r7, #11]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b08a      	sub	sp, #40	; 0x28
 8002fae:	af02      	add	r7, sp, #8
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	3338      	adds	r3, #56	; 0x38
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	3304      	adds	r3, #4
 8002fd0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a1a      	ldr	r2, [r3, #32]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d901      	bls.n	8002fe2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e06c      	b.n	80030bc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d902      	bls.n	8002ffe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3303      	adds	r3, #3
 8003002:	089b      	lsrs	r3, r3, #2
 8003004:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003006:	e02b      	b.n	8003060 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	699a      	ldr	r2, [r3, #24]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	429a      	cmp	r2, r3
 800301c:	d902      	bls.n	8003024 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	3303      	adds	r3, #3
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6919      	ldr	r1, [r3, #16]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800303c:	b2db      	uxtb	r3, r3
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	4603      	mov	r3, r0
 8003042:	6978      	ldr	r0, [r7, #20]
 8003044:	f003 f97a 	bl	800633c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	441a      	add	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a1a      	ldr	r2, [r3, #32]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	441a      	add	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	429a      	cmp	r2, r3
 8003074:	d809      	bhi.n	800308a <PCD_WriteEmptyTxFifo+0xe0>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a1a      	ldr	r2, [r3, #32]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800307e:	429a      	cmp	r2, r3
 8003080:	d203      	bcs.n	800308a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1be      	bne.n	8003008 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	429a      	cmp	r2, r3
 8003094:	d811      	bhi.n	80030ba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	2201      	movs	r2, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	6939      	ldr	r1, [r7, #16]
 80030b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030b6:	4013      	ands	r3, r2
 80030b8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	333c      	adds	r3, #60	; 0x3c
 80030dc:	3304      	adds	r3, #4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d17b      	bne.n	80031f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d015      	beq.n	8003130 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	4a61      	ldr	r2, [pc, #388]	; (800328c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	f240 80b9 	bls.w	8003280 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80b3 	beq.w	8003280 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	4413      	add	r3, r2
 8003122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003126:	461a      	mov	r2, r3
 8003128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800312c:	6093      	str	r3, [r2, #8]
 800312e:	e0a7      	b.n	8003280 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003146:	461a      	mov	r2, r3
 8003148:	2320      	movs	r3, #32
 800314a:	6093      	str	r3, [r2, #8]
 800314c:	e098      	b.n	8003280 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 8093 	bne.w	8003280 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	4a4b      	ldr	r2, [pc, #300]	; (800328c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d90f      	bls.n	8003182 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	4413      	add	r3, r2
 8003174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003178:	461a      	mov	r2, r3
 800317a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317e:	6093      	str	r3, [r2, #8]
 8003180:	e07e      	b.n	8003280 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	3304      	adds	r3, #4
 8003196:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	0159      	lsls	r1, r3, #5
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	440b      	add	r3, r1
 80031a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ae:	1ad2      	subs	r2, r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d114      	bne.n	80031e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031cc:	461a      	mov	r2, r3
 80031ce:	2101      	movs	r1, #1
 80031d0:	f003 fb4c 	bl	800686c <USB_EP0_OutStart>
 80031d4:	e006      	b.n	80031e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	441a      	add	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f005 fe02 	bl	8008df4 <HAL_PCD_DataOutStageCallback>
 80031f0:	e046      	b.n	8003280 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	4a26      	ldr	r2, [pc, #152]	; (8003290 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d124      	bne.n	8003244 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003210:	461a      	mov	r2, r3
 8003212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003216:	6093      	str	r3, [r2, #8]
 8003218:	e032      	b.n	8003280 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003230:	461a      	mov	r2, r3
 8003232:	2320      	movs	r3, #32
 8003234:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f005 fdd9 	bl	8008df4 <HAL_PCD_DataOutStageCallback>
 8003242:	e01d      	b.n	8003280 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d114      	bne.n	8003274 <PCD_EP_OutXfrComplete_int+0x1b0>
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d108      	bne.n	8003274 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800326c:	461a      	mov	r2, r3
 800326e:	2100      	movs	r1, #0
 8003270:	f003 fafc 	bl	800686c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	4619      	mov	r1, r3
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f005 fdba 	bl	8008df4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	4f54300a 	.word	0x4f54300a
 8003290:	4f54310a 	.word	0x4f54310a

08003294 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	333c      	adds	r3, #60	; 0x3c
 80032ac:	3304      	adds	r3, #4
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a15      	ldr	r2, [pc, #84]	; (800331c <PCD_EP_OutSetupPacket_int+0x88>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d90e      	bls.n	80032e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d009      	beq.n	80032e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e0:	461a      	mov	r2, r3
 80032e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f005 fd71 	bl	8008dd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4a0a      	ldr	r2, [pc, #40]	; (800331c <PCD_EP_OutSetupPacket_int+0x88>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d90c      	bls.n	8003310 <PCD_EP_OutSetupPacket_int+0x7c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d108      	bne.n	8003310 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003308:	461a      	mov	r2, r3
 800330a:	2101      	movs	r1, #1
 800330c:	f003 faae 	bl	800686c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	4f54300a 	.word	0x4f54300a

08003320 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	70fb      	strb	r3, [r7, #3]
 800332c:	4613      	mov	r3, r2
 800332e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d107      	bne.n	800334e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800333e:	883b      	ldrh	r3, [r7, #0]
 8003340:	0419      	lsls	r1, r3, #16
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	430a      	orrs	r2, r1
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
 800334c:	e028      	b.n	80033a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	0c1b      	lsrs	r3, r3, #16
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	4413      	add	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	e00d      	b.n	800337e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	3340      	adds	r3, #64	; 0x40
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4413      	add	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	3301      	adds	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	3b01      	subs	r3, #1
 8003384:	429a      	cmp	r2, r3
 8003386:	d3ec      	bcc.n	8003362 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003388:	883b      	ldrh	r3, [r7, #0]
 800338a:	0418      	lsls	r0, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6819      	ldr	r1, [r3, #0]
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	3b01      	subs	r3, #1
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	4302      	orrs	r2, r0
 8003398:	3340      	adds	r3, #64	; 0x40
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	460b      	mov	r3, r1
 80033b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_PCDEx_ActivateLPM+0x44>)
 8003400:	4313      	orrs	r3, r2
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	10000003 	.word	0x10000003

08003418 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a04      	ldr	r2, [pc, #16]	; (8003434 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003426:	6013      	str	r3, [r2, #0]
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40007000 	.word	0x40007000

08003438 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344c:	6413      	str	r3, [r2, #64]	; 0x40
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800345a:	4b1e      	ldr	r3, [pc, #120]	; (80034d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003464:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003466:	f7fd fdfb 	bl	8001060 <HAL_GetTick>
 800346a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800346c:	e009      	b.n	8003482 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800346e:	f7fd fdf7 	bl	8001060 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800347c:	d901      	bls.n	8003482 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e022      	b.n	80034c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348e:	d1ee      	bne.n	800346e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003490:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800349c:	f7fd fde0 	bl	8001060 <HAL_GetTick>
 80034a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034a2:	e009      	b.n	80034b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034a4:	f7fd fddc 	bl	8001060 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034b2:	d901      	bls.n	80034b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e007      	b.n	80034c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034c4:	d1ee      	bne.n	80034a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40007000 	.word	0x40007000

080034d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034e0:	2300      	movs	r3, #0
 80034e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e29b      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8087 	beq.w	800360a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034fc:	4b96      	ldr	r3, [pc, #600]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 030c 	and.w	r3, r3, #12
 8003504:	2b04      	cmp	r3, #4
 8003506:	d00c      	beq.n	8003522 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003508:	4b93      	ldr	r3, [pc, #588]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b08      	cmp	r3, #8
 8003512:	d112      	bne.n	800353a <HAL_RCC_OscConfig+0x62>
 8003514:	4b90      	ldr	r3, [pc, #576]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003520:	d10b      	bne.n	800353a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003522:	4b8d      	ldr	r3, [pc, #564]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d06c      	beq.n	8003608 <HAL_RCC_OscConfig+0x130>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d168      	bne.n	8003608 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e275      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003542:	d106      	bne.n	8003552 <HAL_RCC_OscConfig+0x7a>
 8003544:	4b84      	ldr	r3, [pc, #528]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a83      	ldr	r2, [pc, #524]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 800354a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	e02e      	b.n	80035b0 <HAL_RCC_OscConfig+0xd8>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0x9c>
 800355a:	4b7f      	ldr	r3, [pc, #508]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a7e      	ldr	r2, [pc, #504]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	4b7c      	ldr	r3, [pc, #496]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7b      	ldr	r2, [pc, #492]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 800356c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e01d      	b.n	80035b0 <HAL_RCC_OscConfig+0xd8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0xc0>
 800357e:	4b76      	ldr	r3, [pc, #472]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a75      	ldr	r2, [pc, #468]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	4b73      	ldr	r3, [pc, #460]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a72      	ldr	r2, [pc, #456]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e00b      	b.n	80035b0 <HAL_RCC_OscConfig+0xd8>
 8003598:	4b6f      	ldr	r3, [pc, #444]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a6e      	ldr	r2, [pc, #440]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 800359e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	4b6c      	ldr	r3, [pc, #432]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a6b      	ldr	r2, [pc, #428]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 80035aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d013      	beq.n	80035e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fd fd52 	bl	8001060 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c0:	f7fd fd4e 	bl	8001060 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e229      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	4b61      	ldr	r3, [pc, #388]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0xe8>
 80035de:	e014      	b.n	800360a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fd fd3e 	bl	8001060 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e8:	f7fd fd3a 	bl	8001060 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e215      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fa:	4b57      	ldr	r3, [pc, #348]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x110>
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d069      	beq.n	80036ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003616:	4b50      	ldr	r3, [pc, #320]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003622:	4b4d      	ldr	r3, [pc, #308]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b08      	cmp	r3, #8
 800362c:	d11c      	bne.n	8003668 <HAL_RCC_OscConfig+0x190>
 800362e:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d116      	bne.n	8003668 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_RCC_OscConfig+0x17a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d001      	beq.n	8003652 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e1e9      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003652:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	493d      	ldr	r1, [pc, #244]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	e040      	b.n	80036ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d023      	beq.n	80036b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003670:	4b39      	ldr	r3, [pc, #228]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a38      	ldr	r2, [pc, #224]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fd fcf0 	bl	8001060 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003684:	f7fd fcec 	bl	8001060 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e1c7      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003696:	4b30      	ldr	r3, [pc, #192]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a2:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4929      	ldr	r1, [pc, #164]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]
 80036b6:	e018      	b.n	80036ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b8:	4b27      	ldr	r3, [pc, #156]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a26      	ldr	r2, [pc, #152]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fd fccc 	bl	8001060 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036cc:	f7fd fcc8 	bl	8001060 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e1a3      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d038      	beq.n	8003768 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d019      	beq.n	8003732 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4b16      	ldr	r3, [pc, #88]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003702:	4a15      	ldr	r2, [pc, #84]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370a:	f7fd fca9 	bl	8001060 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003712:	f7fd fca5 	bl	8001060 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e180      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x23a>
 8003730:	e01a      	b.n	8003768 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003736:	4a08      	ldr	r2, [pc, #32]	; (8003758 <HAL_RCC_OscConfig+0x280>)
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373e:	f7fd fc8f 	bl	8001060 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003744:	e00a      	b.n	800375c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003746:	f7fd fc8b 	bl	8001060 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d903      	bls.n	800375c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e166      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
 8003758:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	4b92      	ldr	r3, [pc, #584]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 800375e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1ee      	bne.n	8003746 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80a4 	beq.w	80038be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003776:	4b8c      	ldr	r3, [pc, #560]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10d      	bne.n	800379e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003782:	4b89      	ldr	r3, [pc, #548]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	4a88      	ldr	r2, [pc, #544]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378c:	6413      	str	r3, [r2, #64]	; 0x40
 800378e:	4b86      	ldr	r3, [pc, #536]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379a:	2301      	movs	r3, #1
 800379c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379e:	4b83      	ldr	r3, [pc, #524]	; (80039ac <HAL_RCC_OscConfig+0x4d4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d118      	bne.n	80037dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037aa:	4b80      	ldr	r3, [pc, #512]	; (80039ac <HAL_RCC_OscConfig+0x4d4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a7f      	ldr	r2, [pc, #508]	; (80039ac <HAL_RCC_OscConfig+0x4d4>)
 80037b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b6:	f7fd fc53 	bl	8001060 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037be:	f7fd fc4f 	bl	8001060 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b64      	cmp	r3, #100	; 0x64
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e12a      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d0:	4b76      	ldr	r3, [pc, #472]	; (80039ac <HAL_RCC_OscConfig+0x4d4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d106      	bne.n	80037f2 <HAL_RCC_OscConfig+0x31a>
 80037e4:	4b70      	ldr	r3, [pc, #448]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e8:	4a6f      	ldr	r2, [pc, #444]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	6713      	str	r3, [r2, #112]	; 0x70
 80037f0:	e02d      	b.n	800384e <HAL_RCC_OscConfig+0x376>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0x33c>
 80037fa:	4b6b      	ldr	r3, [pc, #428]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fe:	4a6a      	ldr	r2, [pc, #424]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	6713      	str	r3, [r2, #112]	; 0x70
 8003806:	4b68      	ldr	r3, [pc, #416]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	4a67      	ldr	r2, [pc, #412]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 800380c:	f023 0304 	bic.w	r3, r3, #4
 8003810:	6713      	str	r3, [r2, #112]	; 0x70
 8003812:	e01c      	b.n	800384e <HAL_RCC_OscConfig+0x376>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b05      	cmp	r3, #5
 800381a:	d10c      	bne.n	8003836 <HAL_RCC_OscConfig+0x35e>
 800381c:	4b62      	ldr	r3, [pc, #392]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	4a61      	ldr	r2, [pc, #388]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003822:	f043 0304 	orr.w	r3, r3, #4
 8003826:	6713      	str	r3, [r2, #112]	; 0x70
 8003828:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	4a5e      	ldr	r2, [pc, #376]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	6713      	str	r3, [r2, #112]	; 0x70
 8003834:	e00b      	b.n	800384e <HAL_RCC_OscConfig+0x376>
 8003836:	4b5c      	ldr	r3, [pc, #368]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	4a5b      	ldr	r2, [pc, #364]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	6713      	str	r3, [r2, #112]	; 0x70
 8003842:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	4a58      	ldr	r2, [pc, #352]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003848:	f023 0304 	bic.w	r3, r3, #4
 800384c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d015      	beq.n	8003882 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003856:	f7fd fc03 	bl	8001060 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7fd fbff 	bl	8001060 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	; 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e0d8      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003874:	4b4c      	ldr	r3, [pc, #304]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ee      	beq.n	800385e <HAL_RCC_OscConfig+0x386>
 8003880:	e014      	b.n	80038ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003882:	f7fd fbed 	bl	8001060 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003888:	e00a      	b.n	80038a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fd fbe9 	bl	8001060 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	; 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e0c2      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a0:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ee      	bne.n	800388a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d105      	bne.n	80038be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b2:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	4a3c      	ldr	r2, [pc, #240]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 80038b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80ae 	beq.w	8003a24 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c8:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 030c 	and.w	r3, r3, #12
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d06d      	beq.n	80039b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d14b      	bne.n	8003974 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038dc:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a31      	ldr	r2, [pc, #196]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 80038e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7fd fbba 	bl	8001060 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f0:	f7fd fbb6 	bl	8001060 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e091      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	019b      	lsls	r3, r3, #6
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	3b01      	subs	r3, #1
 8003928:	041b      	lsls	r3, r3, #16
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	071b      	lsls	r3, r3, #28
 800393a:	491b      	ldr	r1, [pc, #108]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800394a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fd fb88 	bl	8001060 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003954:	f7fd fb84 	bl	8001060 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e05f      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0x47c>
 8003972:	e057      	b.n	8003a24 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 800397a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800397e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fd fb6e 	bl	8001060 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003988:	f7fd fb6a 	bl	8001060 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e045      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399a:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <HAL_RCC_OscConfig+0x4d0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x4b0>
 80039a6:	e03d      	b.n	8003a24 <HAL_RCC_OscConfig+0x54c>
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80039b0:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <HAL_RCC_OscConfig+0x558>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d030      	beq.n	8003a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d129      	bne.n	8003a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d122      	bne.n	8003a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d119      	bne.n	8003a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	3b01      	subs	r3, #1
 80039fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d10f      	bne.n	8003a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d107      	bne.n	8003a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800

08003a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0d0      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a4c:	4b6a      	ldr	r3, [pc, #424]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d910      	bls.n	8003a7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	4b67      	ldr	r3, [pc, #412]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 020f 	bic.w	r2, r3, #15
 8003a62:	4965      	ldr	r1, [pc, #404]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b63      	ldr	r3, [pc, #396]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0b8      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a94:	4b59      	ldr	r3, [pc, #356]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4a58      	ldr	r2, [pc, #352]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aac:	4b53      	ldr	r3, [pc, #332]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4a52      	ldr	r2, [pc, #328]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ab6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab8:	4b50      	ldr	r3, [pc, #320]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	494d      	ldr	r1, [pc, #308]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d040      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d115      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e07f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af6:	4b41      	ldr	r3, [pc, #260]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e073      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b06:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e06b      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b16:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 0203 	bic.w	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4936      	ldr	r1, [pc, #216]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b28:	f7fd fa9a 	bl	8001060 <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b30:	f7fd fa96 	bl	8001060 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e053      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b46:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 020c 	and.w	r2, r3, #12
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d1eb      	bne.n	8003b30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b58:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d210      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 020f 	bic.w	r2, r3, #15
 8003b6e:	4922      	ldr	r1, [pc, #136]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e032      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b94:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4916      	ldr	r1, [pc, #88]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bb2:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	490e      	ldr	r1, [pc, #56]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bc6:	f000 f821 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	490a      	ldr	r1, [pc, #40]	; (8003c00 <HAL_RCC_ClockConfig+0x1cc>)
 8003bd8:	5ccb      	ldrb	r3, [r1, r3]
 8003bda:	fa22 f303 	lsr.w	r3, r2, r3
 8003bde:	4a09      	ldr	r2, [pc, #36]	; (8003c04 <HAL_RCC_ClockConfig+0x1d0>)
 8003be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RCC_ClockConfig+0x1d4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fd f9f6 	bl	8000fd8 <HAL_InitTick>

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023c00 	.word	0x40023c00
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	08009ba4 	.word	0x08009ba4
 8003c04:	20000028 	.word	0x20000028
 8003c08:	2000002c 	.word	0x2000002c

08003c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c10:	b094      	sub	sp, #80	; 0x50
 8003c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	647b      	str	r3, [r7, #68]	; 0x44
 8003c18:	2300      	movs	r3, #0
 8003c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c24:	4b79      	ldr	r3, [pc, #484]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 030c 	and.w	r3, r3, #12
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d00d      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0x40>
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	f200 80e1 	bhi.w	8003df8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0x34>
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d003      	beq.n	8003c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c3e:	e0db      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c40:	4b73      	ldr	r3, [pc, #460]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c44:	e0db      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c46:	4b73      	ldr	r3, [pc, #460]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c4a:	e0d8      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c4c:	4b6f      	ldr	r3, [pc, #444]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c54:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c56:	4b6d      	ldr	r3, [pc, #436]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d063      	beq.n	8003d2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c62:	4b6a      	ldr	r3, [pc, #424]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	2200      	movs	r2, #0
 8003c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c74:	633b      	str	r3, [r7, #48]	; 0x30
 8003c76:	2300      	movs	r3, #0
 8003c78:	637b      	str	r3, [r7, #52]	; 0x34
 8003c7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c7e:	4622      	mov	r2, r4
 8003c80:	462b      	mov	r3, r5
 8003c82:	f04f 0000 	mov.w	r0, #0
 8003c86:	f04f 0100 	mov.w	r1, #0
 8003c8a:	0159      	lsls	r1, r3, #5
 8003c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c90:	0150      	lsls	r0, r2, #5
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4621      	mov	r1, r4
 8003c98:	1a51      	subs	r1, r2, r1
 8003c9a:	6139      	str	r1, [r7, #16]
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cb0:	4659      	mov	r1, fp
 8003cb2:	018b      	lsls	r3, r1, #6
 8003cb4:	4651      	mov	r1, sl
 8003cb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cba:	4651      	mov	r1, sl
 8003cbc:	018a      	lsls	r2, r1, #6
 8003cbe:	4651      	mov	r1, sl
 8003cc0:	ebb2 0801 	subs.w	r8, r2, r1
 8003cc4:	4659      	mov	r1, fp
 8003cc6:	eb63 0901 	sbc.w	r9, r3, r1
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cde:	4690      	mov	r8, r2
 8003ce0:	4699      	mov	r9, r3
 8003ce2:	4623      	mov	r3, r4
 8003ce4:	eb18 0303 	adds.w	r3, r8, r3
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	462b      	mov	r3, r5
 8003cec:	eb49 0303 	adc.w	r3, r9, r3
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cfe:	4629      	mov	r1, r5
 8003d00:	024b      	lsls	r3, r1, #9
 8003d02:	4621      	mov	r1, r4
 8003d04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d08:	4621      	mov	r1, r4
 8003d0a:	024a      	lsls	r2, r1, #9
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d12:	2200      	movs	r2, #0
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d1c:	f7fc fa8c 	bl	8000238 <__aeabi_uldivmod>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4613      	mov	r3, r2
 8003d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d28:	e058      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2a:	4b38      	ldr	r3, [pc, #224]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	099b      	lsrs	r3, r3, #6
 8003d30:	2200      	movs	r2, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	4611      	mov	r1, r2
 8003d36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d3a:	623b      	str	r3, [r7, #32]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d44:	4642      	mov	r2, r8
 8003d46:	464b      	mov	r3, r9
 8003d48:	f04f 0000 	mov.w	r0, #0
 8003d4c:	f04f 0100 	mov.w	r1, #0
 8003d50:	0159      	lsls	r1, r3, #5
 8003d52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d56:	0150      	lsls	r0, r2, #5
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d62:	4649      	mov	r1, r9
 8003d64:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d7c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d80:	eb63 050b 	sbc.w	r5, r3, fp
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	00eb      	lsls	r3, r5, #3
 8003d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d92:	00e2      	lsls	r2, r4, #3
 8003d94:	4614      	mov	r4, r2
 8003d96:	461d      	mov	r5, r3
 8003d98:	4643      	mov	r3, r8
 8003d9a:	18e3      	adds	r3, r4, r3
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	464b      	mov	r3, r9
 8003da0:	eb45 0303 	adc.w	r3, r5, r3
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003db2:	4629      	mov	r1, r5
 8003db4:	028b      	lsls	r3, r1, #10
 8003db6:	4621      	mov	r1, r4
 8003db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	028a      	lsls	r2, r1, #10
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	61fa      	str	r2, [r7, #28]
 8003dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dd0:	f7fc fa32 	bl	8000238 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4613      	mov	r3, r2
 8003dda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	3301      	adds	r3, #1
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003dec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3750      	adds	r7, #80	; 0x50
 8003e04:	46bd      	mov	sp, r7
 8003e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	00f42400 	.word	0x00f42400
 8003e14:	007a1200 	.word	0x007a1200

08003e18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	20000028 	.word	0x20000028

08003e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e34:	f7ff fff0 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	0a9b      	lsrs	r3, r3, #10
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4903      	ldr	r1, [pc, #12]	; (8003e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	08009bb4 	.word	0x08009bb4

08003e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e5c:	f7ff ffdc 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	0b5b      	lsrs	r3, r3, #13
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4903      	ldr	r1, [pc, #12]	; (8003e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	08009bb4 	.word	0x08009bb4

08003e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d012      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ea8:	4b69      	ldr	r3, [pc, #420]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4a68      	ldr	r2, [pc, #416]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003eb2:	6093      	str	r3, [r2, #8]
 8003eb4:	4b66      	ldr	r3, [pc, #408]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebc:	4964      	ldr	r1, [pc, #400]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d017      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eda:	4b5d      	ldr	r3, [pc, #372]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee8:	4959      	ldr	r1, [pc, #356]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef8:	d101      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003efa:	2301      	movs	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f06:	2301      	movs	r3, #1
 8003f08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d017      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f16:	4b4e      	ldr	r3, [pc, #312]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	494a      	ldr	r1, [pc, #296]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f34:	d101      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f36:	2301      	movs	r3, #1
 8003f38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f52:	2301      	movs	r3, #1
 8003f54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 808b 	beq.w	800407a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f64:	4b3a      	ldr	r3, [pc, #232]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	4a39      	ldr	r2, [pc, #228]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003f70:	4b37      	ldr	r3, [pc, #220]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f7c:	4b35      	ldr	r3, [pc, #212]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a34      	ldr	r2, [pc, #208]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f88:	f7fd f86a 	bl	8001060 <HAL_GetTick>
 8003f8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f90:	f7fd f866 	bl	8001060 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	; 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e38f      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fa2:	4b2c      	ldr	r3, [pc, #176]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fae:	4b28      	ldr	r3, [pc, #160]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d035      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d02e      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fcc:	4b20      	ldr	r3, [pc, #128]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fd6:	4b1e      	ldr	r3, [pc, #120]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	4a1d      	ldr	r2, [pc, #116]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe2:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	4a1a      	ldr	r2, [pc, #104]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fee:	4a18      	ldr	r2, [pc, #96]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ff4:	4b16      	ldr	r3, [pc, #88]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d114      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fd f82e 	bl	8001060 <HAL_GetTick>
 8004004:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004006:	e00a      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004008:	f7fd f82a 	bl	8001060 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	; 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e351      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401e:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0ee      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004036:	d111      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004044:	4b04      	ldr	r3, [pc, #16]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004046:	400b      	ands	r3, r1
 8004048:	4901      	ldr	r1, [pc, #4]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404a:	4313      	orrs	r3, r2
 800404c:	608b      	str	r3, [r1, #8]
 800404e:	e00b      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004050:	40023800 	.word	0x40023800
 8004054:	40007000 	.word	0x40007000
 8004058:	0ffffcff 	.word	0x0ffffcff
 800405c:	4bac      	ldr	r3, [pc, #688]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4aab      	ldr	r2, [pc, #684]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004062:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004066:	6093      	str	r3, [r2, #8]
 8004068:	4ba9      	ldr	r3, [pc, #676]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004074:	49a6      	ldr	r1, [pc, #664]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004076:	4313      	orrs	r3, r2
 8004078:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b00      	cmp	r3, #0
 8004084:	d010      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004086:	4ba2      	ldr	r3, [pc, #648]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800408c:	4aa0      	ldr	r2, [pc, #640]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004092:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004096:	4b9e      	ldr	r3, [pc, #632]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004098:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	499b      	ldr	r1, [pc, #620]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040b4:	4b96      	ldr	r3, [pc, #600]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c2:	4993      	ldr	r1, [pc, #588]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040d6:	4b8e      	ldr	r3, [pc, #568]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040e4:	498a      	ldr	r1, [pc, #552]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040f8:	4b85      	ldr	r3, [pc, #532]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004106:	4982      	ldr	r1, [pc, #520]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800411a:	4b7d      	ldr	r3, [pc, #500]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004120:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004128:	4979      	ldr	r1, [pc, #484]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800413c:	4b74      	ldr	r3, [pc, #464]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004142:	f023 0203 	bic.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	4971      	ldr	r1, [pc, #452]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800415e:	4b6c      	ldr	r3, [pc, #432]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	f023 020c 	bic.w	r2, r3, #12
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800416c:	4968      	ldr	r1, [pc, #416]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004180:	4b63      	ldr	r3, [pc, #396]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004186:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418e:	4960      	ldr	r1, [pc, #384]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041a2:	4b5b      	ldr	r3, [pc, #364]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b0:	4957      	ldr	r1, [pc, #348]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041c4:	4b52      	ldr	r3, [pc, #328]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	494f      	ldr	r1, [pc, #316]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80041e6:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	4946      	ldr	r1, [pc, #280]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004208:	4b41      	ldr	r3, [pc, #260]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004216:	493e      	ldr	r1, [pc, #248]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800422a:	4b39      	ldr	r3, [pc, #228]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004230:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004238:	4935      	ldr	r1, [pc, #212]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800424c:	4b30      	ldr	r3, [pc, #192]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800425a:	492d      	ldr	r1, [pc, #180]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d011      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800426e:	4b28      	ldr	r3, [pc, #160]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004274:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800427c:	4924      	ldr	r1, [pc, #144]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800428c:	d101      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800428e:	2301      	movs	r3, #1
 8004290:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800429e:	2301      	movs	r3, #1
 80042a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ae:	4b18      	ldr	r3, [pc, #96]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042bc:	4914      	ldr	r1, [pc, #80]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00b      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e0:	490b      	ldr	r1, [pc, #44]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00f      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004304:	4902      	ldr	r1, [pc, #8]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800430c:	e002      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800430e:	bf00      	nop
 8004310:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00b      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004320:	4b8a      	ldr	r3, [pc, #552]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004326:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	4986      	ldr	r1, [pc, #536]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00b      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004344:	4b81      	ldr	r3, [pc, #516]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800434a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004354:	497d      	ldr	r1, [pc, #500]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d006      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 80d6 	beq.w	800451c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004370:	4b76      	ldr	r3, [pc, #472]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a75      	ldr	r2, [pc, #468]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004376:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800437a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800437c:	f7fc fe70 	bl	8001060 <HAL_GetTick>
 8004380:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004384:	f7fc fe6c 	bl	8001060 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e195      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004396:	4b6d      	ldr	r3, [pc, #436]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d021      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d11d      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043b6:	4b65      	ldr	r3, [pc, #404]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043c4:	4b61      	ldr	r3, [pc, #388]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ca:	0e1b      	lsrs	r3, r3, #24
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	019a      	lsls	r2, r3, #6
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	041b      	lsls	r3, r3, #16
 80043dc:	431a      	orrs	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	071b      	lsls	r3, r3, #28
 80043ea:	4958      	ldr	r1, [pc, #352]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d004      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004410:	2b00      	cmp	r3, #0
 8004412:	d02e      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800441c:	d129      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800441e:	4b4b      	ldr	r3, [pc, #300]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004424:	0c1b      	lsrs	r3, r3, #16
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800442c:	4b47      	ldr	r3, [pc, #284]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800442e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004432:	0f1b      	lsrs	r3, r3, #28
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	019a      	lsls	r2, r3, #6
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	041b      	lsls	r3, r3, #16
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	061b      	lsls	r3, r3, #24
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	071b      	lsls	r3, r3, #28
 8004452:	493e      	ldr	r1, [pc, #248]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800445a:	4b3c      	ldr	r3, [pc, #240]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800445c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004460:	f023 021f 	bic.w	r2, r3, #31
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	3b01      	subs	r3, #1
 800446a:	4938      	ldr	r1, [pc, #224]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d01d      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800447e:	4b33      	ldr	r3, [pc, #204]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004484:	0e1b      	lsrs	r3, r3, #24
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800448c:	4b2f      	ldr	r3, [pc, #188]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004492:	0f1b      	lsrs	r3, r3, #28
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	019a      	lsls	r2, r3, #6
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	041b      	lsls	r3, r3, #16
 80044a6:	431a      	orrs	r2, r3
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	061b      	lsls	r3, r3, #24
 80044ac:	431a      	orrs	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	071b      	lsls	r3, r3, #28
 80044b2:	4926      	ldr	r1, [pc, #152]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d011      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	019a      	lsls	r2, r3, #6
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	061b      	lsls	r3, r3, #24
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	071b      	lsls	r3, r3, #28
 80044e2:	491a      	ldr	r1, [pc, #104]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044ea:	4b18      	ldr	r3, [pc, #96]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a17      	ldr	r2, [pc, #92]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f6:	f7fc fdb3 	bl	8001060 <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044fc:	e008      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044fe:	f7fc fdaf 	bl	8001060 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b64      	cmp	r3, #100	; 0x64
 800450a:	d901      	bls.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e0d8      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004510:	4b0e      	ldr	r3, [pc, #56]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b01      	cmp	r3, #1
 8004520:	f040 80ce 	bne.w	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a08      	ldr	r2, [pc, #32]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800452a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004530:	f7fc fd96 	bl	8001060 <HAL_GetTick>
 8004534:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004536:	e00b      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004538:	f7fc fd92 	bl	8001060 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	; 0x64
 8004544:	d904      	bls.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e0bb      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800454a:	bf00      	nop
 800454c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004550:	4b5e      	ldr	r3, [pc, #376]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800455c:	d0ec      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800457a:	2b00      	cmp	r3, #0
 800457c:	d02e      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d12a      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004586:	4b51      	ldr	r3, [pc, #324]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004594:	4b4d      	ldr	r3, [pc, #308]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	0f1b      	lsrs	r3, r3, #28
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	019a      	lsls	r2, r3, #6
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	041b      	lsls	r3, r3, #16
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	061b      	lsls	r3, r3, #24
 80045b4:	431a      	orrs	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	071b      	lsls	r3, r3, #28
 80045ba:	4944      	ldr	r1, [pc, #272]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045c2:	4b42      	ldr	r3, [pc, #264]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	3b01      	subs	r3, #1
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	493d      	ldr	r1, [pc, #244]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d022      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f0:	d11d      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045f2:	4b36      	ldr	r3, [pc, #216]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f8:	0e1b      	lsrs	r3, r3, #24
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004600:	4b32      	ldr	r3, [pc, #200]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	0f1b      	lsrs	r3, r3, #28
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	019a      	lsls	r2, r3, #6
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	041b      	lsls	r3, r3, #16
 800461a:	431a      	orrs	r2, r3
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	061b      	lsls	r3, r3, #24
 8004620:	431a      	orrs	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	071b      	lsls	r3, r3, #28
 8004626:	4929      	ldr	r1, [pc, #164]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d028      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800463a:	4b24      	ldr	r3, [pc, #144]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	0e1b      	lsrs	r3, r3, #24
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004648:	4b20      	ldr	r3, [pc, #128]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	0c1b      	lsrs	r3, r3, #16
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	019a      	lsls	r2, r3, #6
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	041b      	lsls	r3, r3, #16
 8004660:	431a      	orrs	r2, r3
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	061b      	lsls	r3, r3, #24
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	071b      	lsls	r3, r3, #28
 800466e:	4917      	ldr	r1, [pc, #92]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004676:	4b15      	ldr	r3, [pc, #84]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800467c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	4911      	ldr	r1, [pc, #68]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800468c:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a0e      	ldr	r2, [pc, #56]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004698:	f7fc fce2 	bl	8001060 <HAL_GetTick>
 800469c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046a0:	f7fc fcde 	bl	8001060 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	; 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e007      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046be:	d1ef      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3720      	adds	r7, #32
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800

080046d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e09d      	b.n	800481e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d108      	bne.n	80046fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f2:	d009      	beq.n	8004708 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	61da      	str	r2, [r3, #28]
 80046fa:	e005      	b.n	8004708 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fc faa8 	bl	8000c78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800473e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004748:	d902      	bls.n	8004750 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	e002      	b.n	8004756 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004754:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800475e:	d007      	beq.n	8004770 <HAL_SPI_Init+0xa0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004768:	d002      	beq.n	8004770 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	ea42 0103 	orr.w	r1, r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	0c1b      	lsrs	r3, r3, #16
 80047cc:	f003 0204 	and.w	r2, r3, #4
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047ec:	ea42 0103 	orr.w	r1, r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69da      	ldr	r2, [r3, #28]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800480c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e040      	b.n	80048ba <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7fc faa9 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2224      	movs	r2, #36	; 0x24
 8004852:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f82d 	bl	80048c4 <UART_SetConfig>
 800486a:	4603      	mov	r3, r0
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e022      	b.n	80048ba <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fa85 	bl	8004d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004890:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0201 	orr.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fb0c 	bl	8004ed0 <UART_CheckIdleState>
 80048b8:	4603      	mov	r3, r0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4ba6      	ldr	r3, [pc, #664]	; (8004b88 <UART_SetConfig+0x2c4>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	6979      	ldr	r1, [r7, #20]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	430a      	orrs	r2, r1
 8004934:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a94      	ldr	r2, [pc, #592]	; (8004b8c <UART_SetConfig+0x2c8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d120      	bne.n	8004982 <UART_SetConfig+0xbe>
 8004940:	4b93      	ldr	r3, [pc, #588]	; (8004b90 <UART_SetConfig+0x2cc>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b03      	cmp	r3, #3
 800494c:	d816      	bhi.n	800497c <UART_SetConfig+0xb8>
 800494e:	a201      	add	r2, pc, #4	; (adr r2, 8004954 <UART_SetConfig+0x90>)
 8004950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004954:	08004965 	.word	0x08004965
 8004958:	08004971 	.word	0x08004971
 800495c:	0800496b 	.word	0x0800496b
 8004960:	08004977 	.word	0x08004977
 8004964:	2301      	movs	r3, #1
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	e150      	b.n	8004c0c <UART_SetConfig+0x348>
 800496a:	2302      	movs	r3, #2
 800496c:	77fb      	strb	r3, [r7, #31]
 800496e:	e14d      	b.n	8004c0c <UART_SetConfig+0x348>
 8004970:	2304      	movs	r3, #4
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e14a      	b.n	8004c0c <UART_SetConfig+0x348>
 8004976:	2308      	movs	r3, #8
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e147      	b.n	8004c0c <UART_SetConfig+0x348>
 800497c:	2310      	movs	r3, #16
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e144      	b.n	8004c0c <UART_SetConfig+0x348>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a83      	ldr	r2, [pc, #524]	; (8004b94 <UART_SetConfig+0x2d0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d132      	bne.n	80049f2 <UART_SetConfig+0x12e>
 800498c:	4b80      	ldr	r3, [pc, #512]	; (8004b90 <UART_SetConfig+0x2cc>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b0c      	cmp	r3, #12
 8004998:	d828      	bhi.n	80049ec <UART_SetConfig+0x128>
 800499a:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <UART_SetConfig+0xdc>)
 800499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a0:	080049d5 	.word	0x080049d5
 80049a4:	080049ed 	.word	0x080049ed
 80049a8:	080049ed 	.word	0x080049ed
 80049ac:	080049ed 	.word	0x080049ed
 80049b0:	080049e1 	.word	0x080049e1
 80049b4:	080049ed 	.word	0x080049ed
 80049b8:	080049ed 	.word	0x080049ed
 80049bc:	080049ed 	.word	0x080049ed
 80049c0:	080049db 	.word	0x080049db
 80049c4:	080049ed 	.word	0x080049ed
 80049c8:	080049ed 	.word	0x080049ed
 80049cc:	080049ed 	.word	0x080049ed
 80049d0:	080049e7 	.word	0x080049e7
 80049d4:	2300      	movs	r3, #0
 80049d6:	77fb      	strb	r3, [r7, #31]
 80049d8:	e118      	b.n	8004c0c <UART_SetConfig+0x348>
 80049da:	2302      	movs	r3, #2
 80049dc:	77fb      	strb	r3, [r7, #31]
 80049de:	e115      	b.n	8004c0c <UART_SetConfig+0x348>
 80049e0:	2304      	movs	r3, #4
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e112      	b.n	8004c0c <UART_SetConfig+0x348>
 80049e6:	2308      	movs	r3, #8
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e10f      	b.n	8004c0c <UART_SetConfig+0x348>
 80049ec:	2310      	movs	r3, #16
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e10c      	b.n	8004c0c <UART_SetConfig+0x348>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a68      	ldr	r2, [pc, #416]	; (8004b98 <UART_SetConfig+0x2d4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d120      	bne.n	8004a3e <UART_SetConfig+0x17a>
 80049fc:	4b64      	ldr	r3, [pc, #400]	; (8004b90 <UART_SetConfig+0x2cc>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a06:	2b30      	cmp	r3, #48	; 0x30
 8004a08:	d013      	beq.n	8004a32 <UART_SetConfig+0x16e>
 8004a0a:	2b30      	cmp	r3, #48	; 0x30
 8004a0c:	d814      	bhi.n	8004a38 <UART_SetConfig+0x174>
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d009      	beq.n	8004a26 <UART_SetConfig+0x162>
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d810      	bhi.n	8004a38 <UART_SetConfig+0x174>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <UART_SetConfig+0x15c>
 8004a1a:	2b10      	cmp	r3, #16
 8004a1c:	d006      	beq.n	8004a2c <UART_SetConfig+0x168>
 8004a1e:	e00b      	b.n	8004a38 <UART_SetConfig+0x174>
 8004a20:	2300      	movs	r3, #0
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e0f2      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a26:	2302      	movs	r3, #2
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e0ef      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e0ec      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a32:	2308      	movs	r3, #8
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e0e9      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e0e6      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a56      	ldr	r2, [pc, #344]	; (8004b9c <UART_SetConfig+0x2d8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d120      	bne.n	8004a8a <UART_SetConfig+0x1c6>
 8004a48:	4b51      	ldr	r3, [pc, #324]	; (8004b90 <UART_SetConfig+0x2cc>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a52:	2bc0      	cmp	r3, #192	; 0xc0
 8004a54:	d013      	beq.n	8004a7e <UART_SetConfig+0x1ba>
 8004a56:	2bc0      	cmp	r3, #192	; 0xc0
 8004a58:	d814      	bhi.n	8004a84 <UART_SetConfig+0x1c0>
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d009      	beq.n	8004a72 <UART_SetConfig+0x1ae>
 8004a5e:	2b80      	cmp	r3, #128	; 0x80
 8004a60:	d810      	bhi.n	8004a84 <UART_SetConfig+0x1c0>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <UART_SetConfig+0x1a8>
 8004a66:	2b40      	cmp	r3, #64	; 0x40
 8004a68:	d006      	beq.n	8004a78 <UART_SetConfig+0x1b4>
 8004a6a:	e00b      	b.n	8004a84 <UART_SetConfig+0x1c0>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	e0cc      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a72:	2302      	movs	r3, #2
 8004a74:	77fb      	strb	r3, [r7, #31]
 8004a76:	e0c9      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a78:	2304      	movs	r3, #4
 8004a7a:	77fb      	strb	r3, [r7, #31]
 8004a7c:	e0c6      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a7e:	2308      	movs	r3, #8
 8004a80:	77fb      	strb	r3, [r7, #31]
 8004a82:	e0c3      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a84:	2310      	movs	r3, #16
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e0c0      	b.n	8004c0c <UART_SetConfig+0x348>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a44      	ldr	r2, [pc, #272]	; (8004ba0 <UART_SetConfig+0x2dc>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d125      	bne.n	8004ae0 <UART_SetConfig+0x21c>
 8004a94:	4b3e      	ldr	r3, [pc, #248]	; (8004b90 <UART_SetConfig+0x2cc>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aa2:	d017      	beq.n	8004ad4 <UART_SetConfig+0x210>
 8004aa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aa8:	d817      	bhi.n	8004ada <UART_SetConfig+0x216>
 8004aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aae:	d00b      	beq.n	8004ac8 <UART_SetConfig+0x204>
 8004ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab4:	d811      	bhi.n	8004ada <UART_SetConfig+0x216>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <UART_SetConfig+0x1fe>
 8004aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004abe:	d006      	beq.n	8004ace <UART_SetConfig+0x20a>
 8004ac0:	e00b      	b.n	8004ada <UART_SetConfig+0x216>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	77fb      	strb	r3, [r7, #31]
 8004ac6:	e0a1      	b.n	8004c0c <UART_SetConfig+0x348>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e09e      	b.n	8004c0c <UART_SetConfig+0x348>
 8004ace:	2304      	movs	r3, #4
 8004ad0:	77fb      	strb	r3, [r7, #31]
 8004ad2:	e09b      	b.n	8004c0c <UART_SetConfig+0x348>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e098      	b.n	8004c0c <UART_SetConfig+0x348>
 8004ada:	2310      	movs	r3, #16
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e095      	b.n	8004c0c <UART_SetConfig+0x348>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a2f      	ldr	r2, [pc, #188]	; (8004ba4 <UART_SetConfig+0x2e0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d125      	bne.n	8004b36 <UART_SetConfig+0x272>
 8004aea:	4b29      	ldr	r3, [pc, #164]	; (8004b90 <UART_SetConfig+0x2cc>)
 8004aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004af4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004af8:	d017      	beq.n	8004b2a <UART_SetConfig+0x266>
 8004afa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004afe:	d817      	bhi.n	8004b30 <UART_SetConfig+0x26c>
 8004b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b04:	d00b      	beq.n	8004b1e <UART_SetConfig+0x25a>
 8004b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0a:	d811      	bhi.n	8004b30 <UART_SetConfig+0x26c>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <UART_SetConfig+0x254>
 8004b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b14:	d006      	beq.n	8004b24 <UART_SetConfig+0x260>
 8004b16:	e00b      	b.n	8004b30 <UART_SetConfig+0x26c>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	77fb      	strb	r3, [r7, #31]
 8004b1c:	e076      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	77fb      	strb	r3, [r7, #31]
 8004b22:	e073      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b24:	2304      	movs	r3, #4
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e070      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	77fb      	strb	r3, [r7, #31]
 8004b2e:	e06d      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b30:	2310      	movs	r3, #16
 8004b32:	77fb      	strb	r3, [r7, #31]
 8004b34:	e06a      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ba8 <UART_SetConfig+0x2e4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d138      	bne.n	8004bb2 <UART_SetConfig+0x2ee>
 8004b40:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <UART_SetConfig+0x2cc>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b4e:	d017      	beq.n	8004b80 <UART_SetConfig+0x2bc>
 8004b50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b54:	d82a      	bhi.n	8004bac <UART_SetConfig+0x2e8>
 8004b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5a:	d00b      	beq.n	8004b74 <UART_SetConfig+0x2b0>
 8004b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b60:	d824      	bhi.n	8004bac <UART_SetConfig+0x2e8>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <UART_SetConfig+0x2aa>
 8004b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6a:	d006      	beq.n	8004b7a <UART_SetConfig+0x2b6>
 8004b6c:	e01e      	b.n	8004bac <UART_SetConfig+0x2e8>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	77fb      	strb	r3, [r7, #31]
 8004b72:	e04b      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b74:	2302      	movs	r3, #2
 8004b76:	77fb      	strb	r3, [r7, #31]
 8004b78:	e048      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b7a:	2304      	movs	r3, #4
 8004b7c:	77fb      	strb	r3, [r7, #31]
 8004b7e:	e045      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b80:	2308      	movs	r3, #8
 8004b82:	77fb      	strb	r3, [r7, #31]
 8004b84:	e042      	b.n	8004c0c <UART_SetConfig+0x348>
 8004b86:	bf00      	nop
 8004b88:	efff69f3 	.word	0xefff69f3
 8004b8c:	40011000 	.word	0x40011000
 8004b90:	40023800 	.word	0x40023800
 8004b94:	40004400 	.word	0x40004400
 8004b98:	40004800 	.word	0x40004800
 8004b9c:	40004c00 	.word	0x40004c00
 8004ba0:	40005000 	.word	0x40005000
 8004ba4:	40011400 	.word	0x40011400
 8004ba8:	40007800 	.word	0x40007800
 8004bac:	2310      	movs	r3, #16
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	e02c      	b.n	8004c0c <UART_SetConfig+0x348>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a72      	ldr	r2, [pc, #456]	; (8004d80 <UART_SetConfig+0x4bc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d125      	bne.n	8004c08 <UART_SetConfig+0x344>
 8004bbc:	4b71      	ldr	r3, [pc, #452]	; (8004d84 <UART_SetConfig+0x4c0>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004bc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bca:	d017      	beq.n	8004bfc <UART_SetConfig+0x338>
 8004bcc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bd0:	d817      	bhi.n	8004c02 <UART_SetConfig+0x33e>
 8004bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd6:	d00b      	beq.n	8004bf0 <UART_SetConfig+0x32c>
 8004bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bdc:	d811      	bhi.n	8004c02 <UART_SetConfig+0x33e>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <UART_SetConfig+0x326>
 8004be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004be6:	d006      	beq.n	8004bf6 <UART_SetConfig+0x332>
 8004be8:	e00b      	b.n	8004c02 <UART_SetConfig+0x33e>
 8004bea:	2300      	movs	r3, #0
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	e00d      	b.n	8004c0c <UART_SetConfig+0x348>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e00a      	b.n	8004c0c <UART_SetConfig+0x348>
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e007      	b.n	8004c0c <UART_SetConfig+0x348>
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e004      	b.n	8004c0c <UART_SetConfig+0x348>
 8004c02:	2310      	movs	r3, #16
 8004c04:	77fb      	strb	r3, [r7, #31]
 8004c06:	e001      	b.n	8004c0c <UART_SetConfig+0x348>
 8004c08:	2310      	movs	r3, #16
 8004c0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c14:	d15b      	bne.n	8004cce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004c16:	7ffb      	ldrb	r3, [r7, #31]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d828      	bhi.n	8004c6e <UART_SetConfig+0x3aa>
 8004c1c:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <UART_SetConfig+0x360>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004c49 	.word	0x08004c49
 8004c28:	08004c51 	.word	0x08004c51
 8004c2c:	08004c59 	.word	0x08004c59
 8004c30:	08004c6f 	.word	0x08004c6f
 8004c34:	08004c5f 	.word	0x08004c5f
 8004c38:	08004c6f 	.word	0x08004c6f
 8004c3c:	08004c6f 	.word	0x08004c6f
 8004c40:	08004c6f 	.word	0x08004c6f
 8004c44:	08004c67 	.word	0x08004c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c48:	f7ff f8f2 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 8004c4c:	61b8      	str	r0, [r7, #24]
        break;
 8004c4e:	e013      	b.n	8004c78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c50:	f7ff f902 	bl	8003e58 <HAL_RCC_GetPCLK2Freq>
 8004c54:	61b8      	str	r0, [r7, #24]
        break;
 8004c56:	e00f      	b.n	8004c78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c58:	4b4b      	ldr	r3, [pc, #300]	; (8004d88 <UART_SetConfig+0x4c4>)
 8004c5a:	61bb      	str	r3, [r7, #24]
        break;
 8004c5c:	e00c      	b.n	8004c78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c5e:	f7fe ffd5 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8004c62:	61b8      	str	r0, [r7, #24]
        break;
 8004c64:	e008      	b.n	8004c78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c6a:	61bb      	str	r3, [r7, #24]
        break;
 8004c6c:	e004      	b.n	8004c78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	77bb      	strb	r3, [r7, #30]
        break;
 8004c76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d074      	beq.n	8004d68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	005a      	lsls	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	441a      	add	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b0f      	cmp	r3, #15
 8004c98:	d916      	bls.n	8004cc8 <UART_SetConfig+0x404>
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca0:	d212      	bcs.n	8004cc8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f023 030f 	bic.w	r3, r3, #15
 8004caa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	085b      	lsrs	r3, r3, #1
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	89fb      	ldrh	r3, [r7, #14]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	89fa      	ldrh	r2, [r7, #14]
 8004cc4:	60da      	str	r2, [r3, #12]
 8004cc6:	e04f      	b.n	8004d68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	77bb      	strb	r3, [r7, #30]
 8004ccc:	e04c      	b.n	8004d68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cce:	7ffb      	ldrb	r3, [r7, #31]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d828      	bhi.n	8004d26 <UART_SetConfig+0x462>
 8004cd4:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <UART_SetConfig+0x418>)
 8004cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cda:	bf00      	nop
 8004cdc:	08004d01 	.word	0x08004d01
 8004ce0:	08004d09 	.word	0x08004d09
 8004ce4:	08004d11 	.word	0x08004d11
 8004ce8:	08004d27 	.word	0x08004d27
 8004cec:	08004d17 	.word	0x08004d17
 8004cf0:	08004d27 	.word	0x08004d27
 8004cf4:	08004d27 	.word	0x08004d27
 8004cf8:	08004d27 	.word	0x08004d27
 8004cfc:	08004d1f 	.word	0x08004d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d00:	f7ff f896 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 8004d04:	61b8      	str	r0, [r7, #24]
        break;
 8004d06:	e013      	b.n	8004d30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d08:	f7ff f8a6 	bl	8003e58 <HAL_RCC_GetPCLK2Freq>
 8004d0c:	61b8      	str	r0, [r7, #24]
        break;
 8004d0e:	e00f      	b.n	8004d30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d10:	4b1d      	ldr	r3, [pc, #116]	; (8004d88 <UART_SetConfig+0x4c4>)
 8004d12:	61bb      	str	r3, [r7, #24]
        break;
 8004d14:	e00c      	b.n	8004d30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d16:	f7fe ff79 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8004d1a:	61b8      	str	r0, [r7, #24]
        break;
 8004d1c:	e008      	b.n	8004d30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d22:	61bb      	str	r3, [r7, #24]
        break;
 8004d24:	e004      	b.n	8004d30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d2e:	bf00      	nop
    }

    if (pclk != 0U)
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d018      	beq.n	8004d68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	085a      	lsrs	r2, r3, #1
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	441a      	add	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b0f      	cmp	r3, #15
 8004d4e:	d909      	bls.n	8004d64 <UART_SetConfig+0x4a0>
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d56:	d205      	bcs.n	8004d64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60da      	str	r2, [r3, #12]
 8004d62:	e001      	b.n	8004d68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d74:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3720      	adds	r7, #32
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40007c00 	.word	0x40007c00
 8004d84:	40023800 	.word	0x40023800
 8004d88:	00f42400 	.word	0x00f42400

08004d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01a      	beq.n	8004ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8a:	d10a      	bne.n	8004ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ee0:	f7fc f8be 	bl	8001060 <HAL_GetTick>
 8004ee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d10e      	bne.n	8004f12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f831 	bl	8004f6a <UART_WaitOnFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e027      	b.n	8004f62 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d10e      	bne.n	8004f3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f81b 	bl	8004f6a <UART_WaitOnFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e011      	b.n	8004f62 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b09c      	sub	sp, #112	; 0x70
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	603b      	str	r3, [r7, #0]
 8004f76:	4613      	mov	r3, r2
 8004f78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7a:	e0a7      	b.n	80050cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f82:	f000 80a3 	beq.w	80050cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f86:	f7fc f86b 	bl	8001060 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d302      	bcc.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x32>
 8004f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d13f      	bne.n	800501c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fb0:	667b      	str	r3, [r7, #100]	; 0x64
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fbc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e6      	bne.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	663b      	str	r3, [r7, #96]	; 0x60
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3308      	adds	r3, #8
 8004fec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fee:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ff0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e5      	bne.n	8004fce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e068      	b.n	80050ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	d050      	beq.n	80050cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005038:	d148      	bne.n	80050cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005042:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005058:	66fb      	str	r3, [r7, #108]	; 0x6c
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005062:	637b      	str	r3, [r7, #52]	; 0x34
 8005064:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e6      	bne.n	8005044 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3308      	adds	r3, #8
 800507c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	613b      	str	r3, [r7, #16]
   return(result);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	66bb      	str	r3, [r7, #104]	; 0x68
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3308      	adds	r3, #8
 8005094:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005096:	623a      	str	r2, [r7, #32]
 8005098:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	69f9      	ldr	r1, [r7, #28]
 800509c:	6a3a      	ldr	r2, [r7, #32]
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e5      	bne.n	8005076 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e010      	b.n	80050ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69da      	ldr	r2, [r3, #28]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4013      	ands	r3, r2
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	429a      	cmp	r2, r3
 80050da:	bf0c      	ite	eq
 80050dc:	2301      	moveq	r3, #1
 80050de:	2300      	movne	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	461a      	mov	r2, r3
 80050e4:	79fb      	ldrb	r3, [r7, #7]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	f43f af48 	beq.w	8004f7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3770      	adds	r7, #112	; 0x70
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050f8:	b084      	sub	sp, #16
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	f107 001c 	add.w	r0, r7, #28
 8005106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	2b01      	cmp	r3, #1
 800510e:	d120      	bne.n	8005152 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	4b20      	ldr	r3, [pc, #128]	; (80051a4 <USB_CoreInit+0xac>)
 8005122:	4013      	ands	r3, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005136:	2b01      	cmp	r3, #1
 8005138:	d105      	bne.n	8005146 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f001 fbee 	bl	8006928 <USB_CoreReset>
 800514c:	4603      	mov	r3, r0
 800514e:	73fb      	strb	r3, [r7, #15]
 8005150:	e010      	b.n	8005174 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f001 fbe2 	bl	8006928 <USB_CoreReset>
 8005164:	4603      	mov	r3, r0
 8005166:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	2b01      	cmp	r3, #1
 8005178:	d10b      	bne.n	8005192 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f043 0206 	orr.w	r2, r3, #6
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005192:	7bfb      	ldrb	r3, [r7, #15]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800519e:	b004      	add	sp, #16
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	ffbdffbf 	.word	0xffbdffbf

080051a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	4613      	mov	r3, r2
 80051b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d165      	bne.n	8005288 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4a41      	ldr	r2, [pc, #260]	; (80052c4 <USB_SetTurnaroundTime+0x11c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d906      	bls.n	80051d2 <USB_SetTurnaroundTime+0x2a>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a40      	ldr	r2, [pc, #256]	; (80052c8 <USB_SetTurnaroundTime+0x120>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d202      	bcs.n	80051d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051cc:	230f      	movs	r3, #15
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	e062      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4a3c      	ldr	r2, [pc, #240]	; (80052c8 <USB_SetTurnaroundTime+0x120>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d306      	bcc.n	80051e8 <USB_SetTurnaroundTime+0x40>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4a3b      	ldr	r2, [pc, #236]	; (80052cc <USB_SetTurnaroundTime+0x124>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d202      	bcs.n	80051e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051e2:	230e      	movs	r3, #14
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	e057      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4a38      	ldr	r2, [pc, #224]	; (80052cc <USB_SetTurnaroundTime+0x124>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d306      	bcc.n	80051fe <USB_SetTurnaroundTime+0x56>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4a37      	ldr	r2, [pc, #220]	; (80052d0 <USB_SetTurnaroundTime+0x128>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d202      	bcs.n	80051fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051f8:	230d      	movs	r3, #13
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	e04c      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4a33      	ldr	r2, [pc, #204]	; (80052d0 <USB_SetTurnaroundTime+0x128>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d306      	bcc.n	8005214 <USB_SetTurnaroundTime+0x6c>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4a32      	ldr	r2, [pc, #200]	; (80052d4 <USB_SetTurnaroundTime+0x12c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d802      	bhi.n	8005214 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800520e:	230c      	movs	r3, #12
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	e041      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4a2f      	ldr	r2, [pc, #188]	; (80052d4 <USB_SetTurnaroundTime+0x12c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d906      	bls.n	800522a <USB_SetTurnaroundTime+0x82>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4a2e      	ldr	r2, [pc, #184]	; (80052d8 <USB_SetTurnaroundTime+0x130>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d802      	bhi.n	800522a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005224:	230b      	movs	r3, #11
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e036      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4a2a      	ldr	r2, [pc, #168]	; (80052d8 <USB_SetTurnaroundTime+0x130>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d906      	bls.n	8005240 <USB_SetTurnaroundTime+0x98>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4a29      	ldr	r2, [pc, #164]	; (80052dc <USB_SetTurnaroundTime+0x134>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d802      	bhi.n	8005240 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800523a:	230a      	movs	r3, #10
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	e02b      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4a26      	ldr	r2, [pc, #152]	; (80052dc <USB_SetTurnaroundTime+0x134>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d906      	bls.n	8005256 <USB_SetTurnaroundTime+0xae>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4a25      	ldr	r2, [pc, #148]	; (80052e0 <USB_SetTurnaroundTime+0x138>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d202      	bcs.n	8005256 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005250:	2309      	movs	r3, #9
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	e020      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4a21      	ldr	r2, [pc, #132]	; (80052e0 <USB_SetTurnaroundTime+0x138>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d306      	bcc.n	800526c <USB_SetTurnaroundTime+0xc4>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4a20      	ldr	r2, [pc, #128]	; (80052e4 <USB_SetTurnaroundTime+0x13c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d802      	bhi.n	800526c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005266:	2308      	movs	r3, #8
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	e015      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <USB_SetTurnaroundTime+0x13c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d906      	bls.n	8005282 <USB_SetTurnaroundTime+0xda>
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <USB_SetTurnaroundTime+0x140>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d202      	bcs.n	8005282 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800527c:	2307      	movs	r3, #7
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	e00a      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005282:	2306      	movs	r3, #6
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	e007      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800528e:	2309      	movs	r3, #9
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	e001      	b.n	8005298 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005294:	2309      	movs	r3, #9
 8005296:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	029b      	lsls	r3, r3, #10
 80052ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80052b0:	431a      	orrs	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	371c      	adds	r7, #28
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	00d8acbf 	.word	0x00d8acbf
 80052c8:	00e4e1c0 	.word	0x00e4e1c0
 80052cc:	00f42400 	.word	0x00f42400
 80052d0:	01067380 	.word	0x01067380
 80052d4:	011a499f 	.word	0x011a499f
 80052d8:	01312cff 	.word	0x01312cff
 80052dc:	014ca43f 	.word	0x014ca43f
 80052e0:	016e3600 	.word	0x016e3600
 80052e4:	01a6ab1f 	.word	0x01a6ab1f
 80052e8:	01e84800 	.word	0x01e84800

080052ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f043 0201 	orr.w	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f023 0201 	bic.w	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d115      	bne.n	800537e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800535e:	2001      	movs	r0, #1
 8005360:	f7fb fe8a 	bl	8001078 <HAL_Delay>
      ms++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f001 fa4b 	bl	8006806 <USB_GetMode>
 8005370:	4603      	mov	r3, r0
 8005372:	2b01      	cmp	r3, #1
 8005374:	d01e      	beq.n	80053b4 <USB_SetCurrentMode+0x84>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b31      	cmp	r3, #49	; 0x31
 800537a:	d9f0      	bls.n	800535e <USB_SetCurrentMode+0x2e>
 800537c:	e01a      	b.n	80053b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800537e:	78fb      	ldrb	r3, [r7, #3]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d115      	bne.n	80053b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005390:	2001      	movs	r0, #1
 8005392:	f7fb fe71 	bl	8001078 <HAL_Delay>
      ms++;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3301      	adds	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 fa32 	bl	8006806 <USB_GetMode>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <USB_SetCurrentMode+0x84>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b31      	cmp	r3, #49	; 0x31
 80053ac:	d9f0      	bls.n	8005390 <USB_SetCurrentMode+0x60>
 80053ae:	e001      	b.n	80053b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e005      	b.n	80053c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b32      	cmp	r3, #50	; 0x32
 80053b8:	d101      	bne.n	80053be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053c8:	b084      	sub	sp, #16
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053e2:	2300      	movs	r3, #0
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	e009      	b.n	80053fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	3340      	adds	r3, #64	; 0x40
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	2200      	movs	r2, #0
 80053f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	3301      	adds	r3, #1
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b0e      	cmp	r3, #14
 8005400:	d9f2      	bls.n	80053e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d11c      	bne.n	8005442 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005416:	f043 0302 	orr.w	r3, r3, #2
 800541a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	e005      	b.n	800544e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005454:	461a      	mov	r2, r3
 8005456:	2300      	movs	r3, #0
 8005458:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005460:	4619      	mov	r1, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005468:	461a      	mov	r2, r3
 800546a:	680b      	ldr	r3, [r1, #0]
 800546c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	2b01      	cmp	r3, #1
 8005472:	d10c      	bne.n	800548e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d104      	bne.n	8005484 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800547a:	2100      	movs	r1, #0
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f965 	bl	800574c <USB_SetDevSpeed>
 8005482:	e008      	b.n	8005496 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005484:	2101      	movs	r1, #1
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f960 	bl	800574c <USB_SetDevSpeed>
 800548c:	e003      	b.n	8005496 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800548e:	2103      	movs	r1, #3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f95b 	bl	800574c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005496:	2110      	movs	r1, #16
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f8f3 	bl	8005684 <USB_FlushTxFifo>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f91f 	bl	80056ec <USB_FlushRxFifo>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	461a      	mov	r2, r3
 80054c0:	2300      	movs	r3, #0
 80054c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	461a      	mov	r2, r3
 80054cc:	2300      	movs	r3, #0
 80054ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d6:	461a      	mov	r2, r3
 80054d8:	2300      	movs	r3, #0
 80054da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	e043      	b.n	800556a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f8:	d118      	bne.n	800552c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550c:	461a      	mov	r2, r3
 800550e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	e013      	b.n	800553e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005522:	461a      	mov	r2, r3
 8005524:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	e008      	b.n	800553e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005538:	461a      	mov	r2, r3
 800553a:	2300      	movs	r3, #0
 800553c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554a:	461a      	mov	r2, r3
 800554c:	2300      	movs	r3, #0
 800554e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555c:	461a      	mov	r2, r3
 800555e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005562:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	3301      	adds	r3, #1
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	429a      	cmp	r2, r3
 8005570:	d3b7      	bcc.n	80054e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005572:	2300      	movs	r3, #0
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	e043      	b.n	8005600 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800558a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800558e:	d118      	bne.n	80055c2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10a      	bne.n	80055ac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a2:	461a      	mov	r2, r3
 80055a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	e013      	b.n	80055d4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	461a      	mov	r2, r3
 80055ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	e008      	b.n	80055d4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ce:	461a      	mov	r2, r3
 80055d0:	2300      	movs	r3, #0
 80055d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	461a      	mov	r2, r3
 80055e2:	2300      	movs	r3, #0
 80055e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f2:	461a      	mov	r2, r3
 80055f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	3301      	adds	r3, #1
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	429a      	cmp	r2, r3
 8005606:	d3b7      	bcc.n	8005578 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005616:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800561a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005628:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	2b00      	cmp	r3, #0
 800562e:	d105      	bne.n	800563c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f043 0210 	orr.w	r2, r3, #16
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699a      	ldr	r2, [r3, #24]
 8005640:	4b0e      	ldr	r3, [pc, #56]	; (800567c <USB_DevInit+0x2b4>)
 8005642:	4313      	orrs	r3, r2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f043 0208 	orr.w	r2, r3, #8
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800565a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800565c:	2b01      	cmp	r3, #1
 800565e:	d105      	bne.n	800566c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699a      	ldr	r2, [r3, #24]
 8005664:	4b06      	ldr	r3, [pc, #24]	; (8005680 <USB_DevInit+0x2b8>)
 8005666:	4313      	orrs	r3, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005678:	b004      	add	sp, #16
 800567a:	4770      	bx	lr
 800567c:	803c3800 	.word	0x803c3800
 8005680:	40000004 	.word	0x40000004

08005684 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3301      	adds	r3, #1
 8005696:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4a13      	ldr	r2, [pc, #76]	; (80056e8 <USB_FlushTxFifo+0x64>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d901      	bls.n	80056a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e01b      	b.n	80056dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	daf2      	bge.n	8005692 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	019b      	lsls	r3, r3, #6
 80056b4:	f043 0220 	orr.w	r2, r3, #32
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3301      	adds	r3, #1
 80056c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4a08      	ldr	r2, [pc, #32]	; (80056e8 <USB_FlushTxFifo+0x64>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d901      	bls.n	80056ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e006      	b.n	80056dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d0f0      	beq.n	80056bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	00030d40 	.word	0x00030d40

080056ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3301      	adds	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4a11      	ldr	r2, [pc, #68]	; (8005748 <USB_FlushRxFifo+0x5c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d901      	bls.n	800570a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e018      	b.n	800573c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	daf2      	bge.n	80056f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2210      	movs	r2, #16
 800571a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3301      	adds	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4a08      	ldr	r2, [pc, #32]	; (8005748 <USB_FlushRxFifo+0x5c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d901      	bls.n	800572e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e006      	b.n	800573c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b10      	cmp	r3, #16
 8005738:	d0f0      	beq.n	800571c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	00030d40 	.word	0x00030d40

0800574c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	68f9      	ldr	r1, [r7, #12]
 8005768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800576c:	4313      	orrs	r3, r2
 800576e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800577e:	b480      	push	{r7}
 8005780:	b087      	sub	sp, #28
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 0306 	and.w	r3, r3, #6
 8005796:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d102      	bne.n	80057a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800579e:	2300      	movs	r3, #0
 80057a0:	75fb      	strb	r3, [r7, #23]
 80057a2:	e00a      	b.n	80057ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d002      	beq.n	80057b0 <USB_GetDevSpeed+0x32>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b06      	cmp	r3, #6
 80057ae:	d102      	bne.n	80057b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057b0:	2302      	movs	r3, #2
 80057b2:	75fb      	strb	r3, [r7, #23]
 80057b4:	e001      	b.n	80057ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80057b6:	230f      	movs	r3, #15
 80057b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	371c      	adds	r7, #28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	785b      	ldrb	r3, [r3, #1]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d139      	bne.n	8005858 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	2101      	movs	r1, #1
 80057f6:	fa01 f303 	lsl.w	r3, r1, r3
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	68f9      	ldr	r1, [r7, #12]
 80057fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005802:	4313      	orrs	r3, r2
 8005804:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d153      	bne.n	80058c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	791b      	ldrb	r3, [r3, #4]
 8005836:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005838:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	059b      	lsls	r3, r3, #22
 800583e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005840:	431a      	orrs	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	0159      	lsls	r1, r3, #5
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	440b      	add	r3, r1
 800584a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584e:	4619      	mov	r1, r3
 8005850:	4b20      	ldr	r3, [pc, #128]	; (80058d4 <USB_ActivateEndpoint+0x10c>)
 8005852:	4313      	orrs	r3, r2
 8005854:	600b      	str	r3, [r1, #0]
 8005856:	e035      	b.n	80058c4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585e:	69da      	ldr	r2, [r3, #28]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	f003 030f 	and.w	r3, r3, #15
 8005868:	2101      	movs	r1, #1
 800586a:	fa01 f303 	lsl.w	r3, r1, r3
 800586e:	041b      	lsls	r3, r3, #16
 8005870:	68f9      	ldr	r1, [r7, #12]
 8005872:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005876:	4313      	orrs	r3, r2
 8005878:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d119      	bne.n	80058c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	791b      	ldrb	r3, [r3, #4]
 80058aa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058ac:	430b      	orrs	r3, r1
 80058ae:	431a      	orrs	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	0159      	lsls	r1, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	440b      	add	r3, r1
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	4619      	mov	r1, r3
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <USB_ActivateEndpoint+0x10c>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	10008000 	.word	0x10008000

080058d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	785b      	ldrb	r3, [r3, #1]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d161      	bne.n	80059b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800590a:	d11f      	bne.n	800594c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	440a      	add	r2, r1
 8005922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005926:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800592a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005946:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800594a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	2101      	movs	r1, #1
 800595e:	fa01 f303 	lsl.w	r3, r1, r3
 8005962:	b29b      	uxth	r3, r3
 8005964:	43db      	mvns	r3, r3
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800596c:	4013      	ands	r3, r2
 800596e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	2101      	movs	r1, #1
 8005982:	fa01 f303 	lsl.w	r3, r1, r3
 8005986:	b29b      	uxth	r3, r3
 8005988:	43db      	mvns	r3, r3
 800598a:	68f9      	ldr	r1, [r7, #12]
 800598c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005990:	4013      	ands	r3, r2
 8005992:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	0159      	lsls	r1, r3, #5
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	440b      	add	r3, r1
 80059aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ae:	4619      	mov	r1, r3
 80059b0:	4b35      	ldr	r3, [pc, #212]	; (8005a88 <USB_DeactivateEndpoint+0x1b0>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]
 80059b6:	e060      	b.n	8005a7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ce:	d11f      	bne.n	8005a10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	0151      	lsls	r1, r2, #5
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	440a      	add	r2, r1
 80059e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	2101      	movs	r1, #1
 8005a22:	fa01 f303 	lsl.w	r3, r1, r3
 8005a26:	041b      	lsls	r3, r3, #16
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a30:	4013      	ands	r3, r2
 8005a32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	2101      	movs	r1, #1
 8005a46:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4a:	041b      	lsls	r3, r3, #16
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a54:	4013      	ands	r3, r2
 8005a56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	0159      	lsls	r1, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	440b      	add	r3, r1
 8005a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a72:	4619      	mov	r1, r3
 8005a74:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <USB_DeactivateEndpoint+0x1b4>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	ec337800 	.word	0xec337800
 8005a8c:	eff37800 	.word	0xeff37800

08005a90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08a      	sub	sp, #40	; 0x28
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	f040 8163 	bne.w	8005d78 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d132      	bne.n	8005b20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	0159      	lsls	r1, r3, #5
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	440b      	add	r3, r1
 8005ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4ba5      	ldr	r3, [pc, #660]	; (8005d6c <USB_EPStartXfer+0x2dc>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005afa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	0159      	lsls	r1, r3, #5
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	440b      	add	r3, r1
 8005b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b16:	4619      	mov	r1, r3
 8005b18:	4b95      	ldr	r3, [pc, #596]	; (8005d70 <USB_EPStartXfer+0x2e0>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	610b      	str	r3, [r1, #16]
 8005b1e:	e074      	b.n	8005c0a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	0159      	lsls	r1, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	440b      	add	r3, r1
 8005b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4b8c      	ldr	r3, [pc, #560]	; (8005d70 <USB_EPStartXfer+0x2e0>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	0159      	lsls	r1, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	440b      	add	r3, r1
 8005b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4b83      	ldr	r3, [pc, #524]	; (8005d6c <USB_EPStartXfer+0x2dc>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	6999      	ldr	r1, [r3, #24]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	440b      	add	r3, r1
 8005b7c:	1e59      	subs	r1, r3, #1
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b86:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b88:	4b7a      	ldr	r3, [pc, #488]	; (8005d74 <USB_EPStartXfer+0x2e4>)
 8005b8a:	400b      	ands	r3, r1
 8005b8c:	69b9      	ldr	r1, [r7, #24]
 8005b8e:	0148      	lsls	r0, r1, #5
 8005b90:	69f9      	ldr	r1, [r7, #28]
 8005b92:	4401      	add	r1, r0
 8005b94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba8:	691a      	ldr	r2, [r3, #16]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bb2:	69b9      	ldr	r1, [r7, #24]
 8005bb4:	0148      	lsls	r0, r1, #5
 8005bb6:	69f9      	ldr	r1, [r7, #28]
 8005bb8:	4401      	add	r1, r0
 8005bba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	791b      	ldrb	r3, [r3, #4]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d11f      	bne.n	8005c0a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	0151      	lsls	r1, r2, #5
 8005bdc:	69fa      	ldr	r2, [r7, #28]
 8005bde:	440a      	add	r2, r1
 8005be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005be8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d14b      	bne.n	8005ca8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d009      	beq.n	8005c2c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c24:	461a      	mov	r2, r3
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	791b      	ldrb	r3, [r3, #4]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d128      	bne.n	8005c86 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d110      	bne.n	8005c66 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	69fa      	ldr	r2, [r7, #28]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e00f      	b.n	8005c86 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	0151      	lsls	r1, r2, #5
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	e137      	b.n	8005f18 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	69fa      	ldr	r2, [r7, #28]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cc6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	791b      	ldrb	r3, [r3, #4]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d015      	beq.n	8005cfc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 811f 	beq.w	8005f18 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	2101      	movs	r1, #1
 8005cec:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf0:	69f9      	ldr	r1, [r7, #28]
 8005cf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	634b      	str	r3, [r1, #52]	; 0x34
 8005cfa:	e10d      	b.n	8005f18 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d110      	bne.n	8005d2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	e00f      	b.n	8005d4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	0151      	lsls	r1, r2, #5
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	440a      	add	r2, r1
 8005d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6919      	ldr	r1, [r3, #16]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	781a      	ldrb	r2, [r3, #0]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	b298      	uxth	r0, r3
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	4603      	mov	r3, r0
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 faea 	bl	800633c <USB_WritePacket>
 8005d68:	e0d6      	b.n	8005f18 <USB_EPStartXfer+0x488>
 8005d6a:	bf00      	nop
 8005d6c:	e007ffff 	.word	0xe007ffff
 8005d70:	fff80000 	.word	0xfff80000
 8005d74:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	0159      	lsls	r1, r3, #5
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	440b      	add	r3, r1
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	4619      	mov	r1, r3
 8005d94:	4b63      	ldr	r3, [pc, #396]	; (8005f24 <USB_EPStartXfer+0x494>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	0159      	lsls	r1, r3, #5
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	440b      	add	r3, r1
 8005db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db4:	4619      	mov	r1, r3
 8005db6:	4b5c      	ldr	r3, [pc, #368]	; (8005f28 <USB_EPStartXfer+0x498>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d123      	bne.n	8005e0c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dda:	69b9      	ldr	r1, [r7, #24]
 8005ddc:	0148      	lsls	r0, r1, #5
 8005dde:	69f9      	ldr	r1, [r7, #28]
 8005de0:	4401      	add	r1, r0
 8005de2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005de6:	4313      	orrs	r3, r2
 8005de8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e08:	6113      	str	r3, [r2, #16]
 8005e0a:	e037      	b.n	8005e7c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	699a      	ldr	r2, [r3, #24]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	1e5a      	subs	r2, r3, #1
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e20:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	8afa      	ldrh	r2, [r7, #22]
 8005e28:	fb03 f202 	mul.w	r2, r3, r2
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	8afb      	ldrh	r3, [r7, #22]
 8005e40:	04d9      	lsls	r1, r3, #19
 8005e42:	4b3a      	ldr	r3, [pc, #232]	; (8005f2c <USB_EPStartXfer+0x49c>)
 8005e44:	400b      	ands	r3, r1
 8005e46:	69b9      	ldr	r1, [r7, #24]
 8005e48:	0148      	lsls	r0, r1, #5
 8005e4a:	69f9      	ldr	r1, [r7, #28]
 8005e4c:	4401      	add	r1, r0
 8005e4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e52:	4313      	orrs	r3, r2
 8005e54:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e6c:	69b9      	ldr	r1, [r7, #24]
 8005e6e:	0148      	lsls	r0, r1, #5
 8005e70:	69f9      	ldr	r1, [r7, #28]
 8005e72:	4401      	add	r1, r0
 8005e74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d10d      	bne.n	8005e9e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d009      	beq.n	8005e9e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	6919      	ldr	r1, [r3, #16]
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9a:	460a      	mov	r2, r1
 8005e9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	791b      	ldrb	r3, [r3, #4]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d128      	bne.n	8005ef8 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d110      	bne.n	8005ed8 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	0151      	lsls	r1, r2, #5
 8005ec8:	69fa      	ldr	r2, [r7, #28]
 8005eca:	440a      	add	r2, r1
 8005ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	e00f      	b.n	8005ef8 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	0151      	lsls	r1, r2, #5
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	440a      	add	r2, r1
 8005f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3720      	adds	r7, #32
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	fff80000 	.word	0xfff80000
 8005f28:	e007ffff 	.word	0xe007ffff
 8005f2c:	1ff80000 	.word	0x1ff80000

08005f30 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	f040 80ce 	bne.w	80060ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d132      	bne.n	8005fc0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	0159      	lsls	r1, r3, #5
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	440b      	add	r3, r1
 8005f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f74:	4619      	mov	r1, r3
 8005f76:	4b9a      	ldr	r3, [pc, #616]	; (80061e0 <USB_EP0StartXfer+0x2b0>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	0159      	lsls	r1, r3, #5
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	440b      	add	r3, r1
 8005fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4b8a      	ldr	r3, [pc, #552]	; (80061e4 <USB_EP0StartXfer+0x2b4>)
 8005fba:	4013      	ands	r3, r2
 8005fbc:	610b      	str	r3, [r1, #16]
 8005fbe:	e04e      	b.n	800605e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	0159      	lsls	r1, r3, #5
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	440b      	add	r3, r1
 8005fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4b81      	ldr	r3, [pc, #516]	; (80061e4 <USB_EP0StartXfer+0x2b4>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fee:	691a      	ldr	r2, [r3, #16]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	0159      	lsls	r1, r3, #5
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	440b      	add	r3, r1
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4b78      	ldr	r3, [pc, #480]	; (80061e0 <USB_EP0StartXfer+0x2b0>)
 8006000:	4013      	ands	r3, r2
 8006002:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	699a      	ldr	r2, [r3, #24]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	429a      	cmp	r2, r3
 800600e:	d903      	bls.n	8006018 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006032:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006036:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800604e:	6939      	ldr	r1, [r7, #16]
 8006050:	0148      	lsls	r0, r1, #5
 8006052:	6979      	ldr	r1, [r7, #20]
 8006054:	4401      	add	r1, r0
 8006056:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800605a:	4313      	orrs	r3, r2
 800605c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d11e      	bne.n	80060a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d009      	beq.n	8006080 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	e097      	b.n	80061d2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 8083 	beq.w	80061d2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	2101      	movs	r1, #1
 80060de:	fa01 f303 	lsl.w	r3, r1, r3
 80060e2:	6979      	ldr	r1, [r7, #20]
 80060e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060e8:	4313      	orrs	r3, r2
 80060ea:	634b      	str	r3, [r1, #52]	; 0x34
 80060ec:	e071      	b.n	80061d2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	0159      	lsls	r1, r3, #5
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	440b      	add	r3, r1
 8006104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006108:	4619      	mov	r1, r3
 800610a:	4b36      	ldr	r3, [pc, #216]	; (80061e4 <USB_EP0StartXfer+0x2b4>)
 800610c:	4013      	ands	r3, r2
 800610e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611c:	691a      	ldr	r2, [r3, #16]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	0159      	lsls	r1, r3, #5
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	440b      	add	r3, r1
 8006126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612a:	4619      	mov	r1, r3
 800612c:	4b2c      	ldr	r3, [pc, #176]	; (80061e0 <USB_EP0StartXfer+0x2b0>)
 800612e:	4013      	ands	r3, r2
 8006130:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	440a      	add	r2, r1
 8006160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006168:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006180:	6939      	ldr	r1, [r7, #16]
 8006182:	0148      	lsls	r0, r1, #5
 8006184:	6979      	ldr	r1, [r7, #20]
 8006186:	4401      	add	r1, r0
 8006188:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800618c:	4313      	orrs	r3, r2
 800618e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d10d      	bne.n	80061b2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d009      	beq.n	80061b2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	6919      	ldr	r1, [r3, #16]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	460a      	mov	r2, r1
 80061b0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	e007ffff 	.word	0xe007ffff
 80061e4:	fff80000 	.word	0xfff80000

080061e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	785b      	ldrb	r3, [r3, #1]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d14a      	bne.n	800629c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800621a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800621e:	f040 8086 	bne.w	800632e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	7812      	ldrb	r2, [r2, #0]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006240:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006244:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	7812      	ldrb	r2, [r2, #0]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006264:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006268:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3301      	adds	r3, #1
 800626e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f242 7210 	movw	r2, #10000	; 0x2710
 8006276:	4293      	cmp	r3, r2
 8006278:	d902      	bls.n	8006280 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	75fb      	strb	r3, [r7, #23]
          break;
 800627e:	e056      	b.n	800632e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006298:	d0e7      	beq.n	800626a <USB_EPStopXfer+0x82>
 800629a:	e048      	b.n	800632e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062b4:	d13b      	bne.n	800632e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	7812      	ldrb	r2, [r2, #0]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	7812      	ldrb	r2, [r2, #0]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	3301      	adds	r3, #1
 8006302:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f242 7210 	movw	r2, #10000	; 0x2710
 800630a:	4293      	cmp	r3, r2
 800630c:	d902      	bls.n	8006314 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	75fb      	strb	r3, [r7, #23]
          break;
 8006312:	e00c      	b.n	800632e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800632c:	d0e7      	beq.n	80062fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006330:	4618      	mov	r0, r3
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800633c:	b480      	push	{r7}
 800633e:	b089      	sub	sp, #36	; 0x24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4611      	mov	r1, r2
 8006348:	461a      	mov	r2, r3
 800634a:	460b      	mov	r3, r1
 800634c:	71fb      	strb	r3, [r7, #7]
 800634e:	4613      	mov	r3, r2
 8006350:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800635a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	d123      	bne.n	80063aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006362:	88bb      	ldrh	r3, [r7, #4]
 8006364:	3303      	adds	r3, #3
 8006366:	089b      	lsrs	r3, r3, #2
 8006368:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800636a:	2300      	movs	r3, #0
 800636c:	61bb      	str	r3, [r7, #24]
 800636e:	e018      	b.n	80063a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	031a      	lsls	r2, r3, #12
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	4413      	add	r3, r2
 8006378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800637c:	461a      	mov	r2, r3
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	3301      	adds	r3, #1
 8006388:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	3301      	adds	r3, #1
 800638e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	3301      	adds	r3, #1
 8006394:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	3301      	adds	r3, #1
 800639a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	3301      	adds	r3, #1
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d3e2      	bcc.n	8006370 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3724      	adds	r7, #36	; 0x24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b08b      	sub	sp, #44	; 0x2c
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	4613      	mov	r3, r2
 80063c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	089b      	lsrs	r3, r3, #2
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	f003 0303 	and.w	r3, r3, #3
 80063dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063de:	2300      	movs	r3, #0
 80063e0:	623b      	str	r3, [r7, #32]
 80063e2:	e014      	b.n	800640e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	3301      	adds	r3, #1
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	3301      	adds	r3, #1
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	3301      	adds	r3, #1
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	3301      	adds	r3, #1
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	3301      	adds	r3, #1
 800640c:	623b      	str	r3, [r7, #32]
 800640e:	6a3a      	ldr	r2, [r7, #32]
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	429a      	cmp	r2, r3
 8006414:	d3e6      	bcc.n	80063e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006416:	8bfb      	ldrh	r3, [r7, #30]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01e      	beq.n	800645a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006426:	461a      	mov	r2, r3
 8006428:	f107 0310 	add.w	r3, r7, #16
 800642c:	6812      	ldr	r2, [r2, #0]
 800642e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	fa22 f303 	lsr.w	r3, r2, r3
 800643c:	b2da      	uxtb	r2, r3
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	701a      	strb	r2, [r3, #0]
      i++;
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	3301      	adds	r3, #1
 8006446:	623b      	str	r3, [r7, #32]
      pDest++;
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	3301      	adds	r3, #1
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800644e:	8bfb      	ldrh	r3, [r7, #30]
 8006450:	3b01      	subs	r3, #1
 8006452:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006454:	8bfb      	ldrh	r3, [r7, #30]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1ea      	bne.n	8006430 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800645c:	4618      	mov	r0, r3
 800645e:	372c      	adds	r7, #44	; 0x2c
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d12c      	bne.n	80064de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	db12      	blt.n	80064bc <USB_EPSetStall+0x54>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00f      	beq.n	80064bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	0151      	lsls	r1, r2, #5
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	440a      	add	r2, r1
 80064d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	e02b      	b.n	8006536 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	db12      	blt.n	8006516 <USB_EPSetStall+0xae>
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00f      	beq.n	8006516 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	440a      	add	r2, r1
 800650c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006510:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006514:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	0151      	lsls	r1, r2, #5
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	440a      	add	r2, r1
 800652c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006534:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d128      	bne.n	80065b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800657a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800657e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	791b      	ldrb	r3, [r3, #4]
 8006584:	2b03      	cmp	r3, #3
 8006586:	d003      	beq.n	8006590 <USB_EPClearStall+0x4c>
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	791b      	ldrb	r3, [r3, #4]
 800658c:	2b02      	cmp	r3, #2
 800658e:	d138      	bne.n	8006602 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	0151      	lsls	r1, r2, #5
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	440a      	add	r2, r1
 80065a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	e027      	b.n	8006602 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	0151      	lsls	r1, r2, #5
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	440a      	add	r2, r1
 80065c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	791b      	ldrb	r3, [r3, #4]
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d003      	beq.n	80065e2 <USB_EPClearStall+0x9e>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	791b      	ldrb	r3, [r3, #4]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d10f      	bne.n	8006602 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	0151      	lsls	r1, r2, #5
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	440a      	add	r2, r1
 80065f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006600:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	460b      	mov	r3, r1
 800661a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800662e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006632:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	78fb      	ldrb	r3, [r7, #3]
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006644:	68f9      	ldr	r1, [r7, #12]
 8006646:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800664a:	4313      	orrs	r3, r2
 800664c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800668a:	f023 0302 	bic.w	r3, r3, #2
 800668e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066b8:	f023 0303 	bic.w	r3, r3, #3
 80066bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066cc:	f043 0302 	orr.w	r3, r3, #2
 80066d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4013      	ands	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066f8:	68fb      	ldr	r3, [r7, #12]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006706:	b480      	push	{r7}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	4013      	ands	r3, r2
 8006728:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	0c1b      	lsrs	r3, r3, #16
}
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800673a:	b480      	push	{r7}
 800673c:	b085      	sub	sp, #20
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	4013      	ands	r3, r2
 800675c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	b29b      	uxth	r3, r3
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	460b      	mov	r3, r1
 8006778:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800677e:	78fb      	ldrb	r3, [r7, #3]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	4013      	ands	r3, r2
 800679a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800679c:	68bb      	ldr	r3, [r7, #8]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b087      	sub	sp, #28
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	460b      	mov	r3, r1
 80067b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	fa22 f303 	lsr.w	r3, r2, r3
 80067da:	01db      	lsls	r3, r3, #7
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4013      	ands	r3, r2
 80067f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067f8:	68bb      	ldr	r3, [r7, #8]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	f003 0301 	and.w	r3, r3, #1
}
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683e:	4619      	mov	r1, r3
 8006840:	4b09      	ldr	r3, [pc, #36]	; (8006868 <USB_ActivateSetup+0x44>)
 8006842:	4013      	ands	r3, r2
 8006844:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006858:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	fffff800 	.word	0xfffff800

0800686c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	460b      	mov	r3, r1
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	333c      	adds	r3, #60	; 0x3c
 8006882:	3304      	adds	r3, #4
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	4a26      	ldr	r2, [pc, #152]	; (8006924 <USB_EP0_OutStart+0xb8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d90a      	bls.n	80068a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800689c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068a0:	d101      	bne.n	80068a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e037      	b.n	8006916 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ac:	461a      	mov	r2, r3
 80068ae:	2300      	movs	r3, #0
 80068b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068d4:	f043 0318 	orr.w	r3, r3, #24
 80068d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80068ee:	7afb      	ldrb	r3, [r7, #11]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d10f      	bne.n	8006914 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fa:	461a      	mov	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800690e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006912:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	371c      	adds	r7, #28
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	4f54300a 	.word	0x4f54300a

08006928 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4a13      	ldr	r2, [pc, #76]	; (800698c <USB_CoreReset+0x64>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d901      	bls.n	8006946 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e01b      	b.n	800697e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	daf2      	bge.n	8006934 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f043 0201 	orr.w	r2, r3, #1
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3301      	adds	r3, #1
 8006962:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4a09      	ldr	r2, [pc, #36]	; (800698c <USB_CoreReset+0x64>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d901      	bls.n	8006970 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e006      	b.n	800697e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b01      	cmp	r3, #1
 800697a:	d0f0      	beq.n	800695e <USB_CoreReset+0x36>

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	00030d40 	.word	0x00030d40

08006990 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800699c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80069a0:	f002 ff84 	bl	80098ac <malloc>
 80069a4:	4603      	mov	r3, r0
 80069a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d109      	bne.n	80069c2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	32b0      	adds	r2, #176	; 0xb0
 80069b8:	2100      	movs	r1, #0
 80069ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80069be:	2302      	movs	r3, #2
 80069c0:	e0d4      	b.n	8006b6c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80069c2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80069c6:	2100      	movs	r1, #0
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f003 f82b 	bl	8009a24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	32b0      	adds	r2, #176	; 0xb0
 80069d8:	68f9      	ldr	r1, [r7, #12]
 80069da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	32b0      	adds	r2, #176	; 0xb0
 80069e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	7c1b      	ldrb	r3, [r3, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d138      	bne.n	8006a6c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069fa:	4b5e      	ldr	r3, [pc, #376]	; (8006b74 <USBD_CDC_Init+0x1e4>)
 80069fc:	7819      	ldrb	r1, [r3, #0]
 80069fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a02:	2202      	movs	r2, #2
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f002 fb3c 	bl	8009082 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a0a:	4b5a      	ldr	r3, [pc, #360]	; (8006b74 <USBD_CDC_Init+0x1e4>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	f003 020f 	and.w	r2, r3, #15
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	3324      	adds	r3, #36	; 0x24
 8006a20:	2201      	movs	r2, #1
 8006a22:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a24:	4b54      	ldr	r3, [pc, #336]	; (8006b78 <USBD_CDC_Init+0x1e8>)
 8006a26:	7819      	ldrb	r1, [r3, #0]
 8006a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f002 fb27 	bl	8009082 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a34:	4b50      	ldr	r3, [pc, #320]	; (8006b78 <USBD_CDC_Init+0x1e8>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	f003 020f 	and.w	r2, r3, #15
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a50:	4b4a      	ldr	r3, [pc, #296]	; (8006b7c <USBD_CDC_Init+0x1ec>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	f003 020f 	and.w	r2, r3, #15
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	440b      	add	r3, r1
 8006a64:	3326      	adds	r3, #38	; 0x26
 8006a66:	2210      	movs	r2, #16
 8006a68:	801a      	strh	r2, [r3, #0]
 8006a6a:	e035      	b.n	8006ad8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a6c:	4b41      	ldr	r3, [pc, #260]	; (8006b74 <USBD_CDC_Init+0x1e4>)
 8006a6e:	7819      	ldrb	r1, [r3, #0]
 8006a70:	2340      	movs	r3, #64	; 0x40
 8006a72:	2202      	movs	r2, #2
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f002 fb04 	bl	8009082 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a7a:	4b3e      	ldr	r3, [pc, #248]	; (8006b74 <USBD_CDC_Init+0x1e4>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	f003 020f 	and.w	r2, r3, #15
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	4613      	mov	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	440b      	add	r3, r1
 8006a8e:	3324      	adds	r3, #36	; 0x24
 8006a90:	2201      	movs	r2, #1
 8006a92:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a94:	4b38      	ldr	r3, [pc, #224]	; (8006b78 <USBD_CDC_Init+0x1e8>)
 8006a96:	7819      	ldrb	r1, [r3, #0]
 8006a98:	2340      	movs	r3, #64	; 0x40
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f002 faf0 	bl	8009082 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006aa2:	4b35      	ldr	r3, [pc, #212]	; (8006b78 <USBD_CDC_Init+0x1e8>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	f003 020f 	and.w	r2, r3, #15
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	4613      	mov	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	440b      	add	r3, r1
 8006ab6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006aba:	2201      	movs	r2, #1
 8006abc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006abe:	4b2f      	ldr	r3, [pc, #188]	; (8006b7c <USBD_CDC_Init+0x1ec>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	f003 020f 	and.w	r2, r3, #15
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	3326      	adds	r3, #38	; 0x26
 8006ad4:	2210      	movs	r2, #16
 8006ad6:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ad8:	4b28      	ldr	r3, [pc, #160]	; (8006b7c <USBD_CDC_Init+0x1ec>)
 8006ada:	7819      	ldrb	r1, [r3, #0]
 8006adc:	2308      	movs	r3, #8
 8006ade:	2203      	movs	r2, #3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f002 face 	bl	8009082 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ae6:	4b25      	ldr	r3, [pc, #148]	; (8006b7c <USBD_CDC_Init+0x1ec>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	f003 020f 	and.w	r2, r3, #15
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	440b      	add	r3, r1
 8006afa:	3324      	adds	r3, #36	; 0x24
 8006afc:	2201      	movs	r2, #1
 8006afe:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	33b0      	adds	r3, #176	; 0xb0
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8006b36:	2302      	movs	r3, #2
 8006b38:	e018      	b.n	8006b6c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	7c1b      	ldrb	r3, [r3, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b42:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <USBD_CDC_Init+0x1e8>)
 8006b44:	7819      	ldrb	r1, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f002 fb85 	bl	8009260 <USBD_LL_PrepareReceive>
 8006b56:	e008      	b.n	8006b6a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b58:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <USBD_CDC_Init+0x1e8>)
 8006b5a:	7819      	ldrb	r1, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b62:	2340      	movs	r3, #64	; 0x40
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f002 fb7b 	bl	8009260 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	200000bb 	.word	0x200000bb
 8006b78:	200000bc 	.word	0x200000bc
 8006b7c:	200000bd 	.word	0x200000bd

08006b80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b8c:	4b3a      	ldr	r3, [pc, #232]	; (8006c78 <USBD_CDC_DeInit+0xf8>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	4619      	mov	r1, r3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f002 fa9b 	bl	80090ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b98:	4b37      	ldr	r3, [pc, #220]	; (8006c78 <USBD_CDC_DeInit+0xf8>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	f003 020f 	and.w	r2, r3, #15
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	440b      	add	r3, r1
 8006bac:	3324      	adds	r3, #36	; 0x24
 8006bae:	2200      	movs	r2, #0
 8006bb0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006bb2:	4b32      	ldr	r3, [pc, #200]	; (8006c7c <USBD_CDC_DeInit+0xfc>)
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f002 fa88 	bl	80090ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006bbe:	4b2f      	ldr	r3, [pc, #188]	; (8006c7c <USBD_CDC_DeInit+0xfc>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	f003 020f 	and.w	r2, r3, #15
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006bda:	4b29      	ldr	r3, [pc, #164]	; (8006c80 <USBD_CDC_DeInit+0x100>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f002 fa74 	bl	80090ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006be6:	4b26      	ldr	r3, [pc, #152]	; (8006c80 <USBD_CDC_DeInit+0x100>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	f003 020f 	and.w	r2, r3, #15
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	3324      	adds	r3, #36	; 0x24
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006c00:	4b1f      	ldr	r3, [pc, #124]	; (8006c80 <USBD_CDC_DeInit+0x100>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	f003 020f 	and.w	r2, r3, #15
 8006c08:	6879      	ldr	r1, [r7, #4]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	440b      	add	r3, r1
 8006c14:	3326      	adds	r3, #38	; 0x26
 8006c16:	2200      	movs	r2, #0
 8006c18:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	32b0      	adds	r2, #176	; 0xb0
 8006c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01f      	beq.n	8006c6c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	33b0      	adds	r3, #176	; 0xb0
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	32b0      	adds	r2, #176	; 0xb0
 8006c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f002 fe34 	bl	80098bc <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	32b0      	adds	r2, #176	; 0xb0
 8006c5e:	2100      	movs	r1, #0
 8006c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	200000bb 	.word	0x200000bb
 8006c7c:	200000bc 	.word	0x200000bc
 8006c80:	200000bd 	.word	0x200000bd

08006c84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	32b0      	adds	r2, #176	; 0xb0
 8006c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e0bf      	b.n	8006e34 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d050      	beq.n	8006d62 <USBD_CDC_Setup+0xde>
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	f040 80af 	bne.w	8006e24 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	88db      	ldrh	r3, [r3, #6]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d03a      	beq.n	8006d44 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	b25b      	sxtb	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	da1b      	bge.n	8006d10 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	33b0      	adds	r3, #176	; 0xb0
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006cee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	88d2      	ldrh	r2, [r2, #6]
 8006cf4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	88db      	ldrh	r3, [r3, #6]
 8006cfa:	2b07      	cmp	r3, #7
 8006cfc:	bf28      	it	cs
 8006cfe:	2307      	movcs	r3, #7
 8006d00:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	89fa      	ldrh	r2, [r7, #14]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 fd6d 	bl	80087e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006d0e:	e090      	b.n	8006e32 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	785a      	ldrb	r2, [r3, #1]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	88db      	ldrh	r3, [r3, #6]
 8006d1e:	2b3f      	cmp	r3, #63	; 0x3f
 8006d20:	d803      	bhi.n	8006d2a <USBD_CDC_Setup+0xa6>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	88db      	ldrh	r3, [r3, #6]
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	e000      	b.n	8006d2c <USBD_CDC_Setup+0xa8>
 8006d2a:	2240      	movs	r2, #64	; 0x40
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006d32:	6939      	ldr	r1, [r7, #16]
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 fd7f 	bl	8008840 <USBD_CtlPrepareRx>
      break;
 8006d42:	e076      	b.n	8006e32 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	33b0      	adds	r3, #176	; 0xb0
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	7850      	ldrb	r0, [r2, #1]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	4798      	blx	r3
      break;
 8006d60:	e067      	b.n	8006e32 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	2b0b      	cmp	r3, #11
 8006d68:	d851      	bhi.n	8006e0e <USBD_CDC_Setup+0x18a>
 8006d6a:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <USBD_CDC_Setup+0xec>)
 8006d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d70:	08006da1 	.word	0x08006da1
 8006d74:	08006e1d 	.word	0x08006e1d
 8006d78:	08006e0f 	.word	0x08006e0f
 8006d7c:	08006e0f 	.word	0x08006e0f
 8006d80:	08006e0f 	.word	0x08006e0f
 8006d84:	08006e0f 	.word	0x08006e0f
 8006d88:	08006e0f 	.word	0x08006e0f
 8006d8c:	08006e0f 	.word	0x08006e0f
 8006d90:	08006e0f 	.word	0x08006e0f
 8006d94:	08006e0f 	.word	0x08006e0f
 8006d98:	08006dcb 	.word	0x08006dcb
 8006d9c:	08006df5 	.word	0x08006df5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b03      	cmp	r3, #3
 8006daa:	d107      	bne.n	8006dbc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006dac:	f107 030a 	add.w	r3, r7, #10
 8006db0:	2202      	movs	r2, #2
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 fd17 	bl	80087e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dba:	e032      	b.n	8006e22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 fca1 	bl	8008706 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	75fb      	strb	r3, [r7, #23]
          break;
 8006dc8:	e02b      	b.n	8006e22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d107      	bne.n	8006de6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006dd6:	f107 030d 	add.w	r3, r7, #13
 8006dda:	2201      	movs	r2, #1
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 fd02 	bl	80087e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006de4:	e01d      	b.n	8006e22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 fc8c 	bl	8008706 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dee:	2303      	movs	r3, #3
 8006df0:	75fb      	strb	r3, [r7, #23]
          break;
 8006df2:	e016      	b.n	8006e22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d00f      	beq.n	8006e20 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 fc7f 	bl	8008706 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e0c:	e008      	b.n	8006e20 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 fc78 	bl	8008706 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e16:	2303      	movs	r3, #3
 8006e18:	75fb      	strb	r3, [r7, #23]
          break;
 8006e1a:	e002      	b.n	8006e22 <USBD_CDC_Setup+0x19e>
          break;
 8006e1c:	bf00      	nop
 8006e1e:	e008      	b.n	8006e32 <USBD_CDC_Setup+0x1ae>
          break;
 8006e20:	bf00      	nop
      }
      break;
 8006e22:	e006      	b.n	8006e32 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f001 fc6d 	bl	8008706 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e30:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	32b0      	adds	r2, #176	; 0xb0
 8006e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e065      	b.n	8006f32 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	32b0      	adds	r2, #176	; 0xb0
 8006e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e76:	78fb      	ldrb	r3, [r7, #3]
 8006e78:	f003 020f 	and.w	r2, r3, #15
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	440b      	add	r3, r1
 8006e88:	3318      	adds	r3, #24
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d02f      	beq.n	8006ef0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	f003 020f 	and.w	r2, r3, #15
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	3318      	adds	r3, #24
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	78fb      	ldrb	r3, [r7, #3]
 8006ea8:	f003 010f 	and.w	r1, r3, #15
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	440b      	add	r3, r1
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4403      	add	r3, r0
 8006eb8:	3348      	adds	r3, #72	; 0x48
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ec0:	fb01 f303 	mul.w	r3, r1, r3
 8006ec4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d112      	bne.n	8006ef0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006eca:	78fb      	ldrb	r3, [r7, #3]
 8006ecc:	f003 020f 	and.w	r2, r3, #15
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	3318      	adds	r3, #24
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ee2:	78f9      	ldrb	r1, [r7, #3]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f002 f998 	bl	800921e <USBD_LL_Transmit>
 8006eee:	e01f      	b.n	8006f30 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	33b0      	adds	r3, #176	; 0xb0
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d010      	beq.n	8006f30 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	33b0      	adds	r3, #176	; 0xb0
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f2c:	78fa      	ldrb	r2, [r7, #3]
 8006f2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	460b      	mov	r3, r1
 8006f44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	32b0      	adds	r2, #176	; 0xb0
 8006f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	32b0      	adds	r2, #176	; 0xb0
 8006f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e01a      	b.n	8006fa2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f002 f996 	bl	80092a2 <USBD_LL_GetRxDataSize>
 8006f76:	4602      	mov	r2, r0
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	33b0      	adds	r3, #176	; 0xb0
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	32b0      	adds	r2, #176	; 0xb0
 8006fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e025      	b.n	8007018 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	33b0      	adds	r3, #176	; 0xb0
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01a      	beq.n	8007016 <USBD_CDC_EP0_RxReady+0x6c>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fe6:	2bff      	cmp	r3, #255	; 0xff
 8006fe8:	d015      	beq.n	8007016 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	33b0      	adds	r3, #176	; 0xb0
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007002:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800700a:	b292      	uxth	r2, r2
 800700c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	22ff      	movs	r2, #255	; 0xff
 8007012:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007028:	2182      	movs	r1, #130	; 0x82
 800702a:	4818      	ldr	r0, [pc, #96]	; (800708c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800702c:	f000 fd09 	bl	8007a42 <USBD_GetEpDesc>
 8007030:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007032:	2101      	movs	r1, #1
 8007034:	4815      	ldr	r0, [pc, #84]	; (800708c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007036:	f000 fd04 	bl	8007a42 <USBD_GetEpDesc>
 800703a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800703c:	2181      	movs	r1, #129	; 0x81
 800703e:	4813      	ldr	r0, [pc, #76]	; (800708c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007040:	f000 fcff 	bl	8007a42 <USBD_GetEpDesc>
 8007044:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2210      	movs	r2, #16
 8007050:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d006      	beq.n	8007066 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	2200      	movs	r2, #0
 800705c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007060:	711a      	strb	r2, [r3, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d006      	beq.n	800707a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007074:	711a      	strb	r2, [r3, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2243      	movs	r2, #67	; 0x43
 800707e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007080:	4b02      	ldr	r3, [pc, #8]	; (800708c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20000078 	.word	0x20000078

08007090 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007098:	2182      	movs	r1, #130	; 0x82
 800709a:	4818      	ldr	r0, [pc, #96]	; (80070fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800709c:	f000 fcd1 	bl	8007a42 <USBD_GetEpDesc>
 80070a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070a2:	2101      	movs	r1, #1
 80070a4:	4815      	ldr	r0, [pc, #84]	; (80070fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80070a6:	f000 fccc 	bl	8007a42 <USBD_GetEpDesc>
 80070aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070ac:	2181      	movs	r1, #129	; 0x81
 80070ae:	4813      	ldr	r0, [pc, #76]	; (80070fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80070b0:	f000 fcc7 	bl	8007a42 <USBD_GetEpDesc>
 80070b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	2210      	movs	r2, #16
 80070c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d006      	beq.n	80070d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2200      	movs	r2, #0
 80070cc:	711a      	strb	r2, [r3, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f042 0202 	orr.w	r2, r2, #2
 80070d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d006      	beq.n	80070ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	711a      	strb	r2, [r3, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f042 0202 	orr.w	r2, r2, #2
 80070e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2243      	movs	r2, #67	; 0x43
 80070ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070f0:	4b02      	ldr	r3, [pc, #8]	; (80070fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20000078 	.word	0x20000078

08007100 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007108:	2182      	movs	r1, #130	; 0x82
 800710a:	4818      	ldr	r0, [pc, #96]	; (800716c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800710c:	f000 fc99 	bl	8007a42 <USBD_GetEpDesc>
 8007110:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007112:	2101      	movs	r1, #1
 8007114:	4815      	ldr	r0, [pc, #84]	; (800716c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007116:	f000 fc94 	bl	8007a42 <USBD_GetEpDesc>
 800711a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800711c:	2181      	movs	r1, #129	; 0x81
 800711e:	4813      	ldr	r0, [pc, #76]	; (800716c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007120:	f000 fc8f 	bl	8007a42 <USBD_GetEpDesc>
 8007124:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2210      	movs	r2, #16
 8007130:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d006      	beq.n	8007146 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2200      	movs	r2, #0
 800713c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007140:	711a      	strb	r2, [r3, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d006      	beq.n	800715a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007154:	711a      	strb	r2, [r3, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2243      	movs	r2, #67	; 0x43
 800715e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007160:	4b02      	ldr	r3, [pc, #8]	; (800716c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000078 	.word	0x20000078

08007170 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	220a      	movs	r2, #10
 800717c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800717e:	4b03      	ldr	r3, [pc, #12]	; (800718c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007180:	4618      	mov	r0, r3
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	20000034 	.word	0x20000034

08007190 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e009      	b.n	80071b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	33b0      	adds	r3, #176	; 0xb0
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	32b0      	adds	r2, #176	; 0xb0
 80071da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e008      	b.n	80071fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	32b0      	adds	r2, #176	; 0xb0
 800721c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007220:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007228:	2303      	movs	r3, #3
 800722a:	e004      	b.n	8007236 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	32b0      	adds	r2, #176	; 0xb0
 8007256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	32b0      	adds	r2, #176	; 0xb0
 8007266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800726e:	2303      	movs	r3, #3
 8007270:	e018      	b.n	80072a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	7c1b      	ldrb	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10a      	bne.n	8007290 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800727a:	4b0c      	ldr	r3, [pc, #48]	; (80072ac <USBD_CDC_ReceivePacket+0x68>)
 800727c:	7819      	ldrb	r1, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 ffe9 	bl	8009260 <USBD_LL_PrepareReceive>
 800728e:	e008      	b.n	80072a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007290:	4b06      	ldr	r3, [pc, #24]	; (80072ac <USBD_CDC_ReceivePacket+0x68>)
 8007292:	7819      	ldrb	r1, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800729a:	2340      	movs	r3, #64	; 0x40
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 ffdf 	bl	8009260 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	200000bc 	.word	0x200000bc

080072b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	4613      	mov	r3, r2
 80072bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e01f      	b.n	8007308 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	79fa      	ldrb	r2, [r7, #7]
 80072fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f001 fe59 	bl	8008fb4 <USBD_LL_Init>
 8007302:	4603      	mov	r3, r0
 8007304:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007306:	7dfb      	ldrb	r3, [r7, #23]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007324:	2303      	movs	r3, #3
 8007326:	e025      	b.n	8007374 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	32ae      	adds	r2, #174	; 0xae
 800733a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00f      	beq.n	8007364 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	32ae      	adds	r2, #174	; 0xae
 800734e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	f107 020e 	add.w	r2, r7, #14
 8007358:	4610      	mov	r0, r2
 800735a:	4798      	blx	r3
 800735c:	4602      	mov	r2, r0
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 fe61 	bl	800904c <USBD_LL_Start>
 800738a:	4603      	mov	r3, r0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800739c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	460b      	mov	r3, r1
 80073b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d009      	beq.n	80073d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	78fa      	ldrb	r2, [r7, #3]
 80073ce:	4611      	mov	r1, r2
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	78fa      	ldrb	r2, [r7, #3]
 80073fc:	4611      	mov	r1, r2
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	4798      	blx	r3
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007408:	2303      	movs	r3, #3
 800740a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	4618      	mov	r0, r3
 800742a:	f001 f932 	bl	8008692 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800743c:	461a      	mov	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800744a:	f003 031f 	and.w	r3, r3, #31
 800744e:	2b02      	cmp	r3, #2
 8007450:	d01a      	beq.n	8007488 <USBD_LL_SetupStage+0x72>
 8007452:	2b02      	cmp	r3, #2
 8007454:	d822      	bhi.n	800749c <USBD_LL_SetupStage+0x86>
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <USBD_LL_SetupStage+0x4a>
 800745a:	2b01      	cmp	r3, #1
 800745c:	d00a      	beq.n	8007474 <USBD_LL_SetupStage+0x5e>
 800745e:	e01d      	b.n	800749c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fb5f 	bl	8007b2c <USBD_StdDevReq>
 800746e:	4603      	mov	r3, r0
 8007470:	73fb      	strb	r3, [r7, #15]
      break;
 8007472:	e020      	b.n	80074b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fbc7 	bl	8007c10 <USBD_StdItfReq>
 8007482:	4603      	mov	r3, r0
 8007484:	73fb      	strb	r3, [r7, #15]
      break;
 8007486:	e016      	b.n	80074b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fc29 	bl	8007ce8 <USBD_StdEPReq>
 8007496:	4603      	mov	r3, r0
 8007498:	73fb      	strb	r3, [r7, #15]
      break;
 800749a:	e00c      	b.n	80074b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 fe2e 	bl	800910c <USBD_LL_StallEP>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]
      break;
 80074b4:	bf00      	nop
  }

  return ret;
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	460b      	mov	r3, r1
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80074d2:	7afb      	ldrb	r3, [r7, #11]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d16e      	bne.n	80075b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80074de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	f040 8098 	bne.w	800761c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d913      	bls.n	8007520 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	1ad2      	subs	r2, r2, r3
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	4293      	cmp	r3, r2
 8007510:	bf28      	it	cs
 8007512:	4613      	movcs	r3, r2
 8007514:	461a      	mov	r2, r3
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f001 f9ae 	bl	800887a <USBD_CtlContinueRx>
 800751e:	e07d      	b.n	800761c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007526:	f003 031f 	and.w	r3, r3, #31
 800752a:	2b02      	cmp	r3, #2
 800752c:	d014      	beq.n	8007558 <USBD_LL_DataOutStage+0x98>
 800752e:	2b02      	cmp	r3, #2
 8007530:	d81d      	bhi.n	800756e <USBD_LL_DataOutStage+0xae>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <USBD_LL_DataOutStage+0x7c>
 8007536:	2b01      	cmp	r3, #1
 8007538:	d003      	beq.n	8007542 <USBD_LL_DataOutStage+0x82>
 800753a:	e018      	b.n	800756e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	75bb      	strb	r3, [r7, #22]
            break;
 8007540:	e018      	b.n	8007574 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007548:	b2db      	uxtb	r3, r3
 800754a:	4619      	mov	r1, r3
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 fa5e 	bl	8007a0e <USBD_CoreFindIF>
 8007552:	4603      	mov	r3, r0
 8007554:	75bb      	strb	r3, [r7, #22]
            break;
 8007556:	e00d      	b.n	8007574 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800755e:	b2db      	uxtb	r3, r3
 8007560:	4619      	mov	r1, r3
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fa60 	bl	8007a28 <USBD_CoreFindEP>
 8007568:	4603      	mov	r3, r0
 800756a:	75bb      	strb	r3, [r7, #22]
            break;
 800756c:	e002      	b.n	8007574 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	75bb      	strb	r3, [r7, #22]
            break;
 8007572:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007574:	7dbb      	ldrb	r3, [r7, #22]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d119      	bne.n	80075ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b03      	cmp	r3, #3
 8007584:	d113      	bne.n	80075ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007586:	7dba      	ldrb	r2, [r7, #22]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	32ae      	adds	r2, #174	; 0xae
 800758c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00b      	beq.n	80075ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007596:	7dba      	ldrb	r2, [r7, #22]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800759e:	7dba      	ldrb	r2, [r7, #22]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	32ae      	adds	r2, #174	; 0xae
 80075a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f001 f974 	bl	800889c <USBD_CtlSendStatus>
 80075b4:	e032      	b.n	800761c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80075b6:	7afb      	ldrb	r3, [r7, #11]
 80075b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	4619      	mov	r1, r3
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 fa31 	bl	8007a28 <USBD_CoreFindEP>
 80075c6:	4603      	mov	r3, r0
 80075c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075ca:	7dbb      	ldrb	r3, [r7, #22]
 80075cc:	2bff      	cmp	r3, #255	; 0xff
 80075ce:	d025      	beq.n	800761c <USBD_LL_DataOutStage+0x15c>
 80075d0:	7dbb      	ldrb	r3, [r7, #22]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d122      	bne.n	800761c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d117      	bne.n	8007612 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80075e2:	7dba      	ldrb	r2, [r7, #22]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	32ae      	adds	r2, #174	; 0xae
 80075e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00f      	beq.n	8007612 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80075f2:	7dba      	ldrb	r2, [r7, #22]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80075fa:	7dba      	ldrb	r2, [r7, #22]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	32ae      	adds	r2, #174	; 0xae
 8007600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	7afa      	ldrb	r2, [r7, #11]
 8007608:	4611      	mov	r1, r2
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	4798      	blx	r3
 800760e:	4603      	mov	r3, r0
 8007610:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007618:	7dfb      	ldrb	r3, [r7, #23]
 800761a:	e000      	b.n	800761e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b086      	sub	sp, #24
 800762a:	af00      	add	r7, sp, #0
 800762c:	60f8      	str	r0, [r7, #12]
 800762e:	460b      	mov	r3, r1
 8007630:	607a      	str	r2, [r7, #4]
 8007632:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007634:	7afb      	ldrb	r3, [r7, #11]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d16f      	bne.n	800771a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3314      	adds	r3, #20
 800763e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007646:	2b02      	cmp	r3, #2
 8007648:	d15a      	bne.n	8007700 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	689a      	ldr	r2, [r3, #8]
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	429a      	cmp	r2, r3
 8007654:	d914      	bls.n	8007680 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	1ad2      	subs	r2, r2, r3
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	461a      	mov	r2, r3
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f001 f8d6 	bl	800881e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007672:	2300      	movs	r3, #0
 8007674:	2200      	movs	r2, #0
 8007676:	2100      	movs	r1, #0
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f001 fdf1 	bl	8009260 <USBD_LL_PrepareReceive>
 800767e:	e03f      	b.n	8007700 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	429a      	cmp	r2, r3
 800768a:	d11c      	bne.n	80076c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007694:	429a      	cmp	r2, r3
 8007696:	d316      	bcc.n	80076c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d20f      	bcs.n	80076c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076a6:	2200      	movs	r2, #0
 80076a8:	2100      	movs	r1, #0
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f001 f8b7 	bl	800881e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076b8:	2300      	movs	r3, #0
 80076ba:	2200      	movs	r2, #0
 80076bc:	2100      	movs	r1, #0
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f001 fdce 	bl	8009260 <USBD_LL_PrepareReceive>
 80076c4:	e01c      	b.n	8007700 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d10f      	bne.n	80076f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d009      	beq.n	80076f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076f2:	2180      	movs	r1, #128	; 0x80
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f001 fd09 	bl	800910c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f001 f8e1 	bl	80088c2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d03a      	beq.n	8007780 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f7ff fe42 	bl	8007394 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007718:	e032      	b.n	8007780 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800771a:	7afb      	ldrb	r3, [r7, #11]
 800771c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007720:	b2db      	uxtb	r3, r3
 8007722:	4619      	mov	r1, r3
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f97f 	bl	8007a28 <USBD_CoreFindEP>
 800772a:	4603      	mov	r3, r0
 800772c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	2bff      	cmp	r3, #255	; 0xff
 8007732:	d025      	beq.n	8007780 <USBD_LL_DataInStage+0x15a>
 8007734:	7dfb      	ldrb	r3, [r7, #23]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d122      	bne.n	8007780 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b03      	cmp	r3, #3
 8007744:	d11c      	bne.n	8007780 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007746:	7dfa      	ldrb	r2, [r7, #23]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	32ae      	adds	r2, #174	; 0xae
 800774c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d014      	beq.n	8007780 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007756:	7dfa      	ldrb	r2, [r7, #23]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800775e:	7dfa      	ldrb	r2, [r7, #23]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	32ae      	adds	r2, #174	; 0xae
 8007764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	7afa      	ldrb	r2, [r7, #11]
 800776c:	4611      	mov	r1, r2
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	4798      	blx	r3
 8007772:	4603      	mov	r3, r0
 8007774:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007776:	7dbb      	ldrb	r3, [r7, #22]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800777c:	7dbb      	ldrb	r3, [r7, #22]
 800777e:	e000      	b.n	8007782 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d014      	beq.n	80077f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00e      	beq.n	80077f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	6852      	ldr	r2, [r2, #4]
 80077de:	b2d2      	uxtb	r2, r2
 80077e0:	4611      	mov	r1, r2
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	4798      	blx	r3
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80077ec:	2303      	movs	r3, #3
 80077ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077f0:	2340      	movs	r3, #64	; 0x40
 80077f2:	2200      	movs	r2, #0
 80077f4:	2100      	movs	r1, #0
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f001 fc43 	bl	8009082 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2240      	movs	r2, #64	; 0x40
 8007808:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800780c:	2340      	movs	r3, #64	; 0x40
 800780e:	2200      	movs	r2, #0
 8007810:	2180      	movs	r1, #128	; 0x80
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f001 fc35 	bl	8009082 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2240      	movs	r2, #64	; 0x40
 8007822:	621a      	str	r2, [r3, #32]

  return ret;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	460b      	mov	r3, r1
 8007838:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	78fa      	ldrb	r2, [r7, #3]
 800783e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800785c:	b2da      	uxtb	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2204      	movs	r2, #4
 8007868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b04      	cmp	r3, #4
 800788c:	d106      	bne.n	800789c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007894:	b2da      	uxtb	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d110      	bne.n	80078e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00b      	beq.n	80078e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	460b      	mov	r3, r1
 80078f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	32ae      	adds	r2, #174	; 0xae
 8007900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007908:	2303      	movs	r3, #3
 800790a:	e01c      	b.n	8007946 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b03      	cmp	r3, #3
 8007916:	d115      	bne.n	8007944 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	32ae      	adds	r2, #174	; 0xae
 8007922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	32ae      	adds	r2, #174	; 0xae
 8007936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	78fa      	ldrb	r2, [r7, #3]
 800793e:	4611      	mov	r1, r2
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	32ae      	adds	r2, #174	; 0xae
 8007964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800796c:	2303      	movs	r3, #3
 800796e:	e01c      	b.n	80079aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b03      	cmp	r3, #3
 800797a:	d115      	bne.n	80079a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	32ae      	adds	r2, #174	; 0xae
 8007986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00b      	beq.n	80079a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	32ae      	adds	r2, #174	; 0xae
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	78fa      	ldrb	r2, [r7, #3]
 80079a2:	4611      	mov	r1, r2
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00e      	beq.n	8007a04 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6852      	ldr	r2, [r2, #4]
 80079f2:	b2d2      	uxtb	r2, r2
 80079f4:	4611      	mov	r1, r2
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	4798      	blx	r3
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a00:	2303      	movs	r3, #3
 8007a02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	460b      	mov	r3, r1
 8007a18:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a1a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	460b      	mov	r3, r1
 8007a32:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a34:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b086      	sub	sp, #24
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d920      	bls.n	8007aac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a72:	e013      	b.n	8007a9c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a74:	f107 030a 	add.w	r3, r7, #10
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6978      	ldr	r0, [r7, #20]
 8007a7c:	f000 f81b 	bl	8007ab6 <USBD_GetNextDesc>
 8007a80:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	2b05      	cmp	r3, #5
 8007a88:	d108      	bne.n	8007a9c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	789b      	ldrb	r3, [r3, #2]
 8007a92:	78fa      	ldrb	r2, [r7, #3]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d008      	beq.n	8007aaa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	885b      	ldrh	r3, [r3, #2]
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	897b      	ldrh	r3, [r7, #10]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d8e5      	bhi.n	8007a74 <USBD_GetEpDesc+0x32>
 8007aa8:	e000      	b.n	8007aac <USBD_GetEpDesc+0x6a>
          break;
 8007aaa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007aac:	693b      	ldr	r3, [r7, #16]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b085      	sub	sp, #20
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	881a      	ldrh	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	4413      	add	r3, r2
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	461a      	mov	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4413      	add	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	3301      	adds	r3, #1
 8007b06:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b0e:	8a3b      	ldrh	r3, [r7, #16]
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	b21a      	sxth	r2, r3
 8007b14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	b21b      	sxth	r3, r3
 8007b1c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b1e:	89fb      	ldrh	r3, [r7, #14]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b42:	2b40      	cmp	r3, #64	; 0x40
 8007b44:	d005      	beq.n	8007b52 <USBD_StdDevReq+0x26>
 8007b46:	2b40      	cmp	r3, #64	; 0x40
 8007b48:	d857      	bhi.n	8007bfa <USBD_StdDevReq+0xce>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00f      	beq.n	8007b6e <USBD_StdDevReq+0x42>
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	d153      	bne.n	8007bfa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	32ae      	adds	r2, #174	; 0xae
 8007b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	4798      	blx	r3
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b6c:	e04a      	b.n	8007c04 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	785b      	ldrb	r3, [r3, #1]
 8007b72:	2b09      	cmp	r3, #9
 8007b74:	d83b      	bhi.n	8007bee <USBD_StdDevReq+0xc2>
 8007b76:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <USBD_StdDevReq+0x50>)
 8007b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7c:	08007bd1 	.word	0x08007bd1
 8007b80:	08007be5 	.word	0x08007be5
 8007b84:	08007bef 	.word	0x08007bef
 8007b88:	08007bdb 	.word	0x08007bdb
 8007b8c:	08007bef 	.word	0x08007bef
 8007b90:	08007baf 	.word	0x08007baf
 8007b94:	08007ba5 	.word	0x08007ba5
 8007b98:	08007bef 	.word	0x08007bef
 8007b9c:	08007bc7 	.word	0x08007bc7
 8007ba0:	08007bb9 	.word	0x08007bb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fa3c 	bl	8008024 <USBD_GetDescriptor>
          break;
 8007bac:	e024      	b.n	8007bf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fbcb 	bl	800834c <USBD_SetAddress>
          break;
 8007bb6:	e01f      	b.n	8007bf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fc0a 	bl	80083d4 <USBD_SetConfig>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]
          break;
 8007bc4:	e018      	b.n	8007bf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fcad 	bl	8008528 <USBD_GetConfig>
          break;
 8007bce:	e013      	b.n	8007bf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fcde 	bl	8008594 <USBD_GetStatus>
          break;
 8007bd8:	e00e      	b.n	8007bf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fd0d 	bl	80085fc <USBD_SetFeature>
          break;
 8007be2:	e009      	b.n	8007bf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fd31 	bl	800864e <USBD_ClrFeature>
          break;
 8007bec:	e004      	b.n	8007bf8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fd88 	bl	8008706 <USBD_CtlError>
          break;
 8007bf6:	bf00      	nop
      }
      break;
 8007bf8:	e004      	b.n	8007c04 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fd82 	bl	8008706 <USBD_CtlError>
      break;
 8007c02:	bf00      	nop
  }

  return ret;
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop

08007c10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c26:	2b40      	cmp	r3, #64	; 0x40
 8007c28:	d005      	beq.n	8007c36 <USBD_StdItfReq+0x26>
 8007c2a:	2b40      	cmp	r3, #64	; 0x40
 8007c2c:	d852      	bhi.n	8007cd4 <USBD_StdItfReq+0xc4>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <USBD_StdItfReq+0x26>
 8007c32:	2b20      	cmp	r3, #32
 8007c34:	d14e      	bne.n	8007cd4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d840      	bhi.n	8007cc6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	889b      	ldrh	r3, [r3, #4]
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d836      	bhi.n	8007cbc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	889b      	ldrh	r3, [r3, #4]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7ff fed9 	bl	8007a0e <USBD_CoreFindIF>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	2bff      	cmp	r3, #255	; 0xff
 8007c64:	d01d      	beq.n	8007ca2 <USBD_StdItfReq+0x92>
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d11a      	bne.n	8007ca2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c6c:	7bba      	ldrb	r2, [r7, #14]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	32ae      	adds	r2, #174	; 0xae
 8007c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00f      	beq.n	8007c9c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c7c:	7bba      	ldrb	r2, [r7, #14]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c84:	7bba      	ldrb	r2, [r7, #14]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	32ae      	adds	r2, #174	; 0xae
 8007c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	4798      	blx	r3
 8007c96:	4603      	mov	r3, r0
 8007c98:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c9a:	e004      	b.n	8007ca6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ca0:	e001      	b.n	8007ca6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	88db      	ldrh	r3, [r3, #6]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d110      	bne.n	8007cd0 <USBD_StdItfReq+0xc0>
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10d      	bne.n	8007cd0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fdf1 	bl	800889c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007cba:	e009      	b.n	8007cd0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fd21 	bl	8008706 <USBD_CtlError>
          break;
 8007cc4:	e004      	b.n	8007cd0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fd1c 	bl	8008706 <USBD_CtlError>
          break;
 8007cce:	e000      	b.n	8007cd2 <USBD_StdItfReq+0xc2>
          break;
 8007cd0:	bf00      	nop
      }
      break;
 8007cd2:	e004      	b.n	8007cde <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fd15 	bl	8008706 <USBD_CtlError>
      break;
 8007cdc:	bf00      	nop
  }

  return ret;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	889b      	ldrh	r3, [r3, #4]
 8007cfa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d04:	2b40      	cmp	r3, #64	; 0x40
 8007d06:	d007      	beq.n	8007d18 <USBD_StdEPReq+0x30>
 8007d08:	2b40      	cmp	r3, #64	; 0x40
 8007d0a:	f200 817f 	bhi.w	800800c <USBD_StdEPReq+0x324>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d02a      	beq.n	8007d68 <USBD_StdEPReq+0x80>
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	f040 817a 	bne.w	800800c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff fe83 	bl	8007a28 <USBD_CoreFindEP>
 8007d22:	4603      	mov	r3, r0
 8007d24:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d26:	7b7b      	ldrb	r3, [r7, #13]
 8007d28:	2bff      	cmp	r3, #255	; 0xff
 8007d2a:	f000 8174 	beq.w	8008016 <USBD_StdEPReq+0x32e>
 8007d2e:	7b7b      	ldrb	r3, [r7, #13]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f040 8170 	bne.w	8008016 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d36:	7b7a      	ldrb	r2, [r7, #13]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d3e:	7b7a      	ldrb	r2, [r7, #13]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	32ae      	adds	r2, #174	; 0xae
 8007d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 8163 	beq.w	8008016 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007d50:	7b7a      	ldrb	r2, [r7, #13]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	32ae      	adds	r2, #174	; 0xae
 8007d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
 8007d62:	4603      	mov	r3, r0
 8007d64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d66:	e156      	b.n	8008016 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	785b      	ldrb	r3, [r3, #1]
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d008      	beq.n	8007d82 <USBD_StdEPReq+0x9a>
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	f300 8145 	bgt.w	8008000 <USBD_StdEPReq+0x318>
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 809b 	beq.w	8007eb2 <USBD_StdEPReq+0x1ca>
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d03c      	beq.n	8007dfa <USBD_StdEPReq+0x112>
 8007d80:	e13e      	b.n	8008000 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d002      	beq.n	8007d94 <USBD_StdEPReq+0xac>
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d016      	beq.n	8007dc0 <USBD_StdEPReq+0xd8>
 8007d92:	e02c      	b.n	8007dee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00d      	beq.n	8007db6 <USBD_StdEPReq+0xce>
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	2b80      	cmp	r3, #128	; 0x80
 8007d9e:	d00a      	beq.n	8007db6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 f9b1 	bl	800910c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007daa:	2180      	movs	r1, #128	; 0x80
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 f9ad 	bl	800910c <USBD_LL_StallEP>
 8007db2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007db4:	e020      	b.n	8007df8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fca4 	bl	8008706 <USBD_CtlError>
              break;
 8007dbe:	e01b      	b.n	8007df8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	885b      	ldrh	r3, [r3, #2]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10e      	bne.n	8007de6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00b      	beq.n	8007de6 <USBD_StdEPReq+0xfe>
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	2b80      	cmp	r3, #128	; 0x80
 8007dd2:	d008      	beq.n	8007de6 <USBD_StdEPReq+0xfe>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	88db      	ldrh	r3, [r3, #6]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d104      	bne.n	8007de6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 f993 	bl	800910c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fd58 	bl	800889c <USBD_CtlSendStatus>

              break;
 8007dec:	e004      	b.n	8007df8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fc88 	bl	8008706 <USBD_CtlError>
              break;
 8007df6:	bf00      	nop
          }
          break;
 8007df8:	e107      	b.n	800800a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d002      	beq.n	8007e0c <USBD_StdEPReq+0x124>
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d016      	beq.n	8007e38 <USBD_StdEPReq+0x150>
 8007e0a:	e04b      	b.n	8007ea4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00d      	beq.n	8007e2e <USBD_StdEPReq+0x146>
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	2b80      	cmp	r3, #128	; 0x80
 8007e16:	d00a      	beq.n	8007e2e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 f975 	bl	800910c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e22:	2180      	movs	r1, #128	; 0x80
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 f971 	bl	800910c <USBD_LL_StallEP>
 8007e2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e2c:	e040      	b.n	8007eb0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fc68 	bl	8008706 <USBD_CtlError>
              break;
 8007e36:	e03b      	b.n	8007eb0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	885b      	ldrh	r3, [r3, #2]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d136      	bne.n	8007eae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d004      	beq.n	8007e54 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 f97b 	bl	800914a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fd21 	bl	800889c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7ff fde2 	bl	8007a28 <USBD_CoreFindEP>
 8007e64:	4603      	mov	r3, r0
 8007e66:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e68:	7b7b      	ldrb	r3, [r7, #13]
 8007e6a:	2bff      	cmp	r3, #255	; 0xff
 8007e6c:	d01f      	beq.n	8007eae <USBD_StdEPReq+0x1c6>
 8007e6e:	7b7b      	ldrb	r3, [r7, #13]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d11c      	bne.n	8007eae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e74:	7b7a      	ldrb	r2, [r7, #13]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e7c:	7b7a      	ldrb	r2, [r7, #13]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	32ae      	adds	r2, #174	; 0xae
 8007e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d010      	beq.n	8007eae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e8c:	7b7a      	ldrb	r2, [r7, #13]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	32ae      	adds	r2, #174	; 0xae
 8007e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	4798      	blx	r3
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007ea2:	e004      	b.n	8007eae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fc2d 	bl	8008706 <USBD_CtlError>
              break;
 8007eac:	e000      	b.n	8007eb0 <USBD_StdEPReq+0x1c8>
              break;
 8007eae:	bf00      	nop
          }
          break;
 8007eb0:	e0ab      	b.n	800800a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d002      	beq.n	8007ec4 <USBD_StdEPReq+0x1dc>
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d032      	beq.n	8007f28 <USBD_StdEPReq+0x240>
 8007ec2:	e097      	b.n	8007ff4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d007      	beq.n	8007eda <USBD_StdEPReq+0x1f2>
 8007eca:	7bbb      	ldrb	r3, [r7, #14]
 8007ecc:	2b80      	cmp	r3, #128	; 0x80
 8007ece:	d004      	beq.n	8007eda <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fc17 	bl	8008706 <USBD_CtlError>
                break;
 8007ed8:	e091      	b.n	8007ffe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	da0b      	bge.n	8007efa <USBD_StdEPReq+0x212>
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ee8:	4613      	mov	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	3310      	adds	r3, #16
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	e00b      	b.n	8007f12 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	4413      	add	r3, r2
 8007f10:	3304      	adds	r3, #4
 8007f12:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fc61 	bl	80087e8 <USBD_CtlSendData>
              break;
 8007f26:	e06a      	b.n	8007ffe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	da11      	bge.n	8007f54 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	f003 020f 	and.w	r2, r3, #15
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	440b      	add	r3, r1
 8007f42:	3324      	adds	r3, #36	; 0x24
 8007f44:	881b      	ldrh	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d117      	bne.n	8007f7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fbda 	bl	8008706 <USBD_CtlError>
                  break;
 8007f52:	e054      	b.n	8007ffe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	f003 020f 	and.w	r2, r3, #15
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f6a:	881b      	ldrh	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d104      	bne.n	8007f7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fbc7 	bl	8008706 <USBD_CtlError>
                  break;
 8007f78:	e041      	b.n	8007ffe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	da0b      	bge.n	8007f9a <USBD_StdEPReq+0x2b2>
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f88:	4613      	mov	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	3310      	adds	r3, #16
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	4413      	add	r3, r2
 8007f96:	3304      	adds	r3, #4
 8007f98:	e00b      	b.n	8007fb2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	4413      	add	r3, r2
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <USBD_StdEPReq+0x2d8>
 8007fba:	7bbb      	ldrb	r3, [r7, #14]
 8007fbc:	2b80      	cmp	r3, #128	; 0x80
 8007fbe:	d103      	bne.n	8007fc8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	e00e      	b.n	8007fe6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 f8db 	bl	8009188 <USBD_LL_IsStallEP>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e002      	b.n	8007fe6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fbfb 	bl	80087e8 <USBD_CtlSendData>
              break;
 8007ff2:	e004      	b.n	8007ffe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fb85 	bl	8008706 <USBD_CtlError>
              break;
 8007ffc:	bf00      	nop
          }
          break;
 8007ffe:	e004      	b.n	800800a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fb7f 	bl	8008706 <USBD_CtlError>
          break;
 8008008:	bf00      	nop
      }
      break;
 800800a:	e005      	b.n	8008018 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fb79 	bl	8008706 <USBD_CtlError>
      break;
 8008014:	e000      	b.n	8008018 <USBD_StdEPReq+0x330>
      break;
 8008016:	bf00      	nop
  }

  return ret;
 8008018:	7bfb      	ldrb	r3, [r7, #15]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008032:	2300      	movs	r3, #0
 8008034:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	885b      	ldrh	r3, [r3, #2]
 800803e:	0a1b      	lsrs	r3, r3, #8
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	2b0e      	cmp	r3, #14
 8008046:	f200 8152 	bhi.w	80082ee <USBD_GetDescriptor+0x2ca>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <USBD_GetDescriptor+0x2c>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	080080c1 	.word	0x080080c1
 8008054:	080080d9 	.word	0x080080d9
 8008058:	08008119 	.word	0x08008119
 800805c:	080082ef 	.word	0x080082ef
 8008060:	080082ef 	.word	0x080082ef
 8008064:	0800828f 	.word	0x0800828f
 8008068:	080082bb 	.word	0x080082bb
 800806c:	080082ef 	.word	0x080082ef
 8008070:	080082ef 	.word	0x080082ef
 8008074:	080082ef 	.word	0x080082ef
 8008078:	080082ef 	.word	0x080082ef
 800807c:	080082ef 	.word	0x080082ef
 8008080:	080082ef 	.word	0x080082ef
 8008084:	080082ef 	.word	0x080082ef
 8008088:	0800808d 	.word	0x0800808d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	7c12      	ldrb	r2, [r2, #16]
 80080a4:	f107 0108 	add.w	r1, r7, #8
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
 80080ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080ae:	e126      	b.n	80082fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fb27 	bl	8008706 <USBD_CtlError>
        err++;
 80080b8:	7afb      	ldrb	r3, [r7, #11]
 80080ba:	3301      	adds	r3, #1
 80080bc:	72fb      	strb	r3, [r7, #11]
      break;
 80080be:	e11e      	b.n	80082fe <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	7c12      	ldrb	r2, [r2, #16]
 80080cc:	f107 0108 	add.w	r1, r7, #8
 80080d0:	4610      	mov	r0, r2
 80080d2:	4798      	blx	r3
 80080d4:	60f8      	str	r0, [r7, #12]
      break;
 80080d6:	e112      	b.n	80082fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	7c1b      	ldrb	r3, [r3, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10d      	bne.n	80080fc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	f107 0208 	add.w	r2, r7, #8
 80080ec:	4610      	mov	r0, r2
 80080ee:	4798      	blx	r3
 80080f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3301      	adds	r3, #1
 80080f6:	2202      	movs	r2, #2
 80080f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080fa:	e100      	b.n	80082fe <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	f107 0208 	add.w	r2, r7, #8
 8008108:	4610      	mov	r0, r2
 800810a:	4798      	blx	r3
 800810c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3301      	adds	r3, #1
 8008112:	2202      	movs	r2, #2
 8008114:	701a      	strb	r2, [r3, #0]
      break;
 8008116:	e0f2      	b.n	80082fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	885b      	ldrh	r3, [r3, #2]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b05      	cmp	r3, #5
 8008120:	f200 80ac 	bhi.w	800827c <USBD_GetDescriptor+0x258>
 8008124:	a201      	add	r2, pc, #4	; (adr r2, 800812c <USBD_GetDescriptor+0x108>)
 8008126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812a:	bf00      	nop
 800812c:	08008145 	.word	0x08008145
 8008130:	08008179 	.word	0x08008179
 8008134:	080081ad 	.word	0x080081ad
 8008138:	080081e1 	.word	0x080081e1
 800813c:	08008215 	.word	0x08008215
 8008140:	08008249 	.word	0x08008249
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	7c12      	ldrb	r2, [r2, #16]
 800815c:	f107 0108 	add.w	r1, r7, #8
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
 8008164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008166:	e091      	b.n	800828c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 facb 	bl	8008706 <USBD_CtlError>
            err++;
 8008170:	7afb      	ldrb	r3, [r7, #11]
 8008172:	3301      	adds	r3, #1
 8008174:	72fb      	strb	r3, [r7, #11]
          break;
 8008176:	e089      	b.n	800828c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00b      	beq.n	800819c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	7c12      	ldrb	r2, [r2, #16]
 8008190:	f107 0108 	add.w	r1, r7, #8
 8008194:	4610      	mov	r0, r2
 8008196:	4798      	blx	r3
 8008198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800819a:	e077      	b.n	800828c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fab1 	bl	8008706 <USBD_CtlError>
            err++;
 80081a4:	7afb      	ldrb	r3, [r7, #11]
 80081a6:	3301      	adds	r3, #1
 80081a8:	72fb      	strb	r3, [r7, #11]
          break;
 80081aa:	e06f      	b.n	800828c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00b      	beq.n	80081d0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	7c12      	ldrb	r2, [r2, #16]
 80081c4:	f107 0108 	add.w	r1, r7, #8
 80081c8:	4610      	mov	r0, r2
 80081ca:	4798      	blx	r3
 80081cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ce:	e05d      	b.n	800828c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa97 	bl	8008706 <USBD_CtlError>
            err++;
 80081d8:	7afb      	ldrb	r3, [r7, #11]
 80081da:	3301      	adds	r3, #1
 80081dc:	72fb      	strb	r3, [r7, #11]
          break;
 80081de:	e055      	b.n	800828c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00b      	beq.n	8008204 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	7c12      	ldrb	r2, [r2, #16]
 80081f8:	f107 0108 	add.w	r1, r7, #8
 80081fc:	4610      	mov	r0, r2
 80081fe:	4798      	blx	r3
 8008200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008202:	e043      	b.n	800828c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa7d 	bl	8008706 <USBD_CtlError>
            err++;
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	3301      	adds	r3, #1
 8008210:	72fb      	strb	r3, [r7, #11]
          break;
 8008212:	e03b      	b.n	800828c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00b      	beq.n	8008238 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	7c12      	ldrb	r2, [r2, #16]
 800822c:	f107 0108 	add.w	r1, r7, #8
 8008230:	4610      	mov	r0, r2
 8008232:	4798      	blx	r3
 8008234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008236:	e029      	b.n	800828c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa63 	bl	8008706 <USBD_CtlError>
            err++;
 8008240:	7afb      	ldrb	r3, [r7, #11]
 8008242:	3301      	adds	r3, #1
 8008244:	72fb      	strb	r3, [r7, #11]
          break;
 8008246:	e021      	b.n	800828c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	7c12      	ldrb	r2, [r2, #16]
 8008260:	f107 0108 	add.w	r1, r7, #8
 8008264:	4610      	mov	r0, r2
 8008266:	4798      	blx	r3
 8008268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800826a:	e00f      	b.n	800828c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa49 	bl	8008706 <USBD_CtlError>
            err++;
 8008274:	7afb      	ldrb	r3, [r7, #11]
 8008276:	3301      	adds	r3, #1
 8008278:	72fb      	strb	r3, [r7, #11]
          break;
 800827a:	e007      	b.n	800828c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa41 	bl	8008706 <USBD_CtlError>
          err++;
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	3301      	adds	r3, #1
 8008288:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800828a:	bf00      	nop
      }
      break;
 800828c:	e037      	b.n	80082fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	7c1b      	ldrb	r3, [r3, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d109      	bne.n	80082aa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800829c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800829e:	f107 0208 	add.w	r2, r7, #8
 80082a2:	4610      	mov	r0, r2
 80082a4:	4798      	blx	r3
 80082a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082a8:	e029      	b.n	80082fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fa2a 	bl	8008706 <USBD_CtlError>
        err++;
 80082b2:	7afb      	ldrb	r3, [r7, #11]
 80082b4:	3301      	adds	r3, #1
 80082b6:	72fb      	strb	r3, [r7, #11]
      break;
 80082b8:	e021      	b.n	80082fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	7c1b      	ldrb	r3, [r3, #16]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10d      	bne.n	80082de <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ca:	f107 0208 	add.w	r2, r7, #8
 80082ce:	4610      	mov	r0, r2
 80082d0:	4798      	blx	r3
 80082d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	2207      	movs	r2, #7
 80082da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082dc:	e00f      	b.n	80082fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fa10 	bl	8008706 <USBD_CtlError>
        err++;
 80082e6:	7afb      	ldrb	r3, [r7, #11]
 80082e8:	3301      	adds	r3, #1
 80082ea:	72fb      	strb	r3, [r7, #11]
      break;
 80082ec:	e007      	b.n	80082fe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fa08 	bl	8008706 <USBD_CtlError>
      err++;
 80082f6:	7afb      	ldrb	r3, [r7, #11]
 80082f8:	3301      	adds	r3, #1
 80082fa:	72fb      	strb	r3, [r7, #11]
      break;
 80082fc:	bf00      	nop
  }

  if (err != 0U)
 80082fe:	7afb      	ldrb	r3, [r7, #11]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d11e      	bne.n	8008342 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	88db      	ldrh	r3, [r3, #6]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d016      	beq.n	800833a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800830c:	893b      	ldrh	r3, [r7, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00e      	beq.n	8008330 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	88da      	ldrh	r2, [r3, #6]
 8008316:	893b      	ldrh	r3, [r7, #8]
 8008318:	4293      	cmp	r3, r2
 800831a:	bf28      	it	cs
 800831c:	4613      	movcs	r3, r2
 800831e:	b29b      	uxth	r3, r3
 8008320:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008322:	893b      	ldrh	r3, [r7, #8]
 8008324:	461a      	mov	r2, r3
 8008326:	68f9      	ldr	r1, [r7, #12]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fa5d 	bl	80087e8 <USBD_CtlSendData>
 800832e:	e009      	b.n	8008344 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f9e7 	bl	8008706 <USBD_CtlError>
 8008338:	e004      	b.n	8008344 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 faae 	bl	800889c <USBD_CtlSendStatus>
 8008340:	e000      	b.n	8008344 <USBD_GetDescriptor+0x320>
    return;
 8008342:	bf00      	nop
  }
}
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop

0800834c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	889b      	ldrh	r3, [r3, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d131      	bne.n	80083c2 <USBD_SetAddress+0x76>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	88db      	ldrh	r3, [r3, #6]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d12d      	bne.n	80083c2 <USBD_SetAddress+0x76>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	885b      	ldrh	r3, [r3, #2]
 800836a:	2b7f      	cmp	r3, #127	; 0x7f
 800836c:	d829      	bhi.n	80083c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	885b      	ldrh	r3, [r3, #2]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008378:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b03      	cmp	r3, #3
 8008384:	d104      	bne.n	8008390 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f9bc 	bl	8008706 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800838e:	e01d      	b.n	80083cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	7bfa      	ldrb	r2, [r7, #15]
 8008394:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 ff1f 	bl	80091e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa7a 	bl	800889c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d004      	beq.n	80083b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2202      	movs	r2, #2
 80083b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b6:	e009      	b.n	80083cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c0:	e004      	b.n	80083cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f99e 	bl	8008706 <USBD_CtlError>
  }
}
 80083ca:	bf00      	nop
 80083cc:	bf00      	nop
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	885b      	ldrh	r3, [r3, #2]
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	4b4e      	ldr	r3, [pc, #312]	; (8008524 <USBD_SetConfig+0x150>)
 80083ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083ec:	4b4d      	ldr	r3, [pc, #308]	; (8008524 <USBD_SetConfig+0x150>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d905      	bls.n	8008400 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f985 	bl	8008706 <USBD_CtlError>
    return USBD_FAIL;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e08c      	b.n	800851a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b02      	cmp	r3, #2
 800840a:	d002      	beq.n	8008412 <USBD_SetConfig+0x3e>
 800840c:	2b03      	cmp	r3, #3
 800840e:	d029      	beq.n	8008464 <USBD_SetConfig+0x90>
 8008410:	e075      	b.n	80084fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008412:	4b44      	ldr	r3, [pc, #272]	; (8008524 <USBD_SetConfig+0x150>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d020      	beq.n	800845c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800841a:	4b42      	ldr	r3, [pc, #264]	; (8008524 <USBD_SetConfig+0x150>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008424:	4b3f      	ldr	r3, [pc, #252]	; (8008524 <USBD_SetConfig+0x150>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7fe ffbd 	bl	80073aa <USBD_SetClassConfig>
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d008      	beq.n	800844c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f962 	bl	8008706 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2202      	movs	r2, #2
 8008446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800844a:	e065      	b.n	8008518 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fa25 	bl	800889c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2203      	movs	r2, #3
 8008456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800845a:	e05d      	b.n	8008518 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fa1d 	bl	800889c <USBD_CtlSendStatus>
      break;
 8008462:	e059      	b.n	8008518 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008464:	4b2f      	ldr	r3, [pc, #188]	; (8008524 <USBD_SetConfig+0x150>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d112      	bne.n	8008492 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008474:	4b2b      	ldr	r3, [pc, #172]	; (8008524 <USBD_SetConfig+0x150>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800847e:	4b29      	ldr	r3, [pc, #164]	; (8008524 <USBD_SetConfig+0x150>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7fe ffac 	bl	80073e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fa06 	bl	800889c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008490:	e042      	b.n	8008518 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008492:	4b24      	ldr	r3, [pc, #144]	; (8008524 <USBD_SetConfig+0x150>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	429a      	cmp	r2, r3
 800849e:	d02a      	beq.n	80084f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7fe ff9a 	bl	80073e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80084ae:	4b1d      	ldr	r3, [pc, #116]	; (8008524 <USBD_SetConfig+0x150>)
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084b8:	4b1a      	ldr	r3, [pc, #104]	; (8008524 <USBD_SetConfig+0x150>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7fe ff73 	bl	80073aa <USBD_SetClassConfig>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00f      	beq.n	80084ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f918 	bl	8008706 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7fe ff7f 	bl	80073e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084ec:	e014      	b.n	8008518 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f9d4 	bl	800889c <USBD_CtlSendStatus>
      break;
 80084f4:	e010      	b.n	8008518 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f9d0 	bl	800889c <USBD_CtlSendStatus>
      break;
 80084fc:	e00c      	b.n	8008518 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f900 	bl	8008706 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008506:	4b07      	ldr	r3, [pc, #28]	; (8008524 <USBD_SetConfig+0x150>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7fe ff68 	bl	80073e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008512:	2303      	movs	r3, #3
 8008514:	73fb      	strb	r3, [r7, #15]
      break;
 8008516:	bf00      	nop
  }

  return ret;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	200003bc 	.word	0x200003bc

08008528 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	88db      	ldrh	r3, [r3, #6]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d004      	beq.n	8008544 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f8e2 	bl	8008706 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008542:	e023      	b.n	800858c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	dc02      	bgt.n	8008556 <USBD_GetConfig+0x2e>
 8008550:	2b00      	cmp	r3, #0
 8008552:	dc03      	bgt.n	800855c <USBD_GetConfig+0x34>
 8008554:	e015      	b.n	8008582 <USBD_GetConfig+0x5a>
 8008556:	2b03      	cmp	r3, #3
 8008558:	d00b      	beq.n	8008572 <USBD_GetConfig+0x4a>
 800855a:	e012      	b.n	8008582 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3308      	adds	r3, #8
 8008566:	2201      	movs	r2, #1
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f93c 	bl	80087e8 <USBD_CtlSendData>
        break;
 8008570:	e00c      	b.n	800858c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3304      	adds	r3, #4
 8008576:	2201      	movs	r2, #1
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f934 	bl	80087e8 <USBD_CtlSendData>
        break;
 8008580:	e004      	b.n	800858c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f8be 	bl	8008706 <USBD_CtlError>
        break;
 800858a:	bf00      	nop
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d81e      	bhi.n	80085ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	88db      	ldrh	r3, [r3, #6]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d004      	beq.n	80085be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f8a5 	bl	8008706 <USBD_CtlError>
        break;
 80085bc:	e01a      	b.n	80085f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d005      	beq.n	80085da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f043 0202 	orr.w	r2, r3, #2
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	330c      	adds	r3, #12
 80085de:	2202      	movs	r2, #2
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f900 	bl	80087e8 <USBD_CtlSendData>
      break;
 80085e8:	e004      	b.n	80085f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f88a 	bl	8008706 <USBD_CtlError>
      break;
 80085f2:	bf00      	nop
  }
}
 80085f4:	bf00      	nop
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	885b      	ldrh	r3, [r3, #2]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d107      	bne.n	800861e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f940 	bl	800889c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800861c:	e013      	b.n	8008646 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	885b      	ldrh	r3, [r3, #2]
 8008622:	2b02      	cmp	r3, #2
 8008624:	d10b      	bne.n	800863e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	889b      	ldrh	r3, [r3, #4]
 800862a:	0a1b      	lsrs	r3, r3, #8
 800862c:	b29b      	uxth	r3, r3
 800862e:	b2da      	uxtb	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f930 	bl	800889c <USBD_CtlSendStatus>
}
 800863c:	e003      	b.n	8008646 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f860 	bl	8008706 <USBD_CtlError>
}
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b082      	sub	sp, #8
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865e:	b2db      	uxtb	r3, r3
 8008660:	3b01      	subs	r3, #1
 8008662:	2b02      	cmp	r3, #2
 8008664:	d80b      	bhi.n	800867e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	885b      	ldrh	r3, [r3, #2]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d10c      	bne.n	8008688 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f910 	bl	800889c <USBD_CtlSendStatus>
      }
      break;
 800867c:	e004      	b.n	8008688 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f840 	bl	8008706 <USBD_CtlError>
      break;
 8008686:	e000      	b.n	800868a <USBD_ClrFeature+0x3c>
      break;
 8008688:	bf00      	nop
  }
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	781a      	ldrb	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3301      	adds	r3, #1
 80086ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	781a      	ldrb	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3301      	adds	r3, #1
 80086ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7ff fa17 	bl	8007af0 <SWAPBYTE>
 80086c2:	4603      	mov	r3, r0
 80086c4:	461a      	mov	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3301      	adds	r3, #1
 80086ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3301      	adds	r3, #1
 80086d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f7ff fa0a 	bl	8007af0 <SWAPBYTE>
 80086dc:	4603      	mov	r3, r0
 80086de:	461a      	mov	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3301      	adds	r3, #1
 80086e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	3301      	adds	r3, #1
 80086ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f7ff f9fd 	bl	8007af0 <SWAPBYTE>
 80086f6:	4603      	mov	r3, r0
 80086f8:	461a      	mov	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	80da      	strh	r2, [r3, #6]
}
 80086fe:	bf00      	nop
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008710:	2180      	movs	r1, #128	; 0x80
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fcfa 	bl	800910c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008718:	2100      	movs	r1, #0
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fcf6 	bl	800910c <USBD_LL_StallEP>
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d036      	beq.n	80087ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008742:	6938      	ldr	r0, [r7, #16]
 8008744:	f000 f836 	bl	80087b4 <USBD_GetLen>
 8008748:	4603      	mov	r3, r0
 800874a:	3301      	adds	r3, #1
 800874c:	b29b      	uxth	r3, r3
 800874e:	005b      	lsls	r3, r3, #1
 8008750:	b29a      	uxth	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	4413      	add	r3, r2
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	7812      	ldrb	r2, [r2, #0]
 8008760:	701a      	strb	r2, [r3, #0]
  idx++;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	3301      	adds	r3, #1
 8008766:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	4413      	add	r3, r2
 800876e:	2203      	movs	r2, #3
 8008770:	701a      	strb	r2, [r3, #0]
  idx++;
 8008772:	7dfb      	ldrb	r3, [r7, #23]
 8008774:	3301      	adds	r3, #1
 8008776:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008778:	e013      	b.n	80087a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800877a:	7dfb      	ldrb	r3, [r7, #23]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	4413      	add	r3, r2
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	7812      	ldrb	r2, [r2, #0]
 8008784:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	3301      	adds	r3, #1
 800878a:	613b      	str	r3, [r7, #16]
    idx++;
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	3301      	adds	r3, #1
 8008790:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	4413      	add	r3, r2
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]
    idx++;
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	3301      	adds	r3, #1
 80087a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e7      	bne.n	800877a <USBD_GetString+0x52>
 80087aa:	e000      	b.n	80087ae <USBD_GetString+0x86>
    return;
 80087ac:	bf00      	nop
  }
}
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80087c4:	e005      	b.n	80087d2 <USBD_GetLen+0x1e>
  {
    len++;
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	3301      	adds	r3, #1
 80087ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	3301      	adds	r3, #1
 80087d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1f5      	bne.n	80087c6 <USBD_GetLen+0x12>
  }

  return len;
 80087da:	7bfb      	ldrb	r3, [r7, #15]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	2100      	movs	r1, #0
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 fd05 	bl	800921e <USBD_LL_Transmit>

  return USBD_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	60f8      	str	r0, [r7, #12]
 8008826:	60b9      	str	r1, [r7, #8]
 8008828:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	2100      	movs	r1, #0
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 fcf4 	bl	800921e <USBD_LL_Transmit>

  return USBD_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2203      	movs	r2, #3
 8008850:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	2100      	movs	r1, #0
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 fcf8 	bl	8009260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	2100      	movs	r1, #0
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 fce7 	bl	8009260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2204      	movs	r2, #4
 80088a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088ac:	2300      	movs	r3, #0
 80088ae:	2200      	movs	r2, #0
 80088b0:	2100      	movs	r1, #0
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fcb3 	bl	800921e <USBD_LL_Transmit>

  return USBD_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2205      	movs	r2, #5
 80088ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088d2:	2300      	movs	r3, #0
 80088d4:	2200      	movs	r2, #0
 80088d6:	2100      	movs	r1, #0
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fcc1 	bl	8009260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088ec:	2200      	movs	r2, #0
 80088ee:	4912      	ldr	r1, [pc, #72]	; (8008938 <MX_USB_DEVICE_Init+0x50>)
 80088f0:	4812      	ldr	r0, [pc, #72]	; (800893c <MX_USB_DEVICE_Init+0x54>)
 80088f2:	f7fe fcdd 	bl	80072b0 <USBD_Init>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d001      	beq.n	8008900 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088fc:	f7f8 f8d2 	bl	8000aa4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008900:	490f      	ldr	r1, [pc, #60]	; (8008940 <MX_USB_DEVICE_Init+0x58>)
 8008902:	480e      	ldr	r0, [pc, #56]	; (800893c <MX_USB_DEVICE_Init+0x54>)
 8008904:	f7fe fd04 	bl	8007310 <USBD_RegisterClass>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800890e:	f7f8 f8c9 	bl	8000aa4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008912:	490c      	ldr	r1, [pc, #48]	; (8008944 <MX_USB_DEVICE_Init+0x5c>)
 8008914:	4809      	ldr	r0, [pc, #36]	; (800893c <MX_USB_DEVICE_Init+0x54>)
 8008916:	f7fe fc3b 	bl	8007190 <USBD_CDC_RegisterInterface>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008920:	f7f8 f8c0 	bl	8000aa4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008924:	4805      	ldr	r0, [pc, #20]	; (800893c <MX_USB_DEVICE_Init+0x54>)
 8008926:	f7fe fd29 	bl	800737c <USBD_Start>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008930:	f7f8 f8b8 	bl	8000aa4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008934:	bf00      	nop
 8008936:	bd80      	pop	{r7, pc}
 8008938:	200000d4 	.word	0x200000d4
 800893c:	200003c0 	.word	0x200003c0
 8008940:	20000040 	.word	0x20000040
 8008944:	200000c0 	.word	0x200000c0

08008948 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800894c:	2200      	movs	r2, #0
 800894e:	4905      	ldr	r1, [pc, #20]	; (8008964 <CDC_Init_FS+0x1c>)
 8008950:	4805      	ldr	r0, [pc, #20]	; (8008968 <CDC_Init_FS+0x20>)
 8008952:	f7fe fc37 	bl	80071c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008956:	4905      	ldr	r1, [pc, #20]	; (800896c <CDC_Init_FS+0x24>)
 8008958:	4803      	ldr	r0, [pc, #12]	; (8008968 <CDC_Init_FS+0x20>)
 800895a:	f7fe fc55 	bl	8007208 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800895e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008960:	4618      	mov	r0, r3
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20000e9c 	.word	0x20000e9c
 8008968:	200003c0 	.word	0x200003c0
 800896c:	2000069c 	.word	0x2000069c

08008970 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008970:	b480      	push	{r7}
 8008972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008974:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008976:	4618      	mov	r0, r3
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	4603      	mov	r3, r0
 8008988:	6039      	str	r1, [r7, #0]
 800898a:	71fb      	strb	r3, [r7, #7]
 800898c:	4613      	mov	r3, r2
 800898e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	2b23      	cmp	r3, #35	; 0x23
 8008994:	d84a      	bhi.n	8008a2c <CDC_Control_FS+0xac>
 8008996:	a201      	add	r2, pc, #4	; (adr r2, 800899c <CDC_Control_FS+0x1c>)
 8008998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899c:	08008a2d 	.word	0x08008a2d
 80089a0:	08008a2d 	.word	0x08008a2d
 80089a4:	08008a2d 	.word	0x08008a2d
 80089a8:	08008a2d 	.word	0x08008a2d
 80089ac:	08008a2d 	.word	0x08008a2d
 80089b0:	08008a2d 	.word	0x08008a2d
 80089b4:	08008a2d 	.word	0x08008a2d
 80089b8:	08008a2d 	.word	0x08008a2d
 80089bc:	08008a2d 	.word	0x08008a2d
 80089c0:	08008a2d 	.word	0x08008a2d
 80089c4:	08008a2d 	.word	0x08008a2d
 80089c8:	08008a2d 	.word	0x08008a2d
 80089cc:	08008a2d 	.word	0x08008a2d
 80089d0:	08008a2d 	.word	0x08008a2d
 80089d4:	08008a2d 	.word	0x08008a2d
 80089d8:	08008a2d 	.word	0x08008a2d
 80089dc:	08008a2d 	.word	0x08008a2d
 80089e0:	08008a2d 	.word	0x08008a2d
 80089e4:	08008a2d 	.word	0x08008a2d
 80089e8:	08008a2d 	.word	0x08008a2d
 80089ec:	08008a2d 	.word	0x08008a2d
 80089f0:	08008a2d 	.word	0x08008a2d
 80089f4:	08008a2d 	.word	0x08008a2d
 80089f8:	08008a2d 	.word	0x08008a2d
 80089fc:	08008a2d 	.word	0x08008a2d
 8008a00:	08008a2d 	.word	0x08008a2d
 8008a04:	08008a2d 	.word	0x08008a2d
 8008a08:	08008a2d 	.word	0x08008a2d
 8008a0c:	08008a2d 	.word	0x08008a2d
 8008a10:	08008a2d 	.word	0x08008a2d
 8008a14:	08008a2d 	.word	0x08008a2d
 8008a18:	08008a2d 	.word	0x08008a2d
 8008a1c:	08008a2d 	.word	0x08008a2d
 8008a20:	08008a2d 	.word	0x08008a2d
 8008a24:	08008a2d 	.word	0x08008a2d
 8008a28:	08008a2d 	.word	0x08008a2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a2c:	bf00      	nop
  }

  return (USBD_OK);
 8008a2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	4805      	ldr	r0, [pc, #20]	; (8008a60 <CDC_Receive_FS+0x24>)
 8008a4a:	f7fe fbdd 	bl	8007208 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a4e:	4804      	ldr	r0, [pc, #16]	; (8008a60 <CDC_Receive_FS+0x24>)
 8008a50:	f7fe fbf8 	bl	8007244 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	200003c0 	.word	0x200003c0

08008a64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	371c      	adds	r7, #28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
	...

08008a88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	6039      	str	r1, [r7, #0]
 8008a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	2212      	movs	r2, #18
 8008a98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a9a:	4b03      	ldr	r3, [pc, #12]	; (8008aa8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	200000f4 	.word	0x200000f4

08008aac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	6039      	str	r1, [r7, #0]
 8008ab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2204      	movs	r2, #4
 8008abc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008abe:	4b03      	ldr	r3, [pc, #12]	; (8008acc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	20000114 	.word	0x20000114

08008ad0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	6039      	str	r1, [r7, #0]
 8008ada:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008adc:	79fb      	ldrb	r3, [r7, #7]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d105      	bne.n	8008aee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	4907      	ldr	r1, [pc, #28]	; (8008b04 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ae6:	4808      	ldr	r0, [pc, #32]	; (8008b08 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ae8:	f7ff fe1e 	bl	8008728 <USBD_GetString>
 8008aec:	e004      	b.n	8008af8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	4904      	ldr	r1, [pc, #16]	; (8008b04 <USBD_FS_ProductStrDescriptor+0x34>)
 8008af2:	4805      	ldr	r0, [pc, #20]	; (8008b08 <USBD_FS_ProductStrDescriptor+0x38>)
 8008af4:	f7ff fe18 	bl	8008728 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008af8:	4b02      	ldr	r3, [pc, #8]	; (8008b04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	2000169c 	.word	0x2000169c
 8008b08:	08009b5c 	.word	0x08009b5c

08008b0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	4904      	ldr	r1, [pc, #16]	; (8008b2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b1c:	4804      	ldr	r0, [pc, #16]	; (8008b30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b1e:	f7ff fe03 	bl	8008728 <USBD_GetString>
  return USBD_StrDesc;
 8008b22:	4b02      	ldr	r3, [pc, #8]	; (8008b2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	2000169c 	.word	0x2000169c
 8008b30:	08009b74 	.word	0x08009b74

08008b34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	221a      	movs	r2, #26
 8008b44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b46:	f000 f855 	bl	8008bf4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b4a:	4b02      	ldr	r3, [pc, #8]	; (8008b54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	20000118 	.word	0x20000118

08008b58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	6039      	str	r1, [r7, #0]
 8008b62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b64:	79fb      	ldrb	r3, [r7, #7]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d105      	bne.n	8008b76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	4907      	ldr	r1, [pc, #28]	; (8008b8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b6e:	4808      	ldr	r0, [pc, #32]	; (8008b90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b70:	f7ff fdda 	bl	8008728 <USBD_GetString>
 8008b74:	e004      	b.n	8008b80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	4904      	ldr	r1, [pc, #16]	; (8008b8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b7a:	4805      	ldr	r0, [pc, #20]	; (8008b90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b7c:	f7ff fdd4 	bl	8008728 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b80:	4b02      	ldr	r3, [pc, #8]	; (8008b8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	2000169c 	.word	0x2000169c
 8008b90:	08009b88 	.word	0x08009b88

08008b94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	6039      	str	r1, [r7, #0]
 8008b9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ba0:	79fb      	ldrb	r3, [r7, #7]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d105      	bne.n	8008bb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	4907      	ldr	r1, [pc, #28]	; (8008bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008baa:	4808      	ldr	r0, [pc, #32]	; (8008bcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bac:	f7ff fdbc 	bl	8008728 <USBD_GetString>
 8008bb0:	e004      	b.n	8008bbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	4904      	ldr	r1, [pc, #16]	; (8008bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bb6:	4805      	ldr	r0, [pc, #20]	; (8008bcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bb8:	f7ff fdb6 	bl	8008728 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bbc:	4b02      	ldr	r3, [pc, #8]	; (8008bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	2000169c 	.word	0x2000169c
 8008bcc:	08009b94 	.word	0x08009b94

08008bd0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	6039      	str	r1, [r7, #0]
 8008bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	220c      	movs	r2, #12
 8008be0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008be2:	4b03      	ldr	r3, [pc, #12]	; (8008bf0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	20000108 	.word	0x20000108

08008bf4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bfa:	4b0f      	ldr	r3, [pc, #60]	; (8008c38 <Get_SerialNum+0x44>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c00:	4b0e      	ldr	r3, [pc, #56]	; (8008c3c <Get_SerialNum+0x48>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c06:	4b0e      	ldr	r3, [pc, #56]	; (8008c40 <Get_SerialNum+0x4c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4413      	add	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d009      	beq.n	8008c2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c1a:	2208      	movs	r2, #8
 8008c1c:	4909      	ldr	r1, [pc, #36]	; (8008c44 <Get_SerialNum+0x50>)
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 f814 	bl	8008c4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c24:	2204      	movs	r2, #4
 8008c26:	4908      	ldr	r1, [pc, #32]	; (8008c48 <Get_SerialNum+0x54>)
 8008c28:	68b8      	ldr	r0, [r7, #8]
 8008c2a:	f000 f80f 	bl	8008c4c <IntToUnicode>
  }
}
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	1ff0f420 	.word	0x1ff0f420
 8008c3c:	1ff0f424 	.word	0x1ff0f424
 8008c40:	1ff0f428 	.word	0x1ff0f428
 8008c44:	2000011a 	.word	0x2000011a
 8008c48:	2000012a 	.word	0x2000012a

08008c4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	4613      	mov	r3, r2
 8008c58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c5e:	2300      	movs	r3, #0
 8008c60:	75fb      	strb	r3, [r7, #23]
 8008c62:	e027      	b.n	8008cb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	0f1b      	lsrs	r3, r3, #28
 8008c68:	2b09      	cmp	r3, #9
 8008c6a:	d80b      	bhi.n	8008c84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	0f1b      	lsrs	r3, r3, #28
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	4619      	mov	r1, r3
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	440b      	add	r3, r1
 8008c7c:	3230      	adds	r2, #48	; 0x30
 8008c7e:	b2d2      	uxtb	r2, r2
 8008c80:	701a      	strb	r2, [r3, #0]
 8008c82:	e00a      	b.n	8008c9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	0f1b      	lsrs	r3, r3, #28
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	440b      	add	r3, r1
 8008c94:	3237      	adds	r2, #55	; 0x37
 8008c96:	b2d2      	uxtb	r2, r2
 8008c98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	011b      	lsls	r3, r3, #4
 8008c9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	4413      	add	r3, r2
 8008caa:	2200      	movs	r2, #0
 8008cac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	75fb      	strb	r3, [r7, #23]
 8008cb4:	7dfa      	ldrb	r2, [r7, #23]
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d3d3      	bcc.n	8008c64 <IntToUnicode+0x18>
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
	...

08008ccc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b0ae      	sub	sp, #184	; 0xb8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008cd8:	2200      	movs	r2, #0
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	605a      	str	r2, [r3, #4]
 8008cde:	609a      	str	r2, [r3, #8]
 8008ce0:	60da      	str	r2, [r3, #12]
 8008ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008ce4:	f107 0314 	add.w	r3, r7, #20
 8008ce8:	2290      	movs	r2, #144	; 0x90
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 fe99 	bl	8009a24 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cfa:	d161      	bne.n	8008dc0 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008cfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d00:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008d08:	f107 0314 	add.w	r3, r7, #20
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fb f8b7 	bl	8003e80 <HAL_RCCEx_PeriphCLKConfig>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8008d18:	f7f7 fec4 	bl	8000aa4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d1c:	4b2a      	ldr	r3, [pc, #168]	; (8008dc8 <HAL_PCD_MspInit+0xfc>)
 8008d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d20:	4a29      	ldr	r2, [pc, #164]	; (8008dc8 <HAL_PCD_MspInit+0xfc>)
 8008d22:	f043 0301 	orr.w	r3, r3, #1
 8008d26:	6313      	str	r3, [r2, #48]	; 0x30
 8008d28:	4b27      	ldr	r3, [pc, #156]	; (8008dc8 <HAL_PCD_MspInit+0xfc>)
 8008d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	613b      	str	r3, [r7, #16]
 8008d32:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008d34:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8008d38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d42:	2300      	movs	r3, #0
 8008d44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d4e:	230a      	movs	r3, #10
 8008d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008d58:	4619      	mov	r1, r3
 8008d5a:	481c      	ldr	r0, [pc, #112]	; (8008dcc <HAL_PCD_MspInit+0x100>)
 8008d5c:	f7f8 fdac 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008d74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4814      	ldr	r0, [pc, #80]	; (8008dcc <HAL_PCD_MspInit+0x100>)
 8008d7c:	f7f8 fd9c 	bl	80018b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d80:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <HAL_PCD_MspInit+0xfc>)
 8008d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d84:	4a10      	ldr	r2, [pc, #64]	; (8008dc8 <HAL_PCD_MspInit+0xfc>)
 8008d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d8a:	6353      	str	r3, [r2, #52]	; 0x34
 8008d8c:	4b0e      	ldr	r3, [pc, #56]	; (8008dc8 <HAL_PCD_MspInit+0xfc>)
 8008d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d94:	60fb      	str	r3, [r7, #12]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <HAL_PCD_MspInit+0xfc>)
 8008d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d9c:	4a0a      	ldr	r2, [pc, #40]	; (8008dc8 <HAL_PCD_MspInit+0xfc>)
 8008d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008da2:	6453      	str	r3, [r2, #68]	; 0x44
 8008da4:	4b08      	ldr	r3, [pc, #32]	; (8008dc8 <HAL_PCD_MspInit+0xfc>)
 8008da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dac:	60bb      	str	r3, [r7, #8]
 8008dae:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008db0:	2200      	movs	r2, #0
 8008db2:	2100      	movs	r1, #0
 8008db4:	2043      	movs	r0, #67	; 0x43
 8008db6:	f7f8 fa5e 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008dba:	2043      	movs	r0, #67	; 0x43
 8008dbc:	f7f8 fa77 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008dc0:	bf00      	nop
 8008dc2:	37b8      	adds	r7, #184	; 0xb8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	40023800 	.word	0x40023800
 8008dcc:	40020000 	.word	0x40020000

08008dd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008de4:	4619      	mov	r1, r3
 8008de6:	4610      	mov	r0, r2
 8008de8:	f7fe fb15 	bl	8007416 <USBD_LL_SetupStage>
}
 8008dec:	bf00      	nop
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8008e06:	78fa      	ldrb	r2, [r7, #3]
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	00db      	lsls	r3, r3, #3
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	440b      	add	r3, r1
 8008e14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	78fb      	ldrb	r3, [r7, #3]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f7fe fb4f 	bl	80074c0 <USBD_LL_DataOutStage>
}
 8008e22:	bf00      	nop
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b082      	sub	sp, #8
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	460b      	mov	r3, r1
 8008e34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8008e3c:	78fa      	ldrb	r2, [r7, #3]
 8008e3e:	6879      	ldr	r1, [r7, #4]
 8008e40:	4613      	mov	r3, r2
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	440b      	add	r3, r1
 8008e4a:	334c      	adds	r3, #76	; 0x4c
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	78fb      	ldrb	r3, [r7, #3]
 8008e50:	4619      	mov	r1, r3
 8008e52:	f7fe fbe8 	bl	8007626 <USBD_LL_DataInStage>
}
 8008e56:	bf00      	nop
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fe fd1c 	bl	80078aa <USBD_LL_SOF>
}
 8008e72:	bf00      	nop
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e82:	2301      	movs	r3, #1
 8008e84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d102      	bne.n	8008e94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	73fb      	strb	r3, [r7, #15]
 8008e92:	e008      	b.n	8008ea6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d102      	bne.n	8008ea2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	73fb      	strb	r3, [r7, #15]
 8008ea0:	e001      	b.n	8008ea6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008ea2:	f7f7 fdff 	bl	8000aa4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008eac:	7bfa      	ldrb	r2, [r7, #15]
 8008eae:	4611      	mov	r1, r2
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fe fcbc 	bl	800782e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fe fc64 	bl	800778a <USBD_LL_Reset>
}
 8008ec2:	bf00      	nop
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
	...

08008ecc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe fcb7 	bl	800784e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	6812      	ldr	r2, [r2, #0]
 8008eee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ef2:	f043 0301 	orr.w	r3, r3, #1
 8008ef6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d005      	beq.n	8008f0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f00:	4b04      	ldr	r3, [pc, #16]	; (8008f14 <HAL_PCD_SuspendCallback+0x48>)
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	4a03      	ldr	r2, [pc, #12]	; (8008f14 <HAL_PCD_SuspendCallback+0x48>)
 8008f06:	f043 0306 	orr.w	r3, r3, #6
 8008f0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	e000ed00 	.word	0xe000ed00

08008f18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe fca7 	bl	800787a <USBD_LL_Resume>
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008f46:	78fa      	ldrb	r2, [r7, #3]
 8008f48:	4611      	mov	r1, r2
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe fcff 	bl	800794e <USBD_LL_IsoOUTIncomplete>
}
 8008f50:	bf00      	nop
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe fcbb 	bl	80078ea <USBD_LL_IsoINIncomplete>
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe fd11 	bl	80079b2 <USBD_LL_DevConnected>
}
 8008f90:	bf00      	nop
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fe fd0e 	bl	80079c8 <USBD_LL_DevDisconnected>
}
 8008fac:	bf00      	nop
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d13c      	bne.n	800903e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008fc4:	4a20      	ldr	r2, [pc, #128]	; (8009048 <USBD_LL_Init+0x94>)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a1e      	ldr	r2, [pc, #120]	; (8009048 <USBD_LL_Init+0x94>)
 8008fd0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008fd4:	4b1c      	ldr	r3, [pc, #112]	; (8009048 <USBD_LL_Init+0x94>)
 8008fd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008fda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008fdc:	4b1a      	ldr	r3, [pc, #104]	; (8009048 <USBD_LL_Init+0x94>)
 8008fde:	2206      	movs	r2, #6
 8008fe0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008fe2:	4b19      	ldr	r3, [pc, #100]	; (8009048 <USBD_LL_Init+0x94>)
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fe8:	4b17      	ldr	r3, [pc, #92]	; (8009048 <USBD_LL_Init+0x94>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fee:	4b16      	ldr	r3, [pc, #88]	; (8009048 <USBD_LL_Init+0x94>)
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008ff4:	4b14      	ldr	r3, [pc, #80]	; (8009048 <USBD_LL_Init+0x94>)
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ffa:	4b13      	ldr	r3, [pc, #76]	; (8009048 <USBD_LL_Init+0x94>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009000:	4b11      	ldr	r3, [pc, #68]	; (8009048 <USBD_LL_Init+0x94>)
 8009002:	2200      	movs	r2, #0
 8009004:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009006:	4b10      	ldr	r3, [pc, #64]	; (8009048 <USBD_LL_Init+0x94>)
 8009008:	2201      	movs	r2, #1
 800900a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800900c:	4b0e      	ldr	r3, [pc, #56]	; (8009048 <USBD_LL_Init+0x94>)
 800900e:	2200      	movs	r2, #0
 8009010:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009012:	480d      	ldr	r0, [pc, #52]	; (8009048 <USBD_LL_Init+0x94>)
 8009014:	f7f8 ff48 	bl	8001ea8 <HAL_PCD_Init>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800901e:	f7f7 fd41 	bl	8000aa4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009022:	2180      	movs	r1, #128	; 0x80
 8009024:	4808      	ldr	r0, [pc, #32]	; (8009048 <USBD_LL_Init+0x94>)
 8009026:	f7fa f9c2 	bl	80033ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800902a:	2240      	movs	r2, #64	; 0x40
 800902c:	2100      	movs	r1, #0
 800902e:	4806      	ldr	r0, [pc, #24]	; (8009048 <USBD_LL_Init+0x94>)
 8009030:	f7fa f976 	bl	8003320 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009034:	2280      	movs	r2, #128	; 0x80
 8009036:	2101      	movs	r1, #1
 8009038:	4803      	ldr	r0, [pc, #12]	; (8009048 <USBD_LL_Init+0x94>)
 800903a:	f7fa f971 	bl	8003320 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	2000189c 	.word	0x2000189c

0800904c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009062:	4618      	mov	r0, r3
 8009064:	f7f9 f844 	bl	80020f0 <HAL_PCD_Start>
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f97e 	bl	8009370 <USBD_Get_USB_Status>
 8009074:	4603      	mov	r3, r0
 8009076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009078:	7bbb      	ldrb	r3, [r7, #14]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	4608      	mov	r0, r1
 800908c:	4611      	mov	r1, r2
 800908e:	461a      	mov	r2, r3
 8009090:	4603      	mov	r3, r0
 8009092:	70fb      	strb	r3, [r7, #3]
 8009094:	460b      	mov	r3, r1
 8009096:	70bb      	strb	r3, [r7, #2]
 8009098:	4613      	mov	r3, r2
 800909a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090a0:	2300      	movs	r3, #0
 80090a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090aa:	78bb      	ldrb	r3, [r7, #2]
 80090ac:	883a      	ldrh	r2, [r7, #0]
 80090ae:	78f9      	ldrb	r1, [r7, #3]
 80090b0:	f7f9 fd31 	bl	8002b16 <HAL_PCD_EP_Open>
 80090b4:	4603      	mov	r3, r0
 80090b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 f958 	bl	8009370 <USBD_Get_USB_Status>
 80090c0:	4603      	mov	r3, r0
 80090c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	460b      	mov	r3, r1
 80090d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090e8:	78fa      	ldrb	r2, [r7, #3]
 80090ea:	4611      	mov	r1, r2
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7f9 fd7a 	bl	8002be6 <HAL_PCD_EP_Close>
 80090f2:	4603      	mov	r3, r0
 80090f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 f939 	bl	8009370 <USBD_Get_USB_Status>
 80090fe:	4603      	mov	r3, r0
 8009100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009102:	7bbb      	ldrb	r3, [r7, #14]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009126:	78fa      	ldrb	r2, [r7, #3]
 8009128:	4611      	mov	r1, r2
 800912a:	4618      	mov	r0, r3
 800912c:	f7f9 fe52 	bl	8002dd4 <HAL_PCD_EP_SetStall>
 8009130:	4603      	mov	r3, r0
 8009132:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009134:	7bfb      	ldrb	r3, [r7, #15]
 8009136:	4618      	mov	r0, r3
 8009138:	f000 f91a 	bl	8009370 <USBD_Get_USB_Status>
 800913c:	4603      	mov	r3, r0
 800913e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009140:	7bbb      	ldrb	r3, [r7, #14]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009164:	78fa      	ldrb	r2, [r7, #3]
 8009166:	4611      	mov	r1, r2
 8009168:	4618      	mov	r0, r3
 800916a:	f7f9 fe97 	bl	8002e9c <HAL_PCD_EP_ClrStall>
 800916e:	4603      	mov	r3, r0
 8009170:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	4618      	mov	r0, r3
 8009176:	f000 f8fb 	bl	8009370 <USBD_Get_USB_Status>
 800917a:	4603      	mov	r3, r0
 800917c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800917e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800919a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800919c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	da0b      	bge.n	80091bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091aa:	68f9      	ldr	r1, [r7, #12]
 80091ac:	4613      	mov	r3, r2
 80091ae:	00db      	lsls	r3, r3, #3
 80091b0:	4413      	add	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	440b      	add	r3, r1
 80091b6:	333e      	adds	r3, #62	; 0x3e
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	e00b      	b.n	80091d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80091bc:	78fb      	ldrb	r3, [r7, #3]
 80091be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091c2:	68f9      	ldr	r1, [r7, #12]
 80091c4:	4613      	mov	r3, r2
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80091d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3714      	adds	r7, #20
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	460b      	mov	r3, r1
 80091ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091fa:	78fa      	ldrb	r2, [r7, #3]
 80091fc:	4611      	mov	r1, r2
 80091fe:	4618      	mov	r0, r3
 8009200:	f7f9 fc64 	bl	8002acc <HAL_PCD_SetAddress>
 8009204:	4603      	mov	r3, r0
 8009206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	4618      	mov	r0, r3
 800920c:	f000 f8b0 	bl	8009370 <USBD_Get_USB_Status>
 8009210:	4603      	mov	r3, r0
 8009212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009214:	7bbb      	ldrb	r3, [r7, #14]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b086      	sub	sp, #24
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	603b      	str	r3, [r7, #0]
 800922a:	460b      	mov	r3, r1
 800922c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800923c:	7af9      	ldrb	r1, [r7, #11]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	f7f9 fd7d 	bl	8002d40 <HAL_PCD_EP_Transmit>
 8009246:	4603      	mov	r3, r0
 8009248:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	4618      	mov	r0, r3
 800924e:	f000 f88f 	bl	8009370 <USBD_Get_USB_Status>
 8009252:	4603      	mov	r3, r0
 8009254:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009256:	7dbb      	ldrb	r3, [r7, #22]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3718      	adds	r7, #24
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	607a      	str	r2, [r7, #4]
 800926a:	603b      	str	r3, [r7, #0]
 800926c:	460b      	mov	r3, r1
 800926e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800927e:	7af9      	ldrb	r1, [r7, #11]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	f7f9 fcf9 	bl	8002c7a <HAL_PCD_EP_Receive>
 8009288:	4603      	mov	r3, r0
 800928a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800928c:	7dfb      	ldrb	r3, [r7, #23]
 800928e:	4618      	mov	r0, r3
 8009290:	f000 f86e 	bl	8009370 <USBD_Get_USB_Status>
 8009294:	4603      	mov	r3, r0
 8009296:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009298:	7dbb      	ldrb	r3, [r7, #22]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b082      	sub	sp, #8
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	460b      	mov	r3, r1
 80092ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092b4:	78fa      	ldrb	r2, [r7, #3]
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7f9 fd29 	bl	8002d10 <HAL_PCD_EP_GetRxCount>
 80092be:	4603      	mov	r3, r0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80092d4:	78fb      	ldrb	r3, [r7, #3]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <HAL_PCDEx_LPM_Callback+0x18>
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d01f      	beq.n	800931e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80092de:	e03b      	b.n	8009358 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d007      	beq.n	80092f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80092e8:	f000 f83c 	bl	8009364 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092ec:	4b1c      	ldr	r3, [pc, #112]	; (8009360 <HAL_PCDEx_LPM_Callback+0x98>)
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	4a1b      	ldr	r2, [pc, #108]	; (8009360 <HAL_PCDEx_LPM_Callback+0x98>)
 80092f2:	f023 0306 	bic.w	r3, r3, #6
 80092f6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	6812      	ldr	r2, [r2, #0]
 8009306:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800930a:	f023 0301 	bic.w	r3, r3, #1
 800930e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe faaf 	bl	800787a <USBD_LL_Resume>
    break;
 800931c:	e01c      	b.n	8009358 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	6812      	ldr	r2, [r2, #0]
 800932c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009330:	f043 0301 	orr.w	r3, r3, #1
 8009334:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800933c:	4618      	mov	r0, r3
 800933e:	f7fe fa86 	bl	800784e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d005      	beq.n	8009356 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800934a:	4b05      	ldr	r3, [pc, #20]	; (8009360 <HAL_PCDEx_LPM_Callback+0x98>)
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	4a04      	ldr	r2, [pc, #16]	; (8009360 <HAL_PCDEx_LPM_Callback+0x98>)
 8009350:	f043 0306 	orr.w	r3, r3, #6
 8009354:	6113      	str	r3, [r2, #16]
    break;
 8009356:	bf00      	nop
}
 8009358:	bf00      	nop
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	e000ed00 	.word	0xe000ed00

08009364 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009368:	f7f7 f908 	bl	800057c <SystemClock_Config>
}
 800936c:	bf00      	nop
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800937e:	79fb      	ldrb	r3, [r7, #7]
 8009380:	2b03      	cmp	r3, #3
 8009382:	d817      	bhi.n	80093b4 <USBD_Get_USB_Status+0x44>
 8009384:	a201      	add	r2, pc, #4	; (adr r2, 800938c <USBD_Get_USB_Status+0x1c>)
 8009386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938a:	bf00      	nop
 800938c:	0800939d 	.word	0x0800939d
 8009390:	080093a3 	.word	0x080093a3
 8009394:	080093a9 	.word	0x080093a9
 8009398:	080093af 	.word	0x080093af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]
    break;
 80093a0:	e00b      	b.n	80093ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093a2:	2303      	movs	r3, #3
 80093a4:	73fb      	strb	r3, [r7, #15]
    break;
 80093a6:	e008      	b.n	80093ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093a8:	2301      	movs	r3, #1
 80093aa:	73fb      	strb	r3, [r7, #15]
    break;
 80093ac:	e005      	b.n	80093ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093ae:	2303      	movs	r3, #3
 80093b0:	73fb      	strb	r3, [r7, #15]
    break;
 80093b2:	e002      	b.n	80093ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093b4:	2303      	movs	r3, #3
 80093b6:	73fb      	strb	r3, [r7, #15]
    break;
 80093b8:	bf00      	nop
  }
  return usb_status;
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <arm_conv_f32>:
 80093c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	4299      	cmp	r1, r3
 80093ce:	b087      	sub	sp, #28
 80093d0:	4680      	mov	r8, r0
 80093d2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80093d4:	d205      	bcs.n	80093e2 <arm_conv_f32+0x1a>
 80093d6:	4604      	mov	r4, r0
 80093d8:	4608      	mov	r0, r1
 80093da:	4690      	mov	r8, r2
 80093dc:	4619      	mov	r1, r3
 80093de:	4622      	mov	r2, r4
 80093e0:	4603      	mov	r3, r0
 80093e2:	3101      	adds	r1, #1
 80093e4:	1e5c      	subs	r4, r3, #1
 80093e6:	eba1 0103 	sub.w	r1, r1, r3
 80093ea:	9101      	str	r1, [sp, #4]
 80093ec:	f000 821a 	beq.w	8009824 <arm_conv_f32+0x45c>
 80093f0:	f102 0c04 	add.w	ip, r2, #4
 80093f4:	46b1      	mov	r9, r6
 80093f6:	4610      	mov	r0, r2
 80093f8:	4647      	mov	r7, r8
 80093fa:	f04f 0e01 	mov.w	lr, #1
 80093fe:	eddf 7a50 	vldr	s15, [pc, #320]	; 8009540 <arm_conv_f32+0x178>
 8009402:	f01e 0103 	ands.w	r1, lr, #3
 8009406:	d00a      	beq.n	800941e <arm_conv_f32+0x56>
 8009408:	3004      	adds	r0, #4
 800940a:	ecf7 6a01 	vldmia	r7!, {s13}
 800940e:	3901      	subs	r1, #1
 8009410:	ed30 7a01 	vldmdb	r0!, {s14}
 8009414:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009418:	ee77 7a87 	vadd.f32	s15, s15, s14
 800941c:	d1f5      	bne.n	800940a <arm_conv_f32+0x42>
 800941e:	f10e 0e01 	add.w	lr, lr, #1
 8009422:	ece9 7a01 	vstmia	r9!, {s15}
 8009426:	4660      	mov	r0, ip
 8009428:	4573      	cmp	r3, lr
 800942a:	d037      	beq.n	800949c <arm_conv_f32+0xd4>
 800942c:	ea5f 0a9e 	movs.w	sl, lr, lsr #2
 8009430:	f000 8237 	beq.w	80098a2 <arm_conv_f32+0x4da>
 8009434:	f108 0010 	add.w	r0, r8, #16
 8009438:	f1ac 0110 	sub.w	r1, ip, #16
 800943c:	4655      	mov	r5, sl
 800943e:	eddf 7a40 	vldr	s15, [pc, #256]	; 8009540 <arm_conv_f32+0x178>
 8009442:	ed50 6a04 	vldr	s13, [r0, #-16]
 8009446:	3d01      	subs	r5, #1
 8009448:	ed91 7a04 	vldr	s14, [r1, #16]
 800944c:	f100 0010 	add.w	r0, r0, #16
 8009450:	ed10 5a07 	vldr	s10, [r0, #-28]	; 0xffffffe4
 8009454:	f1a1 0110 	sub.w	r1, r1, #16
 8009458:	ee66 5a87 	vmul.f32	s11, s13, s14
 800945c:	ed91 7a07 	vldr	s14, [r1, #28]
 8009460:	ed10 6a06 	vldr	s12, [r0, #-24]	; 0xffffffe8
 8009464:	ee25 5a07 	vmul.f32	s10, s10, s14
 8009468:	ed91 7a06 	vldr	s14, [r1, #24]
 800946c:	ee75 6aa7 	vadd.f32	s13, s11, s15
 8009470:	ed50 5a05 	vldr	s11, [r0, #-20]	; 0xffffffec
 8009474:	ee26 6a07 	vmul.f32	s12, s12, s14
 8009478:	ed91 7a05 	vldr	s14, [r1, #20]
 800947c:	ee75 6a26 	vadd.f32	s13, s10, s13
 8009480:	ee25 7a87 	vmul.f32	s14, s11, s14
 8009484:	ee76 7a26 	vadd.f32	s15, s12, s13
 8009488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800948c:	d1d9      	bne.n	8009442 <arm_conv_f32+0x7a>
 800948e:	eb08 170a 	add.w	r7, r8, sl, lsl #4
 8009492:	ebac 100a 	sub.w	r0, ip, sl, lsl #4
 8009496:	f10c 0c04 	add.w	ip, ip, #4
 800949a:	e7b2      	b.n	8009402 <arm_conv_f32+0x3a>
 800949c:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 80094a0:	441d      	add	r5, r3
 80094a2:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80094ac:	9a01      	ldr	r2, [sp, #4]
 80094ae:	d849      	bhi.n	8009544 <arm_conv_f32+0x17c>
 80094b0:	2a00      	cmp	r2, #0
 80094b2:	f000 81b2 	beq.w	800981a <arm_conv_f32+0x452>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 81b8 	beq.w	800982c <arm_conv_f32+0x464>
 80094bc:	2c00      	cmp	r4, #0
 80094be:	f000 81df 	beq.w	8009880 <arm_conv_f32+0x4b8>
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80094c8:	f000 81be 	beq.w	8009848 <arm_conv_f32+0x480>
 80094cc:	4642      	mov	r2, r8
 80094ce:	f108 0304 	add.w	r3, r8, #4
 80094d2:	ed9f 5a1b 	vldr	s10, [pc, #108]	; 8009540 <arm_conv_f32+0x178>
 80094d6:	eb06 0709 	add.w	r7, r6, r9
 80094da:	edd5 7a00 	vldr	s15, [r5]
 80094de:	3304      	adds	r3, #4
 80094e0:	ecf2 6a01 	vldmia	r2!, {s13}
 80094e4:	ed13 6a01 	vldr	s12, [r3, #-4]
 80094e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80094ec:	ed55 7a01 	vldr	s15, [r5, #-4]
 80094f0:	edd3 5a00 	vldr	s11, [r3]
 80094f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80094f8:	ed15 7a02 	vldr	s14, [r5, #-8]
 80094fc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009500:	ee25 7a87 	vmul.f32	s14, s11, s14
 8009504:	ee76 7a26 	vadd.f32	s15, s12, s13
 8009508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800950c:	ece6 7a01 	vstmia	r6!, {s15}
 8009510:	42b7      	cmp	r7, r6
 8009512:	d1e2      	bne.n	80094da <arm_conv_f32+0x112>
 8009514:	44c8      	add	r8, r9
 8009516:	08a0      	lsrs	r0, r4, #2
 8009518:	f040 8138 	bne.w	800978c <arm_conv_f32+0x3c4>
 800951c:	f014 0303 	ands.w	r3, r4, #3
 8009520:	462a      	mov	r2, r5
 8009522:	4641      	mov	r1, r8
 8009524:	eddf 7a06 	vldr	s15, [pc, #24]	; 8009540 <arm_conv_f32+0x178>
 8009528:	f040 8165 	bne.w	80097f6 <arm_conv_f32+0x42e>
 800952c:	3c01      	subs	r4, #1
 800952e:	ece7 7a01 	vstmia	r7!, {s15}
 8009532:	f108 0804 	add.w	r8, r8, #4
 8009536:	f040 8126 	bne.w	8009786 <arm_conv_f32+0x3be>
 800953a:	b007      	add	sp, #28
 800953c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009540:	00000000 	.word	0x00000000
 8009544:	0892      	lsrs	r2, r2, #2
 8009546:	9202      	str	r2, [sp, #8]
 8009548:	f000 816a 	beq.w	8009820 <arm_conv_f32+0x458>
 800954c:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 8009550:	1c50      	adds	r0, r2, #1
 8009552:	f003 0c03 	and.w	ip, r3, #3
 8009556:	f1a5 0710 	sub.w	r7, r5, #16
 800955a:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800955e:	9504      	str	r5, [sp, #16]
 8009560:	0100      	lsls	r0, r0, #4
 8009562:	f106 0e10 	add.w	lr, r6, #16
 8009566:	4691      	mov	r9, r2
 8009568:	f1c2 0204 	rsb	r2, r2, #4
 800956c:	f108 011c 	add.w	r1, r8, #28
 8009570:	eb06 0b00 	add.w	fp, r6, r0
 8009574:	18aa      	adds	r2, r5, r2
 8009576:	f1a9 0910 	sub.w	r9, r9, #16
 800957a:	4665      	mov	r5, ip
 800957c:	9003      	str	r0, [sp, #12]
 800957e:	4694      	mov	ip, r2
 8009580:	9405      	str	r4, [sp, #20]
 8009582:	ed5f 5a11 	vldr	s11, [pc, #-68]	; 8009540 <arm_conv_f32+0x178>
 8009586:	4638      	mov	r0, r7
 8009588:	ed51 1a07 	vldr	s3, [r1, #-28]	; 0xffffffe4
 800958c:	460a      	mov	r2, r1
 800958e:	eef0 3a65 	vmov.f32	s7, s11
 8009592:	ed51 2a06 	vldr	s5, [r1, #-24]	; 0xffffffe8
 8009596:	eeb0 1a65 	vmov.f32	s2, s11
 800959a:	ed11 2a05 	vldr	s4, [r1, #-20]	; 0xffffffec
 800959e:	eef0 4a65 	vmov.f32	s9, s11
 80095a2:	4654      	mov	r4, sl
 80095a4:	ed90 6a04 	vldr	s12, [r0, #16]
 80095a8:	3c01      	subs	r4, #1
 80095aa:	ed12 5a04 	vldr	s10, [r2, #-16]
 80095ae:	f1a0 0010 	sub.w	r0, r0, #16
 80095b2:	ee21 4a86 	vmul.f32	s8, s3, s12
 80095b6:	edd0 6a07 	vldr	s13, [r0, #28]
 80095ba:	ee62 0a86 	vmul.f32	s1, s5, s12
 80095be:	ed52 1a03 	vldr	s3, [r2, #-12]
 80095c2:	ee22 3a06 	vmul.f32	s6, s4, s12
 80095c6:	ed90 7a06 	vldr	s14, [r0, #24]
 80095ca:	ee26 6a05 	vmul.f32	s12, s12, s10
 80095ce:	edd0 7a05 	vldr	s15, [r0, #20]
 80095d2:	ee74 4a24 	vadd.f32	s9, s8, s9
 80095d6:	f102 0210 	add.w	r2, r2, #16
 80095da:	ee22 4aa6 	vmul.f32	s8, s5, s13
 80095de:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 80095e2:	ee30 1a81 	vadd.f32	s2, s1, s2
 80095e6:	ee73 3a23 	vadd.f32	s7, s6, s7
 80095ea:	ee62 0a26 	vmul.f32	s1, s4, s13
 80095ee:	ee25 3a26 	vmul.f32	s6, s10, s13
 80095f2:	ee76 5a25 	vadd.f32	s11, s12, s11
 80095f6:	ee66 6aa1 	vmul.f32	s13, s13, s3
 80095fa:	ee22 6a07 	vmul.f32	s12, s4, s14
 80095fe:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8009602:	ee74 4a24 	vadd.f32	s9, s8, s9
 8009606:	ee30 1a81 	vadd.f32	s2, s1, s2
 800960a:	ee73 3a23 	vadd.f32	s7, s6, s7
 800960e:	ee65 0a07 	vmul.f32	s1, s10, s14
 8009612:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8009616:	ee21 4a87 	vmul.f32	s8, s3, s14
 800961a:	ee27 7a22 	vmul.f32	s14, s14, s5
 800961e:	ee76 6a24 	vadd.f32	s13, s12, s9
 8009622:	ee25 5a27 	vmul.f32	s10, s10, s15
 8009626:	ee30 3a81 	vadd.f32	s6, s1, s2
 800962a:	ee34 6a23 	vadd.f32	s12, s8, s7
 800962e:	ee21 1aa7 	vmul.f32	s2, s3, s15
 8009632:	ee62 3aa7 	vmul.f32	s7, s5, s15
 8009636:	ee37 7a25 	vadd.f32	s14, s14, s11
 800963a:	ee67 7a82 	vmul.f32	s15, s15, s4
 800963e:	ee75 4a26 	vadd.f32	s9, s10, s13
 8009642:	ee31 1a03 	vadd.f32	s2, s2, s6
 8009646:	ee73 3a86 	vadd.f32	s7, s7, s12
 800964a:	ee77 5a87 	vadd.f32	s11, s15, s14
 800964e:	d1a9      	bne.n	80095a4 <arm_conv_f32+0x1dc>
 8009650:	eb09 0001 	add.w	r0, r9, r1
 8009654:	b1ed      	cbz	r5, 8009692 <arm_conv_f32+0x2ca>
 8009656:	4664      	mov	r4, ip
 8009658:	462a      	mov	r2, r5
 800965a:	ed74 7a01 	vldmdb	r4!, {s15}
 800965e:	3a01      	subs	r2, #1
 8009660:	ecb0 7a01 	vldmia	r0!, {s14}
 8009664:	ee27 5aa1 	vmul.f32	s10, s15, s3
 8009668:	ee27 6aa2 	vmul.f32	s12, s15, s5
 800966c:	ee67 6a82 	vmul.f32	s13, s15, s4
 8009670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009674:	eef0 1a62 	vmov.f32	s3, s5
 8009678:	ee74 4a85 	vadd.f32	s9, s9, s10
 800967c:	eef0 2a42 	vmov.f32	s5, s4
 8009680:	ee31 1a06 	vadd.f32	s2, s2, s12
 8009684:	eeb0 2a47 	vmov.f32	s4, s14
 8009688:	ee73 3aa6 	vadd.f32	s7, s7, s13
 800968c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8009690:	d1e3      	bne.n	800965a <arm_conv_f32+0x292>
 8009692:	ed4e 4a04 	vstr	s9, [lr, #-16]
 8009696:	f10e 0e10 	add.w	lr, lr, #16
 800969a:	ed0e 1a07 	vstr	s2, [lr, #-28]	; 0xffffffe4
 800969e:	3110      	adds	r1, #16
 80096a0:	ed4e 3a06 	vstr	s7, [lr, #-24]	; 0xffffffe8
 80096a4:	ed4e 5a05 	vstr	s11, [lr, #-20]	; 0xffffffec
 80096a8:	45de      	cmp	lr, fp
 80096aa:	f47f af6a 	bne.w	8009582 <arm_conv_f32+0x1ba>
 80096ae:	9a03      	ldr	r2, [sp, #12]
 80096b0:	9d04      	ldr	r5, [sp, #16]
 80096b2:	f1a2 0010 	sub.w	r0, r2, #16
 80096b6:	9a02      	ldr	r2, [sp, #8]
 80096b8:	9c05      	ldr	r4, [sp, #20]
 80096ba:	4406      	add	r6, r0
 80096bc:	0092      	lsls	r2, r2, #2
 80096be:	4440      	add	r0, r8
 80096c0:	9901      	ldr	r1, [sp, #4]
 80096c2:	f011 0703 	ands.w	r7, r1, #3
 80096c6:	f000 80bb 	beq.w	8009840 <arm_conv_f32+0x478>
 80096ca:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 80096ce:	f003 0e03 	and.w	lr, r3, #3
 80096d2:	3201      	adds	r2, #1
 80096d4:	f1a5 0310 	sub.w	r3, r5, #16
 80096d8:	ea4f 190a 	mov.w	r9, sl, lsl #4
 80096dc:	9502      	str	r5, [sp, #8]
 80096de:	eb06 0787 	add.w	r7, r6, r7, lsl #2
 80096e2:	f1c9 0904 	rsb	r9, r9, #4
 80096e6:	eb08 0c82 	add.w	ip, r8, r2, lsl #2
 80096ea:	ea4f 1b0a 	mov.w	fp, sl, lsl #4
 80096ee:	44a9      	add	r9, r5
 80096f0:	4675      	mov	r5, lr
 80096f2:	469e      	mov	lr, r3
 80096f4:	f100 0210 	add.w	r2, r0, #16
 80096f8:	4673      	mov	r3, lr
 80096fa:	4651      	mov	r1, sl
 80096fc:	ed5f 7a70 	vldr	s15, [pc, #-448]	; 8009540 <arm_conv_f32+0x178>
 8009700:	ed52 6a04 	vldr	s13, [r2, #-16]
 8009704:	3901      	subs	r1, #1
 8009706:	ed93 7a04 	vldr	s14, [r3, #16]
 800970a:	f102 0210 	add.w	r2, r2, #16
 800970e:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 8009712:	f1a3 0310 	sub.w	r3, r3, #16
 8009716:	ee66 5a87 	vmul.f32	s11, s13, s14
 800971a:	ed93 7a07 	vldr	s14, [r3, #28]
 800971e:	ed12 6a06 	vldr	s12, [r2, #-24]	; 0xffffffe8
 8009722:	ee25 5a07 	vmul.f32	s10, s10, s14
 8009726:	ed93 7a06 	vldr	s14, [r3, #24]
 800972a:	ee75 6aa7 	vadd.f32	s13, s11, s15
 800972e:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 8009732:	ee26 6a07 	vmul.f32	s12, s12, s14
 8009736:	ed93 7a05 	vldr	s14, [r3, #20]
 800973a:	ee75 6a26 	vadd.f32	s13, s10, s13
 800973e:	ee25 7a87 	vmul.f32	s14, s11, s14
 8009742:	ee76 7a26 	vadd.f32	s15, s12, s13
 8009746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800974a:	d1d9      	bne.n	8009700 <arm_conv_f32+0x338>
 800974c:	4458      	add	r0, fp
 800974e:	b15d      	cbz	r5, 8009768 <arm_conv_f32+0x3a0>
 8009750:	464a      	mov	r2, r9
 8009752:	462b      	mov	r3, r5
 8009754:	ecf0 6a01 	vldmia	r0!, {s13}
 8009758:	3b01      	subs	r3, #1
 800975a:	ed32 7a01 	vldmdb	r2!, {s14}
 800975e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009762:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009766:	d1f5      	bne.n	8009754 <arm_conv_f32+0x38c>
 8009768:	ece6 7a01 	vstmia	r6!, {s15}
 800976c:	42be      	cmp	r6, r7
 800976e:	4660      	mov	r0, ip
 8009770:	f10c 0c04 	add.w	ip, ip, #4
 8009774:	d1be      	bne.n	80096f4 <arm_conv_f32+0x32c>
 8009776:	9b01      	ldr	r3, [sp, #4]
 8009778:	9d02      	ldr	r5, [sp, #8]
 800977a:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800977e:	44c8      	add	r8, r9
 8009780:	2c00      	cmp	r4, #0
 8009782:	f43f aeda 	beq.w	800953a <arm_conv_f32+0x172>
 8009786:	08a0      	lsrs	r0, r4, #2
 8009788:	f43f aec8 	beq.w	800951c <arm_conv_f32+0x154>
 800978c:	f108 0210 	add.w	r2, r8, #16
 8009790:	f1a5 0310 	sub.w	r3, r5, #16
 8009794:	4601      	mov	r1, r0
 8009796:	ed5f 7a96 	vldr	s15, [pc, #-600]	; 8009540 <arm_conv_f32+0x178>
 800979a:	ed52 6a04 	vldr	s13, [r2, #-16]
 800979e:	3901      	subs	r1, #1
 80097a0:	ed93 7a04 	vldr	s14, [r3, #16]
 80097a4:	f102 0210 	add.w	r2, r2, #16
 80097a8:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 80097ac:	f1a3 0310 	sub.w	r3, r3, #16
 80097b0:	ee66 5a87 	vmul.f32	s11, s13, s14
 80097b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80097b8:	ed12 6a06 	vldr	s12, [r2, #-24]	; 0xffffffe8
 80097bc:	ee25 5a07 	vmul.f32	s10, s10, s14
 80097c0:	ed93 7a06 	vldr	s14, [r3, #24]
 80097c4:	ee75 6aa7 	vadd.f32	s13, s11, s15
 80097c8:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 80097cc:	ee26 6a07 	vmul.f32	s12, s12, s14
 80097d0:	ed93 7a05 	vldr	s14, [r3, #20]
 80097d4:	ee75 6a26 	vadd.f32	s13, s10, s13
 80097d8:	ee25 7a87 	vmul.f32	s14, s11, s14
 80097dc:	ee76 7a26 	vadd.f32	s15, s12, s13
 80097e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097e4:	d1d9      	bne.n	800979a <arm_conv_f32+0x3d2>
 80097e6:	f014 0303 	ands.w	r3, r4, #3
 80097ea:	eb08 1100 	add.w	r1, r8, r0, lsl #4
 80097ee:	eba5 1200 	sub.w	r2, r5, r0, lsl #4
 80097f2:	f43f ae9b 	beq.w	800952c <arm_conv_f32+0x164>
 80097f6:	3204      	adds	r2, #4
 80097f8:	ecf1 6a01 	vldmia	r1!, {s13}
 80097fc:	3b01      	subs	r3, #1
 80097fe:	ed32 7a01 	vldmdb	r2!, {s14}
 8009802:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009806:	ee77 7a87 	vadd.f32	s15, s15, s14
 800980a:	d1f5      	bne.n	80097f8 <arm_conv_f32+0x430>
 800980c:	3c01      	subs	r4, #1
 800980e:	ece7 7a01 	vstmia	r7!, {s15}
 8009812:	f108 0804 	add.w	r8, r8, #4
 8009816:	d1b6      	bne.n	8009786 <arm_conv_f32+0x3be>
 8009818:	e68f      	b.n	800953a <arm_conv_f32+0x172>
 800981a:	4637      	mov	r7, r6
 800981c:	4691      	mov	r9, r2
 800981e:	e7ae      	b.n	800977e <arm_conv_f32+0x3b6>
 8009820:	4640      	mov	r0, r8
 8009822:	e74d      	b.n	80096c0 <arm_conv_f32+0x2f8>
 8009824:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8009828:	441d      	add	r5, r3
 800982a:	e63c      	b.n	80094a6 <arm_conv_f32+0xde>
 800982c:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8009830:	4619      	mov	r1, r3
 8009832:	4630      	mov	r0, r6
 8009834:	464a      	mov	r2, r9
 8009836:	eb06 0709 	add.w	r7, r6, r9
 800983a:	f000 f8f3 	bl	8009a24 <memset>
 800983e:	e79e      	b.n	800977e <arm_conv_f32+0x3b6>
 8009840:	4637      	mov	r7, r6
 8009842:	ea4f 0981 	mov.w	r9, r1, lsl #2
 8009846:	e79a      	b.n	800977e <arm_conv_f32+0x3b6>
 8009848:	4643      	mov	r3, r8
 800984a:	ed1f 6ac3 	vldr	s12, [pc, #-780]	; 8009540 <arm_conv_f32+0x178>
 800984e:	eb06 0709 	add.w	r7, r6, r9
 8009852:	ed93 7a00 	vldr	s14, [r3]
 8009856:	3304      	adds	r3, #4
 8009858:	edd5 7a00 	vldr	s15, [r5]
 800985c:	ed55 6a01 	vldr	s13, [r5, #-4]
 8009860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009864:	ed93 7a00 	vldr	s14, [r3]
 8009868:	ee26 7a87 	vmul.f32	s14, s13, s14
 800986c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009874:	ece6 7a01 	vstmia	r6!, {s15}
 8009878:	42be      	cmp	r6, r7
 800987a:	d1ea      	bne.n	8009852 <arm_conv_f32+0x48a>
 800987c:	44c8      	add	r8, r9
 800987e:	e64a      	b.n	8009516 <arm_conv_f32+0x14e>
 8009880:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8009884:	ed5f 6ad2 	vldr	s13, [pc, #-840]	; 8009540 <arm_conv_f32+0x178>
 8009888:	ecb8 7a01 	vldmia	r8!, {s14}
 800988c:	edd5 7a00 	vldr	s15, [r5]
 8009890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009894:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009898:	ece6 7a01 	vstmia	r6!, {s15}
 800989c:	42b3      	cmp	r3, r6
 800989e:	d1f3      	bne.n	8009888 <arm_conv_f32+0x4c0>
 80098a0:	e64b      	b.n	800953a <arm_conv_f32+0x172>
 80098a2:	4647      	mov	r7, r8
 80098a4:	ed5f 7ada 	vldr	s15, [pc, #-872]	; 8009540 <arm_conv_f32+0x178>
 80098a8:	e5f5      	b.n	8009496 <arm_conv_f32+0xce>
 80098aa:	bf00      	nop

080098ac <malloc>:
 80098ac:	4b02      	ldr	r3, [pc, #8]	; (80098b8 <malloc+0xc>)
 80098ae:	4601      	mov	r1, r0
 80098b0:	6818      	ldr	r0, [r3, #0]
 80098b2:	f000 b82b 	b.w	800990c <_malloc_r>
 80098b6:	bf00      	nop
 80098b8:	20000180 	.word	0x20000180

080098bc <free>:
 80098bc:	4b02      	ldr	r3, [pc, #8]	; (80098c8 <free+0xc>)
 80098be:	4601      	mov	r1, r0
 80098c0:	6818      	ldr	r0, [r3, #0]
 80098c2:	f000 b8f3 	b.w	8009aac <_free_r>
 80098c6:	bf00      	nop
 80098c8:	20000180 	.word	0x20000180

080098cc <sbrk_aligned>:
 80098cc:	b570      	push	{r4, r5, r6, lr}
 80098ce:	4e0e      	ldr	r6, [pc, #56]	; (8009908 <sbrk_aligned+0x3c>)
 80098d0:	460c      	mov	r4, r1
 80098d2:	6831      	ldr	r1, [r6, #0]
 80098d4:	4605      	mov	r5, r0
 80098d6:	b911      	cbnz	r1, 80098de <sbrk_aligned+0x12>
 80098d8:	f000 f8ac 	bl	8009a34 <_sbrk_r>
 80098dc:	6030      	str	r0, [r6, #0]
 80098de:	4621      	mov	r1, r4
 80098e0:	4628      	mov	r0, r5
 80098e2:	f000 f8a7 	bl	8009a34 <_sbrk_r>
 80098e6:	1c43      	adds	r3, r0, #1
 80098e8:	d00a      	beq.n	8009900 <sbrk_aligned+0x34>
 80098ea:	1cc4      	adds	r4, r0, #3
 80098ec:	f024 0403 	bic.w	r4, r4, #3
 80098f0:	42a0      	cmp	r0, r4
 80098f2:	d007      	beq.n	8009904 <sbrk_aligned+0x38>
 80098f4:	1a21      	subs	r1, r4, r0
 80098f6:	4628      	mov	r0, r5
 80098f8:	f000 f89c 	bl	8009a34 <_sbrk_r>
 80098fc:	3001      	adds	r0, #1
 80098fe:	d101      	bne.n	8009904 <sbrk_aligned+0x38>
 8009900:	f04f 34ff 	mov.w	r4, #4294967295
 8009904:	4620      	mov	r0, r4
 8009906:	bd70      	pop	{r4, r5, r6, pc}
 8009908:	20001da8 	.word	0x20001da8

0800990c <_malloc_r>:
 800990c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009910:	1ccd      	adds	r5, r1, #3
 8009912:	f025 0503 	bic.w	r5, r5, #3
 8009916:	3508      	adds	r5, #8
 8009918:	2d0c      	cmp	r5, #12
 800991a:	bf38      	it	cc
 800991c:	250c      	movcc	r5, #12
 800991e:	2d00      	cmp	r5, #0
 8009920:	4607      	mov	r7, r0
 8009922:	db01      	blt.n	8009928 <_malloc_r+0x1c>
 8009924:	42a9      	cmp	r1, r5
 8009926:	d905      	bls.n	8009934 <_malloc_r+0x28>
 8009928:	230c      	movs	r3, #12
 800992a:	603b      	str	r3, [r7, #0]
 800992c:	2600      	movs	r6, #0
 800992e:	4630      	mov	r0, r6
 8009930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009934:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a08 <_malloc_r+0xfc>
 8009938:	f000 f868 	bl	8009a0c <__malloc_lock>
 800993c:	f8d8 3000 	ldr.w	r3, [r8]
 8009940:	461c      	mov	r4, r3
 8009942:	bb5c      	cbnz	r4, 800999c <_malloc_r+0x90>
 8009944:	4629      	mov	r1, r5
 8009946:	4638      	mov	r0, r7
 8009948:	f7ff ffc0 	bl	80098cc <sbrk_aligned>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	4604      	mov	r4, r0
 8009950:	d155      	bne.n	80099fe <_malloc_r+0xf2>
 8009952:	f8d8 4000 	ldr.w	r4, [r8]
 8009956:	4626      	mov	r6, r4
 8009958:	2e00      	cmp	r6, #0
 800995a:	d145      	bne.n	80099e8 <_malloc_r+0xdc>
 800995c:	2c00      	cmp	r4, #0
 800995e:	d048      	beq.n	80099f2 <_malloc_r+0xe6>
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	4631      	mov	r1, r6
 8009964:	4638      	mov	r0, r7
 8009966:	eb04 0903 	add.w	r9, r4, r3
 800996a:	f000 f863 	bl	8009a34 <_sbrk_r>
 800996e:	4581      	cmp	r9, r0
 8009970:	d13f      	bne.n	80099f2 <_malloc_r+0xe6>
 8009972:	6821      	ldr	r1, [r4, #0]
 8009974:	1a6d      	subs	r5, r5, r1
 8009976:	4629      	mov	r1, r5
 8009978:	4638      	mov	r0, r7
 800997a:	f7ff ffa7 	bl	80098cc <sbrk_aligned>
 800997e:	3001      	adds	r0, #1
 8009980:	d037      	beq.n	80099f2 <_malloc_r+0xe6>
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	442b      	add	r3, r5
 8009986:	6023      	str	r3, [r4, #0]
 8009988:	f8d8 3000 	ldr.w	r3, [r8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d038      	beq.n	8009a02 <_malloc_r+0xf6>
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	42a2      	cmp	r2, r4
 8009994:	d12b      	bne.n	80099ee <_malloc_r+0xe2>
 8009996:	2200      	movs	r2, #0
 8009998:	605a      	str	r2, [r3, #4]
 800999a:	e00f      	b.n	80099bc <_malloc_r+0xb0>
 800999c:	6822      	ldr	r2, [r4, #0]
 800999e:	1b52      	subs	r2, r2, r5
 80099a0:	d41f      	bmi.n	80099e2 <_malloc_r+0xd6>
 80099a2:	2a0b      	cmp	r2, #11
 80099a4:	d917      	bls.n	80099d6 <_malloc_r+0xca>
 80099a6:	1961      	adds	r1, r4, r5
 80099a8:	42a3      	cmp	r3, r4
 80099aa:	6025      	str	r5, [r4, #0]
 80099ac:	bf18      	it	ne
 80099ae:	6059      	strne	r1, [r3, #4]
 80099b0:	6863      	ldr	r3, [r4, #4]
 80099b2:	bf08      	it	eq
 80099b4:	f8c8 1000 	streq.w	r1, [r8]
 80099b8:	5162      	str	r2, [r4, r5]
 80099ba:	604b      	str	r3, [r1, #4]
 80099bc:	4638      	mov	r0, r7
 80099be:	f104 060b 	add.w	r6, r4, #11
 80099c2:	f000 f829 	bl	8009a18 <__malloc_unlock>
 80099c6:	f026 0607 	bic.w	r6, r6, #7
 80099ca:	1d23      	adds	r3, r4, #4
 80099cc:	1af2      	subs	r2, r6, r3
 80099ce:	d0ae      	beq.n	800992e <_malloc_r+0x22>
 80099d0:	1b9b      	subs	r3, r3, r6
 80099d2:	50a3      	str	r3, [r4, r2]
 80099d4:	e7ab      	b.n	800992e <_malloc_r+0x22>
 80099d6:	42a3      	cmp	r3, r4
 80099d8:	6862      	ldr	r2, [r4, #4]
 80099da:	d1dd      	bne.n	8009998 <_malloc_r+0x8c>
 80099dc:	f8c8 2000 	str.w	r2, [r8]
 80099e0:	e7ec      	b.n	80099bc <_malloc_r+0xb0>
 80099e2:	4623      	mov	r3, r4
 80099e4:	6864      	ldr	r4, [r4, #4]
 80099e6:	e7ac      	b.n	8009942 <_malloc_r+0x36>
 80099e8:	4634      	mov	r4, r6
 80099ea:	6876      	ldr	r6, [r6, #4]
 80099ec:	e7b4      	b.n	8009958 <_malloc_r+0x4c>
 80099ee:	4613      	mov	r3, r2
 80099f0:	e7cc      	b.n	800998c <_malloc_r+0x80>
 80099f2:	230c      	movs	r3, #12
 80099f4:	603b      	str	r3, [r7, #0]
 80099f6:	4638      	mov	r0, r7
 80099f8:	f000 f80e 	bl	8009a18 <__malloc_unlock>
 80099fc:	e797      	b.n	800992e <_malloc_r+0x22>
 80099fe:	6025      	str	r5, [r4, #0]
 8009a00:	e7dc      	b.n	80099bc <_malloc_r+0xb0>
 8009a02:	605b      	str	r3, [r3, #4]
 8009a04:	deff      	udf	#255	; 0xff
 8009a06:	bf00      	nop
 8009a08:	20001da4 	.word	0x20001da4

08009a0c <__malloc_lock>:
 8009a0c:	4801      	ldr	r0, [pc, #4]	; (8009a14 <__malloc_lock+0x8>)
 8009a0e:	f000 b84b 	b.w	8009aa8 <__retarget_lock_acquire_recursive>
 8009a12:	bf00      	nop
 8009a14:	20001ee8 	.word	0x20001ee8

08009a18 <__malloc_unlock>:
 8009a18:	4801      	ldr	r0, [pc, #4]	; (8009a20 <__malloc_unlock+0x8>)
 8009a1a:	f000 b846 	b.w	8009aaa <__retarget_lock_release_recursive>
 8009a1e:	bf00      	nop
 8009a20:	20001ee8 	.word	0x20001ee8

08009a24 <memset>:
 8009a24:	4402      	add	r2, r0
 8009a26:	4603      	mov	r3, r0
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d100      	bne.n	8009a2e <memset+0xa>
 8009a2c:	4770      	bx	lr
 8009a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a32:	e7f9      	b.n	8009a28 <memset+0x4>

08009a34 <_sbrk_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	4d06      	ldr	r5, [pc, #24]	; (8009a50 <_sbrk_r+0x1c>)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	602b      	str	r3, [r5, #0]
 8009a40:	f7f7 fa4c 	bl	8000edc <_sbrk>
 8009a44:	1c43      	adds	r3, r0, #1
 8009a46:	d102      	bne.n	8009a4e <_sbrk_r+0x1a>
 8009a48:	682b      	ldr	r3, [r5, #0]
 8009a4a:	b103      	cbz	r3, 8009a4e <_sbrk_r+0x1a>
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	bd38      	pop	{r3, r4, r5, pc}
 8009a50:	20001ee4 	.word	0x20001ee4

08009a54 <__errno>:
 8009a54:	4b01      	ldr	r3, [pc, #4]	; (8009a5c <__errno+0x8>)
 8009a56:	6818      	ldr	r0, [r3, #0]
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	20000180 	.word	0x20000180

08009a60 <__libc_init_array>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	4d0d      	ldr	r5, [pc, #52]	; (8009a98 <__libc_init_array+0x38>)
 8009a64:	4c0d      	ldr	r4, [pc, #52]	; (8009a9c <__libc_init_array+0x3c>)
 8009a66:	1b64      	subs	r4, r4, r5
 8009a68:	10a4      	asrs	r4, r4, #2
 8009a6a:	2600      	movs	r6, #0
 8009a6c:	42a6      	cmp	r6, r4
 8009a6e:	d109      	bne.n	8009a84 <__libc_init_array+0x24>
 8009a70:	4d0b      	ldr	r5, [pc, #44]	; (8009aa0 <__libc_init_array+0x40>)
 8009a72:	4c0c      	ldr	r4, [pc, #48]	; (8009aa4 <__libc_init_array+0x44>)
 8009a74:	f000 f866 	bl	8009b44 <_init>
 8009a78:	1b64      	subs	r4, r4, r5
 8009a7a:	10a4      	asrs	r4, r4, #2
 8009a7c:	2600      	movs	r6, #0
 8009a7e:	42a6      	cmp	r6, r4
 8009a80:	d105      	bne.n	8009a8e <__libc_init_array+0x2e>
 8009a82:	bd70      	pop	{r4, r5, r6, pc}
 8009a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a88:	4798      	blx	r3
 8009a8a:	3601      	adds	r6, #1
 8009a8c:	e7ee      	b.n	8009a6c <__libc_init_array+0xc>
 8009a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a92:	4798      	blx	r3
 8009a94:	3601      	adds	r6, #1
 8009a96:	e7f2      	b.n	8009a7e <__libc_init_array+0x1e>
 8009a98:	08009bcc 	.word	0x08009bcc
 8009a9c:	08009bcc 	.word	0x08009bcc
 8009aa0:	08009bcc 	.word	0x08009bcc
 8009aa4:	08009bd0 	.word	0x08009bd0

08009aa8 <__retarget_lock_acquire_recursive>:
 8009aa8:	4770      	bx	lr

08009aaa <__retarget_lock_release_recursive>:
 8009aaa:	4770      	bx	lr

08009aac <_free_r>:
 8009aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aae:	2900      	cmp	r1, #0
 8009ab0:	d044      	beq.n	8009b3c <_free_r+0x90>
 8009ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ab6:	9001      	str	r0, [sp, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f1a1 0404 	sub.w	r4, r1, #4
 8009abe:	bfb8      	it	lt
 8009ac0:	18e4      	addlt	r4, r4, r3
 8009ac2:	f7ff ffa3 	bl	8009a0c <__malloc_lock>
 8009ac6:	4a1e      	ldr	r2, [pc, #120]	; (8009b40 <_free_r+0x94>)
 8009ac8:	9801      	ldr	r0, [sp, #4]
 8009aca:	6813      	ldr	r3, [r2, #0]
 8009acc:	b933      	cbnz	r3, 8009adc <_free_r+0x30>
 8009ace:	6063      	str	r3, [r4, #4]
 8009ad0:	6014      	str	r4, [r2, #0]
 8009ad2:	b003      	add	sp, #12
 8009ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ad8:	f7ff bf9e 	b.w	8009a18 <__malloc_unlock>
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	d908      	bls.n	8009af2 <_free_r+0x46>
 8009ae0:	6825      	ldr	r5, [r4, #0]
 8009ae2:	1961      	adds	r1, r4, r5
 8009ae4:	428b      	cmp	r3, r1
 8009ae6:	bf01      	itttt	eq
 8009ae8:	6819      	ldreq	r1, [r3, #0]
 8009aea:	685b      	ldreq	r3, [r3, #4]
 8009aec:	1949      	addeq	r1, r1, r5
 8009aee:	6021      	streq	r1, [r4, #0]
 8009af0:	e7ed      	b.n	8009ace <_free_r+0x22>
 8009af2:	461a      	mov	r2, r3
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	b10b      	cbz	r3, 8009afc <_free_r+0x50>
 8009af8:	42a3      	cmp	r3, r4
 8009afa:	d9fa      	bls.n	8009af2 <_free_r+0x46>
 8009afc:	6811      	ldr	r1, [r2, #0]
 8009afe:	1855      	adds	r5, r2, r1
 8009b00:	42a5      	cmp	r5, r4
 8009b02:	d10b      	bne.n	8009b1c <_free_r+0x70>
 8009b04:	6824      	ldr	r4, [r4, #0]
 8009b06:	4421      	add	r1, r4
 8009b08:	1854      	adds	r4, r2, r1
 8009b0a:	42a3      	cmp	r3, r4
 8009b0c:	6011      	str	r1, [r2, #0]
 8009b0e:	d1e0      	bne.n	8009ad2 <_free_r+0x26>
 8009b10:	681c      	ldr	r4, [r3, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	6053      	str	r3, [r2, #4]
 8009b16:	440c      	add	r4, r1
 8009b18:	6014      	str	r4, [r2, #0]
 8009b1a:	e7da      	b.n	8009ad2 <_free_r+0x26>
 8009b1c:	d902      	bls.n	8009b24 <_free_r+0x78>
 8009b1e:	230c      	movs	r3, #12
 8009b20:	6003      	str	r3, [r0, #0]
 8009b22:	e7d6      	b.n	8009ad2 <_free_r+0x26>
 8009b24:	6825      	ldr	r5, [r4, #0]
 8009b26:	1961      	adds	r1, r4, r5
 8009b28:	428b      	cmp	r3, r1
 8009b2a:	bf04      	itt	eq
 8009b2c:	6819      	ldreq	r1, [r3, #0]
 8009b2e:	685b      	ldreq	r3, [r3, #4]
 8009b30:	6063      	str	r3, [r4, #4]
 8009b32:	bf04      	itt	eq
 8009b34:	1949      	addeq	r1, r1, r5
 8009b36:	6021      	streq	r1, [r4, #0]
 8009b38:	6054      	str	r4, [r2, #4]
 8009b3a:	e7ca      	b.n	8009ad2 <_free_r+0x26>
 8009b3c:	b003      	add	sp, #12
 8009b3e:	bd30      	pop	{r4, r5, pc}
 8009b40:	20001da4 	.word	0x20001da4

08009b44 <_init>:
 8009b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b46:	bf00      	nop
 8009b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4a:	bc08      	pop	{r3}
 8009b4c:	469e      	mov	lr, r3
 8009b4e:	4770      	bx	lr

08009b50 <_fini>:
 8009b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b52:	bf00      	nop
 8009b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b56:	bc08      	pop	{r3}
 8009b58:	469e      	mov	lr, r3
 8009b5a:	4770      	bx	lr
